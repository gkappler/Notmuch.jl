(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

console.warn('Compiled in DEV mode. Follow the advice at https://elm-lang.org/0.19.1/optimize for better performance and smaller assets.');


var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log_UNUSED = F2(function(tag, value)
{
	return value;
});

var _Debug_log = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString_UNUSED(value)
{
	return '<internals>';
}

function _Debug_toString(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File !== 'undefined' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[36m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash_UNUSED(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.start.line === region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'on lines ' + region.start.line + ' through ' + region.end.line;
}



// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	/**/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**_UNUSED/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**_UNUSED/
	if (typeof x.$ === 'undefined')
	//*/
	/**/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0_UNUSED = 0;
var _Utils_Tuple0 = { $: '#0' };

function _Utils_Tuple2_UNUSED(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3_UNUSED(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr_UNUSED(c) { return c; }
function _Utils_chr(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil_UNUSED = { $: 0 };
var _List_Nil = { $: '[]' };

function _List_Cons_UNUSED(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return !isNaN(word)
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap(value) { return { $: 0, a: value }; }
function _Json_unwrap(value) { return value.a; }

function _Json_wrap_UNUSED(value) { return value; }
function _Json_unwrap_UNUSED(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	$elm$core$Result$isOk(result) || _Debug_crash(2 /**/, _Json_errorToString(result.a) /**/);
	var managers = {};
	var initPair = init(result.a);
	var model = initPair.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		var pair = A2(update, msg, model);
		stepper(model = pair.a, viewMetadata);
		_Platform_enqueueEffects(managers, pair.b, subscriptions(model));
	}

	_Platform_enqueueEffects(managers, initPair.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS
//
// Effects must be queued!
//
// Say your init contains a synchronous command, like Time.now or Time.here
//
//   - This will produce a batch of effects (FX_1)
//   - The synchronous task triggers the subsequent `update` call
//   - This will produce a batch of effects (FX_2)
//
// If we just start dispatching FX_2, subscriptions from FX_2 can be processed
// before subscriptions from FX_1. No good! Earlier versions of this code had
// this problem, leading to these reports:
//
//   https://github.com/elm/core/issues/980
//   https://github.com/elm/core/pull/981
//   https://github.com/elm/compiler/issues/1776
//
// The queue is necessary to avoid ordering issues for synchronous commands.


// Why use true/false here? Why not just check the length of the queue?
// The goal is to detect "are we currently dispatching effects?" If we
// are, we need to bail and let the ongoing while loop handle things.
//
// Now say the queue has 1 element. When we dequeue the final element,
// the queue will be empty, but we are still actively dispatching effects.
// So you could get queue jumping in a really tricky category of cases.
//
var _Platform_effectsQueue = [];
var _Platform_effectsActive = false;


function _Platform_enqueueEffects(managers, cmdBag, subBag)
{
	_Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });

	if (_Platform_effectsActive) return;

	_Platform_effectsActive = true;
	for (var fx; fx = _Platform_effectsQueue.shift(); )
	{
		_Platform_dispatchEffects(fx.p, fx.q, fx.r);
	}
	_Platform_effectsActive = false;
}


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				s: bag.n,
				t: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.t)
		{
			x = temp.s(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		u: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		u: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}




// HELPERS


var _VirtualDom_divertHrefToApp;

var _VirtualDom_doc = typeof document !== 'undefined' ? document : {};


function _VirtualDom_appendChild(parent, child)
{
	parent.appendChild(child);
}

var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)
{
	// NOTE: this function needs _Platform_export available to work

	/**_UNUSED/
	var node = args['node'];
	//*/
	/**/
	var node = args && args['node'] ? args['node'] : _Debug_crash(0);
	//*/

	node.parentNode.replaceChild(
		_VirtualDom_render(virtualNode, function() {}),
		node
	);

	return {};
});



// TEXT


function _VirtualDom_text(string)
{
	return {
		$: 0,
		a: string
	};
}



// NODE


var _VirtualDom_nodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 1,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_node = _VirtualDom_nodeNS(undefined);



// KEYED NODE


var _VirtualDom_keyedNodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 2,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);



// CUSTOM


function _VirtualDom_custom(factList, model, render, diff)
{
	return {
		$: 3,
		d: _VirtualDom_organizeFacts(factList),
		g: model,
		h: render,
		i: diff
	};
}



// MAP


var _VirtualDom_map = F2(function(tagger, node)
{
	return {
		$: 4,
		j: tagger,
		k: node,
		b: 1 + (node.b || 0)
	};
});



// LAZY


function _VirtualDom_thunk(refs, thunk)
{
	return {
		$: 5,
		l: refs,
		m: thunk,
		k: undefined
	};
}

var _VirtualDom_lazy = F2(function(func, a)
{
	return _VirtualDom_thunk([func, a], function() {
		return func(a);
	});
});

var _VirtualDom_lazy2 = F3(function(func, a, b)
{
	return _VirtualDom_thunk([func, a, b], function() {
		return A2(func, a, b);
	});
});

var _VirtualDom_lazy3 = F4(function(func, a, b, c)
{
	return _VirtualDom_thunk([func, a, b, c], function() {
		return A3(func, a, b, c);
	});
});

var _VirtualDom_lazy4 = F5(function(func, a, b, c, d)
{
	return _VirtualDom_thunk([func, a, b, c, d], function() {
		return A4(func, a, b, c, d);
	});
});

var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)
{
	return _VirtualDom_thunk([func, a, b, c, d, e], function() {
		return A5(func, a, b, c, d, e);
	});
});

var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
		return A6(func, a, b, c, d, e, f);
	});
});

var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {
		return A7(func, a, b, c, d, e, f, g);
	});
});

var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {
		return A8(func, a, b, c, d, e, f, g, h);
	});
});



// FACTS


var _VirtualDom_on = F2(function(key, handler)
{
	return {
		$: 'a0',
		n: key,
		o: handler
	};
});
var _VirtualDom_style = F2(function(key, value)
{
	return {
		$: 'a1',
		n: key,
		o: value
	};
});
var _VirtualDom_property = F2(function(key, value)
{
	return {
		$: 'a2',
		n: key,
		o: value
	};
});
var _VirtualDom_attribute = F2(function(key, value)
{
	return {
		$: 'a3',
		n: key,
		o: value
	};
});
var _VirtualDom_attributeNS = F3(function(namespace, key, value)
{
	return {
		$: 'a4',
		n: key,
		o: { f: namespace, o: value }
	};
});



// XSS ATTACK VECTOR CHECKS


function _VirtualDom_noScript(tag)
{
	return tag == 'script' ? 'p' : tag;
}

function _VirtualDom_noOnOrFormAction(key)
{
	return /^(on|formAction$)/i.test(key) ? 'data-' + key : key;
}

function _VirtualDom_noInnerHtmlOrFormAction(key)
{
	return key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;
}

function _VirtualDom_noJavaScriptUri_UNUSED(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,'')) ? '' : value;
}

function _VirtualDom_noJavaScriptUri(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,''))
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlUri_UNUSED(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value) ? '' : value;
}

function _VirtualDom_noJavaScriptOrHtmlUri(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value)
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}



// MAP FACTS


var _VirtualDom_mapAttribute = F2(function(func, attr)
{
	return (attr.$ === 'a0')
		? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))
		: attr;
});

function _VirtualDom_mapHandler(func, handler)
{
	var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

	// 0 = Normal
	// 1 = MayStopPropagation
	// 2 = MayPreventDefault
	// 3 = Custom

	return {
		$: handler.$,
		a:
			!tag
				? A2($elm$json$Json$Decode$map, func, handler.a)
				:
			A3($elm$json$Json$Decode$map2,
				tag < 3
					? _VirtualDom_mapEventTuple
					: _VirtualDom_mapEventRecord,
				$elm$json$Json$Decode$succeed(func),
				handler.a
			)
	};
}

var _VirtualDom_mapEventTuple = F2(function(func, tuple)
{
	return _Utils_Tuple2(func(tuple.a), tuple.b);
});

var _VirtualDom_mapEventRecord = F2(function(func, record)
{
	return {
		message: func(record.message),
		stopPropagation: record.stopPropagation,
		preventDefault: record.preventDefault
	}
});



// ORGANIZE FACTS


function _VirtualDom_organizeFacts(factList)
{
	for (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS
	{
		var entry = factList.a;

		var tag = entry.$;
		var key = entry.n;
		var value = entry.o;

		if (tag === 'a2')
		{
			(key === 'className')
				? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
				: facts[key] = _Json_unwrap(value);

			continue;
		}

		var subFacts = facts[tag] || (facts[tag] = {});
		(tag === 'a3' && key === 'class')
			? _VirtualDom_addClass(subFacts, key, value)
			: subFacts[key] = value;
	}

	return facts;
}

function _VirtualDom_addClass(object, key, newClass)
{
	var classes = object[key];
	object[key] = classes ? classes + ' ' + newClass : newClass;
}



// RENDER


function _VirtualDom_render(vNode, eventNode)
{
	var tag = vNode.$;

	if (tag === 5)
	{
		return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
	}

	if (tag === 0)
	{
		return _VirtualDom_doc.createTextNode(vNode.a);
	}

	if (tag === 4)
	{
		var subNode = vNode.k;
		var tagger = vNode.j;

		while (subNode.$ === 4)
		{
			typeof tagger !== 'object'
				? tagger = [tagger, subNode.j]
				: tagger.push(subNode.j);

			subNode = subNode.k;
		}

		var subEventRoot = { j: tagger, p: eventNode };
		var domNode = _VirtualDom_render(subNode, subEventRoot);
		domNode.elm_event_node_ref = subEventRoot;
		return domNode;
	}

	if (tag === 3)
	{
		var domNode = vNode.h(vNode.g);
		_VirtualDom_applyFacts(domNode, eventNode, vNode.d);
		return domNode;
	}

	// at this point `tag` must be 1 or 2

	var domNode = vNode.f
		? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
		: _VirtualDom_doc.createElement(vNode.c);

	if (_VirtualDom_divertHrefToApp && vNode.c == 'a')
	{
		domNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));
	}

	_VirtualDom_applyFacts(domNode, eventNode, vNode.d);

	for (var kids = vNode.e, i = 0; i < kids.length; i++)
	{
		_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
	}

	return domNode;
}



// APPLY FACTS


function _VirtualDom_applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		key === 'a1'
			? _VirtualDom_applyStyles(domNode, value)
			:
		key === 'a0'
			? _VirtualDom_applyEvents(domNode, eventNode, value)
			:
		key === 'a3'
			? _VirtualDom_applyAttrs(domNode, value)
			:
		key === 'a4'
			? _VirtualDom_applyAttrsNS(domNode, value)
			:
		((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);
	}
}



// APPLY STYLES


function _VirtualDom_applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}



// APPLY ATTRS


function _VirtualDom_applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		typeof value !== 'undefined'
			? domNode.setAttribute(key, value)
			: domNode.removeAttribute(key);
	}
}



// APPLY NAMESPACED ATTRS


function _VirtualDom_applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.f;
		var value = pair.o;

		typeof value !== 'undefined'
			? domNode.setAttributeNS(namespace, key, value)
			: domNode.removeAttributeNS(namespace, key);
	}
}



// APPLY EVENTS


function _VirtualDom_applyEvents(domNode, eventNode, events)
{
	var allCallbacks = domNode.elmFs || (domNode.elmFs = {});

	for (var key in events)
	{
		var newHandler = events[key];
		var oldCallback = allCallbacks[key];

		if (!newHandler)
		{
			domNode.removeEventListener(key, oldCallback);
			allCallbacks[key] = undefined;
			continue;
		}

		if (oldCallback)
		{
			var oldHandler = oldCallback.q;
			if (oldHandler.$ === newHandler.$)
			{
				oldCallback.q = newHandler;
				continue;
			}
			domNode.removeEventListener(key, oldCallback);
		}

		oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
		domNode.addEventListener(key, oldCallback,
			_VirtualDom_passiveSupported
			&& { passive: $elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }
		);
		allCallbacks[key] = oldCallback;
	}
}



// PASSIVE EVENTS


var _VirtualDom_passiveSupported;

try
{
	window.addEventListener('t', null, Object.defineProperty({}, 'passive', {
		get: function() { _VirtualDom_passiveSupported = true; }
	}));
}
catch(e) {}



// EVENT HANDLERS


function _VirtualDom_makeCallback(eventNode, initialHandler)
{
	function callback(event)
	{
		var handler = callback.q;
		var result = _Json_runHelp(handler.a, event);

		if (!$elm$core$Result$isOk(result))
		{
			return;
		}

		var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

		// 0 = Normal
		// 1 = MayStopPropagation
		// 2 = MayPreventDefault
		// 3 = Custom

		var value = result.a;
		var message = !tag ? value : tag < 3 ? value.a : value.message;
		var stopPropagation = tag == 1 ? value.b : tag == 3 && value.stopPropagation;
		var currentEventNode = (
			stopPropagation && event.stopPropagation(),
			(tag == 2 ? value.b : tag == 3 && value.preventDefault) && event.preventDefault(),
			eventNode
		);
		var tagger;
		var i;
		while (tagger = currentEventNode.j)
		{
			if (typeof tagger == 'function')
			{
				message = tagger(message);
			}
			else
			{
				for (var i = tagger.length; i--; )
				{
					message = tagger[i](message);
				}
			}
			currentEventNode = currentEventNode.p;
		}
		currentEventNode(message, stopPropagation); // stopPropagation implies isSync
	}

	callback.q = initialHandler;

	return callback;
}

function _VirtualDom_equalEvents(x, y)
{
	return x.$ == y.$ && _Json_equality(x.a, y.a);
}



// DIFF


// TODO: Should we do patches like in iOS?
//
// type Patch
//   = At Int Patch
//   | Batch (List Patch)
//   | Change ...
//
// How could it not be better?
//
function _VirtualDom_diff(x, y)
{
	var patches = [];
	_VirtualDom_diffHelp(x, y, patches, 0);
	return patches;
}


function _VirtualDom_pushPatch(patches, type, index, data)
{
	var patch = {
		$: type,
		r: index,
		s: data,
		t: undefined,
		u: undefined
	};
	patches.push(patch);
	return patch;
}


function _VirtualDom_diffHelp(x, y, patches, index)
{
	if (x === y)
	{
		return;
	}

	var xType = x.$;
	var yType = y.$;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (xType !== yType)
	{
		if (xType === 1 && yType === 2)
		{
			y = _VirtualDom_dekey(y);
			yType = 1;
		}
		else
		{
			_VirtualDom_pushPatch(patches, 0, index, y);
			return;
		}
	}

	// Now we know that both nodes are the same $.
	switch (yType)
	{
		case 5:
			var xRefs = x.l;
			var yRefs = y.l;
			var i = xRefs.length;
			var same = i === yRefs.length;
			while (same && i--)
			{
				same = xRefs[i] === yRefs[i];
			}
			if (same)
			{
				y.k = x.k;
				return;
			}
			y.k = y.m();
			var subPatches = [];
			_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
			subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
			return;

		case 4:
			// gather nested taggers
			var xTaggers = x.j;
			var yTaggers = y.j;
			var nesting = false;

			var xSubNode = x.k;
			while (xSubNode.$ === 4)
			{
				nesting = true;

				typeof xTaggers !== 'object'
					? xTaggers = [xTaggers, xSubNode.j]
					: xTaggers.push(xSubNode.j);

				xSubNode = xSubNode.k;
			}

			var ySubNode = y.k;
			while (ySubNode.$ === 4)
			{
				nesting = true;

				typeof yTaggers !== 'object'
					? yTaggers = [yTaggers, ySubNode.j]
					: yTaggers.push(ySubNode.j);

				ySubNode = ySubNode.k;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && xTaggers.length !== yTaggers.length)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)
			{
				_VirtualDom_pushPatch(patches, 2, index, yTaggers);
			}

			// diff everything below the taggers
			_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
			return;

		case 0:
			if (x.a !== y.a)
			{
				_VirtualDom_pushPatch(patches, 3, index, y.a);
			}
			return;

		case 1:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
			return;

		case 2:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
			return;

		case 3:
			if (x.h !== y.h)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
			factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

			var patch = y.i(x.g, y.g);
			patch && _VirtualDom_pushPatch(patches, 5, index, patch);

			return;
	}
}

// assumes the incoming arrays are the same length
function _VirtualDom_pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}

function _VirtualDom_diffNodes(x, y, patches, index, diffKids)
{
	// Bail if obvious indicators have changed. Implies more serious
	// structural changes such that it's not worth it to diff.
	if (x.c !== y.c || x.f !== y.f)
	{
		_VirtualDom_pushPatch(patches, 0, index, y);
		return;
	}

	var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
	factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

	diffKids(x, y, patches, index);
}



// DIFF FACTS


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function _VirtualDom_diffFacts(x, y, category)
{
	var diff;

	// look for changes and removals
	for (var xKey in x)
	{
		if (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')
		{
			var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[xKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(xKey in y))
		{
			diff = diff || {};
			diff[xKey] =
				!category
					? (typeof x[xKey] === 'string' ? '' : null)
					:
				(category === 'a1')
					? ''
					:
				(category === 'a0' || category === 'a3')
					? undefined
					:
				{ f: x[xKey].f, o: undefined };

			continue;
		}

		var xValue = x[xKey];
		var yValue = y[xKey];

		// reference equal, so don't worry about it
		if (xValue === yValue && xKey !== 'value' && xKey !== 'checked'
			|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))
		{
			continue;
		}

		diff = diff || {};
		diff[xKey] = yValue;
	}

	// add new stuff
	for (var yKey in y)
	{
		if (!(yKey in x))
		{
			diff = diff || {};
			diff[yKey] = y[yKey];
		}
	}

	return diff;
}



// DIFF KIDS


function _VirtualDom_diffKids(xParent, yParent, patches, index)
{
	var xKids = xParent.e;
	var yKids = yParent.e;

	var xLen = xKids.length;
	var yLen = yKids.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (xLen > yLen)
	{
		_VirtualDom_pushPatch(patches, 6, index, {
			v: yLen,
			i: xLen - yLen
		});
	}
	else if (xLen < yLen)
	{
		_VirtualDom_pushPatch(patches, 7, index, {
			v: xLen,
			e: yKids
		});
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)
	{
		var xKid = xKids[i];
		_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
		index += xKid.b || 0;
	}
}



// KEYED DIFF


function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var xKids = xParent.e;
	var yKids = yParent.e;
	var xLen = xKids.length;
	var yLen = yKids.length;
	var xIndex = 0;
	var yIndex = 0;

	var index = rootIndex;

	while (xIndex < xLen && yIndex < yLen)
	{
		var x = xKids[xIndex];
		var y = yKids[yIndex];

		var xKey = x.a;
		var yKey = y.a;
		var xNode = x.b;
		var yNode = y.b;

		var newMatch = undefined;
		var oldMatch = undefined;

		// check if keys match

		if (xKey === yKey)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNode, localPatches, index);
			index += xNode.b || 0;

			xIndex++;
			yIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var xNext = xKids[xIndex + 1];
		var yNext = yKids[yIndex + 1];

		if (xNext)
		{
			var xNextKey = xNext.a;
			var xNextNode = xNext.b;
			oldMatch = yKey === xNextKey;
		}

		if (yNext)
		{
			var yNextKey = yNext.a;
			var yNextNode = yNext.b;
			newMatch = xKey === yNextKey;
		}


		// swap x and y
		if (newMatch && oldMatch)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		// insert y
		if (newMatch)
		{
			index++;
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			index += xNode.b || 0;

			xIndex += 1;
			yIndex += 2;
			continue;
		}

		// remove x
		if (oldMatch)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 1;
			continue;
		}

		// remove x, insert y
		if (xNext && xNextKey === yNextKey)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (xIndex < xLen)
	{
		index++;
		var x = xKids[xIndex];
		var xNode = x.b;
		_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
		index += xNode.b || 0;
		xIndex++;
	}

	while (yIndex < yLen)
	{
		var endInserts = endInserts || [];
		var y = yKids[yIndex];
		_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
		yIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || endInserts)
	{
		_VirtualDom_pushPatch(patches, 8, rootIndex, {
			w: localPatches,
			x: inserts,
			y: endInserts
		});
	}
}



// CHANGES FROM KEYED DIFF


var _VirtualDom_POSTFIX = '_elmW6BL';


function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		entry = {
			c: 0,
			z: vnode,
			r: yIndex,
			s: undefined
		};

		inserts.push({ r: yIndex, A: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.c === 1)
	{
		inserts.push({ r: yIndex, A: entry });

		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
		entry.r = yIndex;
		entry.s.s = {
			w: subPatches,
			A: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
}


function _VirtualDom_removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);

		changes[key] = {
			c: 1,
			z: vnode,
			r: index,
			s: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.c === 0)
	{
		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);

		_VirtualDom_pushPatch(localPatches, 9, index, {
			w: subPatches,
			A: entry
		});

		return;
	}

	// this key has already been removed or moved, a duplicate!
	_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
}



// ADD DOM NODES
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)
{
	_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.r;

	while (index === low)
	{
		var patchType = patch.$;

		if (patchType === 1)
		{
			_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
		}
		else if (patchType === 8)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var subPatches = patch.s.w;
			if (subPatches.length > 0)
			{
				_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 9)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var data = patch.s;
			if (data)
			{
				data.A.s = domNode;
				var subPatches = data.w;
				if (subPatches.length > 0)
				{
					_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.t = domNode;
			patch.u = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.r) > high)
		{
			return i;
		}
	}

	var tag = vNode.$;

	if (tag === 4)
	{
		var subNode = vNode.k;

		while (subNode.$ === 4)
		{
			subNode = subNode.k;
		}

		return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
	}

	// tag must be 1 or 2 at this point

	var vKids = vNode.e;
	var childNodes = domNode.childNodes;
	for (var j = 0; j < vKids.length; j++)
	{
		low++;
		var vKid = tag === 1 ? vKids[j] : vKids[j].b;
		var nextLow = low + (vKid.b || 0);
		if (low <= index && index <= nextLow)
		{
			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
			if (!(patch = patches[i]) || (index = patch.r) > high)
			{
				return i;
			}
		}
		low = nextLow;
	}
	return i;
}



// APPLY PATCHES


function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
}

function _VirtualDom_applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.t
		var newNode = _VirtualDom_applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function _VirtualDom_applyPatch(domNode, patch)
{
	switch (patch.$)
	{
		case 0:
			return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);

		case 4:
			_VirtualDom_applyFacts(domNode, patch.u, patch.s);
			return domNode;

		case 3:
			domNode.replaceData(0, domNode.length, patch.s);
			return domNode;

		case 1:
			return _VirtualDom_applyPatchesHelp(domNode, patch.s);

		case 2:
			if (domNode.elm_event_node_ref)
			{
				domNode.elm_event_node_ref.j = patch.s;
			}
			else
			{
				domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
			}
			return domNode;

		case 6:
			var data = patch.s;
			for (var i = 0; i < data.i; i++)
			{
				domNode.removeChild(domNode.childNodes[data.v]);
			}
			return domNode;

		case 7:
			var data = patch.s;
			var kids = data.e;
			var i = data.v;
			var theEnd = domNode.childNodes[i];
			for (; i < kids.length; i++)
			{
				domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
			}
			return domNode;

		case 9:
			var data = patch.s;
			if (!data)
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.A;
			if (typeof entry.r !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
			return domNode;

		case 8:
			return _VirtualDom_applyPatchReorder(domNode, patch);

		case 5:
			return patch.s(domNode);

		default:
			_Debug_crash(10); // 'Ran into an unknown patch!'
	}
}


function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = _VirtualDom_render(vNode, eventNode);

	if (!newNode.elm_event_node_ref)
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function _VirtualDom_applyPatchReorder(domNode, patch)
{
	var data = patch.s;

	// remove end inserts
	var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);

	// removals
	domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);

	// inserts
	var inserts = data.x;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.A;
		var node = entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u);
		domNode.insertBefore(node, domNode.childNodes[insert.r]);
	}

	// add end inserts
	if (frag)
	{
		_VirtualDom_appendChild(domNode, frag);
	}

	return domNode;
}


function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (!endInserts)
	{
		return;
	}

	var frag = _VirtualDom_doc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.A;
		_VirtualDom_appendChild(frag, entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u)
		);
	}
	return frag;
}


function _VirtualDom_virtualize(node)
{
	// TEXT NODES

	if (node.nodeType === 3)
	{
		return _VirtualDom_text(node.textContent);
	}


	// WEIRD NODES

	if (node.nodeType !== 1)
	{
		return _VirtualDom_text('');
	}


	// ELEMENT NODES

	var attrList = _List_Nil;
	var attrs = node.attributes;
	for (var i = attrs.length; i--; )
	{
		var attr = attrs[i];
		var name = attr.name;
		var value = attr.value;
		attrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );
	}

	var tag = node.tagName.toLowerCase();
	var kidList = _List_Nil;
	var kids = node.childNodes;

	for (var i = kids.length; i--; )
	{
		kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
	}
	return A3(_VirtualDom_node, tag, attrList, kidList);
}

function _VirtualDom_dekey(keyedNode)
{
	var keyedKids = keyedNode.e;
	var len = keyedKids.length;
	var kids = new Array(len);
	for (var i = 0; i < len; i++)
	{
		kids[i] = keyedKids[i].b;
	}

	return {
		$: 1,
		c: keyedNode.c,
		d: keyedNode.d,
		e: kids,
		f: keyedNode.f,
		b: keyedNode.b
	};
}




// ELEMENT


var _Debugger_element;

var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var view = impl.view;
			/**_UNUSED/
			var domNode = args['node'];
			//*/
			/**/
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			//*/
			var currNode = _VirtualDom_virtualize(domNode);

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = view(model);
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;
			});
		}
	);
});



// DOCUMENT


var _Debugger_document;

var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var divertHrefToApp = impl.setup && impl.setup(sendToApp)
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view(model);
				var nextNode = _VirtualDom_node('body')(_List_Nil)(doc.body);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);
			});
		}
	);
});



// ANIMATION


var _Browser_cancelAnimationFrame =
	typeof cancelAnimationFrame !== 'undefined'
		? cancelAnimationFrame
		: function(id) { clearTimeout(id); };

var _Browser_requestAnimationFrame =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { return setTimeout(callback, 1000 / 60); };


function _Browser_makeAnimator(model, draw)
{
	draw(model);

	var state = 0;

	function updateIfNeeded()
	{
		state = state === 1
			? 0
			: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );
	}

	return function(nextModel, isSync)
	{
		model = nextModel;

		isSync
			? ( draw(model),
				state === 2 && (state = 1)
				)
			: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
				state = 2
				);
	};
}



// APPLICATION


function _Browser_application(impl)
{
	var onUrlChange = impl.onUrlChange;
	var onUrlRequest = impl.onUrlRequest;
	var key = function() { key.a(onUrlChange(_Browser_getUrl())); };

	return _Browser_document({
		setup: function(sendToApp)
		{
			key.a = sendToApp;
			_Browser_window.addEventListener('popstate', key);
			_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);

			return F2(function(domNode, event)
			{
				if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))
				{
					event.preventDefault();
					var href = domNode.href;
					var curr = _Browser_getUrl();
					var next = $elm$url$Url$fromString(href).a;
					sendToApp(onUrlRequest(
						(next
							&& curr.protocol === next.protocol
							&& curr.host === next.host
							&& curr.port_.a === next.port_.a
						)
							? $elm$browser$Browser$Internal(next)
							: $elm$browser$Browser$External(href)
					));
				}
			});
		},
		init: function(flags)
		{
			return A3(impl.init, flags, _Browser_getUrl(), key);
		},
		view: impl.view,
		update: impl.update,
		subscriptions: impl.subscriptions
	});
}

function _Browser_getUrl()
{
	return $elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
}

var _Browser_go = F2(function(key, n)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		n && history.go(n);
		key();
	}));
});

var _Browser_pushUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.pushState({}, '', url);
		key();
	}));
});

var _Browser_replaceUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.replaceState({}, '', url);
		key();
	}));
});



// GLOBAL EVENTS


var _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };
var _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;
var _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;

var _Browser_on = F3(function(node, eventName, sendToSelf)
{
	return _Scheduler_spawn(_Scheduler_binding(function(callback)
	{
		function handler(event)	{ _Scheduler_rawSpawn(sendToSelf(event)); }
		node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
		return function() { node.removeEventListener(eventName, handler); };
	}));
});

var _Browser_decodeEvent = F2(function(decoder, event)
{
	var result = _Json_runHelp(decoder, event);
	return $elm$core$Result$isOk(result) ? $elm$core$Maybe$Just(result.a) : $elm$core$Maybe$Nothing;
});



// PAGE VISIBILITY


function _Browser_visibilityInfo()
{
	return (typeof _VirtualDom_doc.hidden !== 'undefined')
		? { hidden: 'hidden', change: 'visibilitychange' }
		:
	(typeof _VirtualDom_doc.mozHidden !== 'undefined')
		? { hidden: 'mozHidden', change: 'mozvisibilitychange' }
		:
	(typeof _VirtualDom_doc.msHidden !== 'undefined')
		? { hidden: 'msHidden', change: 'msvisibilitychange' }
		:
	(typeof _VirtualDom_doc.webkitHidden !== 'undefined')
		? { hidden: 'webkitHidden', change: 'webkitvisibilitychange' }
		: { hidden: 'hidden', change: 'visibilitychange' };
}



// ANIMATION FRAMES


function _Browser_rAF()
{
	return _Scheduler_binding(function(callback)
	{
		var id = _Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(Date.now()));
		});

		return function() {
			_Browser_cancelAnimationFrame(id);
		};
	});
}


function _Browser_now()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(Date.now()));
	});
}



// DOM STUFF


function _Browser_withNode(id, doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			var node = document.getElementById(id);
			callback(node
				? _Scheduler_succeed(doStuff(node))
				: _Scheduler_fail($elm$browser$Browser$Dom$NotFound(id))
			);
		});
	});
}


function _Browser_withWindow(doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(doStuff()));
		});
	});
}


// FOCUS and BLUR


var _Browser_call = F2(function(functionName, id)
{
	return _Browser_withNode(id, function(node) {
		node[functionName]();
		return _Utils_Tuple0;
	});
});



// WINDOW VIEWPORT


function _Browser_getViewport()
{
	return {
		scene: _Browser_getScene(),
		viewport: {
			x: _Browser_window.pageXOffset,
			y: _Browser_window.pageYOffset,
			width: _Browser_doc.documentElement.clientWidth,
			height: _Browser_doc.documentElement.clientHeight
		}
	};
}

function _Browser_getScene()
{
	var body = _Browser_doc.body;
	var elem = _Browser_doc.documentElement;
	return {
		width: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
		height: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
	};
}

var _Browser_setViewport = F2(function(x, y)
{
	return _Browser_withWindow(function()
	{
		_Browser_window.scroll(x, y);
		return _Utils_Tuple0;
	});
});



// ELEMENT VIEWPORT


function _Browser_getViewportOf(id)
{
	return _Browser_withNode(id, function(node)
	{
		return {
			scene: {
				width: node.scrollWidth,
				height: node.scrollHeight
			},
			viewport: {
				x: node.scrollLeft,
				y: node.scrollTop,
				width: node.clientWidth,
				height: node.clientHeight
			}
		};
	});
}


var _Browser_setViewportOf = F3(function(id, x, y)
{
	return _Browser_withNode(id, function(node)
	{
		node.scrollLeft = x;
		node.scrollTop = y;
		return _Utils_Tuple0;
	});
});



// ELEMENT


function _Browser_getElement(id)
{
	return _Browser_withNode(id, function(node)
	{
		var rect = node.getBoundingClientRect();
		var x = _Browser_window.pageXOffset;
		var y = _Browser_window.pageYOffset;
		return {
			scene: _Browser_getScene(),
			viewport: {
				x: x,
				y: y,
				width: _Browser_doc.documentElement.clientWidth,
				height: _Browser_doc.documentElement.clientHeight
			},
			element: {
				x: x + rect.left,
				y: y + rect.top,
				width: rect.width,
				height: rect.height
			}
		};
	});
}



// LOAD and RELOAD


function _Browser_reload(skipCache)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		_VirtualDom_doc.location.reload(skipCache);
	}));
}

function _Browser_load(url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		try
		{
			_Browser_window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			_VirtualDom_doc.location.reload(false);
		}
	}));
}




// STRINGS


var _Parser_isSubString = F5(function(smallString, offset, row, col, bigString)
{
	var smallLength = smallString.length;
	var isGood = offset + smallLength <= bigString.length;

	for (var i = 0; isGood && i < smallLength; )
	{
		var code = bigString.charCodeAt(offset);
		isGood =
			smallString[i++] === bigString[offset++]
			&& (
				code === 0x000A /* \n */
					? ( row++, col=1 )
					: ( col++, (code & 0xF800) === 0xD800 ? smallString[i++] === bigString[offset++] : 1 )
			)
	}

	return _Utils_Tuple3(isGood ? offset : -1, row, col);
});



// CHARS


var _Parser_isSubChar = F3(function(predicate, offset, string)
{
	return (
		string.length <= offset
			? -1
			:
		(string.charCodeAt(offset) & 0xF800) === 0xD800
			? (predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1)
			:
		(predicate(_Utils_chr(string[offset]))
			? ((string[offset] === '\n') ? -2 : (offset + 1))
			: -1
		)
	);
});


var _Parser_isAsciiCode = F3(function(code, offset, string)
{
	return string.charCodeAt(offset) === code;
});



// NUMBERS


var _Parser_chompBase10 = F2(function(offset, string)
{
	for (; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (code < 0x30 || 0x39 < code)
		{
			return offset;
		}
	}
	return offset;
});


var _Parser_consumeBase = F3(function(base, offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var digit = string.charCodeAt(offset) - 0x30;
		if (digit < 0 || base <= digit) break;
		total = base * total + digit;
	}
	return _Utils_Tuple2(offset, total);
});


var _Parser_consumeBase16 = F2(function(offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (0x30 <= code && code <= 0x39)
		{
			total = 16 * total + code - 0x30;
		}
		else if (0x41 <= code && code <= 0x46)
		{
			total = 16 * total + code - 55;
		}
		else if (0x61 <= code && code <= 0x66)
		{
			total = 16 * total + code - 87;
		}
		else
		{
			break;
		}
	}
	return _Utils_Tuple2(offset, total);
});



// FIND STRING


var _Parser_findSubString = F5(function(smallString, offset, row, col, bigString)
{
	var newOffset = bigString.indexOf(smallString, offset);
	var target = newOffset < 0 ? bigString.length : newOffset + smallString.length;

	while (offset < target)
	{
		var code = bigString.charCodeAt(offset++);
		code === 0x000A /* \n */
			? ( col=1, row++ )
			: ( col++, (code & 0xF800) === 0xD800 && offset++ )
	}

	return _Utils_Tuple3(newOffset, row, col);
});



// SEND REQUEST

var _Http_toTask = F3(function(router, toTask, request)
{
	return _Scheduler_binding(function(callback)
	{
		function done(response) {
			callback(toTask(request.expect.a(response)));
		}

		var xhr = new XMLHttpRequest();
		xhr.addEventListener('error', function() { done($elm$http$Http$NetworkError_); });
		xhr.addEventListener('timeout', function() { done($elm$http$Http$Timeout_); });
		xhr.addEventListener('load', function() { done(_Http_toResponse(request.expect.b, xhr)); });
		$elm$core$Maybe$isJust(request.tracker) && _Http_track(router, xhr, request.tracker.a);

		try {
			xhr.open(request.method, request.url, true);
		} catch (e) {
			return done($elm$http$Http$BadUrl_(request.url));
		}

		_Http_configureRequest(xhr, request);

		request.body.a && xhr.setRequestHeader('Content-Type', request.body.a);
		xhr.send(request.body.b);

		return function() { xhr.c = true; xhr.abort(); };
	});
});


// CONFIGURE

function _Http_configureRequest(xhr, request)
{
	for (var headers = request.headers; headers.b; headers = headers.b) // WHILE_CONS
	{
		xhr.setRequestHeader(headers.a.a, headers.a.b);
	}
	xhr.timeout = request.timeout.a || 0;
	xhr.responseType = request.expect.d;
	xhr.withCredentials = request.allowCookiesFromOtherDomains;
}


// RESPONSES

function _Http_toResponse(toBody, xhr)
{
	return A2(
		200 <= xhr.status && xhr.status < 300 ? $elm$http$Http$GoodStatus_ : $elm$http$Http$BadStatus_,
		_Http_toMetadata(xhr),
		toBody(xhr.response)
	);
}


// METADATA

function _Http_toMetadata(xhr)
{
	return {
		url: xhr.responseURL,
		statusCode: xhr.status,
		statusText: xhr.statusText,
		headers: _Http_parseHeaders(xhr.getAllResponseHeaders())
	};
}


// HEADERS

function _Http_parseHeaders(rawHeaders)
{
	if (!rawHeaders)
	{
		return $elm$core$Dict$empty;
	}

	var headers = $elm$core$Dict$empty;
	var headerPairs = rawHeaders.split('\r\n');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf(': ');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3($elm$core$Dict$update, key, function(oldValue) {
				return $elm$core$Maybe$Just($elm$core$Maybe$isJust(oldValue)
					? value + ', ' + oldValue.a
					: value
				);
			}, headers);
		}
	}
	return headers;
}


// EXPECT

var _Http_expect = F3(function(type, toBody, toValue)
{
	return {
		$: 0,
		d: type,
		b: toBody,
		a: toValue
	};
});

var _Http_mapExpect = F2(function(func, expect)
{
	return {
		$: 0,
		d: expect.d,
		b: expect.b,
		a: function(x) { return func(expect.a(x)); }
	};
});

function _Http_toDataView(arrayBuffer)
{
	return new DataView(arrayBuffer);
}


// BODY and PARTS

var _Http_emptyBody = { $: 0 };
var _Http_pair = F2(function(a, b) { return { $: 0, a: a, b: b }; });

function _Http_toFormData(parts)
{
	for (var formData = new FormData(); parts.b; parts = parts.b) // WHILE_CONS
	{
		var part = parts.a;
		formData.append(part.a, part.b);
	}
	return formData;
}

var _Http_bytesToBlob = F2(function(mime, bytes)
{
	return new Blob([bytes], { type: mime });
});


// PROGRESS

function _Http_track(router, xhr, tracker)
{
	// TODO check out lengthComputable on loadstart event

	xhr.upload.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Sending({
			sent: event.loaded,
			size: event.total
		}))));
	});
	xhr.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Receiving({
			received: event.loaded,
			size: event.lengthComputable ? $elm$core$Maybe$Just(event.total) : $elm$core$Maybe$Nothing
		}))));
	});
}

function _Url_percentEncode(string)
{
	return encodeURIComponent(string);
}

function _Url_percentDecode(string)
{
	try
	{
		return $elm$core$Maybe$Just(decodeURIComponent(string));
	}
	catch (e)
	{
		return $elm$core$Maybe$Nothing;
	}
}


var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});



function _Time_now(millisToPosix)
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(millisToPosix(Date.now())));
	});
}

var _Time_setInterval = F2(function(interval, task)
{
	return _Scheduler_binding(function(callback)
	{
		var id = setInterval(function() { _Scheduler_rawSpawn(task); }, interval);
		return function() { clearInterval(id); };
	});
});

function _Time_here()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(
			A2($elm$time$Time$customZone, -(new Date().getTimezoneOffset()), _List_Nil)
		));
	});
}


function _Time_getZoneName()
{
	return _Scheduler_binding(function(callback)
	{
		try
		{
			var name = $elm$time$Time$Name(Intl.DateTimeFormat().resolvedOptions().timeZone);
		}
		catch (e)
		{
			var name = $elm$time$Time$Offset(new Date().getTimezoneOffset());
		}
		callback(_Scheduler_succeed(name));
	});
}


// CREATE

var _Regex_never = /.^/;

var _Regex_fromStringWith = F2(function(options, string)
{
	var flags = 'g';
	if (options.multiline) { flags += 'm'; }
	if (options.caseInsensitive) { flags += 'i'; }

	try
	{
		return $elm$core$Maybe$Just(new RegExp(string, flags));
	}
	catch(error)
	{
		return $elm$core$Maybe$Nothing;
	}
});


// USE

var _Regex_contains = F2(function(re, string)
{
	return string.match(re) !== null;
});


var _Regex_findAtMost = F3(function(n, re, str)
{
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex == re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		out.push(A4($elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _List_fromArray(out);
});


var _Regex_replaceAtMost = F4(function(n, re, replacer, string)
{
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		return replacer(A4($elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
	}
	return string.replace(re, jsReplacer);
});

var _Regex_splitAtMost = F3(function(n, re, str)
{
	var string = str;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		var result = re.exec(string);
		if (!result) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _List_fromArray(out);
});

var _Regex_infinity = Infinity;
var $elm$core$List$cons = _List_cons;
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Basics$EQ = {$: 'EQ'};
var $elm$core$Basics$GT = {$: 'GT'};
var $elm$core$Basics$LT = {$: 'LT'};
var $author$project$Main$LinkClicked = function (a) {
	return {$: 'LinkClicked', a: a};
};
var $author$project$Main$UrlChanged = function (a) {
	return {$: 'UrlChanged', a: a};
};
var $elm$core$Result$Err = function (a) {
	return {$: 'Err', a: a};
};
var $elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 'Failure', a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 'Index', a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 'Ok', a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 'OneOf', a: a};
};
var $elm$core$Basics$False = {$: 'False'};
var $elm$core$Basics$add = _Basics_add;
var $elm$core$Maybe$Just = function (a) {
	return {$: 'Just', a: a};
};
var $elm$core$Maybe$Nothing = {$: 'Nothing'};
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(
	function (lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$map2,
			f,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(xs) - 1),
			xs);
	});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 'Field':
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 'Nothing') {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'Index':
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'OneOf':
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 'Array_elm_builtin', a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 'Leaf', a: a};
};
var $elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var $elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 'SubTree', a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.nodeListSize) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder.tail);
		} else {
			var treeLen = builder.nodeListSize * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.nodeList) : builder.nodeList;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.nodeListSize);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder.tail);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{nodeList: nodeList, nodeListSize: (len / $elm$core$Array$branchFactor) | 0, tail: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Basics$True = {$: 'True'};
var $elm$core$Result$isOk = function (result) {
	if (result.$ === 'Ok') {
		return true;
	} else {
		return false;
	}
};
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$json$Json$Decode$map2 = _Json_map2;
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
	switch (handler.$) {
		case 'Normal':
			return 0;
		case 'MayStopPropagation':
			return 1;
		case 'MayPreventDefault':
			return 2;
		default:
			return 3;
	}
};
var $elm$browser$Browser$External = function (a) {
	return {$: 'External', a: a};
};
var $elm$browser$Browser$Internal = function (a) {
	return {$: 'Internal', a: a};
};
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $elm$browser$Browser$Dom$NotFound = function (a) {
	return {$: 'NotFound', a: a};
};
var $elm$url$Url$Http = {$: 'Http'};
var $elm$url$Url$Https = {$: 'Https'};
var $elm$url$Url$Url = F6(
	function (protocol, host, port_, path, query, fragment) {
		return {fragment: fragment, host: host, path: path, port_: port_, protocol: protocol, query: query};
	});
var $elm$core$String$contains = _String_contains;
var $elm$core$String$length = _String_length;
var $elm$core$String$slice = _String_slice;
var $elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $elm$core$String$indexes = _String_indexes;
var $elm$core$String$isEmpty = function (string) {
	return string === '';
};
var $elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3($elm$core$String$slice, 0, n, string);
	});
var $elm$core$String$toInt = _String_toInt;
var $elm$url$Url$chompBeforePath = F5(
	function (protocol, path, params, frag, str) {
		if ($elm$core$String$isEmpty(str) || A2($elm$core$String$contains, '@', str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, ':', str);
			if (!_v0.b) {
				return $elm$core$Maybe$Just(
					A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
			} else {
				if (!_v0.b.b) {
					var i = _v0.a;
					var _v1 = $elm$core$String$toInt(
						A2($elm$core$String$dropLeft, i + 1, str));
					if (_v1.$ === 'Nothing') {
						return $elm$core$Maybe$Nothing;
					} else {
						var port_ = _v1;
						return $elm$core$Maybe$Just(
							A6(
								$elm$url$Url$Url,
								protocol,
								A2($elm$core$String$left, i, str),
								port_,
								path,
								params,
								frag));
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $elm$url$Url$chompBeforeQuery = F4(
	function (protocol, params, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '/', str);
			if (!_v0.b) {
				return A5($elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);
			} else {
				var i = _v0.a;
				return A5(
					$elm$url$Url$chompBeforePath,
					protocol,
					A2($elm$core$String$dropLeft, i, str),
					params,
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompBeforeFragment = F3(
	function (protocol, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '?', str);
			if (!_v0.b) {
				return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Nothing, frag, str);
			} else {
				var i = _v0.a;
				return A4(
					$elm$url$Url$chompBeforeQuery,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompAfterProtocol = F2(
	function (protocol, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '#', str);
			if (!_v0.b) {
				return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Nothing, str);
			} else {
				var i = _v0.a;
				return A3(
					$elm$url$Url$chompBeforeFragment,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$core$String$startsWith = _String_startsWith;
var $elm$url$Url$fromString = function (str) {
	return A2($elm$core$String$startsWith, 'http://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Http,
		A2($elm$core$String$dropLeft, 7, str)) : (A2($elm$core$String$startsWith, 'https://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Https,
		A2($elm$core$String$dropLeft, 8, str)) : $elm$core$Maybe$Nothing);
};
var $elm$core$Basics$never = function (_v0) {
	never:
	while (true) {
		var nvr = _v0.a;
		var $temp$_v0 = nvr;
		_v0 = $temp$_v0;
		continue never;
	}
};
var $elm$core$Task$Perform = function (a) {
	return {$: 'Perform', a: a};
};
var $elm$core$Task$succeed = _Scheduler_succeed;
var $elm$core$Task$init = $elm$core$Task$succeed(_Utils_Tuple0);
var $elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						$elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var $elm$core$Task$andThen = _Scheduler_andThen;
var $elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return $elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var $elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return A2(
					$elm$core$Task$andThen,
					function (b) {
						return $elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var $elm$core$Task$sequence = function (tasks) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Task$map2($elm$core$List$cons),
		$elm$core$Task$succeed(_List_Nil),
		tasks);
};
var $elm$core$Platform$sendToApp = _Platform_sendToApp;
var $elm$core$Task$spawnCmd = F2(
	function (router, _v0) {
		var task = _v0.a;
		return _Scheduler_spawn(
			A2(
				$elm$core$Task$andThen,
				$elm$core$Platform$sendToApp(router),
				task));
	});
var $elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			$elm$core$Task$map,
			function (_v0) {
				return _Utils_Tuple0;
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Task$spawnCmd(router),
					commands)));
	});
var $elm$core$Task$onSelfMsg = F3(
	function (_v0, _v1, _v2) {
		return $elm$core$Task$succeed(_Utils_Tuple0);
	});
var $elm$core$Task$cmdMap = F2(
	function (tagger, _v0) {
		var task = _v0.a;
		return $elm$core$Task$Perform(
			A2($elm$core$Task$map, tagger, task));
	});
_Platform_effectManagers['Task'] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
var $elm$core$Task$command = _Platform_leaf('Task');
var $elm$core$Task$perform = F2(
	function (toMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2($elm$core$Task$map, toMessage, task)));
	});
var $elm$browser$Browser$application = _Browser_application;
var $author$project$Query$And = {$: 'And'};
var $author$project$Query$AnyMessage = {$: 'AnyMessage'};
var $author$project$Query$Request = function (a) {
	return {$: 'Request', a: a};
};
var $author$project$Main$RequesterMsg = function (a) {
	return {$: 'RequesterMsg', a: a};
};
var $author$project$ElmailUrl$Search = F2(
	function (a, b) {
		return {$: 'Search', a: a, b: b};
	});
var $author$project$ElmailUrl$SearchHidden = {$: 'SearchHidden'};
var $author$project$ElmailUrl$Searches = function (a) {
	return {$: 'Searches', a: a};
};
var $author$project$Grid$WrappedRow = {$: 'WrappedRow'};
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $elm$core$Tuple$mapSecond = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			x,
			func(y));
	});
var $author$project$Main$chain = F3(
	function (l, a, b) {
		return A2(
			$elm$core$Tuple$mapSecond,
			$elm$core$Platform$Cmd$batch,
			A3(
				$elm$core$List$foldl,
				F2(
					function (f, _v0) {
						var b_ = _v0.a;
						var l_ = _v0.b;
						return A2(
							$elm$core$Tuple$mapSecond,
							function (c_) {
								return A2($elm$core$List$cons, c_, l_);
							},
							A2(f, a, b_));
					}),
				_Utils_Tuple2(b, _List_Nil),
				l));
	});
var $author$project$Main$ApiMsg = F2(
	function (a, b) {
		return {$: 'ApiMsg', a: a, b: b};
	});
var $author$project$Query$Requested = function (a) {
	return {$: 'Requested', a: a};
};
var $author$project$ElmailUrl$Thread = F2(
	function (a, b) {
		return {$: 'Thread', a: a, b: b};
	});
var $elm$core$Basics$composeR = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var $elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $author$project$Main$aggregateSession = A2(
	$elm$core$Basics$composeR,
	function ($) {
		return $.queries;
	},
	A2(
		$elm$core$Basics$composeR,
		$elm$core$List$head,
		$elm$core$Maybe$withDefault(
			{query: $author$project$Query$AnyMessage, user: $elm$core$Maybe$Nothing})));
var $author$project$API$GotAuthors = F2(
	function (a, b) {
		return {$: 'GotAuthors', a: a, b: b};
	});
var $author$project$Notmuch$SearchRequest = F2(
	function (options, query) {
		return {options: options, query: query};
	});
var $author$project$Notmuch$Setting = F2(
	function (a, b) {
		return {$: 'Setting', a: a, b: b};
	});
var $elm$url$Url$Builder$toQueryPair = function (_v0) {
	var key = _v0.a;
	var value = _v0.b;
	return key + ('=' + value);
};
var $elm$url$Url$Builder$toQuery = function (parameters) {
	if (!parameters.b) {
		return '';
	} else {
		return '?' + A2(
			$elm$core$String$join,
			'&',
			A2($elm$core$List$map, $elm$url$Url$Builder$toQueryPair, parameters));
	}
};
var $elm$url$Url$Builder$absolute = F2(
	function (pathSegments, parameters) {
		return '/' + (A2($elm$core$String$join, '/', pathSegments) + $elm$url$Url$Builder$toQuery(parameters));
	});
var $author$project$Query$Present = function (a) {
	return {$: 'Present', a: a};
};
var $author$project$Email$EmailAddress = F2(
	function (local, domain) {
		return {domain: domain, local: local};
	});
var $elm$parser$Parser$Advanced$Bad = F2(
	function (a, b) {
		return {$: 'Bad', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$Good = F3(
	function (a, b, c) {
		return {$: 'Good', a: a, b: b, c: c};
	});
var $elm$parser$Parser$Advanced$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $elm$parser$Parser$Advanced$andThen = F2(
	function (callback, _v0) {
		var parseA = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parseA(s0);
				if (_v1.$ === 'Bad') {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					var _v2 = callback(a);
					var parseB = _v2.a;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var p2 = _v3.a;
						var x = _v3.b;
						return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _v3.a;
						var b = _v3.b;
						var s2 = _v3.c;
						return A3($elm$parser$Parser$Advanced$Good, p1 || p2, b, s2);
					}
				}
			});
	});
var $elm$parser$Parser$andThen = $elm$parser$Parser$Advanced$andThen;
var $elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;
var $elm$core$Basics$negate = function (n) {
	return -n;
};
var $elm$parser$Parser$Advanced$chompWhileHelp = F5(
	function (isGood, offset, row, col, s0) {
		chompWhileHelp:
		while (true) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, s0.src);
			if (_Utils_eq(newOffset, -1)) {
				return A3(
					$elm$parser$Parser$Advanced$Good,
					_Utils_cmp(s0.offset, offset) < 0,
					_Utils_Tuple0,
					{col: col, context: s0.context, indent: s0.indent, offset: offset, row: row, src: s0.src});
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$chompWhile = function (isGood) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A5($elm$parser$Parser$Advanced$chompWhileHelp, isGood, s.offset, s.row, s.col, s);
		});
};
var $elm$parser$Parser$chompWhile = $elm$parser$Parser$Advanced$chompWhile;
var $elm$core$Basics$always = F2(
	function (a, _v0) {
		return a;
	});
var $elm$parser$Parser$Advanced$mapChompedString = F2(
	function (func, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Bad') {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						A2(
							func,
							A3($elm$core$String$slice, s0.offset, s1.offset, s0.src),
							a),
						s1);
				}
			});
	});
var $elm$parser$Parser$Advanced$getChompedString = function (parser) {
	return A2($elm$parser$Parser$Advanced$mapChompedString, $elm$core$Basics$always, parser);
};
var $elm$parser$Parser$getChompedString = $elm$parser$Parser$Advanced$getChompedString;
var $elm$core$Basics$not = _Basics_not;
var $elm$parser$Parser$Problem = function (a) {
	return {$: 'Problem', a: a};
};
var $elm$parser$Parser$Advanced$AddRight = F2(
	function (a, b) {
		return {$: 'AddRight', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$DeadEnd = F4(
	function (row, col, problem, contextStack) {
		return {col: col, contextStack: contextStack, problem: problem, row: row};
	});
var $elm$parser$Parser$Advanced$Empty = {$: 'Empty'};
var $elm$parser$Parser$Advanced$fromState = F2(
	function (s, x) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, s.row, s.col, x, s.context));
	});
var $elm$parser$Parser$Advanced$problem = function (x) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		});
};
var $elm$parser$Parser$problem = function (msg) {
	return $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Problem(msg));
};
var $elm$parser$Parser$Advanced$succeed = function (a) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$Good, false, a, s);
		});
};
var $elm$parser$Parser$succeed = $elm$parser$Parser$Advanced$succeed;
var $author$project$Email$domainPart = function () {
	var checkLen = function (s) {
		return $elm$core$String$isEmpty(s) ? $elm$parser$Parser$problem('domain is empty') : ((!A2($elm$core$String$contains, '.', s)) ? $elm$parser$Parser$problem('domain is not valid') : $elm$parser$Parser$succeed(s));
	};
	return A2(
		$elm$parser$Parser$andThen,
		checkLen,
		$elm$parser$Parser$getChompedString(
			$elm$parser$Parser$chompWhile(
				function (c) {
					return $elm$core$Char$isAlphaNum(c) || (_Utils_eq(
						c,
						_Utils_chr('-')) || _Utils_eq(
						c,
						_Utils_chr('.')));
				})));
}();
var $elm$parser$Parser$Advanced$map2 = F3(
	function (func, _v0, _v1) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v2 = parseA(s0);
				if (_v2.$ === 'Bad') {
					var p = _v2.a;
					var x = _v2.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _v2.a;
					var a = _v2.b;
					var s1 = _v2.c;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var p2 = _v3.a;
						var x = _v3.b;
						return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _v3.a;
						var b = _v3.b;
						var s2 = _v3.c;
						return A3(
							$elm$parser$Parser$Advanced$Good,
							p1 || p2,
							A2(func, a, b),
							s2);
					}
				}
			});
	});
var $elm$parser$Parser$Advanced$ignorer = F2(
	function (keepParser, ignoreParser) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$always, keepParser, ignoreParser);
	});
var $elm$parser$Parser$ignorer = $elm$parser$Parser$Advanced$ignorer;
var $elm$parser$Parser$Advanced$keeper = F2(
	function (parseFunc, parseArg) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$apL, parseFunc, parseArg);
	});
var $elm$parser$Parser$keeper = $elm$parser$Parser$Advanced$keeper;
var $elm$core$String$endsWith = _String_endsWith;
var $elm$core$String$foldl = _String_foldl;
var $author$project$Email$checkLocal = function (str) {
	var isLocalChar = function (c) {
		return $elm$core$Char$isAlphaNum(c) || (_Utils_eq(
			c,
			_Utils_chr('!')) || (_Utils_eq(
			c,
			_Utils_chr('#')) || (_Utils_eq(
			c,
			_Utils_chr('$')) || (_Utils_eq(
			c,
			_Utils_chr('%')) || (_Utils_eq(
			c,
			_Utils_chr('&')) || (_Utils_eq(
			c,
			_Utils_chr('*')) || (_Utils_eq(
			c,
			_Utils_chr('_')) || (_Utils_eq(
			c,
			_Utils_chr('-')) || (_Utils_eq(
			c,
			_Utils_chr('~')) || (_Utils_eq(
			c,
			_Utils_chr('|')) || (_Utils_eq(
			c,
			_Utils_chr('+')) || (_Utils_eq(
			c,
			_Utils_chr('=')) || (_Utils_eq(
			c,
			_Utils_chr('`')) || (_Utils_eq(
			c,
			_Utils_chr('{')) || (_Utils_eq(
			c,
			_Utils_chr('}')) || _Utils_eq(
			c,
			_Utils_chr('.')))))))))))))))));
	};
	return $elm$core$String$isEmpty(str) ? $elm$parser$Parser$problem('local part is empty') : (A2($elm$core$String$startsWith, '.', str) ? $elm$parser$Parser$problem('local part cannot start with .') : (A2($elm$core$String$endsWith, '.', str) ? $elm$parser$Parser$problem('local part cannot end with .') : (A2($elm$core$String$contains, '..', str) ? $elm$parser$Parser$problem('local part cannot contain ..') : (A3(
		$elm$core$String$foldl,
		F2(
			function (c, acc) {
				return acc && isLocalChar(c);
			}),
		true,
		str) ? $elm$parser$Parser$succeed(str) : $elm$parser$Parser$problem('local part contains invalid characters')))));
};
var $elm$parser$Parser$Advanced$findSubString = _Parser_findSubString;
var $elm$parser$Parser$Advanced$fromInfo = F4(
	function (row, col, x, context) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, row, col, x, context));
	});
var $elm$parser$Parser$Advanced$chompUntil = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$findSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A4($elm$parser$Parser$Advanced$fromInfo, newRow, newCol, expecting, s.context)) : A3(
				$elm$parser$Parser$Advanced$Good,
				_Utils_cmp(s.offset, newOffset) < 0,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $elm$parser$Parser$Expecting = function (a) {
	return {$: 'Expecting', a: a};
};
var $elm$parser$Parser$Advanced$Token = F2(
	function (a, b) {
		return {$: 'Token', a: a, b: b};
	});
var $elm$parser$Parser$toToken = function (str) {
	return A2(
		$elm$parser$Parser$Advanced$Token,
		str,
		$elm$parser$Parser$Expecting(str));
};
var $elm$parser$Parser$chompUntil = function (str) {
	return $elm$parser$Parser$Advanced$chompUntil(
		$elm$parser$Parser$toToken(str));
};
var $author$project$Email$localPart = A2(
	$elm$parser$Parser$andThen,
	$author$project$Email$checkLocal,
	$elm$parser$Parser$getChompedString(
		$elm$parser$Parser$chompUntil('@')));
var $elm$parser$Parser$ExpectingSymbol = function (a) {
	return {$: 'ExpectingSymbol', a: a};
};
var $elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;
var $elm$parser$Parser$Advanced$token = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(str);
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$isSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
				$elm$parser$Parser$Advanced$Good,
				progress,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $elm$parser$Parser$Advanced$symbol = $elm$parser$Parser$Advanced$token;
var $elm$parser$Parser$symbol = function (str) {
	return $elm$parser$Parser$Advanced$symbol(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$ExpectingSymbol(str)));
};
var $author$project$Email$emailParser = A2(
	$elm$parser$Parser$keeper,
	A2(
		$elm$parser$Parser$keeper,
		$elm$parser$Parser$succeed($author$project$Email$EmailAddress),
		A2(
			$elm$parser$Parser$ignorer,
			$author$project$Email$localPart,
			$elm$parser$Parser$symbol('@'))),
	$author$project$Email$domainPart);
var $author$project$Person$noname = function (x) {
	return _Utils_update(
		x,
		{
			name: _Utils_eq(
				x.name,
				$elm$core$Maybe$Just('')) ? $elm$core$Maybe$Nothing : x.name
		});
};
var $elm$parser$Parser$DeadEnd = F3(
	function (row, col, problem) {
		return {col: col, problem: problem, row: row};
	});
var $elm$parser$Parser$problemToDeadEnd = function (p) {
	return A3($elm$parser$Parser$DeadEnd, p.row, p.col, p.problem);
};
var $elm$parser$Parser$Advanced$bagToList = F2(
	function (bag, list) {
		bagToList:
		while (true) {
			switch (bag.$) {
				case 'Empty':
					return list;
				case 'AddRight':
					var bag1 = bag.a;
					var x = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$core$List$cons, x, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
				default:
					var bag1 = bag.a;
					var bag2 = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$parser$Parser$Advanced$bagToList, bag2, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
			}
		}
	});
var $elm$parser$Parser$Advanced$run = F2(
	function (_v0, src) {
		var parse = _v0.a;
		var _v1 = parse(
			{col: 1, context: _List_Nil, indent: 1, offset: 0, row: 1, src: src});
		if (_v1.$ === 'Good') {
			var value = _v1.b;
			return $elm$core$Result$Ok(value);
		} else {
			var bag = _v1.b;
			return $elm$core$Result$Err(
				A2($elm$parser$Parser$Advanced$bagToList, bag, _List_Nil));
		}
	});
var $elm$parser$Parser$run = F2(
	function (parser, source) {
		var _v0 = A2($elm$parser$Parser$Advanced$run, parser, source);
		if (_v0.$ === 'Ok') {
			var a = _v0.a;
			return $elm$core$Result$Ok(a);
		} else {
			var problems = _v0.a;
			return $elm$core$Result$Err(
				A2($elm$core$List$map, $elm$parser$Parser$problemToDeadEnd, problems));
		}
	});
var $author$project$Notmuch$authorCount = F3(
	function (n, a, c) {
		var _v0 = A2($elm$parser$Parser$run, $author$project$Email$emailParser, a);
		if (_v0.$ === 'Ok') {
			var e = _v0.a;
			return {
				matching: $author$project$Query$Present(
					$elm$core$Maybe$Just(c)),
				person: $author$project$Person$noname(
					{
						abbrev: $elm$core$Maybe$Nothing,
						mailbox: _List_fromArray(
							[e]),
						name: $elm$core$Maybe$Just(n)
					})
			};
		} else {
			return {
				matching: $author$project$Query$Present(
					$elm$core$Maybe$Just(c)),
				person: $author$project$Person$noname(
					{
						abbrev: $elm$core$Maybe$Nothing,
						mailbox: _List_Nil,
						name: $elm$core$Maybe$Just(a)
					})
			};
		}
	});
var $elm$json$Json$Decode$field = _Json_decodeField;
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $elm$json$Json$Decode$map3 = _Json_map3;
var $elm$json$Json$Decode$string = _Json_decodeString;
var $author$project$Notmuch$authorCountDecoder = A4(
	$elm$json$Json$Decode$map3,
	$author$project$Notmuch$authorCount,
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'address', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'count', $elm$json$Json$Decode$int));
var $elm$json$Json$Decode$decodeString = _Json_runOnString;
var $elm$http$Http$BadStatus_ = F2(
	function (a, b) {
		return {$: 'BadStatus_', a: a, b: b};
	});
var $elm$http$Http$BadUrl_ = function (a) {
	return {$: 'BadUrl_', a: a};
};
var $elm$http$Http$GoodStatus_ = F2(
	function (a, b) {
		return {$: 'GoodStatus_', a: a, b: b};
	});
var $elm$http$Http$NetworkError_ = {$: 'NetworkError_'};
var $elm$http$Http$Receiving = function (a) {
	return {$: 'Receiving', a: a};
};
var $elm$http$Http$Sending = function (a) {
	return {$: 'Sending', a: a};
};
var $elm$http$Http$Timeout_ = {$: 'Timeout_'};
var $elm$core$Dict$RBEmpty_elm_builtin = {$: 'RBEmpty_elm_builtin'};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $elm$core$Maybe$isJust = function (maybe) {
	if (maybe.$ === 'Just') {
		return true;
	} else {
		return false;
	}
};
var $elm$core$Platform$sendToSelf = _Platform_sendToSelf;
var $elm$core$Basics$compare = _Utils_compare;
var $elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1.$) {
					case 'LT':
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 'EQ':
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $elm$core$Dict$Black = {$: 'Black'};
var $elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: 'RBNode_elm_builtin', a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = {$: 'Red'};
var $elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Red')) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) && (left.d.$ === 'RBNode_elm_builtin')) && (left.d.a.$ === 'Red')) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1.$) {
				case 'LT':
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 'EQ':
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.e.d.$ === 'RBNode_elm_builtin') && (dict.e.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				rlK,
				rlV,
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					rlL),
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.d.d.$ === 'RBNode_elm_builtin') && (dict.d.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				lK,
				lV,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					lRight,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
			var _v1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, lRight, right));
		} else {
			_v2$2:
			while (true) {
				if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Black')) {
					if (right.d.$ === 'RBNode_elm_builtin') {
						if (right.d.a.$ === 'Black') {
							var _v3 = right.a;
							var _v4 = right.d;
							var _v5 = _v4.a;
							return $elm$core$Dict$moveRedRight(dict);
						} else {
							break _v2$2;
						}
					} else {
						var _v6 = right.a;
						var _v7 = right.d;
						return $elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _v2$2;
				}
			}
			return dict;
		}
	});
var $elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor.$ === 'Black') {
			if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
				var _v3 = lLeft.a;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					$elm$core$Dict$removeMin(left),
					right);
			} else {
				var _v4 = $elm$core$Dict$moveRedLeft(dict);
				if (_v4.$ === 'RBNode_elm_builtin') {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						$elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				$elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return $elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var $elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Black')) {
					var _v4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
						var _v6 = lLeft.a;
						return A5(
							$elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2($elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _v7 = $elm$core$Dict$moveRedLeft(dict);
						if (_v7.$ === 'RBNode_elm_builtin') {
							var nColor = _v7.a;
							var nKey = _v7.b;
							var nValue = _v7.c;
							var nLeft = _v7.d;
							var nRight = _v7.e;
							return A5(
								$elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2($elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return $elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						$elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2($elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					$elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var $elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBNode_elm_builtin') {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $elm$core$Dict$getMin(right);
				if (_v1.$ === 'RBNode_elm_builtin') {
					var minKey = _v1.b;
					var minValue = _v1.c;
					return A5(
						$elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						$elm$core$Dict$removeMin(right));
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					$elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2($elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var $elm$core$Dict$remove = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($elm$core$Dict$get, targetKey, dictionary));
		if (_v0.$ === 'Just') {
			var value = _v0.a;
			return A3($elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2($elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var $elm$http$Http$expectStringResponse = F2(
	function (toMsg, toResult) {
		return A3(
			_Http_expect,
			'',
			$elm$core$Basics$identity,
			A2($elm$core$Basics$composeR, toResult, toMsg));
	});
var $elm$core$Result$mapError = F2(
	function (f, result) {
		if (result.$ === 'Ok') {
			var v = result.a;
			return $elm$core$Result$Ok(v);
		} else {
			var e = result.a;
			return $elm$core$Result$Err(
				f(e));
		}
	});
var $elm$http$Http$BadBody = function (a) {
	return {$: 'BadBody', a: a};
};
var $elm$http$Http$BadStatus = function (a) {
	return {$: 'BadStatus', a: a};
};
var $elm$http$Http$BadUrl = function (a) {
	return {$: 'BadUrl', a: a};
};
var $elm$http$Http$NetworkError = {$: 'NetworkError'};
var $elm$http$Http$Timeout = {$: 'Timeout'};
var $elm$http$Http$resolve = F2(
	function (toResult, response) {
		switch (response.$) {
			case 'BadUrl_':
				var url = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadUrl(url));
			case 'Timeout_':
				return $elm$core$Result$Err($elm$http$Http$Timeout);
			case 'NetworkError_':
				return $elm$core$Result$Err($elm$http$Http$NetworkError);
			case 'BadStatus_':
				var metadata = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadStatus(metadata.statusCode));
			default:
				var body = response.b;
				return A2(
					$elm$core$Result$mapError,
					$elm$http$Http$BadBody,
					toResult(body));
		}
	});
var $elm$http$Http$expectJson = F2(
	function (toMsg, decoder) {
		return A2(
			$elm$http$Http$expectStringResponse,
			toMsg,
			$elm$http$Http$resolve(
				function (string) {
					return A2(
						$elm$core$Result$mapError,
						$elm$json$Json$Decode$errorToString,
						A2($elm$json$Json$Decode$decodeString, decoder, string));
				}));
	});
var $elm$http$Http$jsonBody = function (value) {
	return A2(
		_Http_pair,
		'application/json',
		A2($elm$json$Json$Encode$encode, 0, value));
};
var $author$project$Query$Not = {$: 'Not'};
var $author$project$Query$Operator = F2(
	function (a, b) {
		return {$: 'Operator', a: a, b: b};
	});
var $author$project$Query$Leaf = function (a) {
	return {$: 'Leaf', a: a};
};
var $author$project$Query$Person = F2(
	function (a, b) {
		return {$: 'Person', a: a, b: b};
	});
var $author$project$Query$Sender = {$: 'Sender'};
var $author$project$Query$from = function (x) {
	return $author$project$Query$Leaf(
		A2($author$project$Query$Person, $author$project$Query$Sender, x));
};
var $author$project$Query$Or = {$: 'Or'};
var $author$project$Query$Participant = {$: 'Participant'};
var $author$project$Query$Recipient = {$: 'Recipient'};
var $author$project$Query$Tag = function (a) {
	return {$: 'Tag', a: a};
};
var $elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var $elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var $elm$parser$Parser$Advanced$backtrackable = function (_v0) {
	var parse = _v0.a;
	return $elm$parser$Parser$Advanced$Parser(
		function (s0) {
			var _v1 = parse(s0);
			if (_v1.$ === 'Bad') {
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, false, x);
			} else {
				var a = _v1.b;
				var s1 = _v1.c;
				return A3($elm$parser$Parser$Advanced$Good, false, a, s1);
			}
		});
};
var $elm$parser$Parser$backtrackable = $elm$parser$Parser$Advanced$backtrackable;
var $elm$parser$Parser$Advanced$chompUntilEndOr = function (str) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v0 = A5(_Parser_findSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v0.a;
			var newRow = _v0.b;
			var newCol = _v0.c;
			var adjustedOffset = (newOffset < 0) ? $elm$core$String$length(s.src) : newOffset;
			return A3(
				$elm$parser$Parser$Advanced$Good,
				_Utils_cmp(s.offset, adjustedOffset) < 0,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: adjustedOffset, row: newRow, src: s.src});
		});
};
var $elm$parser$Parser$chompUntilEndOr = $elm$parser$Parser$Advanced$chompUntilEndOr;
var $author$project$Person$noone = {abbrev: $elm$core$Maybe$Nothing, mailbox: _List_Nil, name: $elm$core$Maybe$Nothing};
var $author$project$Person$emailOnly = function (e) {
	return _Utils_update(
		$author$project$Person$noone,
		{
			mailbox: _List_fromArray(
				[e])
		});
};
var $elm$parser$Parser$Advanced$map = F2(
	function (func, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						func(a),
						s1);
				} else {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				}
			});
	});
var $elm$parser$Parser$map = $elm$parser$Parser$Advanced$map;
var $author$project$Person$nameEmail = F2(
	function (n, e) {
		return $author$project$Person$noname(
			_Utils_update(
				$author$project$Person$noone,
				{
					mailbox: _List_fromArray(
						[e]),
					name: $elm$core$Maybe$Just(n)
				}));
	});
var $elm$parser$Parser$Advanced$loopHelp = F4(
	function (p, state, callback, s0) {
		loopHelp:
		while (true) {
			var _v0 = callback(state);
			var parse = _v0.a;
			var _v1 = parse(s0);
			if (_v1.$ === 'Good') {
				var p1 = _v1.a;
				var step = _v1.b;
				var s1 = _v1.c;
				if (step.$ === 'Loop') {
					var newState = step.a;
					var $temp$p = p || p1,
						$temp$state = newState,
						$temp$callback = callback,
						$temp$s0 = s1;
					p = $temp$p;
					state = $temp$state;
					callback = $temp$callback;
					s0 = $temp$s0;
					continue loopHelp;
				} else {
					var result = step.a;
					return A3($elm$parser$Parser$Advanced$Good, p || p1, result, s1);
				}
			} else {
				var p1 = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p || p1, x);
			}
		}
	});
var $elm$parser$Parser$Advanced$loop = F2(
	function (state, callback) {
		return $elm$parser$Parser$Advanced$Parser(
			function (s) {
				return A4($elm$parser$Parser$Advanced$loopHelp, false, state, callback, s);
			});
	});
var $elm$parser$Parser$Advanced$Done = function (a) {
	return {$: 'Done', a: a};
};
var $elm$parser$Parser$Advanced$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $elm$parser$Parser$toAdvancedStep = function (step) {
	if (step.$ === 'Loop') {
		var s = step.a;
		return $elm$parser$Parser$Advanced$Loop(s);
	} else {
		var a = step.a;
		return $elm$parser$Parser$Advanced$Done(a);
	}
};
var $elm$parser$Parser$loop = F2(
	function (state, callback) {
		return A2(
			$elm$parser$Parser$Advanced$loop,
			state,
			function (s) {
				return A2(
					$elm$parser$Parser$map,
					$elm$parser$Parser$toAdvancedStep,
					callback(s));
			});
	});
var $elm$parser$Parser$Done = function (a) {
	return {$: 'Done', a: a};
};
var $elm$parser$Parser$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $elm$parser$Parser$Advanced$Append = F2(
	function (a, b) {
		return {$: 'Append', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$oneOfHelp = F3(
	function (s0, bag, parsers) {
		oneOfHelp:
		while (true) {
			if (!parsers.b) {
				return A2($elm$parser$Parser$Advanced$Bad, false, bag);
			} else {
				var parse = parsers.a.a;
				var remainingParsers = parsers.b;
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var step = _v1;
					return step;
				} else {
					var step = _v1;
					var p = step.a;
					var x = step.b;
					if (p) {
						return step;
					} else {
						var $temp$s0 = s0,
							$temp$bag = A2($elm$parser$Parser$Advanced$Append, bag, x),
							$temp$parsers = remainingParsers;
						s0 = $temp$s0;
						bag = $temp$bag;
						parsers = $temp$parsers;
						continue oneOfHelp;
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$oneOf = function (parsers) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$oneOfHelp, s, $elm$parser$Parser$Advanced$Empty, parsers);
		});
};
var $elm$parser$Parser$oneOf = $elm$parser$Parser$Advanced$oneOf;
var $elm$parser$Parser$UnexpectedChar = {$: 'UnexpectedChar'};
var $elm$parser$Parser$Advanced$chompIf = F2(
	function (isGood, expecting) {
		return $elm$parser$Parser$Advanced$Parser(
			function (s) {
				var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, s.offset, s.src);
				return _Utils_eq(newOffset, -1) ? A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : (_Utils_eq(newOffset, -2) ? A3(
					$elm$parser$Parser$Advanced$Good,
					true,
					_Utils_Tuple0,
					{col: 1, context: s.context, indent: s.indent, offset: s.offset + 1, row: s.row + 1, src: s.src}) : A3(
					$elm$parser$Parser$Advanced$Good,
					true,
					_Utils_Tuple0,
					{col: s.col + 1, context: s.context, indent: s.indent, offset: newOffset, row: s.row, src: s.src}));
			});
	});
var $elm$parser$Parser$chompIf = function (isGood) {
	return A2($elm$parser$Parser$Advanced$chompIf, isGood, $elm$parser$Parser$UnexpectedChar);
};
var $elm$core$Basics$neq = _Utils_notEqual;
var $author$project$Person$mailLetterspace = function (c) {
	return (!_Utils_eq(
		c,
		_Utils_chr('\n'))) && ((!_Utils_eq(
		c,
		_Utils_chr('<'))) && ((!_Utils_eq(
		c,
		_Utils_chr('>'))) && (!_Utils_eq(
		c,
		_Utils_chr('@')))));
};
var $author$project$Person$mailLetter = function (p) {
	return function (c) {
		return (!_Utils_eq(
			c,
			_Utils_chr(' '))) && ($author$project$Person$mailLetterspace(c) && p(c));
	};
};
var $author$project$Person$parseWord = function (p) {
	return $elm$parser$Parser$getChompedString(
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed($elm$core$Basics$identity),
				$elm$parser$Parser$chompIf(
					$author$project$Person$mailLetter(p))),
			$elm$parser$Parser$chompWhile(
				$author$project$Person$mailLetter(p))));
};
var $elm$parser$Parser$Advanced$spaces = $elm$parser$Parser$Advanced$chompWhile(
	function (c) {
		return _Utils_eq(
			c,
			_Utils_chr(' ')) || (_Utils_eq(
			c,
			_Utils_chr('\n')) || _Utils_eq(
			c,
			_Utils_chr('\r')));
	});
var $elm$parser$Parser$spaces = $elm$parser$Parser$Advanced$spaces;
var $author$project$Person$namePartHelp = F2(
	function (p, revwords) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$succeed(
							function (w) {
								return $elm$parser$Parser$Loop(
									A2($elm$core$List$cons, w, revwords));
							}),
						$elm$parser$Parser$spaces),
					A2(
						$elm$parser$Parser$ignorer,
						$author$project$Person$parseWord(p),
						$elm$parser$Parser$spaces)),
					A2(
					$elm$parser$Parser$map,
					function (_v0) {
						return $elm$parser$Parser$Done(
							$elm$core$List$reverse(revwords));
					},
					$elm$parser$Parser$succeed(_Utils_Tuple0))
				]));
	});
var $author$project$Person$namePart = function (p) {
	return A2(
		$elm$parser$Parser$map,
		$elm$core$String$join(' '),
		A2(
			$elm$parser$Parser$loop,
			_List_Nil,
			$author$project$Person$namePartHelp(p)));
};
var $author$project$Person$partialEmail = function (s) {
	return _Utils_update(
		$author$project$Person$noone,
		{
			name: $elm$core$Maybe$Just(s)
		});
};
var $author$project$Person$parseEmail = function (p) {
	return A2(
		$elm$parser$Parser$map,
		$author$project$Person$noname,
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$backtrackable(
					A2(
						$elm$parser$Parser$map,
						$author$project$Person$noname,
						A2(
							$elm$parser$Parser$keeper,
							A2(
								$elm$parser$Parser$keeper,
								A2(
									$elm$parser$Parser$ignorer,
									$elm$parser$Parser$succeed($author$project$Person$nameEmail),
									$elm$parser$Parser$spaces),
								A2(
									$elm$parser$Parser$ignorer,
									A2(
										$elm$parser$Parser$ignorer,
										A2(
											$elm$parser$Parser$ignorer,
											$elm$parser$Parser$oneOf(
												_List_fromArray(
													[
														A2(
														$elm$parser$Parser$keeper,
														A2(
															$elm$parser$Parser$ignorer,
															$elm$parser$Parser$succeed($elm$core$Basics$identity),
															$elm$parser$Parser$symbol('\'')),
														A2(
															$elm$parser$Parser$ignorer,
															$elm$parser$Parser$getChompedString(
																$elm$parser$Parser$chompUntil('\'')),
															$elm$parser$Parser$symbol('\''))),
														A2(
														$elm$parser$Parser$keeper,
														A2(
															$elm$parser$Parser$ignorer,
															$elm$parser$Parser$succeed($elm$core$Basics$identity),
															$elm$parser$Parser$symbol('\"')),
														A2(
															$elm$parser$Parser$ignorer,
															$elm$parser$Parser$getChompedString(
																$elm$parser$Parser$chompUntil('\"')),
															$elm$parser$Parser$symbol('\"'))),
														A2(
														$elm$parser$Parser$keeper,
														$elm$parser$Parser$succeed($elm$core$Basics$identity),
														$author$project$Person$namePart(p))
													])),
											$elm$parser$Parser$spaces),
										$elm$parser$Parser$symbol('<')),
									$elm$parser$Parser$spaces)),
							A2(
								$elm$parser$Parser$ignorer,
								A2(
									$elm$parser$Parser$ignorer,
									A2($elm$parser$Parser$ignorer, $author$project$Email$emailParser, $elm$parser$Parser$spaces),
									$elm$parser$Parser$symbol('>')),
								$elm$parser$Parser$spaces)))),
					A2($elm$parser$Parser$map, $author$project$Person$emailOnly, $author$project$Email$emailParser),
					A2(
					$elm$parser$Parser$map,
					function (s) {
						return $author$project$Person$partialEmail(s);
					},
					$elm$parser$Parser$getChompedString(
						$elm$parser$Parser$chompUntilEndOr(',')))
				])));
};
var $elm$core$Result$withDefault = F2(
	function (def, result) {
		if (result.$ === 'Ok') {
			var a = result.a;
			return a;
		} else {
			return def;
		}
	});
var $author$project$Person$fromString = function (f) {
	return A2(
		$elm$core$Result$withDefault,
		$author$project$Person$partialEmail(f),
		A2(
			$elm$parser$Parser$run,
			$author$project$Person$parseEmail(
				function (_v0) {
					return true;
				}),
			f));
};
var $author$project$Query$and = function (a) {
	var conds = A2(
		$elm$core$List$filter,
		$elm$core$Basics$neq($author$project$Query$AnyMessage),
		A2($elm$core$List$map, $author$project$Query$simplify, a));
	var never = A2(
		$elm$core$List$any,
		$elm$core$Basics$eq(
			A2(
				$author$project$Query$Operator,
				$author$project$Query$Not,
				_List_fromArray(
					[$author$project$Query$AnyMessage]))),
		conds);
	return never ? A2(
		$author$project$Query$Operator,
		$author$project$Query$Not,
		_List_fromArray(
			[$author$project$Query$AnyMessage])) : A2(
		$author$project$Query$Operator,
		$author$project$Query$And,
		A3(
			$elm$core$List$foldr,
			F2(
				function (c, cs) {
					if ((c.$ === 'Operator') && (c.a.$ === 'And')) {
						var _v25 = c.a;
						var l = c.b;
						return _Utils_ap(l, cs);
					} else {
						return A2($elm$core$List$cons, c, cs);
					}
				}),
			_List_Nil,
			conds));
};
var $author$project$Query$or = function (a) {
	var conds = A2(
		$elm$core$List$filter,
		$elm$core$Basics$neq(
			A2(
				$author$project$Query$Operator,
				$author$project$Query$Not,
				_List_fromArray(
					[$author$project$Query$AnyMessage]))),
		A2($elm$core$List$map, $author$project$Query$simplify, a));
	var alws = A2(
		$elm$core$List$any,
		$elm$core$Basics$eq($author$project$Query$AnyMessage),
		conds);
	return alws ? A2(
		$author$project$Query$Operator,
		$author$project$Query$Not,
		_List_fromArray(
			[$author$project$Query$AnyMessage])) : A2(
		$author$project$Query$Operator,
		$author$project$Query$Or,
		A3(
			$elm$core$List$foldr,
			F2(
				function (c, cs) {
					_v13$2:
					while (true) {
						if (((((cs.b && (cs.a.$ === 'Leaf')) && (cs.a.a.$ === 'Person')) && cs.b.b) && (cs.b.a.$ === 'Leaf')) && (cs.b.a.a.$ === 'Person')) {
							switch (cs.a.a.a.$) {
								case 'Sender':
									if (cs.b.a.a.a.$ === 'Recipient') {
										var _v14 = cs.a.a;
										var _v15 = _v14.a;
										var p1 = _v14.b;
										var _v16 = cs.b;
										var _v17 = _v16.a.a;
										var _v18 = _v17.a;
										var p2 = _v17.b;
										var rest = _v16.b;
										return _Utils_eq(p1, p2) ? A2(
											$elm$core$List$cons,
											$author$project$Query$Leaf(
												A2($author$project$Query$Person, $author$project$Query$Participant, p1)),
											rest) : cs;
									} else {
										break _v13$2;
									}
								case 'Recipient':
									if (cs.b.a.a.a.$ === 'Sender') {
										var _v19 = cs.a.a;
										var _v20 = _v19.a;
										var p1 = _v19.b;
										var _v21 = cs.b;
										var _v22 = _v21.a.a;
										var _v23 = _v22.a;
										var p2 = _v22.b;
										var rest = _v21.b;
										return _Utils_eq(p1, p2) ? A2(
											$elm$core$List$cons,
											$author$project$Query$Leaf(
												A2($author$project$Query$Person, $author$project$Query$Participant, p1)),
											rest) : cs;
									} else {
										break _v13$2;
									}
								default:
									break _v13$2;
							}
						} else {
							break _v13$2;
						}
					}
					return A2($elm$core$List$cons, c, cs);
				}),
			_List_Nil,
			A3(
				$elm$core$List$foldr,
				F2(
					function (c, cs) {
						if ((c.$ === 'Operator') && (c.a.$ === 'Or')) {
							var _v12 = c.a;
							var l = c.b;
							return _Utils_ap(l, cs);
						} else {
							return A2($elm$core$List$cons, c, cs);
						}
					}),
				_List_Nil,
				conds)));
};
var $author$project$Query$simplify = function (x) {
	_v4$7:
	while (true) {
		switch (x.$) {
			case 'Operator':
				switch (x.a.$) {
					case 'And':
						var _v5 = x.a;
						var a = x.b;
						return $author$project$Query$and(a);
					case 'Or':
						var _v6 = x.a;
						var a = x.b;
						return $author$project$Query$or(a);
					case 'Not':
						var _v7 = x.a;
						var a = x.b;
						return $author$project$Query$snot(a);
					default:
						var op = x.a;
						var a = x.b;
						return A2(
							$author$project$Query$Operator,
							op,
							A2($elm$core$List$map, $author$project$Query$simplify, a));
				}
			case 'Leaf':
				if (x.a.$ === 'Prefix') {
					switch (x.a.a) {
						case 'tag':
							var _v8 = x.a;
							var t = _v8.b;
							return $author$project$Query$Leaf(
								$author$project$Query$Tag(t));
						case 'from':
							var _v9 = x.a;
							var t = _v9.b;
							return $author$project$Query$Leaf(
								A2(
									$author$project$Query$Person,
									$author$project$Query$Sender,
									$author$project$Person$fromString(t)));
						case 'to':
							var _v10 = x.a;
							var t = _v10.b;
							return $author$project$Query$Leaf(
								A2(
									$author$project$Query$Person,
									$author$project$Query$Recipient,
									$author$project$Person$fromString(t)));
						default:
							break _v4$7;
					}
				} else {
					break _v4$7;
				}
			default:
				return $author$project$Query$AnyMessage;
		}
	}
	return x;
};
var $author$project$Query$snot = function (a) {
	var _v0 = A2($elm$core$List$map, $author$project$Query$simplify, a);
	if (((((_v0.b && (_v0.a.$ === 'Operator')) && (_v0.a.a.$ === 'Not')) && _v0.a.b.b) && (!_v0.a.b.b.b)) && (!_v0.b.b)) {
		var _v1 = _v0.a;
		var _v2 = _v1.a;
		var _v3 = _v1.b;
		var x = _v3.a;
		return x;
	} else {
		var x = _v0;
		return A2($author$project$Query$Operator, $author$project$Query$Not, x);
	}
};
var $author$project$Query$parens = function (a) {
	return '(' + (a + ')');
};
var $elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var $author$project$Person$queryFromPerson = function (p) {
	return $elm$core$List$isEmpty(p.mailbox) ? _List_fromArray(
		[
			A2($elm$core$Maybe$withDefault, '*', p.name)
		]) : A2(
		$elm$core$List$map,
		function (m) {
			return m.local + ('@' + m.domain);
		},
		p.mailbox);
};
var $author$project$Query$to = function (x) {
	return $author$project$Query$Leaf(
		A2($author$project$Query$Person, $author$project$Query$Recipient, x));
};
var $author$project$Query$childQueryString = F2(
	function (p, c) {
		var cs = $author$project$Query$queryString(c);
		var _v7 = _Utils_Tuple2(p, c);
		_v7$4:
		while (true) {
			switch (_v7.b.$) {
				case 'Leaf':
					if (_v7.b.a.$ === 'Free') {
						return cs;
					} else {
						return cs;
					}
				case 'Operator':
					if (_v7.a.$ === 'Operator') {
						switch (_v7.a.a.$) {
							case 'And':
								if (_v7.b.a.$ === 'And') {
									var _v8 = _v7.a;
									var _v9 = _v8.a;
									var _v10 = _v7.b;
									var _v11 = _v10.a;
									return cs;
								} else {
									break _v7$4;
								}
							case 'Or':
								if (_v7.b.a.$ === 'Or') {
									var _v12 = _v7.a;
									var _v13 = _v12.a;
									var _v14 = _v7.b;
									var _v15 = _v14.a;
									return cs;
								} else {
									break _v7$4;
								}
							default:
								break _v7$4;
						}
					} else {
						break _v7$4;
					}
				default:
					break _v7$4;
			}
		}
		return '(' + (cs + ')');
	});
var $author$project$Query$queryString = function (x) {
	queryString:
	while (true) {
		var cs = $author$project$Query$childQueryString(x);
		switch (x.$) {
			case 'AnyMessage':
				return '*';
			case 'Operator':
				if (!x.b.b) {
					return '*';
				} else {
					var op = x.a;
					var _v1 = x.b;
					var a = _v1.a;
					var bs = _v1.b;
					switch (op.$) {
						case 'ButNot':
							var $temp$x = A2(
								$author$project$Query$Operator,
								$author$project$Query$And,
								_List_fromArray(
									[
										a,
										A2($author$project$Query$Operator, $author$project$Query$Not, bs)
									]));
							x = $temp$x;
							continue queryString;
						case 'Not':
							return 'not (' + (cs(
								$author$project$Query$or(
									A2($elm$core$List$cons, a, bs))) + ')');
						case 'Sequence':
							return A2(
								$elm$core$String$join,
								' ',
								A2(
									$elm$core$List$map,
									cs,
									A2($elm$core$List$cons, a, bs)));
						case 'LeftQuery':
							return cs(a);
						case 'RightQuery':
							return A2(
								$elm$core$String$join,
								' ',
								A2($elm$core$List$map, cs, bs));
						case 'And':
							return A2(
								$elm$core$String$join,
								' and ',
								A2(
									$elm$core$List$map,
									A2($elm$core$Basics$composeR, cs, $author$project$Query$parens),
									A2($elm$core$List$cons, a, bs)));
						case 'Or':
							return A2(
								$elm$core$String$join,
								' or ',
								A2(
									$elm$core$List$map,
									A2($elm$core$Basics$composeR, cs, $author$project$Query$parens),
									A2($elm$core$List$cons, a, bs)));
						default:
							return A2(
								$elm$core$String$join,
								' xor ',
								A2(
									$elm$core$List$map,
									A2($elm$core$Basics$composeR, cs, $author$project$Query$parens),
									A2($elm$core$List$cons, a, bs)));
					}
				}
			default:
				var pq = x.a;
				switch (pq.$) {
					case 'Prefix':
						var p = pq.a;
						var q = pq.b;
						return p + (':' + q);
					case 'Tag':
						var t = pq.a;
						return 'tag:' + t;
					case 'Person':
						switch (pq.a.$) {
							case 'Sender':
								var _v4 = pq.a;
								var t = pq.b;
								return A2(
									$elm$core$String$join,
									' or ',
									A2(
										$elm$core$List$map,
										function (q) {
											return 'from:' + q;
										},
										$author$project$Person$queryFromPerson(t)));
							case 'Recipient':
								var _v5 = pq.a;
								var t = pq.b;
								return A2(
									$elm$core$String$join,
									' or ',
									A2(
										$elm$core$List$map,
										function (q) {
											return 'to:' + q;
										},
										$author$project$Person$queryFromPerson(t)));
							default:
								var _v6 = pq.a;
								var p = pq.b;
								return $author$project$Query$queryString(
									$author$project$Query$from(p)) + (' or ' + $author$project$Query$queryString(
									$author$project$Query$to(p)));
						}
					case 'Free':
						var q = pq.a;
						return q;
					case 'Near':
						var a = pq.a;
						var n = pq.b;
						var b = pq.c;
						return a + (' NEAR/' + ($elm$core$String$fromInt(n) + (' ' + b)));
					case 'Adj':
						var a = pq.a;
						var n = pq.b;
						var b = pq.c;
						return a + (' ADJ/' + ($elm$core$String$fromInt(n) + (' ' + b)));
					default:
						if (pq.a.$ === 'MessageID') {
							var id = pq.a.a;
							return 'id:' + id;
						} else {
							var id = pq.a.a;
							return 'thread:' + id;
						}
				}
		}
	}
};
var $elm$json$Json$Encode$string = _Json_wrap;
var $elm$json$Json$Encode$null = _Json_encodeNull;
var $author$project$API$urloption = function (x) {
	if (x.$ === 'Flag') {
		var f = x.a;
		return _Utils_Tuple2(f, $elm$json$Json$Encode$null);
	} else {
		var k = x.a;
		var v = x.b;
		return _Utils_Tuple2(
			k,
			$elm$json$Json$Encode$string(v));
	}
};
var $author$project$API$juliaSearchQueryParameters = function (x) {
	return A2(
		$elm$core$List$cons,
		_Utils_Tuple2(
			'q',
			$elm$json$Json$Encode$string(
				$author$project$Query$queryString(x.query))),
		A2($elm$core$List$map, $author$project$API$urloption, x.options));
};
var $elm$json$Json$Decode$list = _Json_decodeList;
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(_Utils_Tuple0),
			pairs));
};
var $elm$http$Http$Request = function (a) {
	return {$: 'Request', a: a};
};
var $elm$http$Http$State = F2(
	function (reqs, subs) {
		return {reqs: reqs, subs: subs};
	});
var $elm$http$Http$init = $elm$core$Task$succeed(
	A2($elm$http$Http$State, $elm$core$Dict$empty, _List_Nil));
var $elm$core$Process$kill = _Scheduler_kill;
var $elm$core$Process$spawn = _Scheduler_spawn;
var $elm$http$Http$updateReqs = F3(
	function (router, cmds, reqs) {
		updateReqs:
		while (true) {
			if (!cmds.b) {
				return $elm$core$Task$succeed(reqs);
			} else {
				var cmd = cmds.a;
				var otherCmds = cmds.b;
				if (cmd.$ === 'Cancel') {
					var tracker = cmd.a;
					var _v2 = A2($elm$core$Dict$get, tracker, reqs);
					if (_v2.$ === 'Nothing') {
						var $temp$router = router,
							$temp$cmds = otherCmds,
							$temp$reqs = reqs;
						router = $temp$router;
						cmds = $temp$cmds;
						reqs = $temp$reqs;
						continue updateReqs;
					} else {
						var pid = _v2.a;
						return A2(
							$elm$core$Task$andThen,
							function (_v3) {
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A2($elm$core$Dict$remove, tracker, reqs));
							},
							$elm$core$Process$kill(pid));
					}
				} else {
					var req = cmd.a;
					return A2(
						$elm$core$Task$andThen,
						function (pid) {
							var _v4 = req.tracker;
							if (_v4.$ === 'Nothing') {
								return A3($elm$http$Http$updateReqs, router, otherCmds, reqs);
							} else {
								var tracker = _v4.a;
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A3($elm$core$Dict$insert, tracker, pid, reqs));
							}
						},
						$elm$core$Process$spawn(
							A3(
								_Http_toTask,
								router,
								$elm$core$Platform$sendToApp(router),
								req)));
				}
			}
		}
	});
var $elm$http$Http$onEffects = F4(
	function (router, cmds, subs, state) {
		return A2(
			$elm$core$Task$andThen,
			function (reqs) {
				return $elm$core$Task$succeed(
					A2($elm$http$Http$State, reqs, subs));
			},
			A3($elm$http$Http$updateReqs, router, cmds, state.reqs));
	});
var $elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _v0 = f(mx);
		if (_v0.$ === 'Just') {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			$elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var $elm$http$Http$maybeSend = F4(
	function (router, desiredTracker, progress, _v0) {
		var actualTracker = _v0.a;
		var toMsg = _v0.b;
		return _Utils_eq(desiredTracker, actualTracker) ? $elm$core$Maybe$Just(
			A2(
				$elm$core$Platform$sendToApp,
				router,
				toMsg(progress))) : $elm$core$Maybe$Nothing;
	});
var $elm$http$Http$onSelfMsg = F3(
	function (router, _v0, state) {
		var tracker = _v0.a;
		var progress = _v0.b;
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$filterMap,
					A3($elm$http$Http$maybeSend, router, tracker, progress),
					state.subs)));
	});
var $elm$http$Http$Cancel = function (a) {
	return {$: 'Cancel', a: a};
};
var $elm$http$Http$cmdMap = F2(
	function (func, cmd) {
		if (cmd.$ === 'Cancel') {
			var tracker = cmd.a;
			return $elm$http$Http$Cancel(tracker);
		} else {
			var r = cmd.a;
			return $elm$http$Http$Request(
				{
					allowCookiesFromOtherDomains: r.allowCookiesFromOtherDomains,
					body: r.body,
					expect: A2(_Http_mapExpect, func, r.expect),
					headers: r.headers,
					method: r.method,
					timeout: r.timeout,
					tracker: r.tracker,
					url: r.url
				});
		}
	});
var $elm$http$Http$MySub = F2(
	function (a, b) {
		return {$: 'MySub', a: a, b: b};
	});
var $elm$http$Http$subMap = F2(
	function (func, _v0) {
		var tracker = _v0.a;
		var toMsg = _v0.b;
		return A2(
			$elm$http$Http$MySub,
			tracker,
			A2($elm$core$Basics$composeR, toMsg, func));
	});
_Platform_effectManagers['Http'] = _Platform_createManager($elm$http$Http$init, $elm$http$Http$onEffects, $elm$http$Http$onSelfMsg, $elm$http$Http$cmdMap, $elm$http$Http$subMap);
var $elm$http$Http$command = _Platform_leaf('Http');
var $elm$http$Http$subscription = _Platform_leaf('Http');
var $elm$http$Http$request = function (r) {
	return $elm$http$Http$command(
		$elm$http$Http$Request(
			{allowCookiesFromOtherDomains: false, body: r.body, expect: r.expect, headers: r.headers, method: r.method, timeout: r.timeout, tracker: r.tracker, url: r.url}));
};
var $elm$http$Http$post = function (r) {
	return $elm$http$Http$request(
		{body: r.body, expect: r.expect, headers: _List_Nil, method: 'POST', timeout: $elm$core$Maybe$Nothing, tracker: $elm$core$Maybe$Nothing, url: r.url});
};
var $author$project$API$server = {host: 'http://127.0.0.11:9999', payment_confirmation: 'payment_confirmed', search: 'search?', secret: 'secret'};
var $elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$API$withSession = F2(
	function (s, l) {
		return A2(
			$elm$core$List$cons,
			_Utils_Tuple2(
				'user',
				A2(
					$elm$core$Maybe$withDefault,
					$elm$json$Json$Encode$null,
					A2(
						$elm$core$Maybe$map,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.login;
							},
							$elm$json$Json$Encode$string),
						s.user))),
			l);
	});
var $author$project$API$authorsCountsQuery = F2(
	function (session, output) {
		return $elm$http$Http$post(
			{
				body: $elm$http$Http$jsonBody(
					$elm$json$Json$Encode$object(
						A2(
							$author$project$API$withSession,
							session,
							$author$project$API$juliaSearchQueryParameters(
								A2(
									$author$project$Notmuch$SearchRequest,
									_List_fromArray(
										[
											A2($author$project$Notmuch$Setting, 'output', output),
											A2($author$project$Notmuch$Setting, 'deduplicate', 'address')
										]),
									session.query))))),
				expect: A2(
					$elm$http$Http$expectJson,
					$author$project$API$GotAuthors(session),
					A2(
						$elm$json$Json$Decode$field,
						'address',
						$elm$json$Json$Decode$list($author$project$Notmuch$authorCountDecoder))),
				url: _Utils_ap(
					$author$project$API$server.host,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							['json/address']),
						_List_Nil))
			});
	});
var $author$project$Main$collectCmds = F3(
	function (f, a, _v0) {
		var marked = _v0.a;
		var cmdacc = _v0.b;
		var _v1 = f.get(a);
		if (_v1.$ === 'Request') {
			var n = _v1.a;
			return _Utils_Tuple2(
				A2(
					$elm$core$List$cons,
					A2(
						f.set,
						$author$project$Query$Requested(n),
						a),
					marked),
				A2($elm$core$List$cons, a, cmdacc));
		} else {
			return _Utils_Tuple2(
				A2($elm$core$List$cons, a, marked),
				cmdacc);
		}
	});
var $author$project$Main$cmdAccList = F4(
	function (acl, acc, msgf, ns) {
		var _v0 = A3(
			$elm$core$List$foldr,
			$author$project$Main$collectCmds(acc),
			_Utils_Tuple2(_List_Nil, _List_Nil),
			acl.get(ns));
		var subqueries = _v0.a;
		var cmd = _v0.b;
		return _Utils_Tuple2(
			A2(acl.set, subqueries, ns),
			msgf(cmd));
	});
var $elm$core$Platform$Cmd$map = _Platform_map;
var $elm$core$Tuple$mapFirst = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			func(x),
			y);
	});
var $author$project$Access$matching = {
	get: function ($) {
		return $.matching;
	},
	set: F2(
		function (value, h) {
			return _Utils_update(
				h,
				{matching: value});
		})
};
var $author$project$API$GotCounts = F3(
	function (a, b, c) {
		return {$: 'GotCounts', a: a, b: b, c: c};
	});
var $elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(_Utils_Tuple0),
				entries));
	});
var $author$project$API$messageCountQuery = F2(
	function (session, ts) {
		return $elm$http$Http$post(
			{
				body: $elm$http$Http$jsonBody(
					$elm$json$Json$Encode$object(
						A2(
							$author$project$API$withSession,
							session,
							_List_fromArray(
								[
									_Utils_Tuple2(
									'base_query',
									$elm$json$Json$Encode$string(
										$author$project$Query$queryString(session.query))),
									_Utils_Tuple2(
									'sub_queries',
									A2(
										$elm$json$Json$Encode$list,
										$elm$json$Json$Encode$string,
										A2($elm$core$List$map, $author$project$Query$queryString, ts)))
								])))),
				expect: A2(
					$elm$http$Http$expectJson,
					A2($author$project$API$GotCounts, session, ts),
					$elm$json$Json$Decode$list($elm$json$Json$Decode$int)),
				url: _Utils_ap(
					$author$project$API$server.host,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							['json/count']),
						_List_Nil))
			});
	});
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $author$project$Main$messageCountSubQueries = F2(
	function (session, ts) {
		if (!ts.b) {
			return $elm$core$Platform$Cmd$none;
		} else {
			return A2($author$project$API$messageCountQuery, session, ts);
		}
	});
var $author$project$Main$queryFromTagChange = function (tag) {
	return _List_fromArray(
		[
			$author$project$Query$Leaf(
			$author$project$Query$Tag(tag)),
			A2(
			$author$project$Query$Operator,
			$author$project$Query$Not,
			_List_fromArray(
				[
					$author$project$Query$Leaf(
					$author$project$Query$Tag(tag))
				]))
		]);
};
var $author$project$Query$requestNow = function (x) {
	if (x.$ === 'Request') {
		var s = x.a;
		return _Utils_Tuple2(
			true,
			$author$project$Query$Requested(s));
	} else {
		return _Utils_Tuple2(false, x);
	}
};
var $elm$core$Tuple$second = function (_v0) {
	var y = _v0.b;
	return y;
};
var $author$project$Access$subqueries = {
	get: function ($) {
		return $.subqueries;
	},
	set: F2(
		function (value, h) {
			return _Utils_update(
				h,
				{subqueries: value});
		})
};
var $author$project$Main$cmdCount = F2(
	function (pa, x) {
		var session = $author$project$Main$aggregateSession(pa);
		var subQueriesMatchingCommand = A3(
			$author$project$Main$cmdAccList,
			$author$project$Access$subqueries,
			$author$project$Access$matching,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$List$map(
					function ($) {
						return $.subquery;
					}),
				$author$project$Main$messageCountSubQueries(session)));
		var requestCountPost = F2(
			function (sq, ns) {
				if (ns.$ === 'Request') {
					var n = ns.a;
					return _Utils_Tuple2(
						$author$project$Query$Requested(n),
						A2($author$project$API$messageCountQuery, session, sq));
				} else {
					return _Utils_Tuple2(ns, $elm$core$Platform$Cmd$none);
				}
			});
		var tagchangesCommand = function (y) {
			return function (l) {
				return _Utils_Tuple2(
					_Utils_update(
						y,
						{
							tagchanges: A2($elm$core$List$map, $elm$core$Tuple$first, l)
						}),
					$elm$core$Platform$Cmd$batch(
						A2($elm$core$List$map, $elm$core$Tuple$second, l)));
			}(
				A2(
					$elm$core$List$map,
					function (tc) {
						return A2(
							$elm$core$Tuple$mapFirst,
							function (m) {
								return _Utils_update(
									tc,
									{matching: m});
							},
							A2(
								requestCountPost,
								$author$project$Main$queryFromTagChange(tc.tagchange),
								tc.matching));
					},
					y.tagchanges));
		};
		_v0$2:
		while (true) {
			if (x.$ === 'Just') {
				switch (x.a.b.$) {
					case 'Search':
						var _v1 = x.a;
						var m = _v1.a;
						var _v2 = _v1.b;
						var d = _v2.a;
						var ns = _v2.b;
						var _v3 = subQueriesMatchingCommand(d);
						var d_ = _v3.a;
						var c_subquerycounts = _v3.b;
						var _v4 = tagchangesCommand(d_);
						var d_tagcounts = _v4.a;
						var c_tagcounts = _v4.b;
						var _v5 = A2(requestCountPost, _List_Nil, d.matching);
						var matching_ = _v5.a;
						var c_matching = _v5.b;
						return _Utils_Tuple2(
							$elm$core$Maybe$Just(
								_Utils_Tuple2(
									m,
									A2(
										$author$project$ElmailUrl$Search,
										_Utils_update(
											d_tagcounts,
											{matching: matching_}),
										ns))),
							A2(
								$elm$core$Platform$Cmd$map,
								$author$project$Main$ApiMsg($elm$core$Platform$Cmd$none),
								$elm$core$Platform$Cmd$batch(
									_List_fromArray(
										[c_matching, c_subquerycounts, c_tagcounts]))));
					case 'Thread':
						var _v6 = x.a;
						var m = _v6.a;
						var _v7 = _v6.b;
						var d = _v7.a;
						var t = _v7.b;
						var _v8 = tagchangesCommand(d);
						var d_ = _v8.a;
						var tccmd = _v8.b;
						var _v9 = A2(requestCountPost, _List_Nil, t);
						var t_ = _v9.a;
						var mcmd = _v9.b;
						var _v10 = function () {
							var _v11 = $author$project$Query$requestNow(d_.authors);
							if (_v11.a) {
								var n = _v11.b;
								return _Utils_Tuple2(
									A2(
										$author$project$ElmailUrl$Thread,
										_Utils_update(
											d_,
											{authors: n}),
										t_),
									A2(
										$author$project$API$authorsCountsQuery,
										$author$project$Main$aggregateSession(pa),
										'count'));
							} else {
								return _Utils_Tuple2(
									A2($author$project$ElmailUrl$Thread, d_, t_),
									$elm$core$Platform$Cmd$none);
							}
						}();
						var x__ = _v10.a;
						var authors = _v10.b;
						return _Utils_Tuple2(
							$elm$core$Maybe$Just(
								_Utils_Tuple2(m, x__)),
							A2(
								$elm$core$Platform$Cmd$map,
								$author$project$Main$ApiMsg($elm$core$Platform$Cmd$none),
								$elm$core$Platform$Cmd$batch(
									_List_fromArray(
										[tccmd, mcmd, authors]))));
					default:
						break _v0$2;
				}
			} else {
				break _v0$2;
			}
		}
		return _Utils_Tuple2(x, $elm$core$Platform$Cmd$none);
	});
var $author$project$ElmailUrl$Draft = F2(
	function (a, b) {
		return {$: 'Draft', a: a, b: b};
	});
var $author$project$ElmailUrl$Email = F2(
	function (a, b) {
		return {$: 'Email', a: a, b: b};
	});
var $author$project$Main$aggregateQuery = A2(
	$elm$core$Basics$composeR,
	function ($) {
		return $.queries;
	},
	A2(
		$elm$core$Basics$composeR,
		$elm$core$List$head,
		A2(
			$elm$core$Basics$composeR,
			$elm$core$Maybe$map(
				function ($) {
					return $.query;
				}),
			$elm$core$Maybe$withDefault($author$project$Query$AnyMessage))));
var $author$project$Query$queryable = function (x) {
	switch (x.$) {
		case 'Present':
			var y = x.a;
			return y;
		case 'Request':
			var y = x.a;
			return y;
		default:
			var y = x.a;
			return y;
	}
};
var $author$project$API$GotThreads = F3(
	function (a, b, c) {
		return {$: 'GotThreads', a: a, b: b, c: c};
	});
var $elm$json$Json$Encode$int = _Json_wrap;
var $elm$core$Debug$log = _Debug_log;
var $author$project$Notmuch$Time = F2(
	function (date_relative, timestamp) {
		return {date_relative: date_relative, timestamp: timestamp};
	});
var $elm$json$Json$Decode$map8 = _Json_map8;
var $elm$time$Time$Posix = function (a) {
	return {$: 'Posix', a: a};
};
var $elm$time$Time$millisToPosix = $elm$time$Time$Posix;
var $elm$json$Json$Decode$null = _Json_decodeNull;
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
		}
	});
var $elm$core$List$concat = function (lists) {
	return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
};
var $elm$core$String$trim = _String_trim;
var $author$project$Notmuch$splitAuthorsString = function (s) {
	return A2(
		$elm$core$List$map,
		A2($elm$core$Basics$composeR, $elm$core$String$trim, $author$project$Person$fromString),
		$elm$core$List$concat(
			A2(
				$elm$core$List$map,
				$elm$core$String$split(','),
				A2($elm$core$String$split, '|', s))));
};
var $author$project$Notmuch$threadMatch = F8(
	function (thread_id, time, authors, subject, tags, matching, total, q) {
		return {authors: authors, matching: matching, query: q, subject: subject, tags: tags, thread_id: thread_id, time: time, total: total};
	});
var $author$project$Notmuch$threadDecoder = A9(
	$elm$json$Json$Decode$map8,
	$author$project$Notmuch$threadMatch,
	A2($elm$json$Json$Decode$field, 'thread', $elm$json$Json$Decode$string),
	A3(
		$elm$json$Json$Decode$map2,
		$author$project$Notmuch$Time,
		A2($elm$json$Json$Decode$field, 'date_relative', $elm$json$Json$Decode$string),
		A2(
			$elm$json$Json$Decode$map,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$Basics$mul(1000),
				$elm$time$Time$millisToPosix),
			A2($elm$json$Json$Decode$field, 'timestamp', $elm$json$Json$Decode$int))),
	A2(
		$elm$json$Json$Decode$map,
		$author$project$Notmuch$splitAuthorsString,
		A2($elm$json$Json$Decode$field, 'authors', $elm$json$Json$Decode$string)),
	A2($elm$json$Json$Decode$field, 'subject', $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$field,
		'tags',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
	A2($elm$json$Json$Decode$field, 'matched', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'total', $elm$json$Json$Decode$int),
	A2(
		$elm$json$Json$Decode$field,
		'query',
		$elm$json$Json$Decode$list(
			A2(
				$elm$json$Json$Decode$map,
				$elm$core$String$split(' '),
				$elm$json$Json$Decode$oneOf(
					_List_fromArray(
						[
							$elm$json$Json$Decode$string,
							$elm$json$Json$Decode$null('')
						]))))));
var $author$project$API$searchQuery = F2(
	function (session, _v0) {
		var offset = _v0.a;
		var limit = _v0.b;
		return $elm$http$Http$post(
			{
				body: $elm$http$Http$jsonBody(
					$elm$json$Json$Encode$object(
						A2(
							$author$project$API$withSession,
							session,
							_List_fromArray(
								[
									_Utils_Tuple2(
									'q',
									$elm$json$Json$Encode$string(
										A2(
											$elm$core$Debug$log,
											'search',
											$author$project$Query$queryString(session.query)))),
									_Utils_Tuple2(
									'offset',
									$elm$json$Json$Encode$int(offset)),
									_Utils_Tuple2(
									'limit',
									$elm$json$Json$Encode$int(limit))
								])))),
				expect: A2(
					$elm$http$Http$expectJson,
					A2(
						$author$project$API$GotThreads,
						session,
						_Utils_Tuple2(offset, limit)),
					$elm$json$Json$Decode$list($author$project$Notmuch$threadDecoder)),
				url: _Utils_ap(
					$author$project$API$server.host,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							['json/search']),
						_List_Nil))
			});
	});
var $author$project$ElmailUrl$settings = {
	delay: 500,
	delay_long: 10000,
	max_auto_show: 5,
	me: {
		abbrev: $elm$core$Maybe$Just('me'),
		mailbox: _List_fromArray(
			[
				{domain: 'g-kappler.de', local: 'mail'}
			]),
		name: $elm$core$Maybe$Just('Gregor Kappler')
	},
	skipQueryAuthourCounts: false,
	thread_page_size: 10
};
var $author$project$API$GotShow = F4(
	function (a, b, c, d) {
		return {$: 'GotShow', a: a, b: b, c: c, d: d};
	});
var $author$project$Notmuch$settingBool = F2(
	function (flag, val) {
		return A2(
			$author$project$Notmuch$Setting,
			flag,
			val ? 'true' : 'false');
	});
var $author$project$API$Children = function (a) {
	return {$: 'Children', a: a};
};
var $author$project$API$Mail = function (a) {
	return {$: 'Mail', a: a};
};
var $author$project$Notmuch$Body = {$: 'Body'};
var $author$project$Notmuch$Email = F8(
	function (id, time, header, content, tags, filename, match, excluded) {
		return {content: content, excluded: excluded, filename: filename, header: header, id: id, match: match, tags: tags, time: time};
	});
var $author$project$Notmuch$MultiPart = F3(
	function (a, b, c) {
		return {$: 'MultiPart', a: a, b: b, c: c};
	});
var $author$project$Notmuch$PlainMime = function (a) {
	return {$: 'PlainMime', a: a};
};
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $elm$json$Json$Decode$lazy = function (thunk) {
	return A2(
		$elm$json$Json$Decode$andThen,
		thunk,
		$elm$json$Json$Decode$succeed(_Utils_Tuple0));
};
var $elm$json$Json$Decode$map4 = _Json_map4;
var $elm$json$Json$Decode$map5 = _Json_map5;
var $elm$json$Json$Decode$maybe = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder),
				$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing)
			]));
};
var $author$project$Notmuch$DownloadMime = function (a) {
	return {$: 'DownloadMime', a: a};
};
var $author$project$Notmuch$MimePart = F2(
	function (a, b) {
		return {$: 'MimePart', a: a, b: b};
	});
var $author$project$Notmuch$mimePartDownload = F5(
	function (id, ct, cd, f, cl) {
		return A2(
			$author$project$Notmuch$MimePart,
			id,
			$author$project$Notmuch$DownloadMime(
				{
					content: $elm$core$Maybe$Nothing,
					disposition: $elm$core$Maybe$Just(cd),
					filename: $elm$core$Maybe$Just(f),
					length: $elm$core$Maybe$Just(cl),
					mime: ct
				}));
	});
var $author$project$Notmuch$Alternative = function (a) {
	return {$: 'Alternative', a: a};
};
var $author$project$Notmuch$Content = function (a) {
	return {$: 'Content', a: a};
};
var $author$project$Notmuch$multiPart = F3(
	function (id, contentType, parts) {
		if (contentType === 'multipart/alternative') {
			var iifHtml = F2(
				function (i, x) {
					if ((x.$ === 'MimePart') && (x.b.$ === 'HtmlMime')) {
						return $elm$core$Maybe$Just(i);
					} else {
						return $elm$core$Maybe$Nothing;
					}
				});
			var d = A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$List$head(
					A2(
						$elm$core$List$filterMap,
						$elm$core$Basics$identity,
						A2($elm$core$List$indexedMap, iifHtml, parts))));
			return A3(
				$author$project$Notmuch$MultiPart,
				id,
				$author$project$Notmuch$Alternative(
					{display: d}),
				parts);
		} else {
			return A3(
				$author$project$Notmuch$MultiPart,
				id,
				$author$project$Notmuch$Content(
					{contentType: contentType}),
				parts);
		}
	});
var $author$project$Notmuch$HtmlMime = function (a) {
	return {$: 'HtmlMime', a: a};
};
var $hecrj$html_parser$Html$Parser$Element = F3(
	function (a, b, c) {
		return {$: 'Element', a: a, b: b, c: c};
	});
var $author$project$Notmuch$filterBlockQuotes = function (x) {
	return A2(
		$elm$core$List$filterMap,
		function (e) {
			if (e.$ === 'Element') {
				switch (e.a) {
					case 'blockquote':
						return $elm$core$Maybe$Nothing;
					case 'head':
						return $elm$core$Maybe$Nothing;
					case 'body':
						var a = e.b;
						var c = e.c;
						return $elm$core$Maybe$Just(
							A3(
								$hecrj$html_parser$Html$Parser$Element,
								'div',
								a,
								$author$project$Notmuch$filterBlockQuotes(c)));
					case 'html':
						var a = e.b;
						var c = e.c;
						return $elm$core$Maybe$Just(
							A3(
								$hecrj$html_parser$Html$Parser$Element,
								'div',
								a,
								$author$project$Notmuch$filterBlockQuotes(c)));
					default:
						var n = e.a;
						var a = e.b;
						var c = e.c;
						return A2(
							$elm$core$List$any,
							function (b) {
								return _Utils_eq(
									b,
									_Utils_Tuple2('class', 'gmail_quote'));
							},
							a) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
							A3(
								$hecrj$html_parser$Html$Parser$Element,
								n,
								a,
								$author$project$Notmuch$filterBlockQuotes(c)));
				}
			} else {
				return $elm$core$Maybe$Just(e);
			}
		},
		x);
};
var $hecrj$html_parser$Html$Parser$chompOneOrMore = function (fn) {
	return A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$chompIf(fn),
		$elm$parser$Parser$chompWhile(fn));
};
var $hecrj$html_parser$Html$Parser$isSpaceCharacter = function (c) {
	return _Utils_eq(
		c,
		_Utils_chr(' ')) || (_Utils_eq(
		c,
		_Utils_chr('\t')) || (_Utils_eq(
		c,
		_Utils_chr('\n')) || (_Utils_eq(
		c,
		_Utils_chr('\u000D')) || (_Utils_eq(
		c,
		_Utils_chr('\u000C')) || _Utils_eq(
		c,
		_Utils_chr('\u00A0'))))));
};
var $elm$core$String$toLower = _String_toLower;
var $hecrj$html_parser$Html$Parser$closingTag = function (name) {
	var chompName = A2(
		$elm$parser$Parser$andThen,
		function (closingName) {
			return _Utils_eq(
				$elm$core$String$toLower(closingName),
				name) ? $elm$parser$Parser$succeed(_Utils_Tuple0) : $elm$parser$Parser$problem('closing tag does not match opening tag: ' + name);
		},
		$elm$parser$Parser$getChompedString(
			$hecrj$html_parser$Html$Parser$chompOneOrMore(
				function (c) {
					return (!$hecrj$html_parser$Html$Parser$isSpaceCharacter(c)) && (!_Utils_eq(
						c,
						_Utils_chr('>')));
				})));
	return A2(
		$elm$parser$Parser$ignorer,
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$chompIf(
						$elm$core$Basics$eq(
							_Utils_chr('<'))),
					$elm$parser$Parser$chompIf(
						$elm$core$Basics$eq(
							_Utils_chr('/')))),
				chompName),
			$elm$parser$Parser$chompWhile($hecrj$html_parser$Html$Parser$isSpaceCharacter)),
		$elm$parser$Parser$chompIf(
			$elm$core$Basics$eq(
				_Utils_chr('>'))));
};
var $hecrj$html_parser$Html$Parser$Comment = function (a) {
	return {$: 'Comment', a: a};
};
var $elm$parser$Parser$token = function (str) {
	return $elm$parser$Parser$Advanced$token(
		$elm$parser$Parser$toToken(str));
};
var $hecrj$html_parser$Html$Parser$commentString = A2(
	$elm$parser$Parser$keeper,
	A2(
		$elm$parser$Parser$ignorer,
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$token('<!')),
		$elm$parser$Parser$token('--')),
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$getChompedString(
			$elm$parser$Parser$chompUntil('-->')),
		$elm$parser$Parser$token('-->')));
var $hecrj$html_parser$Html$Parser$comment = A2($elm$parser$Parser$map, $hecrj$html_parser$Html$Parser$Comment, $hecrj$html_parser$Html$Parser$commentString);
var $elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var $hecrj$html_parser$Html$Parser$voidElements = _List_fromArray(
	['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'link', 'meta', 'param', 'source', 'track', 'wbr']);
var $hecrj$html_parser$Html$Parser$isVoidElement = function (name) {
	return A2($elm$core$List$member, name, $hecrj$html_parser$Html$Parser$voidElements);
};
var $hecrj$html_parser$Html$Parser$many = function (parser_) {
	return A2(
		$elm$parser$Parser$loop,
		_List_Nil,
		function (list) {
			return $elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$parser$Parser$map,
						function (_new) {
							return $elm$parser$Parser$Loop(
								A2($elm$core$List$cons, _new, list));
						},
						parser_),
						$elm$parser$Parser$succeed(
						$elm$parser$Parser$Done(
							$elm$core$List$reverse(list)))
					]));
		});
};
var $elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var $hecrj$html_parser$Html$Parser$isTagAttributeCharacter = function (c) {
	return (!$hecrj$html_parser$Html$Parser$isSpaceCharacter(c)) && ((!_Utils_eq(
		c,
		_Utils_chr('\"'))) && ((!_Utils_eq(
		c,
		_Utils_chr('\''))) && ((!_Utils_eq(
		c,
		_Utils_chr('>'))) && ((!_Utils_eq(
		c,
		_Utils_chr('/'))) && (!_Utils_eq(
		c,
		_Utils_chr('=')))))));
};
var $hecrj$html_parser$Html$Parser$tagAttributeName = A2(
	$elm$parser$Parser$map,
	$elm$core$String$toLower,
	$elm$parser$Parser$getChompedString(
		$hecrj$html_parser$Html$Parser$chompOneOrMore($hecrj$html_parser$Html$Parser$isTagAttributeCharacter)));
var $hecrj$html_parser$Html$Parser$chompSemicolon = $elm$parser$Parser$chompIf(
	$elm$core$Basics$eq(
		_Utils_chr(';')));
var $elm$core$Dict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($elm$core$Dict$insert, key, value, dict);
			}),
		$elm$core$Dict$empty,
		assocs);
};
var $hecrj$html_parser$Html$Parser$NamedCharacterReferences$dict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('Aacute', 'Á'),
			_Utils_Tuple2('aacute', 'á'),
			_Utils_Tuple2('Abreve', 'Ă'),
			_Utils_Tuple2('abreve', 'ă'),
			_Utils_Tuple2('ac', '∾'),
			_Utils_Tuple2('acd', '∿'),
			_Utils_Tuple2('acE', '∾̳'),
			_Utils_Tuple2('Acirc', 'Â'),
			_Utils_Tuple2('acirc', 'â'),
			_Utils_Tuple2('acute', '´'),
			_Utils_Tuple2('Acy', 'А'),
			_Utils_Tuple2('acy', 'а'),
			_Utils_Tuple2('AElig', 'Æ'),
			_Utils_Tuple2('aelig', 'æ'),
			_Utils_Tuple2('af', '\u2061'),
			_Utils_Tuple2('Afr', '\uD835\uDD04'),
			_Utils_Tuple2('afr', '\uD835\uDD1E'),
			_Utils_Tuple2('Agrave', 'À'),
			_Utils_Tuple2('agrave', 'à'),
			_Utils_Tuple2('alefsym', 'ℵ'),
			_Utils_Tuple2('aleph', 'ℵ'),
			_Utils_Tuple2('Alpha', 'Α'),
			_Utils_Tuple2('alpha', 'α'),
			_Utils_Tuple2('Amacr', 'Ā'),
			_Utils_Tuple2('amacr', 'ā'),
			_Utils_Tuple2('amalg', '⨿'),
			_Utils_Tuple2('amp', '&'),
			_Utils_Tuple2('AMP', '&'),
			_Utils_Tuple2('andand', '⩕'),
			_Utils_Tuple2('And', '⩓'),
			_Utils_Tuple2('and', '∧'),
			_Utils_Tuple2('andd', '⩜'),
			_Utils_Tuple2('andslope', '⩘'),
			_Utils_Tuple2('andv', '⩚'),
			_Utils_Tuple2('ang', '∠'),
			_Utils_Tuple2('ange', '⦤'),
			_Utils_Tuple2('angle', '∠'),
			_Utils_Tuple2('angmsdaa', '⦨'),
			_Utils_Tuple2('angmsdab', '⦩'),
			_Utils_Tuple2('angmsdac', '⦪'),
			_Utils_Tuple2('angmsdad', '⦫'),
			_Utils_Tuple2('angmsdae', '⦬'),
			_Utils_Tuple2('angmsdaf', '⦭'),
			_Utils_Tuple2('angmsdag', '⦮'),
			_Utils_Tuple2('angmsdah', '⦯'),
			_Utils_Tuple2('angmsd', '∡'),
			_Utils_Tuple2('angrt', '∟'),
			_Utils_Tuple2('angrtvb', '⊾'),
			_Utils_Tuple2('angrtvbd', '⦝'),
			_Utils_Tuple2('angsph', '∢'),
			_Utils_Tuple2('angst', 'Å'),
			_Utils_Tuple2('angzarr', '⍼'),
			_Utils_Tuple2('Aogon', 'Ą'),
			_Utils_Tuple2('aogon', 'ą'),
			_Utils_Tuple2('Aopf', '\uD835\uDD38'),
			_Utils_Tuple2('aopf', '\uD835\uDD52'),
			_Utils_Tuple2('apacir', '⩯'),
			_Utils_Tuple2('ap', '≈'),
			_Utils_Tuple2('apE', '⩰'),
			_Utils_Tuple2('ape', '≊'),
			_Utils_Tuple2('apid', '≋'),
			_Utils_Tuple2('apos', '\''),
			_Utils_Tuple2('ApplyFunction', '\u2061'),
			_Utils_Tuple2('approx', '≈'),
			_Utils_Tuple2('approxeq', '≊'),
			_Utils_Tuple2('Aring', 'Å'),
			_Utils_Tuple2('aring', 'å'),
			_Utils_Tuple2('Ascr', '\uD835\uDC9C'),
			_Utils_Tuple2('ascr', '\uD835\uDCB6'),
			_Utils_Tuple2('Assign', '≔'),
			_Utils_Tuple2('ast', '*'),
			_Utils_Tuple2('asymp', '≈'),
			_Utils_Tuple2('asympeq', '≍'),
			_Utils_Tuple2('Atilde', 'Ã'),
			_Utils_Tuple2('atilde', 'ã'),
			_Utils_Tuple2('Auml', 'Ä'),
			_Utils_Tuple2('auml', 'ä'),
			_Utils_Tuple2('awconint', '∳'),
			_Utils_Tuple2('awint', '⨑'),
			_Utils_Tuple2('backcong', '≌'),
			_Utils_Tuple2('backepsilon', '϶'),
			_Utils_Tuple2('backprime', '‵'),
			_Utils_Tuple2('backsim', '∽'),
			_Utils_Tuple2('backsimeq', '⋍'),
			_Utils_Tuple2('Backslash', '∖'),
			_Utils_Tuple2('Barv', '⫧'),
			_Utils_Tuple2('barvee', '⊽'),
			_Utils_Tuple2('barwed', '⌅'),
			_Utils_Tuple2('Barwed', '⌆'),
			_Utils_Tuple2('barwedge', '⌅'),
			_Utils_Tuple2('bbrk', '⎵'),
			_Utils_Tuple2('bbrktbrk', '⎶'),
			_Utils_Tuple2('bcong', '≌'),
			_Utils_Tuple2('Bcy', 'Б'),
			_Utils_Tuple2('bcy', 'б'),
			_Utils_Tuple2('bdquo', '„'),
			_Utils_Tuple2('becaus', '∵'),
			_Utils_Tuple2('because', '∵'),
			_Utils_Tuple2('Because', '∵'),
			_Utils_Tuple2('bemptyv', '⦰'),
			_Utils_Tuple2('bepsi', '϶'),
			_Utils_Tuple2('bernou', 'ℬ'),
			_Utils_Tuple2('Bernoullis', 'ℬ'),
			_Utils_Tuple2('Beta', 'Β'),
			_Utils_Tuple2('beta', 'β'),
			_Utils_Tuple2('beth', 'ℶ'),
			_Utils_Tuple2('between', '≬'),
			_Utils_Tuple2('Bfr', '\uD835\uDD05'),
			_Utils_Tuple2('bfr', '\uD835\uDD1F'),
			_Utils_Tuple2('bigcap', '⋂'),
			_Utils_Tuple2('bigcirc', '◯'),
			_Utils_Tuple2('bigcup', '⋃'),
			_Utils_Tuple2('bigodot', '⨀'),
			_Utils_Tuple2('bigoplus', '⨁'),
			_Utils_Tuple2('bigotimes', '⨂'),
			_Utils_Tuple2('bigsqcup', '⨆'),
			_Utils_Tuple2('bigstar', '★'),
			_Utils_Tuple2('bigtriangledown', '▽'),
			_Utils_Tuple2('bigtriangleup', '△'),
			_Utils_Tuple2('biguplus', '⨄'),
			_Utils_Tuple2('bigvee', '⋁'),
			_Utils_Tuple2('bigwedge', '⋀'),
			_Utils_Tuple2('bkarow', '⤍'),
			_Utils_Tuple2('blacklozenge', '⧫'),
			_Utils_Tuple2('blacksquare', '▪'),
			_Utils_Tuple2('blacktriangle', '▴'),
			_Utils_Tuple2('blacktriangledown', '▾'),
			_Utils_Tuple2('blacktriangleleft', '◂'),
			_Utils_Tuple2('blacktriangleright', '▸'),
			_Utils_Tuple2('blank', '␣'),
			_Utils_Tuple2('blk12', '▒'),
			_Utils_Tuple2('blk14', '░'),
			_Utils_Tuple2('blk34', '▓'),
			_Utils_Tuple2('block', '█'),
			_Utils_Tuple2('bne', '=⃥'),
			_Utils_Tuple2('bnequiv', '≡⃥'),
			_Utils_Tuple2('bNot', '⫭'),
			_Utils_Tuple2('bnot', '⌐'),
			_Utils_Tuple2('Bopf', '\uD835\uDD39'),
			_Utils_Tuple2('bopf', '\uD835\uDD53'),
			_Utils_Tuple2('bot', '⊥'),
			_Utils_Tuple2('bottom', '⊥'),
			_Utils_Tuple2('bowtie', '⋈'),
			_Utils_Tuple2('boxbox', '⧉'),
			_Utils_Tuple2('boxdl', '┐'),
			_Utils_Tuple2('boxdL', '╕'),
			_Utils_Tuple2('boxDl', '╖'),
			_Utils_Tuple2('boxDL', '╗'),
			_Utils_Tuple2('boxdr', '┌'),
			_Utils_Tuple2('boxdR', '╒'),
			_Utils_Tuple2('boxDr', '╓'),
			_Utils_Tuple2('boxDR', '╔'),
			_Utils_Tuple2('boxh', '─'),
			_Utils_Tuple2('boxH', '═'),
			_Utils_Tuple2('boxhd', '┬'),
			_Utils_Tuple2('boxHd', '╤'),
			_Utils_Tuple2('boxhD', '╥'),
			_Utils_Tuple2('boxHD', '╦'),
			_Utils_Tuple2('boxhu', '┴'),
			_Utils_Tuple2('boxHu', '╧'),
			_Utils_Tuple2('boxhU', '╨'),
			_Utils_Tuple2('boxHU', '╩'),
			_Utils_Tuple2('boxminus', '⊟'),
			_Utils_Tuple2('boxplus', '⊞'),
			_Utils_Tuple2('boxtimes', '⊠'),
			_Utils_Tuple2('boxul', '┘'),
			_Utils_Tuple2('boxuL', '╛'),
			_Utils_Tuple2('boxUl', '╜'),
			_Utils_Tuple2('boxUL', '╝'),
			_Utils_Tuple2('boxur', '└'),
			_Utils_Tuple2('boxuR', '╘'),
			_Utils_Tuple2('boxUr', '╙'),
			_Utils_Tuple2('boxUR', '╚'),
			_Utils_Tuple2('boxv', '│'),
			_Utils_Tuple2('boxV', '║'),
			_Utils_Tuple2('boxvh', '┼'),
			_Utils_Tuple2('boxvH', '╪'),
			_Utils_Tuple2('boxVh', '╫'),
			_Utils_Tuple2('boxVH', '╬'),
			_Utils_Tuple2('boxvl', '┤'),
			_Utils_Tuple2('boxvL', '╡'),
			_Utils_Tuple2('boxVl', '╢'),
			_Utils_Tuple2('boxVL', '╣'),
			_Utils_Tuple2('boxvr', '├'),
			_Utils_Tuple2('boxvR', '╞'),
			_Utils_Tuple2('boxVr', '╟'),
			_Utils_Tuple2('boxVR', '╠'),
			_Utils_Tuple2('bprime', '‵'),
			_Utils_Tuple2('breve', '˘'),
			_Utils_Tuple2('Breve', '˘'),
			_Utils_Tuple2('brvbar', '¦'),
			_Utils_Tuple2('bscr', '\uD835\uDCB7'),
			_Utils_Tuple2('Bscr', 'ℬ'),
			_Utils_Tuple2('bsemi', '⁏'),
			_Utils_Tuple2('bsim', '∽'),
			_Utils_Tuple2('bsime', '⋍'),
			_Utils_Tuple2('bsolb', '⧅'),
			_Utils_Tuple2('bsol', '\\'),
			_Utils_Tuple2('bsolhsub', '⟈'),
			_Utils_Tuple2('bull', '•'),
			_Utils_Tuple2('bullet', '•'),
			_Utils_Tuple2('bump', '≎'),
			_Utils_Tuple2('bumpE', '⪮'),
			_Utils_Tuple2('bumpe', '≏'),
			_Utils_Tuple2('Bumpeq', '≎'),
			_Utils_Tuple2('bumpeq', '≏'),
			_Utils_Tuple2('Cacute', 'Ć'),
			_Utils_Tuple2('cacute', 'ć'),
			_Utils_Tuple2('capand', '⩄'),
			_Utils_Tuple2('capbrcup', '⩉'),
			_Utils_Tuple2('capcap', '⩋'),
			_Utils_Tuple2('cap', '∩'),
			_Utils_Tuple2('Cap', '⋒'),
			_Utils_Tuple2('capcup', '⩇'),
			_Utils_Tuple2('capdot', '⩀'),
			_Utils_Tuple2('CapitalDifferentialD', 'ⅅ'),
			_Utils_Tuple2('caps', '∩︀'),
			_Utils_Tuple2('caret', '⁁'),
			_Utils_Tuple2('caron', 'ˇ'),
			_Utils_Tuple2('Cayleys', 'ℭ'),
			_Utils_Tuple2('ccaps', '⩍'),
			_Utils_Tuple2('Ccaron', 'Č'),
			_Utils_Tuple2('ccaron', 'č'),
			_Utils_Tuple2('Ccedil', 'Ç'),
			_Utils_Tuple2('ccedil', 'ç'),
			_Utils_Tuple2('Ccirc', 'Ĉ'),
			_Utils_Tuple2('ccirc', 'ĉ'),
			_Utils_Tuple2('Cconint', '∰'),
			_Utils_Tuple2('ccups', '⩌'),
			_Utils_Tuple2('ccupssm', '⩐'),
			_Utils_Tuple2('Cdot', 'Ċ'),
			_Utils_Tuple2('cdot', 'ċ'),
			_Utils_Tuple2('cedil', '¸'),
			_Utils_Tuple2('Cedilla', '¸'),
			_Utils_Tuple2('cemptyv', '⦲'),
			_Utils_Tuple2('cent', '¢'),
			_Utils_Tuple2('centerdot', '·'),
			_Utils_Tuple2('CenterDot', '·'),
			_Utils_Tuple2('cfr', '\uD835\uDD20'),
			_Utils_Tuple2('Cfr', 'ℭ'),
			_Utils_Tuple2('CHcy', 'Ч'),
			_Utils_Tuple2('chcy', 'ч'),
			_Utils_Tuple2('check', '✓'),
			_Utils_Tuple2('checkmark', '✓'),
			_Utils_Tuple2('Chi', 'Χ'),
			_Utils_Tuple2('chi', 'χ'),
			_Utils_Tuple2('circ', 'ˆ'),
			_Utils_Tuple2('circeq', '≗'),
			_Utils_Tuple2('circlearrowleft', '↺'),
			_Utils_Tuple2('circlearrowright', '↻'),
			_Utils_Tuple2('circledast', '⊛'),
			_Utils_Tuple2('circledcirc', '⊚'),
			_Utils_Tuple2('circleddash', '⊝'),
			_Utils_Tuple2('CircleDot', '⊙'),
			_Utils_Tuple2('circledR', '®'),
			_Utils_Tuple2('circledS', 'Ⓢ'),
			_Utils_Tuple2('CircleMinus', '⊖'),
			_Utils_Tuple2('CirclePlus', '⊕'),
			_Utils_Tuple2('CircleTimes', '⊗'),
			_Utils_Tuple2('cir', '○'),
			_Utils_Tuple2('cirE', '⧃'),
			_Utils_Tuple2('cire', '≗'),
			_Utils_Tuple2('cirfnint', '⨐'),
			_Utils_Tuple2('cirmid', '⫯'),
			_Utils_Tuple2('cirscir', '⧂'),
			_Utils_Tuple2('ClockwiseContourIntegral', '∲'),
			_Utils_Tuple2('CloseCurlyDoubleQuote', '”'),
			_Utils_Tuple2('CloseCurlyQuote', '’'),
			_Utils_Tuple2('clubs', '♣'),
			_Utils_Tuple2('clubsuit', '♣'),
			_Utils_Tuple2('colon', ':'),
			_Utils_Tuple2('Colon', '∷'),
			_Utils_Tuple2('Colone', '⩴'),
			_Utils_Tuple2('colone', '≔'),
			_Utils_Tuple2('coloneq', '≔'),
			_Utils_Tuple2('comma', ','),
			_Utils_Tuple2('commat', '@'),
			_Utils_Tuple2('comp', '∁'),
			_Utils_Tuple2('compfn', '∘'),
			_Utils_Tuple2('complement', '∁'),
			_Utils_Tuple2('complexes', 'ℂ'),
			_Utils_Tuple2('cong', '≅'),
			_Utils_Tuple2('congdot', '⩭'),
			_Utils_Tuple2('Congruent', '≡'),
			_Utils_Tuple2('conint', '∮'),
			_Utils_Tuple2('Conint', '∯'),
			_Utils_Tuple2('ContourIntegral', '∮'),
			_Utils_Tuple2('copf', '\uD835\uDD54'),
			_Utils_Tuple2('Copf', 'ℂ'),
			_Utils_Tuple2('coprod', '∐'),
			_Utils_Tuple2('Coproduct', '∐'),
			_Utils_Tuple2('copy', '©'),
			_Utils_Tuple2('COPY', '©'),
			_Utils_Tuple2('copysr', '℗'),
			_Utils_Tuple2('CounterClockwiseContourIntegral', '∳'),
			_Utils_Tuple2('crarr', '↵'),
			_Utils_Tuple2('cross', '✗'),
			_Utils_Tuple2('Cross', '⨯'),
			_Utils_Tuple2('Cscr', '\uD835\uDC9E'),
			_Utils_Tuple2('cscr', '\uD835\uDCB8'),
			_Utils_Tuple2('csub', '⫏'),
			_Utils_Tuple2('csube', '⫑'),
			_Utils_Tuple2('csup', '⫐'),
			_Utils_Tuple2('csupe', '⫒'),
			_Utils_Tuple2('ctdot', '⋯'),
			_Utils_Tuple2('cudarrl', '⤸'),
			_Utils_Tuple2('cudarrr', '⤵'),
			_Utils_Tuple2('cuepr', '⋞'),
			_Utils_Tuple2('cuesc', '⋟'),
			_Utils_Tuple2('cularr', '↶'),
			_Utils_Tuple2('cularrp', '⤽'),
			_Utils_Tuple2('cupbrcap', '⩈'),
			_Utils_Tuple2('cupcap', '⩆'),
			_Utils_Tuple2('CupCap', '≍'),
			_Utils_Tuple2('cup', '∪'),
			_Utils_Tuple2('Cup', '⋓'),
			_Utils_Tuple2('cupcup', '⩊'),
			_Utils_Tuple2('cupdot', '⊍'),
			_Utils_Tuple2('cupor', '⩅'),
			_Utils_Tuple2('cups', '∪︀'),
			_Utils_Tuple2('curarr', '↷'),
			_Utils_Tuple2('curarrm', '⤼'),
			_Utils_Tuple2('curlyeqprec', '⋞'),
			_Utils_Tuple2('curlyeqsucc', '⋟'),
			_Utils_Tuple2('curlyvee', '⋎'),
			_Utils_Tuple2('curlywedge', '⋏'),
			_Utils_Tuple2('curren', '¤'),
			_Utils_Tuple2('curvearrowleft', '↶'),
			_Utils_Tuple2('curvearrowright', '↷'),
			_Utils_Tuple2('cuvee', '⋎'),
			_Utils_Tuple2('cuwed', '⋏'),
			_Utils_Tuple2('cwconint', '∲'),
			_Utils_Tuple2('cwint', '∱'),
			_Utils_Tuple2('cylcty', '⌭'),
			_Utils_Tuple2('dagger', '†'),
			_Utils_Tuple2('Dagger', '‡'),
			_Utils_Tuple2('daleth', 'ℸ'),
			_Utils_Tuple2('darr', '↓'),
			_Utils_Tuple2('Darr', '↡'),
			_Utils_Tuple2('dArr', '⇓'),
			_Utils_Tuple2('dash', '‐'),
			_Utils_Tuple2('Dashv', '⫤'),
			_Utils_Tuple2('dashv', '⊣'),
			_Utils_Tuple2('dbkarow', '⤏'),
			_Utils_Tuple2('dblac', '˝'),
			_Utils_Tuple2('Dcaron', 'Ď'),
			_Utils_Tuple2('dcaron', 'ď'),
			_Utils_Tuple2('Dcy', 'Д'),
			_Utils_Tuple2('dcy', 'д'),
			_Utils_Tuple2('ddagger', '‡'),
			_Utils_Tuple2('ddarr', '⇊'),
			_Utils_Tuple2('DD', 'ⅅ'),
			_Utils_Tuple2('dd', 'ⅆ'),
			_Utils_Tuple2('DDotrahd', '⤑'),
			_Utils_Tuple2('ddotseq', '⩷'),
			_Utils_Tuple2('deg', '°'),
			_Utils_Tuple2('Del', '∇'),
			_Utils_Tuple2('Delta', 'Δ'),
			_Utils_Tuple2('delta', 'δ'),
			_Utils_Tuple2('demptyv', '⦱'),
			_Utils_Tuple2('dfisht', '⥿'),
			_Utils_Tuple2('Dfr', '\uD835\uDD07'),
			_Utils_Tuple2('dfr', '\uD835\uDD21'),
			_Utils_Tuple2('dHar', '⥥'),
			_Utils_Tuple2('dharl', '⇃'),
			_Utils_Tuple2('dharr', '⇂'),
			_Utils_Tuple2('DiacriticalAcute', '´'),
			_Utils_Tuple2('DiacriticalDot', '˙'),
			_Utils_Tuple2('DiacriticalDoubleAcute', '˝'),
			_Utils_Tuple2('DiacriticalGrave', '`'),
			_Utils_Tuple2('DiacriticalTilde', '˜'),
			_Utils_Tuple2('diam', '⋄'),
			_Utils_Tuple2('diamond', '⋄'),
			_Utils_Tuple2('Diamond', '⋄'),
			_Utils_Tuple2('diamondsuit', '♦'),
			_Utils_Tuple2('diams', '♦'),
			_Utils_Tuple2('die', '¨'),
			_Utils_Tuple2('DifferentialD', 'ⅆ'),
			_Utils_Tuple2('digamma', 'ϝ'),
			_Utils_Tuple2('disin', '⋲'),
			_Utils_Tuple2('div', '÷'),
			_Utils_Tuple2('divide', '÷'),
			_Utils_Tuple2('divideontimes', '⋇'),
			_Utils_Tuple2('divonx', '⋇'),
			_Utils_Tuple2('DJcy', 'Ђ'),
			_Utils_Tuple2('djcy', 'ђ'),
			_Utils_Tuple2('dlcorn', '⌞'),
			_Utils_Tuple2('dlcrop', '⌍'),
			_Utils_Tuple2('dollar', '$'),
			_Utils_Tuple2('Dopf', '\uD835\uDD3B'),
			_Utils_Tuple2('dopf', '\uD835\uDD55'),
			_Utils_Tuple2('Dot', '¨'),
			_Utils_Tuple2('dot', '˙'),
			_Utils_Tuple2('DotDot', '⃜'),
			_Utils_Tuple2('doteq', '≐'),
			_Utils_Tuple2('doteqdot', '≑'),
			_Utils_Tuple2('DotEqual', '≐'),
			_Utils_Tuple2('dotminus', '∸'),
			_Utils_Tuple2('dotplus', '∔'),
			_Utils_Tuple2('dotsquare', '⊡'),
			_Utils_Tuple2('doublebarwedge', '⌆'),
			_Utils_Tuple2('DoubleContourIntegral', '∯'),
			_Utils_Tuple2('DoubleDot', '¨'),
			_Utils_Tuple2('DoubleDownArrow', '⇓'),
			_Utils_Tuple2('DoubleLeftArrow', '⇐'),
			_Utils_Tuple2('DoubleLeftRightArrow', '⇔'),
			_Utils_Tuple2('DoubleLeftTee', '⫤'),
			_Utils_Tuple2('DoubleLongLeftArrow', '⟸'),
			_Utils_Tuple2('DoubleLongLeftRightArrow', '⟺'),
			_Utils_Tuple2('DoubleLongRightArrow', '⟹'),
			_Utils_Tuple2('DoubleRightArrow', '⇒'),
			_Utils_Tuple2('DoubleRightTee', '⊨'),
			_Utils_Tuple2('DoubleUpArrow', '⇑'),
			_Utils_Tuple2('DoubleUpDownArrow', '⇕'),
			_Utils_Tuple2('DoubleVerticalBar', '∥'),
			_Utils_Tuple2('DownArrowBar', '⤓'),
			_Utils_Tuple2('downarrow', '↓'),
			_Utils_Tuple2('DownArrow', '↓'),
			_Utils_Tuple2('Downarrow', '⇓'),
			_Utils_Tuple2('DownArrowUpArrow', '⇵'),
			_Utils_Tuple2('DownBreve', '̑'),
			_Utils_Tuple2('downdownarrows', '⇊'),
			_Utils_Tuple2('downharpoonleft', '⇃'),
			_Utils_Tuple2('downharpoonright', '⇂'),
			_Utils_Tuple2('DownLeftRightVector', '⥐'),
			_Utils_Tuple2('DownLeftTeeVector', '⥞'),
			_Utils_Tuple2('DownLeftVectorBar', '⥖'),
			_Utils_Tuple2('DownLeftVector', '↽'),
			_Utils_Tuple2('DownRightTeeVector', '⥟'),
			_Utils_Tuple2('DownRightVectorBar', '⥗'),
			_Utils_Tuple2('DownRightVector', '⇁'),
			_Utils_Tuple2('DownTeeArrow', '↧'),
			_Utils_Tuple2('DownTee', '⊤'),
			_Utils_Tuple2('drbkarow', '⤐'),
			_Utils_Tuple2('drcorn', '⌟'),
			_Utils_Tuple2('drcrop', '⌌'),
			_Utils_Tuple2('Dscr', '\uD835\uDC9F'),
			_Utils_Tuple2('dscr', '\uD835\uDCB9'),
			_Utils_Tuple2('DScy', 'Ѕ'),
			_Utils_Tuple2('dscy', 'ѕ'),
			_Utils_Tuple2('dsol', '⧶'),
			_Utils_Tuple2('Dstrok', 'Đ'),
			_Utils_Tuple2('dstrok', 'đ'),
			_Utils_Tuple2('dtdot', '⋱'),
			_Utils_Tuple2('dtri', '▿'),
			_Utils_Tuple2('dtrif', '▾'),
			_Utils_Tuple2('duarr', '⇵'),
			_Utils_Tuple2('duhar', '⥯'),
			_Utils_Tuple2('dwangle', '⦦'),
			_Utils_Tuple2('DZcy', 'Џ'),
			_Utils_Tuple2('dzcy', 'џ'),
			_Utils_Tuple2('dzigrarr', '⟿'),
			_Utils_Tuple2('Eacute', 'É'),
			_Utils_Tuple2('eacute', 'é'),
			_Utils_Tuple2('easter', '⩮'),
			_Utils_Tuple2('Ecaron', 'Ě'),
			_Utils_Tuple2('ecaron', 'ě'),
			_Utils_Tuple2('Ecirc', 'Ê'),
			_Utils_Tuple2('ecirc', 'ê'),
			_Utils_Tuple2('ecir', '≖'),
			_Utils_Tuple2('ecolon', '≕'),
			_Utils_Tuple2('Ecy', 'Э'),
			_Utils_Tuple2('ecy', 'э'),
			_Utils_Tuple2('eDDot', '⩷'),
			_Utils_Tuple2('Edot', 'Ė'),
			_Utils_Tuple2('edot', 'ė'),
			_Utils_Tuple2('eDot', '≑'),
			_Utils_Tuple2('ee', 'ⅇ'),
			_Utils_Tuple2('efDot', '≒'),
			_Utils_Tuple2('Efr', '\uD835\uDD08'),
			_Utils_Tuple2('efr', '\uD835\uDD22'),
			_Utils_Tuple2('eg', '⪚'),
			_Utils_Tuple2('Egrave', 'È'),
			_Utils_Tuple2('egrave', 'è'),
			_Utils_Tuple2('egs', '⪖'),
			_Utils_Tuple2('egsdot', '⪘'),
			_Utils_Tuple2('el', '⪙'),
			_Utils_Tuple2('Element', '∈'),
			_Utils_Tuple2('elinters', '⏧'),
			_Utils_Tuple2('ell', 'ℓ'),
			_Utils_Tuple2('els', '⪕'),
			_Utils_Tuple2('elsdot', '⪗'),
			_Utils_Tuple2('Emacr', 'Ē'),
			_Utils_Tuple2('emacr', 'ē'),
			_Utils_Tuple2('empty', '∅'),
			_Utils_Tuple2('emptyset', '∅'),
			_Utils_Tuple2('EmptySmallSquare', '◻'),
			_Utils_Tuple2('emptyv', '∅'),
			_Utils_Tuple2('EmptyVerySmallSquare', '▫'),
			_Utils_Tuple2('emsp13', '\u2004'),
			_Utils_Tuple2('emsp14', '\u2005'),
			_Utils_Tuple2('emsp', '\u2003'),
			_Utils_Tuple2('ENG', 'Ŋ'),
			_Utils_Tuple2('eng', 'ŋ'),
			_Utils_Tuple2('ensp', '\u2002'),
			_Utils_Tuple2('Eogon', 'Ę'),
			_Utils_Tuple2('eogon', 'ę'),
			_Utils_Tuple2('Eopf', '\uD835\uDD3C'),
			_Utils_Tuple2('eopf', '\uD835\uDD56'),
			_Utils_Tuple2('epar', '⋕'),
			_Utils_Tuple2('eparsl', '⧣'),
			_Utils_Tuple2('eplus', '⩱'),
			_Utils_Tuple2('epsi', 'ε'),
			_Utils_Tuple2('Epsilon', 'Ε'),
			_Utils_Tuple2('epsilon', 'ε'),
			_Utils_Tuple2('epsiv', 'ϵ'),
			_Utils_Tuple2('eqcirc', '≖'),
			_Utils_Tuple2('eqcolon', '≕'),
			_Utils_Tuple2('eqsim', '≂'),
			_Utils_Tuple2('eqslantgtr', '⪖'),
			_Utils_Tuple2('eqslantless', '⪕'),
			_Utils_Tuple2('Equal', '⩵'),
			_Utils_Tuple2('equals', '='),
			_Utils_Tuple2('EqualTilde', '≂'),
			_Utils_Tuple2('equest', '≟'),
			_Utils_Tuple2('Equilibrium', '⇌'),
			_Utils_Tuple2('equiv', '≡'),
			_Utils_Tuple2('equivDD', '⩸'),
			_Utils_Tuple2('eqvparsl', '⧥'),
			_Utils_Tuple2('erarr', '⥱'),
			_Utils_Tuple2('erDot', '≓'),
			_Utils_Tuple2('escr', 'ℯ'),
			_Utils_Tuple2('Escr', 'ℰ'),
			_Utils_Tuple2('esdot', '≐'),
			_Utils_Tuple2('Esim', '⩳'),
			_Utils_Tuple2('esim', '≂'),
			_Utils_Tuple2('Eta', 'Η'),
			_Utils_Tuple2('eta', 'η'),
			_Utils_Tuple2('ETH', 'Ð'),
			_Utils_Tuple2('eth', 'ð'),
			_Utils_Tuple2('Euml', 'Ë'),
			_Utils_Tuple2('euml', 'ë'),
			_Utils_Tuple2('euro', '€'),
			_Utils_Tuple2('excl', '!'),
			_Utils_Tuple2('exist', '∃'),
			_Utils_Tuple2('Exists', '∃'),
			_Utils_Tuple2('expectation', 'ℰ'),
			_Utils_Tuple2('exponentiale', 'ⅇ'),
			_Utils_Tuple2('ExponentialE', 'ⅇ'),
			_Utils_Tuple2('fallingdotseq', '≒'),
			_Utils_Tuple2('Fcy', 'Ф'),
			_Utils_Tuple2('fcy', 'ф'),
			_Utils_Tuple2('female', '♀'),
			_Utils_Tuple2('ffilig', 'ﬃ'),
			_Utils_Tuple2('fflig', 'ﬀ'),
			_Utils_Tuple2('ffllig', 'ﬄ'),
			_Utils_Tuple2('Ffr', '\uD835\uDD09'),
			_Utils_Tuple2('ffr', '\uD835\uDD23'),
			_Utils_Tuple2('filig', 'ﬁ'),
			_Utils_Tuple2('FilledSmallSquare', '◼'),
			_Utils_Tuple2('FilledVerySmallSquare', '▪'),
			_Utils_Tuple2('fjlig', 'fj'),
			_Utils_Tuple2('flat', '♭'),
			_Utils_Tuple2('fllig', 'ﬂ'),
			_Utils_Tuple2('fltns', '▱'),
			_Utils_Tuple2('fnof', 'ƒ'),
			_Utils_Tuple2('Fopf', '\uD835\uDD3D'),
			_Utils_Tuple2('fopf', '\uD835\uDD57'),
			_Utils_Tuple2('forall', '∀'),
			_Utils_Tuple2('ForAll', '∀'),
			_Utils_Tuple2('fork', '⋔'),
			_Utils_Tuple2('forkv', '⫙'),
			_Utils_Tuple2('Fouriertrf', 'ℱ'),
			_Utils_Tuple2('fpartint', '⨍'),
			_Utils_Tuple2('frac12', '½'),
			_Utils_Tuple2('frac13', '⅓'),
			_Utils_Tuple2('frac14', '¼'),
			_Utils_Tuple2('frac15', '⅕'),
			_Utils_Tuple2('frac16', '⅙'),
			_Utils_Tuple2('frac18', '⅛'),
			_Utils_Tuple2('frac23', '⅔'),
			_Utils_Tuple2('frac25', '⅖'),
			_Utils_Tuple2('frac34', '¾'),
			_Utils_Tuple2('frac35', '⅗'),
			_Utils_Tuple2('frac38', '⅜'),
			_Utils_Tuple2('frac45', '⅘'),
			_Utils_Tuple2('frac56', '⅚'),
			_Utils_Tuple2('frac58', '⅝'),
			_Utils_Tuple2('frac78', '⅞'),
			_Utils_Tuple2('frasl', '⁄'),
			_Utils_Tuple2('frown', '⌢'),
			_Utils_Tuple2('fscr', '\uD835\uDCBB'),
			_Utils_Tuple2('Fscr', 'ℱ'),
			_Utils_Tuple2('gacute', 'ǵ'),
			_Utils_Tuple2('Gamma', 'Γ'),
			_Utils_Tuple2('gamma', 'γ'),
			_Utils_Tuple2('Gammad', 'Ϝ'),
			_Utils_Tuple2('gammad', 'ϝ'),
			_Utils_Tuple2('gap', '⪆'),
			_Utils_Tuple2('Gbreve', 'Ğ'),
			_Utils_Tuple2('gbreve', 'ğ'),
			_Utils_Tuple2('Gcedil', 'Ģ'),
			_Utils_Tuple2('Gcirc', 'Ĝ'),
			_Utils_Tuple2('gcirc', 'ĝ'),
			_Utils_Tuple2('Gcy', 'Г'),
			_Utils_Tuple2('gcy', 'г'),
			_Utils_Tuple2('Gdot', 'Ġ'),
			_Utils_Tuple2('gdot', 'ġ'),
			_Utils_Tuple2('ge', '≥'),
			_Utils_Tuple2('gE', '≧'),
			_Utils_Tuple2('gEl', '⪌'),
			_Utils_Tuple2('gel', '⋛'),
			_Utils_Tuple2('geq', '≥'),
			_Utils_Tuple2('geqq', '≧'),
			_Utils_Tuple2('geqslant', '⩾'),
			_Utils_Tuple2('gescc', '⪩'),
			_Utils_Tuple2('ges', '⩾'),
			_Utils_Tuple2('gesdot', '⪀'),
			_Utils_Tuple2('gesdoto', '⪂'),
			_Utils_Tuple2('gesdotol', '⪄'),
			_Utils_Tuple2('gesl', '⋛︀'),
			_Utils_Tuple2('gesles', '⪔'),
			_Utils_Tuple2('Gfr', '\uD835\uDD0A'),
			_Utils_Tuple2('gfr', '\uD835\uDD24'),
			_Utils_Tuple2('gg', '≫'),
			_Utils_Tuple2('Gg', '⋙'),
			_Utils_Tuple2('ggg', '⋙'),
			_Utils_Tuple2('gimel', 'ℷ'),
			_Utils_Tuple2('GJcy', 'Ѓ'),
			_Utils_Tuple2('gjcy', 'ѓ'),
			_Utils_Tuple2('gla', '⪥'),
			_Utils_Tuple2('gl', '≷'),
			_Utils_Tuple2('glE', '⪒'),
			_Utils_Tuple2('glj', '⪤'),
			_Utils_Tuple2('gnap', '⪊'),
			_Utils_Tuple2('gnapprox', '⪊'),
			_Utils_Tuple2('gne', '⪈'),
			_Utils_Tuple2('gnE', '≩'),
			_Utils_Tuple2('gneq', '⪈'),
			_Utils_Tuple2('gneqq', '≩'),
			_Utils_Tuple2('gnsim', '⋧'),
			_Utils_Tuple2('Gopf', '\uD835\uDD3E'),
			_Utils_Tuple2('gopf', '\uD835\uDD58'),
			_Utils_Tuple2('grave', '`'),
			_Utils_Tuple2('GreaterEqual', '≥'),
			_Utils_Tuple2('GreaterEqualLess', '⋛'),
			_Utils_Tuple2('GreaterFullEqual', '≧'),
			_Utils_Tuple2('GreaterGreater', '⪢'),
			_Utils_Tuple2('GreaterLess', '≷'),
			_Utils_Tuple2('GreaterSlantEqual', '⩾'),
			_Utils_Tuple2('GreaterTilde', '≳'),
			_Utils_Tuple2('Gscr', '\uD835\uDCA2'),
			_Utils_Tuple2('gscr', 'ℊ'),
			_Utils_Tuple2('gsim', '≳'),
			_Utils_Tuple2('gsime', '⪎'),
			_Utils_Tuple2('gsiml', '⪐'),
			_Utils_Tuple2('gtcc', '⪧'),
			_Utils_Tuple2('gtcir', '⩺'),
			_Utils_Tuple2('gt', '>'),
			_Utils_Tuple2('GT', '>'),
			_Utils_Tuple2('Gt', '≫'),
			_Utils_Tuple2('gtdot', '⋗'),
			_Utils_Tuple2('gtlPar', '⦕'),
			_Utils_Tuple2('gtquest', '⩼'),
			_Utils_Tuple2('gtrapprox', '⪆'),
			_Utils_Tuple2('gtrarr', '⥸'),
			_Utils_Tuple2('gtrdot', '⋗'),
			_Utils_Tuple2('gtreqless', '⋛'),
			_Utils_Tuple2('gtreqqless', '⪌'),
			_Utils_Tuple2('gtrless', '≷'),
			_Utils_Tuple2('gtrsim', '≳'),
			_Utils_Tuple2('gvertneqq', '≩︀'),
			_Utils_Tuple2('gvnE', '≩︀'),
			_Utils_Tuple2('Hacek', 'ˇ'),
			_Utils_Tuple2('hairsp', '\u200A'),
			_Utils_Tuple2('half', '½'),
			_Utils_Tuple2('hamilt', 'ℋ'),
			_Utils_Tuple2('HARDcy', 'Ъ'),
			_Utils_Tuple2('hardcy', 'ъ'),
			_Utils_Tuple2('harrcir', '⥈'),
			_Utils_Tuple2('harr', '↔'),
			_Utils_Tuple2('hArr', '⇔'),
			_Utils_Tuple2('harrw', '↭'),
			_Utils_Tuple2('Hat', '^'),
			_Utils_Tuple2('hbar', 'ℏ'),
			_Utils_Tuple2('Hcirc', 'Ĥ'),
			_Utils_Tuple2('hcirc', 'ĥ'),
			_Utils_Tuple2('hearts', '♥'),
			_Utils_Tuple2('heartsuit', '♥'),
			_Utils_Tuple2('hellip', '…'),
			_Utils_Tuple2('hercon', '⊹'),
			_Utils_Tuple2('hfr', '\uD835\uDD25'),
			_Utils_Tuple2('Hfr', 'ℌ'),
			_Utils_Tuple2('HilbertSpace', 'ℋ'),
			_Utils_Tuple2('hksearow', '⤥'),
			_Utils_Tuple2('hkswarow', '⤦'),
			_Utils_Tuple2('hoarr', '⇿'),
			_Utils_Tuple2('homtht', '∻'),
			_Utils_Tuple2('hookleftarrow', '↩'),
			_Utils_Tuple2('hookrightarrow', '↪'),
			_Utils_Tuple2('hopf', '\uD835\uDD59'),
			_Utils_Tuple2('Hopf', 'ℍ'),
			_Utils_Tuple2('horbar', '―'),
			_Utils_Tuple2('HorizontalLine', '─'),
			_Utils_Tuple2('hscr', '\uD835\uDCBD'),
			_Utils_Tuple2('Hscr', 'ℋ'),
			_Utils_Tuple2('hslash', 'ℏ'),
			_Utils_Tuple2('Hstrok', 'Ħ'),
			_Utils_Tuple2('hstrok', 'ħ'),
			_Utils_Tuple2('HumpDownHump', '≎'),
			_Utils_Tuple2('HumpEqual', '≏'),
			_Utils_Tuple2('hybull', '⁃'),
			_Utils_Tuple2('hyphen', '‐'),
			_Utils_Tuple2('Iacute', 'Í'),
			_Utils_Tuple2('iacute', 'í'),
			_Utils_Tuple2('ic', '\u2063'),
			_Utils_Tuple2('Icirc', 'Î'),
			_Utils_Tuple2('icirc', 'î'),
			_Utils_Tuple2('Icy', 'И'),
			_Utils_Tuple2('icy', 'и'),
			_Utils_Tuple2('Idot', 'İ'),
			_Utils_Tuple2('IEcy', 'Е'),
			_Utils_Tuple2('iecy', 'е'),
			_Utils_Tuple2('iexcl', '¡'),
			_Utils_Tuple2('iff', '⇔'),
			_Utils_Tuple2('ifr', '\uD835\uDD26'),
			_Utils_Tuple2('Ifr', 'ℑ'),
			_Utils_Tuple2('Igrave', 'Ì'),
			_Utils_Tuple2('igrave', 'ì'),
			_Utils_Tuple2('ii', 'ⅈ'),
			_Utils_Tuple2('iiiint', '⨌'),
			_Utils_Tuple2('iiint', '∭'),
			_Utils_Tuple2('iinfin', '⧜'),
			_Utils_Tuple2('iiota', '℩'),
			_Utils_Tuple2('IJlig', 'Ĳ'),
			_Utils_Tuple2('ijlig', 'ĳ'),
			_Utils_Tuple2('Imacr', 'Ī'),
			_Utils_Tuple2('imacr', 'ī'),
			_Utils_Tuple2('image', 'ℑ'),
			_Utils_Tuple2('ImaginaryI', 'ⅈ'),
			_Utils_Tuple2('imagline', 'ℐ'),
			_Utils_Tuple2('imagpart', 'ℑ'),
			_Utils_Tuple2('imath', 'ı'),
			_Utils_Tuple2('Im', 'ℑ'),
			_Utils_Tuple2('imof', '⊷'),
			_Utils_Tuple2('imped', 'Ƶ'),
			_Utils_Tuple2('Implies', '⇒'),
			_Utils_Tuple2('incare', '℅'),
			_Utils_Tuple2('in', '∈'),
			_Utils_Tuple2('infin', '∞'),
			_Utils_Tuple2('infintie', '⧝'),
			_Utils_Tuple2('inodot', 'ı'),
			_Utils_Tuple2('intcal', '⊺'),
			_Utils_Tuple2('int', '∫'),
			_Utils_Tuple2('Int', '∬'),
			_Utils_Tuple2('integers', 'ℤ'),
			_Utils_Tuple2('Integral', '∫'),
			_Utils_Tuple2('intercal', '⊺'),
			_Utils_Tuple2('Intersection', '⋂'),
			_Utils_Tuple2('intlarhk', '⨗'),
			_Utils_Tuple2('intprod', '⨼'),
			_Utils_Tuple2('InvisibleComma', '\u2063'),
			_Utils_Tuple2('InvisibleTimes', '\u2062'),
			_Utils_Tuple2('IOcy', 'Ё'),
			_Utils_Tuple2('iocy', 'ё'),
			_Utils_Tuple2('Iogon', 'Į'),
			_Utils_Tuple2('iogon', 'į'),
			_Utils_Tuple2('Iopf', '\uD835\uDD40'),
			_Utils_Tuple2('iopf', '\uD835\uDD5A'),
			_Utils_Tuple2('Iota', 'Ι'),
			_Utils_Tuple2('iota', 'ι'),
			_Utils_Tuple2('iprod', '⨼'),
			_Utils_Tuple2('iquest', '¿'),
			_Utils_Tuple2('iscr', '\uD835\uDCBE'),
			_Utils_Tuple2('Iscr', 'ℐ'),
			_Utils_Tuple2('isin', '∈'),
			_Utils_Tuple2('isindot', '⋵'),
			_Utils_Tuple2('isinE', '⋹'),
			_Utils_Tuple2('isins', '⋴'),
			_Utils_Tuple2('isinsv', '⋳'),
			_Utils_Tuple2('isinv', '∈'),
			_Utils_Tuple2('it', '\u2062'),
			_Utils_Tuple2('Itilde', 'Ĩ'),
			_Utils_Tuple2('itilde', 'ĩ'),
			_Utils_Tuple2('Iukcy', 'І'),
			_Utils_Tuple2('iukcy', 'і'),
			_Utils_Tuple2('Iuml', 'Ï'),
			_Utils_Tuple2('iuml', 'ï'),
			_Utils_Tuple2('Jcirc', 'Ĵ'),
			_Utils_Tuple2('jcirc', 'ĵ'),
			_Utils_Tuple2('Jcy', 'Й'),
			_Utils_Tuple2('jcy', 'й'),
			_Utils_Tuple2('Jfr', '\uD835\uDD0D'),
			_Utils_Tuple2('jfr', '\uD835\uDD27'),
			_Utils_Tuple2('jmath', 'ȷ'),
			_Utils_Tuple2('Jopf', '\uD835\uDD41'),
			_Utils_Tuple2('jopf', '\uD835\uDD5B'),
			_Utils_Tuple2('Jscr', '\uD835\uDCA5'),
			_Utils_Tuple2('jscr', '\uD835\uDCBF'),
			_Utils_Tuple2('Jsercy', 'Ј'),
			_Utils_Tuple2('jsercy', 'ј'),
			_Utils_Tuple2('Jukcy', 'Є'),
			_Utils_Tuple2('jukcy', 'є'),
			_Utils_Tuple2('Kappa', 'Κ'),
			_Utils_Tuple2('kappa', 'κ'),
			_Utils_Tuple2('kappav', 'ϰ'),
			_Utils_Tuple2('Kcedil', 'Ķ'),
			_Utils_Tuple2('kcedil', 'ķ'),
			_Utils_Tuple2('Kcy', 'К'),
			_Utils_Tuple2('kcy', 'к'),
			_Utils_Tuple2('Kfr', '\uD835\uDD0E'),
			_Utils_Tuple2('kfr', '\uD835\uDD28'),
			_Utils_Tuple2('kgreen', 'ĸ'),
			_Utils_Tuple2('KHcy', 'Х'),
			_Utils_Tuple2('khcy', 'х'),
			_Utils_Tuple2('KJcy', 'Ќ'),
			_Utils_Tuple2('kjcy', 'ќ'),
			_Utils_Tuple2('Kopf', '\uD835\uDD42'),
			_Utils_Tuple2('kopf', '\uD835\uDD5C'),
			_Utils_Tuple2('Kscr', '\uD835\uDCA6'),
			_Utils_Tuple2('kscr', '\uD835\uDCC0'),
			_Utils_Tuple2('lAarr', '⇚'),
			_Utils_Tuple2('Lacute', 'Ĺ'),
			_Utils_Tuple2('lacute', 'ĺ'),
			_Utils_Tuple2('laemptyv', '⦴'),
			_Utils_Tuple2('lagran', 'ℒ'),
			_Utils_Tuple2('Lambda', 'Λ'),
			_Utils_Tuple2('lambda', 'λ'),
			_Utils_Tuple2('lang', '⟨'),
			_Utils_Tuple2('Lang', '⟪'),
			_Utils_Tuple2('langd', '⦑'),
			_Utils_Tuple2('langle', '⟨'),
			_Utils_Tuple2('lap', '⪅'),
			_Utils_Tuple2('Laplacetrf', 'ℒ'),
			_Utils_Tuple2('laquo', '«'),
			_Utils_Tuple2('larrb', '⇤'),
			_Utils_Tuple2('larrbfs', '⤟'),
			_Utils_Tuple2('larr', '←'),
			_Utils_Tuple2('Larr', '↞'),
			_Utils_Tuple2('lArr', '⇐'),
			_Utils_Tuple2('larrfs', '⤝'),
			_Utils_Tuple2('larrhk', '↩'),
			_Utils_Tuple2('larrlp', '↫'),
			_Utils_Tuple2('larrpl', '⤹'),
			_Utils_Tuple2('larrsim', '⥳'),
			_Utils_Tuple2('larrtl', '↢'),
			_Utils_Tuple2('latail', '⤙'),
			_Utils_Tuple2('lAtail', '⤛'),
			_Utils_Tuple2('lat', '⪫'),
			_Utils_Tuple2('late', '⪭'),
			_Utils_Tuple2('lates', '⪭︀'),
			_Utils_Tuple2('lbarr', '⤌'),
			_Utils_Tuple2('lBarr', '⤎'),
			_Utils_Tuple2('lbbrk', '❲'),
			_Utils_Tuple2('lbrace', '{'),
			_Utils_Tuple2('lbrack', '['),
			_Utils_Tuple2('lbrke', '⦋'),
			_Utils_Tuple2('lbrksld', '⦏'),
			_Utils_Tuple2('lbrkslu', '⦍'),
			_Utils_Tuple2('Lcaron', 'Ľ'),
			_Utils_Tuple2('lcaron', 'ľ'),
			_Utils_Tuple2('Lcedil', 'Ļ'),
			_Utils_Tuple2('lcedil', 'ļ'),
			_Utils_Tuple2('lceil', '⌈'),
			_Utils_Tuple2('lcub', '{'),
			_Utils_Tuple2('Lcy', 'Л'),
			_Utils_Tuple2('lcy', 'л'),
			_Utils_Tuple2('ldca', '⤶'),
			_Utils_Tuple2('ldquo', '“'),
			_Utils_Tuple2('ldquor', '„'),
			_Utils_Tuple2('ldrdhar', '⥧'),
			_Utils_Tuple2('ldrushar', '⥋'),
			_Utils_Tuple2('ldsh', '↲'),
			_Utils_Tuple2('le', '≤'),
			_Utils_Tuple2('lE', '≦'),
			_Utils_Tuple2('LeftAngleBracket', '⟨'),
			_Utils_Tuple2('LeftArrowBar', '⇤'),
			_Utils_Tuple2('leftarrow', '←'),
			_Utils_Tuple2('LeftArrow', '←'),
			_Utils_Tuple2('Leftarrow', '⇐'),
			_Utils_Tuple2('LeftArrowRightArrow', '⇆'),
			_Utils_Tuple2('leftarrowtail', '↢'),
			_Utils_Tuple2('LeftCeiling', '⌈'),
			_Utils_Tuple2('LeftDoubleBracket', '⟦'),
			_Utils_Tuple2('LeftDownTeeVector', '⥡'),
			_Utils_Tuple2('LeftDownVectorBar', '⥙'),
			_Utils_Tuple2('LeftDownVector', '⇃'),
			_Utils_Tuple2('LeftFloor', '⌊'),
			_Utils_Tuple2('leftharpoondown', '↽'),
			_Utils_Tuple2('leftharpoonup', '↼'),
			_Utils_Tuple2('leftleftarrows', '⇇'),
			_Utils_Tuple2('leftrightarrow', '↔'),
			_Utils_Tuple2('LeftRightArrow', '↔'),
			_Utils_Tuple2('Leftrightarrow', '⇔'),
			_Utils_Tuple2('leftrightarrows', '⇆'),
			_Utils_Tuple2('leftrightharpoons', '⇋'),
			_Utils_Tuple2('leftrightsquigarrow', '↭'),
			_Utils_Tuple2('LeftRightVector', '⥎'),
			_Utils_Tuple2('LeftTeeArrow', '↤'),
			_Utils_Tuple2('LeftTee', '⊣'),
			_Utils_Tuple2('LeftTeeVector', '⥚'),
			_Utils_Tuple2('leftthreetimes', '⋋'),
			_Utils_Tuple2('LeftTriangleBar', '⧏'),
			_Utils_Tuple2('LeftTriangle', '⊲'),
			_Utils_Tuple2('LeftTriangleEqual', '⊴'),
			_Utils_Tuple2('LeftUpDownVector', '⥑'),
			_Utils_Tuple2('LeftUpTeeVector', '⥠'),
			_Utils_Tuple2('LeftUpVectorBar', '⥘'),
			_Utils_Tuple2('LeftUpVector', '↿'),
			_Utils_Tuple2('LeftVectorBar', '⥒'),
			_Utils_Tuple2('LeftVector', '↼'),
			_Utils_Tuple2('lEg', '⪋'),
			_Utils_Tuple2('leg', '⋚'),
			_Utils_Tuple2('leq', '≤'),
			_Utils_Tuple2('leqq', '≦'),
			_Utils_Tuple2('leqslant', '⩽'),
			_Utils_Tuple2('lescc', '⪨'),
			_Utils_Tuple2('les', '⩽'),
			_Utils_Tuple2('lesdot', '⩿'),
			_Utils_Tuple2('lesdoto', '⪁'),
			_Utils_Tuple2('lesdotor', '⪃'),
			_Utils_Tuple2('lesg', '⋚︀'),
			_Utils_Tuple2('lesges', '⪓'),
			_Utils_Tuple2('lessapprox', '⪅'),
			_Utils_Tuple2('lessdot', '⋖'),
			_Utils_Tuple2('lesseqgtr', '⋚'),
			_Utils_Tuple2('lesseqqgtr', '⪋'),
			_Utils_Tuple2('LessEqualGreater', '⋚'),
			_Utils_Tuple2('LessFullEqual', '≦'),
			_Utils_Tuple2('LessGreater', '≶'),
			_Utils_Tuple2('lessgtr', '≶'),
			_Utils_Tuple2('LessLess', '⪡'),
			_Utils_Tuple2('lesssim', '≲'),
			_Utils_Tuple2('LessSlantEqual', '⩽'),
			_Utils_Tuple2('LessTilde', '≲'),
			_Utils_Tuple2('lfisht', '⥼'),
			_Utils_Tuple2('lfloor', '⌊'),
			_Utils_Tuple2('Lfr', '\uD835\uDD0F'),
			_Utils_Tuple2('lfr', '\uD835\uDD29'),
			_Utils_Tuple2('lg', '≶'),
			_Utils_Tuple2('lgE', '⪑'),
			_Utils_Tuple2('lHar', '⥢'),
			_Utils_Tuple2('lhard', '↽'),
			_Utils_Tuple2('lharu', '↼'),
			_Utils_Tuple2('lharul', '⥪'),
			_Utils_Tuple2('lhblk', '▄'),
			_Utils_Tuple2('LJcy', 'Љ'),
			_Utils_Tuple2('ljcy', 'љ'),
			_Utils_Tuple2('llarr', '⇇'),
			_Utils_Tuple2('ll', '≪'),
			_Utils_Tuple2('Ll', '⋘'),
			_Utils_Tuple2('llcorner', '⌞'),
			_Utils_Tuple2('Lleftarrow', '⇚'),
			_Utils_Tuple2('llhard', '⥫'),
			_Utils_Tuple2('lltri', '◺'),
			_Utils_Tuple2('Lmidot', 'Ŀ'),
			_Utils_Tuple2('lmidot', 'ŀ'),
			_Utils_Tuple2('lmoustache', '⎰'),
			_Utils_Tuple2('lmoust', '⎰'),
			_Utils_Tuple2('lnap', '⪉'),
			_Utils_Tuple2('lnapprox', '⪉'),
			_Utils_Tuple2('lne', '⪇'),
			_Utils_Tuple2('lnE', '≨'),
			_Utils_Tuple2('lneq', '⪇'),
			_Utils_Tuple2('lneqq', '≨'),
			_Utils_Tuple2('lnsim', '⋦'),
			_Utils_Tuple2('loang', '⟬'),
			_Utils_Tuple2('loarr', '⇽'),
			_Utils_Tuple2('lobrk', '⟦'),
			_Utils_Tuple2('longleftarrow', '⟵'),
			_Utils_Tuple2('LongLeftArrow', '⟵'),
			_Utils_Tuple2('Longleftarrow', '⟸'),
			_Utils_Tuple2('longleftrightarrow', '⟷'),
			_Utils_Tuple2('LongLeftRightArrow', '⟷'),
			_Utils_Tuple2('Longleftrightarrow', '⟺'),
			_Utils_Tuple2('longmapsto', '⟼'),
			_Utils_Tuple2('longrightarrow', '⟶'),
			_Utils_Tuple2('LongRightArrow', '⟶'),
			_Utils_Tuple2('Longrightarrow', '⟹'),
			_Utils_Tuple2('looparrowleft', '↫'),
			_Utils_Tuple2('looparrowright', '↬'),
			_Utils_Tuple2('lopar', '⦅'),
			_Utils_Tuple2('Lopf', '\uD835\uDD43'),
			_Utils_Tuple2('lopf', '\uD835\uDD5D'),
			_Utils_Tuple2('loplus', '⨭'),
			_Utils_Tuple2('lotimes', '⨴'),
			_Utils_Tuple2('lowast', '∗'),
			_Utils_Tuple2('lowbar', '_'),
			_Utils_Tuple2('LowerLeftArrow', '↙'),
			_Utils_Tuple2('LowerRightArrow', '↘'),
			_Utils_Tuple2('loz', '◊'),
			_Utils_Tuple2('lozenge', '◊'),
			_Utils_Tuple2('lozf', '⧫'),
			_Utils_Tuple2('lpar', '('),
			_Utils_Tuple2('lparlt', '⦓'),
			_Utils_Tuple2('lrarr', '⇆'),
			_Utils_Tuple2('lrcorner', '⌟'),
			_Utils_Tuple2('lrhar', '⇋'),
			_Utils_Tuple2('lrhard', '⥭'),
			_Utils_Tuple2('lrm', '\u200E'),
			_Utils_Tuple2('lrtri', '⊿'),
			_Utils_Tuple2('lsaquo', '‹'),
			_Utils_Tuple2('lscr', '\uD835\uDCC1'),
			_Utils_Tuple2('Lscr', 'ℒ'),
			_Utils_Tuple2('lsh', '↰'),
			_Utils_Tuple2('Lsh', '↰'),
			_Utils_Tuple2('lsim', '≲'),
			_Utils_Tuple2('lsime', '⪍'),
			_Utils_Tuple2('lsimg', '⪏'),
			_Utils_Tuple2('lsqb', '['),
			_Utils_Tuple2('lsquo', '‘'),
			_Utils_Tuple2('lsquor', '‚'),
			_Utils_Tuple2('Lstrok', 'Ł'),
			_Utils_Tuple2('lstrok', 'ł'),
			_Utils_Tuple2('ltcc', '⪦'),
			_Utils_Tuple2('ltcir', '⩹'),
			_Utils_Tuple2('lt', '<'),
			_Utils_Tuple2('LT', '<'),
			_Utils_Tuple2('Lt', '≪'),
			_Utils_Tuple2('ltdot', '⋖'),
			_Utils_Tuple2('lthree', '⋋'),
			_Utils_Tuple2('ltimes', '⋉'),
			_Utils_Tuple2('ltlarr', '⥶'),
			_Utils_Tuple2('ltquest', '⩻'),
			_Utils_Tuple2('ltri', '◃'),
			_Utils_Tuple2('ltrie', '⊴'),
			_Utils_Tuple2('ltrif', '◂'),
			_Utils_Tuple2('ltrPar', '⦖'),
			_Utils_Tuple2('lurdshar', '⥊'),
			_Utils_Tuple2('luruhar', '⥦'),
			_Utils_Tuple2('lvertneqq', '≨︀'),
			_Utils_Tuple2('lvnE', '≨︀'),
			_Utils_Tuple2('macr', '¯'),
			_Utils_Tuple2('male', '♂'),
			_Utils_Tuple2('malt', '✠'),
			_Utils_Tuple2('maltese', '✠'),
			_Utils_Tuple2('Map', '⤅'),
			_Utils_Tuple2('map', '↦'),
			_Utils_Tuple2('mapsto', '↦'),
			_Utils_Tuple2('mapstodown', '↧'),
			_Utils_Tuple2('mapstoleft', '↤'),
			_Utils_Tuple2('mapstoup', '↥'),
			_Utils_Tuple2('marker', '▮'),
			_Utils_Tuple2('mcomma', '⨩'),
			_Utils_Tuple2('Mcy', 'М'),
			_Utils_Tuple2('mcy', 'м'),
			_Utils_Tuple2('mdash', '—'),
			_Utils_Tuple2('mDDot', '∺'),
			_Utils_Tuple2('measuredangle', '∡'),
			_Utils_Tuple2('MediumSpace', '\u205F'),
			_Utils_Tuple2('Mellintrf', 'ℳ'),
			_Utils_Tuple2('Mfr', '\uD835\uDD10'),
			_Utils_Tuple2('mfr', '\uD835\uDD2A'),
			_Utils_Tuple2('mho', '℧'),
			_Utils_Tuple2('micro', 'µ'),
			_Utils_Tuple2('midast', '*'),
			_Utils_Tuple2('midcir', '⫰'),
			_Utils_Tuple2('mid', '∣'),
			_Utils_Tuple2('middot', '·'),
			_Utils_Tuple2('minusb', '⊟'),
			_Utils_Tuple2('minus', '−'),
			_Utils_Tuple2('minusd', '∸'),
			_Utils_Tuple2('minusdu', '⨪'),
			_Utils_Tuple2('MinusPlus', '∓'),
			_Utils_Tuple2('mlcp', '⫛'),
			_Utils_Tuple2('mldr', '…'),
			_Utils_Tuple2('mnplus', '∓'),
			_Utils_Tuple2('models', '⊧'),
			_Utils_Tuple2('Mopf', '\uD835\uDD44'),
			_Utils_Tuple2('mopf', '\uD835\uDD5E'),
			_Utils_Tuple2('mp', '∓'),
			_Utils_Tuple2('mscr', '\uD835\uDCC2'),
			_Utils_Tuple2('Mscr', 'ℳ'),
			_Utils_Tuple2('mstpos', '∾'),
			_Utils_Tuple2('Mu', 'Μ'),
			_Utils_Tuple2('mu', 'μ'),
			_Utils_Tuple2('multimap', '⊸'),
			_Utils_Tuple2('mumap', '⊸'),
			_Utils_Tuple2('nabla', '∇'),
			_Utils_Tuple2('Nacute', 'Ń'),
			_Utils_Tuple2('nacute', 'ń'),
			_Utils_Tuple2('nang', '∠⃒'),
			_Utils_Tuple2('nap', '≉'),
			_Utils_Tuple2('napE', '⩰̸'),
			_Utils_Tuple2('napid', '≋̸'),
			_Utils_Tuple2('napos', 'ŉ'),
			_Utils_Tuple2('napprox', '≉'),
			_Utils_Tuple2('natural', '♮'),
			_Utils_Tuple2('naturals', 'ℕ'),
			_Utils_Tuple2('natur', '♮'),
			_Utils_Tuple2('nbsp', '\u00A0'),
			_Utils_Tuple2('nbump', '≎̸'),
			_Utils_Tuple2('nbumpe', '≏̸'),
			_Utils_Tuple2('ncap', '⩃'),
			_Utils_Tuple2('Ncaron', 'Ň'),
			_Utils_Tuple2('ncaron', 'ň'),
			_Utils_Tuple2('Ncedil', 'Ņ'),
			_Utils_Tuple2('ncedil', 'ņ'),
			_Utils_Tuple2('ncong', '≇'),
			_Utils_Tuple2('ncongdot', '⩭̸'),
			_Utils_Tuple2('ncup', '⩂'),
			_Utils_Tuple2('Ncy', 'Н'),
			_Utils_Tuple2('ncy', 'н'),
			_Utils_Tuple2('ndash', '–'),
			_Utils_Tuple2('nearhk', '⤤'),
			_Utils_Tuple2('nearr', '↗'),
			_Utils_Tuple2('neArr', '⇗'),
			_Utils_Tuple2('nearrow', '↗'),
			_Utils_Tuple2('ne', '≠'),
			_Utils_Tuple2('nedot', '≐̸'),
			_Utils_Tuple2('NegativeMediumSpace', '\u200B'),
			_Utils_Tuple2('NegativeThickSpace', '\u200B'),
			_Utils_Tuple2('NegativeThinSpace', '\u200B'),
			_Utils_Tuple2('NegativeVeryThinSpace', '\u200B'),
			_Utils_Tuple2('nequiv', '≢'),
			_Utils_Tuple2('nesear', '⤨'),
			_Utils_Tuple2('nesim', '≂̸'),
			_Utils_Tuple2('NestedGreaterGreater', '≫'),
			_Utils_Tuple2('NestedLessLess', '≪'),
			_Utils_Tuple2('NewLine', '\n'),
			_Utils_Tuple2('nexist', '∄'),
			_Utils_Tuple2('nexists', '∄'),
			_Utils_Tuple2('Nfr', '\uD835\uDD11'),
			_Utils_Tuple2('nfr', '\uD835\uDD2B'),
			_Utils_Tuple2('ngE', '≧̸'),
			_Utils_Tuple2('nge', '≱'),
			_Utils_Tuple2('ngeq', '≱'),
			_Utils_Tuple2('ngeqq', '≧̸'),
			_Utils_Tuple2('ngeqslant', '⩾̸'),
			_Utils_Tuple2('nges', '⩾̸'),
			_Utils_Tuple2('nGg', '⋙̸'),
			_Utils_Tuple2('ngsim', '≵'),
			_Utils_Tuple2('nGt', '≫⃒'),
			_Utils_Tuple2('ngt', '≯'),
			_Utils_Tuple2('ngtr', '≯'),
			_Utils_Tuple2('nGtv', '≫̸'),
			_Utils_Tuple2('nharr', '↮'),
			_Utils_Tuple2('nhArr', '⇎'),
			_Utils_Tuple2('nhpar', '⫲'),
			_Utils_Tuple2('ni', '∋'),
			_Utils_Tuple2('nis', '⋼'),
			_Utils_Tuple2('nisd', '⋺'),
			_Utils_Tuple2('niv', '∋'),
			_Utils_Tuple2('NJcy', 'Њ'),
			_Utils_Tuple2('njcy', 'њ'),
			_Utils_Tuple2('nlarr', '↚'),
			_Utils_Tuple2('nlArr', '⇍'),
			_Utils_Tuple2('nldr', '‥'),
			_Utils_Tuple2('nlE', '≦̸'),
			_Utils_Tuple2('nle', '≰'),
			_Utils_Tuple2('nleftarrow', '↚'),
			_Utils_Tuple2('nLeftarrow', '⇍'),
			_Utils_Tuple2('nleftrightarrow', '↮'),
			_Utils_Tuple2('nLeftrightarrow', '⇎'),
			_Utils_Tuple2('nleq', '≰'),
			_Utils_Tuple2('nleqq', '≦̸'),
			_Utils_Tuple2('nleqslant', '⩽̸'),
			_Utils_Tuple2('nles', '⩽̸'),
			_Utils_Tuple2('nless', '≮'),
			_Utils_Tuple2('nLl', '⋘̸'),
			_Utils_Tuple2('nlsim', '≴'),
			_Utils_Tuple2('nLt', '≪⃒'),
			_Utils_Tuple2('nlt', '≮'),
			_Utils_Tuple2('nltri', '⋪'),
			_Utils_Tuple2('nltrie', '⋬'),
			_Utils_Tuple2('nLtv', '≪̸'),
			_Utils_Tuple2('nmid', '∤'),
			_Utils_Tuple2('NoBreak', '\u2060'),
			_Utils_Tuple2('NonBreakingSpace', '\u00A0'),
			_Utils_Tuple2('nopf', '\uD835\uDD5F'),
			_Utils_Tuple2('Nopf', 'ℕ'),
			_Utils_Tuple2('Not', '⫬'),
			_Utils_Tuple2('not', '¬'),
			_Utils_Tuple2('NotCongruent', '≢'),
			_Utils_Tuple2('NotCupCap', '≭'),
			_Utils_Tuple2('NotDoubleVerticalBar', '∦'),
			_Utils_Tuple2('NotElement', '∉'),
			_Utils_Tuple2('NotEqual', '≠'),
			_Utils_Tuple2('NotEqualTilde', '≂̸'),
			_Utils_Tuple2('NotExists', '∄'),
			_Utils_Tuple2('NotGreater', '≯'),
			_Utils_Tuple2('NotGreaterEqual', '≱'),
			_Utils_Tuple2('NotGreaterFullEqual', '≧̸'),
			_Utils_Tuple2('NotGreaterGreater', '≫̸'),
			_Utils_Tuple2('NotGreaterLess', '≹'),
			_Utils_Tuple2('NotGreaterSlantEqual', '⩾̸'),
			_Utils_Tuple2('NotGreaterTilde', '≵'),
			_Utils_Tuple2('NotHumpDownHump', '≎̸'),
			_Utils_Tuple2('NotHumpEqual', '≏̸'),
			_Utils_Tuple2('notin', '∉'),
			_Utils_Tuple2('notindot', '⋵̸'),
			_Utils_Tuple2('notinE', '⋹̸'),
			_Utils_Tuple2('notinva', '∉'),
			_Utils_Tuple2('notinvb', '⋷'),
			_Utils_Tuple2('notinvc', '⋶'),
			_Utils_Tuple2('NotLeftTriangleBar', '⧏̸'),
			_Utils_Tuple2('NotLeftTriangle', '⋪'),
			_Utils_Tuple2('NotLeftTriangleEqual', '⋬'),
			_Utils_Tuple2('NotLess', '≮'),
			_Utils_Tuple2('NotLessEqual', '≰'),
			_Utils_Tuple2('NotLessGreater', '≸'),
			_Utils_Tuple2('NotLessLess', '≪̸'),
			_Utils_Tuple2('NotLessSlantEqual', '⩽̸'),
			_Utils_Tuple2('NotLessTilde', '≴'),
			_Utils_Tuple2('NotNestedGreaterGreater', '⪢̸'),
			_Utils_Tuple2('NotNestedLessLess', '⪡̸'),
			_Utils_Tuple2('notni', '∌'),
			_Utils_Tuple2('notniva', '∌'),
			_Utils_Tuple2('notnivb', '⋾'),
			_Utils_Tuple2('notnivc', '⋽'),
			_Utils_Tuple2('NotPrecedes', '⊀'),
			_Utils_Tuple2('NotPrecedesEqual', '⪯̸'),
			_Utils_Tuple2('NotPrecedesSlantEqual', '⋠'),
			_Utils_Tuple2('NotReverseElement', '∌'),
			_Utils_Tuple2('NotRightTriangleBar', '⧐̸'),
			_Utils_Tuple2('NotRightTriangle', '⋫'),
			_Utils_Tuple2('NotRightTriangleEqual', '⋭'),
			_Utils_Tuple2('NotSquareSubset', '⊏̸'),
			_Utils_Tuple2('NotSquareSubsetEqual', '⋢'),
			_Utils_Tuple2('NotSquareSuperset', '⊐̸'),
			_Utils_Tuple2('NotSquareSupersetEqual', '⋣'),
			_Utils_Tuple2('NotSubset', '⊂⃒'),
			_Utils_Tuple2('NotSubsetEqual', '⊈'),
			_Utils_Tuple2('NotSucceeds', '⊁'),
			_Utils_Tuple2('NotSucceedsEqual', '⪰̸'),
			_Utils_Tuple2('NotSucceedsSlantEqual', '⋡'),
			_Utils_Tuple2('NotSucceedsTilde', '≿̸'),
			_Utils_Tuple2('NotSuperset', '⊃⃒'),
			_Utils_Tuple2('NotSupersetEqual', '⊉'),
			_Utils_Tuple2('NotTilde', '≁'),
			_Utils_Tuple2('NotTildeEqual', '≄'),
			_Utils_Tuple2('NotTildeFullEqual', '≇'),
			_Utils_Tuple2('NotTildeTilde', '≉'),
			_Utils_Tuple2('NotVerticalBar', '∤'),
			_Utils_Tuple2('nparallel', '∦'),
			_Utils_Tuple2('npar', '∦'),
			_Utils_Tuple2('nparsl', '⫽⃥'),
			_Utils_Tuple2('npart', '∂̸'),
			_Utils_Tuple2('npolint', '⨔'),
			_Utils_Tuple2('npr', '⊀'),
			_Utils_Tuple2('nprcue', '⋠'),
			_Utils_Tuple2('nprec', '⊀'),
			_Utils_Tuple2('npreceq', '⪯̸'),
			_Utils_Tuple2('npre', '⪯̸'),
			_Utils_Tuple2('nrarrc', '⤳̸'),
			_Utils_Tuple2('nrarr', '↛'),
			_Utils_Tuple2('nrArr', '⇏'),
			_Utils_Tuple2('nrarrw', '↝̸'),
			_Utils_Tuple2('nrightarrow', '↛'),
			_Utils_Tuple2('nRightarrow', '⇏'),
			_Utils_Tuple2('nrtri', '⋫'),
			_Utils_Tuple2('nrtrie', '⋭'),
			_Utils_Tuple2('nsc', '⊁'),
			_Utils_Tuple2('nsccue', '⋡'),
			_Utils_Tuple2('nsce', '⪰̸'),
			_Utils_Tuple2('Nscr', '\uD835\uDCA9'),
			_Utils_Tuple2('nscr', '\uD835\uDCC3'),
			_Utils_Tuple2('nshortmid', '∤'),
			_Utils_Tuple2('nshortparallel', '∦'),
			_Utils_Tuple2('nsim', '≁'),
			_Utils_Tuple2('nsime', '≄'),
			_Utils_Tuple2('nsimeq', '≄'),
			_Utils_Tuple2('nsmid', '∤'),
			_Utils_Tuple2('nspar', '∦'),
			_Utils_Tuple2('nsqsube', '⋢'),
			_Utils_Tuple2('nsqsupe', '⋣'),
			_Utils_Tuple2('nsub', '⊄'),
			_Utils_Tuple2('nsubE', '⫅̸'),
			_Utils_Tuple2('nsube', '⊈'),
			_Utils_Tuple2('nsubset', '⊂⃒'),
			_Utils_Tuple2('nsubseteq', '⊈'),
			_Utils_Tuple2('nsubseteqq', '⫅̸'),
			_Utils_Tuple2('nsucc', '⊁'),
			_Utils_Tuple2('nsucceq', '⪰̸'),
			_Utils_Tuple2('nsup', '⊅'),
			_Utils_Tuple2('nsupE', '⫆̸'),
			_Utils_Tuple2('nsupe', '⊉'),
			_Utils_Tuple2('nsupset', '⊃⃒'),
			_Utils_Tuple2('nsupseteq', '⊉'),
			_Utils_Tuple2('nsupseteqq', '⫆̸'),
			_Utils_Tuple2('ntgl', '≹'),
			_Utils_Tuple2('Ntilde', 'Ñ'),
			_Utils_Tuple2('ntilde', 'ñ'),
			_Utils_Tuple2('ntlg', '≸'),
			_Utils_Tuple2('ntriangleleft', '⋪'),
			_Utils_Tuple2('ntrianglelefteq', '⋬'),
			_Utils_Tuple2('ntriangleright', '⋫'),
			_Utils_Tuple2('ntrianglerighteq', '⋭'),
			_Utils_Tuple2('Nu', 'Ν'),
			_Utils_Tuple2('nu', 'ν'),
			_Utils_Tuple2('num', '#'),
			_Utils_Tuple2('numero', '№'),
			_Utils_Tuple2('numsp', '\u2007'),
			_Utils_Tuple2('nvap', '≍⃒'),
			_Utils_Tuple2('nvdash', '⊬'),
			_Utils_Tuple2('nvDash', '⊭'),
			_Utils_Tuple2('nVdash', '⊮'),
			_Utils_Tuple2('nVDash', '⊯'),
			_Utils_Tuple2('nvge', '≥⃒'),
			_Utils_Tuple2('nvgt', '>⃒'),
			_Utils_Tuple2('nvHarr', '⤄'),
			_Utils_Tuple2('nvinfin', '⧞'),
			_Utils_Tuple2('nvlArr', '⤂'),
			_Utils_Tuple2('nvle', '≤⃒'),
			_Utils_Tuple2('nvlt', '<⃒'),
			_Utils_Tuple2('nvltrie', '⊴⃒'),
			_Utils_Tuple2('nvrArr', '⤃'),
			_Utils_Tuple2('nvrtrie', '⊵⃒'),
			_Utils_Tuple2('nvsim', '∼⃒'),
			_Utils_Tuple2('nwarhk', '⤣'),
			_Utils_Tuple2('nwarr', '↖'),
			_Utils_Tuple2('nwArr', '⇖'),
			_Utils_Tuple2('nwarrow', '↖'),
			_Utils_Tuple2('nwnear', '⤧'),
			_Utils_Tuple2('Oacute', 'Ó'),
			_Utils_Tuple2('oacute', 'ó'),
			_Utils_Tuple2('oast', '⊛'),
			_Utils_Tuple2('Ocirc', 'Ô'),
			_Utils_Tuple2('ocirc', 'ô'),
			_Utils_Tuple2('ocir', '⊚'),
			_Utils_Tuple2('Ocy', 'О'),
			_Utils_Tuple2('ocy', 'о'),
			_Utils_Tuple2('odash', '⊝'),
			_Utils_Tuple2('Odblac', 'Ő'),
			_Utils_Tuple2('odblac', 'ő'),
			_Utils_Tuple2('odiv', '⨸'),
			_Utils_Tuple2('odot', '⊙'),
			_Utils_Tuple2('odsold', '⦼'),
			_Utils_Tuple2('OElig', 'Œ'),
			_Utils_Tuple2('oelig', 'œ'),
			_Utils_Tuple2('ofcir', '⦿'),
			_Utils_Tuple2('Ofr', '\uD835\uDD12'),
			_Utils_Tuple2('ofr', '\uD835\uDD2C'),
			_Utils_Tuple2('ogon', '˛'),
			_Utils_Tuple2('Ograve', 'Ò'),
			_Utils_Tuple2('ograve', 'ò'),
			_Utils_Tuple2('ogt', '⧁'),
			_Utils_Tuple2('ohbar', '⦵'),
			_Utils_Tuple2('ohm', 'Ω'),
			_Utils_Tuple2('oint', '∮'),
			_Utils_Tuple2('olarr', '↺'),
			_Utils_Tuple2('olcir', '⦾'),
			_Utils_Tuple2('olcross', '⦻'),
			_Utils_Tuple2('oline', '‾'),
			_Utils_Tuple2('olt', '⧀'),
			_Utils_Tuple2('Omacr', 'Ō'),
			_Utils_Tuple2('omacr', 'ō'),
			_Utils_Tuple2('Omega', 'Ω'),
			_Utils_Tuple2('omega', 'ω'),
			_Utils_Tuple2('Omicron', 'Ο'),
			_Utils_Tuple2('omicron', 'ο'),
			_Utils_Tuple2('omid', '⦶'),
			_Utils_Tuple2('ominus', '⊖'),
			_Utils_Tuple2('Oopf', '\uD835\uDD46'),
			_Utils_Tuple2('oopf', '\uD835\uDD60'),
			_Utils_Tuple2('opar', '⦷'),
			_Utils_Tuple2('OpenCurlyDoubleQuote', '“'),
			_Utils_Tuple2('OpenCurlyQuote', '‘'),
			_Utils_Tuple2('operp', '⦹'),
			_Utils_Tuple2('oplus', '⊕'),
			_Utils_Tuple2('orarr', '↻'),
			_Utils_Tuple2('Or', '⩔'),
			_Utils_Tuple2('or', '∨'),
			_Utils_Tuple2('ord', '⩝'),
			_Utils_Tuple2('order', 'ℴ'),
			_Utils_Tuple2('orderof', 'ℴ'),
			_Utils_Tuple2('ordf', 'ª'),
			_Utils_Tuple2('ordm', 'º'),
			_Utils_Tuple2('origof', '⊶'),
			_Utils_Tuple2('oror', '⩖'),
			_Utils_Tuple2('orslope', '⩗'),
			_Utils_Tuple2('orv', '⩛'),
			_Utils_Tuple2('oS', 'Ⓢ'),
			_Utils_Tuple2('Oscr', '\uD835\uDCAA'),
			_Utils_Tuple2('oscr', 'ℴ'),
			_Utils_Tuple2('Oslash', 'Ø'),
			_Utils_Tuple2('oslash', 'ø'),
			_Utils_Tuple2('osol', '⊘'),
			_Utils_Tuple2('Otilde', 'Õ'),
			_Utils_Tuple2('otilde', 'õ'),
			_Utils_Tuple2('otimesas', '⨶'),
			_Utils_Tuple2('Otimes', '⨷'),
			_Utils_Tuple2('otimes', '⊗'),
			_Utils_Tuple2('Ouml', 'Ö'),
			_Utils_Tuple2('ouml', 'ö'),
			_Utils_Tuple2('ovbar', '⌽'),
			_Utils_Tuple2('OverBar', '‾'),
			_Utils_Tuple2('OverBrace', '⏞'),
			_Utils_Tuple2('OverBracket', '⎴'),
			_Utils_Tuple2('OverParenthesis', '⏜'),
			_Utils_Tuple2('para', '¶'),
			_Utils_Tuple2('parallel', '∥'),
			_Utils_Tuple2('par', '∥'),
			_Utils_Tuple2('parsim', '⫳'),
			_Utils_Tuple2('parsl', '⫽'),
			_Utils_Tuple2('part', '∂'),
			_Utils_Tuple2('PartialD', '∂'),
			_Utils_Tuple2('Pcy', 'П'),
			_Utils_Tuple2('pcy', 'п'),
			_Utils_Tuple2('percnt', '%'),
			_Utils_Tuple2('period', '.'),
			_Utils_Tuple2('permil', '‰'),
			_Utils_Tuple2('perp', '⊥'),
			_Utils_Tuple2('pertenk', '‱'),
			_Utils_Tuple2('Pfr', '\uD835\uDD13'),
			_Utils_Tuple2('pfr', '\uD835\uDD2D'),
			_Utils_Tuple2('Phi', 'Φ'),
			_Utils_Tuple2('phi', 'φ'),
			_Utils_Tuple2('phiv', 'ϕ'),
			_Utils_Tuple2('phmmat', 'ℳ'),
			_Utils_Tuple2('phone', '☎'),
			_Utils_Tuple2('Pi', 'Π'),
			_Utils_Tuple2('pi', 'π'),
			_Utils_Tuple2('pitchfork', '⋔'),
			_Utils_Tuple2('piv', 'ϖ'),
			_Utils_Tuple2('planck', 'ℏ'),
			_Utils_Tuple2('planckh', 'ℎ'),
			_Utils_Tuple2('plankv', 'ℏ'),
			_Utils_Tuple2('plusacir', '⨣'),
			_Utils_Tuple2('plusb', '⊞'),
			_Utils_Tuple2('pluscir', '⨢'),
			_Utils_Tuple2('plus', '+'),
			_Utils_Tuple2('plusdo', '∔'),
			_Utils_Tuple2('plusdu', '⨥'),
			_Utils_Tuple2('pluse', '⩲'),
			_Utils_Tuple2('PlusMinus', '±'),
			_Utils_Tuple2('plusmn', '±'),
			_Utils_Tuple2('plussim', '⨦'),
			_Utils_Tuple2('plustwo', '⨧'),
			_Utils_Tuple2('pm', '±'),
			_Utils_Tuple2('Poincareplane', 'ℌ'),
			_Utils_Tuple2('pointint', '⨕'),
			_Utils_Tuple2('popf', '\uD835\uDD61'),
			_Utils_Tuple2('Popf', 'ℙ'),
			_Utils_Tuple2('pound', '£'),
			_Utils_Tuple2('prap', '⪷'),
			_Utils_Tuple2('Pr', '⪻'),
			_Utils_Tuple2('pr', '≺'),
			_Utils_Tuple2('prcue', '≼'),
			_Utils_Tuple2('precapprox', '⪷'),
			_Utils_Tuple2('prec', '≺'),
			_Utils_Tuple2('preccurlyeq', '≼'),
			_Utils_Tuple2('Precedes', '≺'),
			_Utils_Tuple2('PrecedesEqual', '⪯'),
			_Utils_Tuple2('PrecedesSlantEqual', '≼'),
			_Utils_Tuple2('PrecedesTilde', '≾'),
			_Utils_Tuple2('preceq', '⪯'),
			_Utils_Tuple2('precnapprox', '⪹'),
			_Utils_Tuple2('precneqq', '⪵'),
			_Utils_Tuple2('precnsim', '⋨'),
			_Utils_Tuple2('pre', '⪯'),
			_Utils_Tuple2('prE', '⪳'),
			_Utils_Tuple2('precsim', '≾'),
			_Utils_Tuple2('prime', '′'),
			_Utils_Tuple2('Prime', '″'),
			_Utils_Tuple2('primes', 'ℙ'),
			_Utils_Tuple2('prnap', '⪹'),
			_Utils_Tuple2('prnE', '⪵'),
			_Utils_Tuple2('prnsim', '⋨'),
			_Utils_Tuple2('prod', '∏'),
			_Utils_Tuple2('Product', '∏'),
			_Utils_Tuple2('profalar', '⌮'),
			_Utils_Tuple2('profline', '⌒'),
			_Utils_Tuple2('profsurf', '⌓'),
			_Utils_Tuple2('prop', '∝'),
			_Utils_Tuple2('Proportional', '∝'),
			_Utils_Tuple2('Proportion', '∷'),
			_Utils_Tuple2('propto', '∝'),
			_Utils_Tuple2('prsim', '≾'),
			_Utils_Tuple2('prurel', '⊰'),
			_Utils_Tuple2('Pscr', '\uD835\uDCAB'),
			_Utils_Tuple2('pscr', '\uD835\uDCC5'),
			_Utils_Tuple2('Psi', 'Ψ'),
			_Utils_Tuple2('psi', 'ψ'),
			_Utils_Tuple2('puncsp', '\u2008'),
			_Utils_Tuple2('Qfr', '\uD835\uDD14'),
			_Utils_Tuple2('qfr', '\uD835\uDD2E'),
			_Utils_Tuple2('qint', '⨌'),
			_Utils_Tuple2('qopf', '\uD835\uDD62'),
			_Utils_Tuple2('Qopf', 'ℚ'),
			_Utils_Tuple2('qprime', '⁗'),
			_Utils_Tuple2('Qscr', '\uD835\uDCAC'),
			_Utils_Tuple2('qscr', '\uD835\uDCC6'),
			_Utils_Tuple2('quaternions', 'ℍ'),
			_Utils_Tuple2('quatint', '⨖'),
			_Utils_Tuple2('quest', '?'),
			_Utils_Tuple2('questeq', '≟'),
			_Utils_Tuple2('quot', '\"'),
			_Utils_Tuple2('QUOT', '\"'),
			_Utils_Tuple2('rAarr', '⇛'),
			_Utils_Tuple2('race', '∽̱'),
			_Utils_Tuple2('Racute', 'Ŕ'),
			_Utils_Tuple2('racute', 'ŕ'),
			_Utils_Tuple2('radic', '√'),
			_Utils_Tuple2('raemptyv', '⦳'),
			_Utils_Tuple2('rang', '⟩'),
			_Utils_Tuple2('Rang', '⟫'),
			_Utils_Tuple2('rangd', '⦒'),
			_Utils_Tuple2('range', '⦥'),
			_Utils_Tuple2('rangle', '⟩'),
			_Utils_Tuple2('raquo', '»'),
			_Utils_Tuple2('rarrap', '⥵'),
			_Utils_Tuple2('rarrb', '⇥'),
			_Utils_Tuple2('rarrbfs', '⤠'),
			_Utils_Tuple2('rarrc', '⤳'),
			_Utils_Tuple2('rarr', '→'),
			_Utils_Tuple2('Rarr', '↠'),
			_Utils_Tuple2('rArr', '⇒'),
			_Utils_Tuple2('rarrfs', '⤞'),
			_Utils_Tuple2('rarrhk', '↪'),
			_Utils_Tuple2('rarrlp', '↬'),
			_Utils_Tuple2('rarrpl', '⥅'),
			_Utils_Tuple2('rarrsim', '⥴'),
			_Utils_Tuple2('Rarrtl', '⤖'),
			_Utils_Tuple2('rarrtl', '↣'),
			_Utils_Tuple2('rarrw', '↝'),
			_Utils_Tuple2('ratail', '⤚'),
			_Utils_Tuple2('rAtail', '⤜'),
			_Utils_Tuple2('ratio', '∶'),
			_Utils_Tuple2('rationals', 'ℚ'),
			_Utils_Tuple2('rbarr', '⤍'),
			_Utils_Tuple2('rBarr', '⤏'),
			_Utils_Tuple2('RBarr', '⤐'),
			_Utils_Tuple2('rbbrk', '❳'),
			_Utils_Tuple2('rbrace', '}'),
			_Utils_Tuple2('rbrack', ']'),
			_Utils_Tuple2('rbrke', '⦌'),
			_Utils_Tuple2('rbrksld', '⦎'),
			_Utils_Tuple2('rbrkslu', '⦐'),
			_Utils_Tuple2('Rcaron', 'Ř'),
			_Utils_Tuple2('rcaron', 'ř'),
			_Utils_Tuple2('Rcedil', 'Ŗ'),
			_Utils_Tuple2('rcedil', 'ŗ'),
			_Utils_Tuple2('rceil', '⌉'),
			_Utils_Tuple2('rcub', '}'),
			_Utils_Tuple2('Rcy', 'Р'),
			_Utils_Tuple2('rcy', 'р'),
			_Utils_Tuple2('rdca', '⤷'),
			_Utils_Tuple2('rdldhar', '⥩'),
			_Utils_Tuple2('rdquo', '”'),
			_Utils_Tuple2('rdquor', '”'),
			_Utils_Tuple2('rdsh', '↳'),
			_Utils_Tuple2('real', 'ℜ'),
			_Utils_Tuple2('realine', 'ℛ'),
			_Utils_Tuple2('realpart', 'ℜ'),
			_Utils_Tuple2('reals', 'ℝ'),
			_Utils_Tuple2('Re', 'ℜ'),
			_Utils_Tuple2('rect', '▭'),
			_Utils_Tuple2('reg', '®'),
			_Utils_Tuple2('REG', '®'),
			_Utils_Tuple2('ReverseElement', '∋'),
			_Utils_Tuple2('ReverseEquilibrium', '⇋'),
			_Utils_Tuple2('ReverseUpEquilibrium', '⥯'),
			_Utils_Tuple2('rfisht', '⥽'),
			_Utils_Tuple2('rfloor', '⌋'),
			_Utils_Tuple2('rfr', '\uD835\uDD2F'),
			_Utils_Tuple2('Rfr', 'ℜ'),
			_Utils_Tuple2('rHar', '⥤'),
			_Utils_Tuple2('rhard', '⇁'),
			_Utils_Tuple2('rharu', '⇀'),
			_Utils_Tuple2('rharul', '⥬'),
			_Utils_Tuple2('Rho', 'Ρ'),
			_Utils_Tuple2('rho', 'ρ'),
			_Utils_Tuple2('rhov', 'ϱ'),
			_Utils_Tuple2('RightAngleBracket', '⟩'),
			_Utils_Tuple2('RightArrowBar', '⇥'),
			_Utils_Tuple2('rightarrow', '→'),
			_Utils_Tuple2('RightArrow', '→'),
			_Utils_Tuple2('Rightarrow', '⇒'),
			_Utils_Tuple2('RightArrowLeftArrow', '⇄'),
			_Utils_Tuple2('rightarrowtail', '↣'),
			_Utils_Tuple2('RightCeiling', '⌉'),
			_Utils_Tuple2('RightDoubleBracket', '⟧'),
			_Utils_Tuple2('RightDownTeeVector', '⥝'),
			_Utils_Tuple2('RightDownVectorBar', '⥕'),
			_Utils_Tuple2('RightDownVector', '⇂'),
			_Utils_Tuple2('RightFloor', '⌋'),
			_Utils_Tuple2('rightharpoondown', '⇁'),
			_Utils_Tuple2('rightharpoonup', '⇀'),
			_Utils_Tuple2('rightleftarrows', '⇄'),
			_Utils_Tuple2('rightleftharpoons', '⇌'),
			_Utils_Tuple2('rightrightarrows', '⇉'),
			_Utils_Tuple2('rightsquigarrow', '↝'),
			_Utils_Tuple2('RightTeeArrow', '↦'),
			_Utils_Tuple2('RightTee', '⊢'),
			_Utils_Tuple2('RightTeeVector', '⥛'),
			_Utils_Tuple2('rightthreetimes', '⋌'),
			_Utils_Tuple2('RightTriangleBar', '⧐'),
			_Utils_Tuple2('RightTriangle', '⊳'),
			_Utils_Tuple2('RightTriangleEqual', '⊵'),
			_Utils_Tuple2('RightUpDownVector', '⥏'),
			_Utils_Tuple2('RightUpTeeVector', '⥜'),
			_Utils_Tuple2('RightUpVectorBar', '⥔'),
			_Utils_Tuple2('RightUpVector', '↾'),
			_Utils_Tuple2('RightVectorBar', '⥓'),
			_Utils_Tuple2('RightVector', '⇀'),
			_Utils_Tuple2('ring', '˚'),
			_Utils_Tuple2('risingdotseq', '≓'),
			_Utils_Tuple2('rlarr', '⇄'),
			_Utils_Tuple2('rlhar', '⇌'),
			_Utils_Tuple2('rlm', '\u200F'),
			_Utils_Tuple2('rmoustache', '⎱'),
			_Utils_Tuple2('rmoust', '⎱'),
			_Utils_Tuple2('rnmid', '⫮'),
			_Utils_Tuple2('roang', '⟭'),
			_Utils_Tuple2('roarr', '⇾'),
			_Utils_Tuple2('robrk', '⟧'),
			_Utils_Tuple2('ropar', '⦆'),
			_Utils_Tuple2('ropf', '\uD835\uDD63'),
			_Utils_Tuple2('Ropf', 'ℝ'),
			_Utils_Tuple2('roplus', '⨮'),
			_Utils_Tuple2('rotimes', '⨵'),
			_Utils_Tuple2('RoundImplies', '⥰'),
			_Utils_Tuple2('rpar', ')'),
			_Utils_Tuple2('rpargt', '⦔'),
			_Utils_Tuple2('rppolint', '⨒'),
			_Utils_Tuple2('rrarr', '⇉'),
			_Utils_Tuple2('Rrightarrow', '⇛'),
			_Utils_Tuple2('rsaquo', '›'),
			_Utils_Tuple2('rscr', '\uD835\uDCC7'),
			_Utils_Tuple2('Rscr', 'ℛ'),
			_Utils_Tuple2('rsh', '↱'),
			_Utils_Tuple2('Rsh', '↱'),
			_Utils_Tuple2('rsqb', ']'),
			_Utils_Tuple2('rsquo', '’'),
			_Utils_Tuple2('rsquor', '’'),
			_Utils_Tuple2('rthree', '⋌'),
			_Utils_Tuple2('rtimes', '⋊'),
			_Utils_Tuple2('rtri', '▹'),
			_Utils_Tuple2('rtrie', '⊵'),
			_Utils_Tuple2('rtrif', '▸'),
			_Utils_Tuple2('rtriltri', '⧎'),
			_Utils_Tuple2('RuleDelayed', '⧴'),
			_Utils_Tuple2('ruluhar', '⥨'),
			_Utils_Tuple2('rx', '℞'),
			_Utils_Tuple2('Sacute', 'Ś'),
			_Utils_Tuple2('sacute', 'ś'),
			_Utils_Tuple2('sbquo', '‚'),
			_Utils_Tuple2('scap', '⪸'),
			_Utils_Tuple2('Scaron', 'Š'),
			_Utils_Tuple2('scaron', 'š'),
			_Utils_Tuple2('Sc', '⪼'),
			_Utils_Tuple2('sc', '≻'),
			_Utils_Tuple2('sccue', '≽'),
			_Utils_Tuple2('sce', '⪰'),
			_Utils_Tuple2('scE', '⪴'),
			_Utils_Tuple2('Scedil', 'Ş'),
			_Utils_Tuple2('scedil', 'ş'),
			_Utils_Tuple2('Scirc', 'Ŝ'),
			_Utils_Tuple2('scirc', 'ŝ'),
			_Utils_Tuple2('scnap', '⪺'),
			_Utils_Tuple2('scnE', '⪶'),
			_Utils_Tuple2('scnsim', '⋩'),
			_Utils_Tuple2('scpolint', '⨓'),
			_Utils_Tuple2('scsim', '≿'),
			_Utils_Tuple2('Scy', 'С'),
			_Utils_Tuple2('scy', 'с'),
			_Utils_Tuple2('sdotb', '⊡'),
			_Utils_Tuple2('sdot', '⋅'),
			_Utils_Tuple2('sdote', '⩦'),
			_Utils_Tuple2('searhk', '⤥'),
			_Utils_Tuple2('searr', '↘'),
			_Utils_Tuple2('seArr', '⇘'),
			_Utils_Tuple2('searrow', '↘'),
			_Utils_Tuple2('sect', '§'),
			_Utils_Tuple2('semi', ';'),
			_Utils_Tuple2('seswar', '⤩'),
			_Utils_Tuple2('setminus', '∖'),
			_Utils_Tuple2('setmn', '∖'),
			_Utils_Tuple2('sext', '✶'),
			_Utils_Tuple2('Sfr', '\uD835\uDD16'),
			_Utils_Tuple2('sfr', '\uD835\uDD30'),
			_Utils_Tuple2('sfrown', '⌢'),
			_Utils_Tuple2('sharp', '♯'),
			_Utils_Tuple2('SHCHcy', 'Щ'),
			_Utils_Tuple2('shchcy', 'щ'),
			_Utils_Tuple2('SHcy', 'Ш'),
			_Utils_Tuple2('shcy', 'ш'),
			_Utils_Tuple2('ShortDownArrow', '↓'),
			_Utils_Tuple2('ShortLeftArrow', '←'),
			_Utils_Tuple2('shortmid', '∣'),
			_Utils_Tuple2('shortparallel', '∥'),
			_Utils_Tuple2('ShortRightArrow', '→'),
			_Utils_Tuple2('ShortUpArrow', '↑'),
			_Utils_Tuple2('shy', '\u00AD'),
			_Utils_Tuple2('Sigma', 'Σ'),
			_Utils_Tuple2('sigma', 'σ'),
			_Utils_Tuple2('sigmaf', 'ς'),
			_Utils_Tuple2('sigmav', 'ς'),
			_Utils_Tuple2('sim', '∼'),
			_Utils_Tuple2('simdot', '⩪'),
			_Utils_Tuple2('sime', '≃'),
			_Utils_Tuple2('simeq', '≃'),
			_Utils_Tuple2('simg', '⪞'),
			_Utils_Tuple2('simgE', '⪠'),
			_Utils_Tuple2('siml', '⪝'),
			_Utils_Tuple2('simlE', '⪟'),
			_Utils_Tuple2('simne', '≆'),
			_Utils_Tuple2('simplus', '⨤'),
			_Utils_Tuple2('simrarr', '⥲'),
			_Utils_Tuple2('slarr', '←'),
			_Utils_Tuple2('SmallCircle', '∘'),
			_Utils_Tuple2('smallsetminus', '∖'),
			_Utils_Tuple2('smashp', '⨳'),
			_Utils_Tuple2('smeparsl', '⧤'),
			_Utils_Tuple2('smid', '∣'),
			_Utils_Tuple2('smile', '⌣'),
			_Utils_Tuple2('smt', '⪪'),
			_Utils_Tuple2('smte', '⪬'),
			_Utils_Tuple2('smtes', '⪬︀'),
			_Utils_Tuple2('SOFTcy', 'Ь'),
			_Utils_Tuple2('softcy', 'ь'),
			_Utils_Tuple2('solbar', '⌿'),
			_Utils_Tuple2('solb', '⧄'),
			_Utils_Tuple2('sol', '/'),
			_Utils_Tuple2('Sopf', '\uD835\uDD4A'),
			_Utils_Tuple2('sopf', '\uD835\uDD64'),
			_Utils_Tuple2('spades', '♠'),
			_Utils_Tuple2('spadesuit', '♠'),
			_Utils_Tuple2('spar', '∥'),
			_Utils_Tuple2('sqcap', '⊓'),
			_Utils_Tuple2('sqcaps', '⊓︀'),
			_Utils_Tuple2('sqcup', '⊔'),
			_Utils_Tuple2('sqcups', '⊔︀'),
			_Utils_Tuple2('Sqrt', '√'),
			_Utils_Tuple2('sqsub', '⊏'),
			_Utils_Tuple2('sqsube', '⊑'),
			_Utils_Tuple2('sqsubset', '⊏'),
			_Utils_Tuple2('sqsubseteq', '⊑'),
			_Utils_Tuple2('sqsup', '⊐'),
			_Utils_Tuple2('sqsupe', '⊒'),
			_Utils_Tuple2('sqsupset', '⊐'),
			_Utils_Tuple2('sqsupseteq', '⊒'),
			_Utils_Tuple2('square', '□'),
			_Utils_Tuple2('Square', '□'),
			_Utils_Tuple2('SquareIntersection', '⊓'),
			_Utils_Tuple2('SquareSubset', '⊏'),
			_Utils_Tuple2('SquareSubsetEqual', '⊑'),
			_Utils_Tuple2('SquareSuperset', '⊐'),
			_Utils_Tuple2('SquareSupersetEqual', '⊒'),
			_Utils_Tuple2('SquareUnion', '⊔'),
			_Utils_Tuple2('squarf', '▪'),
			_Utils_Tuple2('squ', '□'),
			_Utils_Tuple2('squf', '▪'),
			_Utils_Tuple2('srarr', '→'),
			_Utils_Tuple2('Sscr', '\uD835\uDCAE'),
			_Utils_Tuple2('sscr', '\uD835\uDCC8'),
			_Utils_Tuple2('ssetmn', '∖'),
			_Utils_Tuple2('ssmile', '⌣'),
			_Utils_Tuple2('sstarf', '⋆'),
			_Utils_Tuple2('Star', '⋆'),
			_Utils_Tuple2('star', '☆'),
			_Utils_Tuple2('starf', '★'),
			_Utils_Tuple2('straightepsilon', 'ϵ'),
			_Utils_Tuple2('straightphi', 'ϕ'),
			_Utils_Tuple2('strns', '¯'),
			_Utils_Tuple2('sub', '⊂'),
			_Utils_Tuple2('Sub', '⋐'),
			_Utils_Tuple2('subdot', '⪽'),
			_Utils_Tuple2('subE', '⫅'),
			_Utils_Tuple2('sube', '⊆'),
			_Utils_Tuple2('subedot', '⫃'),
			_Utils_Tuple2('submult', '⫁'),
			_Utils_Tuple2('subnE', '⫋'),
			_Utils_Tuple2('subne', '⊊'),
			_Utils_Tuple2('subplus', '⪿'),
			_Utils_Tuple2('subrarr', '⥹'),
			_Utils_Tuple2('subset', '⊂'),
			_Utils_Tuple2('Subset', '⋐'),
			_Utils_Tuple2('subseteq', '⊆'),
			_Utils_Tuple2('subseteqq', '⫅'),
			_Utils_Tuple2('SubsetEqual', '⊆'),
			_Utils_Tuple2('subsetneq', '⊊'),
			_Utils_Tuple2('subsetneqq', '⫋'),
			_Utils_Tuple2('subsim', '⫇'),
			_Utils_Tuple2('subsub', '⫕'),
			_Utils_Tuple2('subsup', '⫓'),
			_Utils_Tuple2('succapprox', '⪸'),
			_Utils_Tuple2('succ', '≻'),
			_Utils_Tuple2('succcurlyeq', '≽'),
			_Utils_Tuple2('Succeeds', '≻'),
			_Utils_Tuple2('SucceedsEqual', '⪰'),
			_Utils_Tuple2('SucceedsSlantEqual', '≽'),
			_Utils_Tuple2('SucceedsTilde', '≿'),
			_Utils_Tuple2('succeq', '⪰'),
			_Utils_Tuple2('succnapprox', '⪺'),
			_Utils_Tuple2('succneqq', '⪶'),
			_Utils_Tuple2('succnsim', '⋩'),
			_Utils_Tuple2('succsim', '≿'),
			_Utils_Tuple2('SuchThat', '∋'),
			_Utils_Tuple2('sum', '∑'),
			_Utils_Tuple2('Sum', '∑'),
			_Utils_Tuple2('sung', '♪'),
			_Utils_Tuple2('sup1', '¹'),
			_Utils_Tuple2('sup2', '²'),
			_Utils_Tuple2('sup3', '³'),
			_Utils_Tuple2('sup', '⊃'),
			_Utils_Tuple2('Sup', '⋑'),
			_Utils_Tuple2('supdot', '⪾'),
			_Utils_Tuple2('supdsub', '⫘'),
			_Utils_Tuple2('supE', '⫆'),
			_Utils_Tuple2('supe', '⊇'),
			_Utils_Tuple2('supedot', '⫄'),
			_Utils_Tuple2('Superset', '⊃'),
			_Utils_Tuple2('SupersetEqual', '⊇'),
			_Utils_Tuple2('suphsol', '⟉'),
			_Utils_Tuple2('suphsub', '⫗'),
			_Utils_Tuple2('suplarr', '⥻'),
			_Utils_Tuple2('supmult', '⫂'),
			_Utils_Tuple2('supnE', '⫌'),
			_Utils_Tuple2('supne', '⊋'),
			_Utils_Tuple2('supplus', '⫀'),
			_Utils_Tuple2('supset', '⊃'),
			_Utils_Tuple2('Supset', '⋑'),
			_Utils_Tuple2('supseteq', '⊇'),
			_Utils_Tuple2('supseteqq', '⫆'),
			_Utils_Tuple2('supsetneq', '⊋'),
			_Utils_Tuple2('supsetneqq', '⫌'),
			_Utils_Tuple2('supsim', '⫈'),
			_Utils_Tuple2('supsub', '⫔'),
			_Utils_Tuple2('supsup', '⫖'),
			_Utils_Tuple2('swarhk', '⤦'),
			_Utils_Tuple2('swarr', '↙'),
			_Utils_Tuple2('swArr', '⇙'),
			_Utils_Tuple2('swarrow', '↙'),
			_Utils_Tuple2('swnwar', '⤪'),
			_Utils_Tuple2('szlig', 'ß'),
			_Utils_Tuple2('Tab', '\t'),
			_Utils_Tuple2('target', '⌖'),
			_Utils_Tuple2('Tau', 'Τ'),
			_Utils_Tuple2('tau', 'τ'),
			_Utils_Tuple2('tbrk', '⎴'),
			_Utils_Tuple2('Tcaron', 'Ť'),
			_Utils_Tuple2('tcaron', 'ť'),
			_Utils_Tuple2('Tcedil', 'Ţ'),
			_Utils_Tuple2('tcedil', 'ţ'),
			_Utils_Tuple2('Tcy', 'Т'),
			_Utils_Tuple2('tcy', 'т'),
			_Utils_Tuple2('tdot', '⃛'),
			_Utils_Tuple2('telrec', '⌕'),
			_Utils_Tuple2('Tfr', '\uD835\uDD17'),
			_Utils_Tuple2('tfr', '\uD835\uDD31'),
			_Utils_Tuple2('there4', '∴'),
			_Utils_Tuple2('therefore', '∴'),
			_Utils_Tuple2('Therefore', '∴'),
			_Utils_Tuple2('Theta', 'Θ'),
			_Utils_Tuple2('theta', 'θ'),
			_Utils_Tuple2('thetasym', 'ϑ'),
			_Utils_Tuple2('thetav', 'ϑ'),
			_Utils_Tuple2('thickapprox', '≈'),
			_Utils_Tuple2('thicksim', '∼'),
			_Utils_Tuple2('ThickSpace', '\u205F\u200A'),
			_Utils_Tuple2('ThinSpace', '\u2009'),
			_Utils_Tuple2('thinsp', '\u2009'),
			_Utils_Tuple2('thkap', '≈'),
			_Utils_Tuple2('thksim', '∼'),
			_Utils_Tuple2('THORN', 'Þ'),
			_Utils_Tuple2('thorn', 'þ'),
			_Utils_Tuple2('tilde', '˜'),
			_Utils_Tuple2('Tilde', '∼'),
			_Utils_Tuple2('TildeEqual', '≃'),
			_Utils_Tuple2('TildeFullEqual', '≅'),
			_Utils_Tuple2('TildeTilde', '≈'),
			_Utils_Tuple2('timesbar', '⨱'),
			_Utils_Tuple2('timesb', '⊠'),
			_Utils_Tuple2('times', '×'),
			_Utils_Tuple2('timesd', '⨰'),
			_Utils_Tuple2('tint', '∭'),
			_Utils_Tuple2('toea', '⤨'),
			_Utils_Tuple2('topbot', '⌶'),
			_Utils_Tuple2('topcir', '⫱'),
			_Utils_Tuple2('top', '⊤'),
			_Utils_Tuple2('Topf', '\uD835\uDD4B'),
			_Utils_Tuple2('topf', '\uD835\uDD65'),
			_Utils_Tuple2('topfork', '⫚'),
			_Utils_Tuple2('tosa', '⤩'),
			_Utils_Tuple2('tprime', '‴'),
			_Utils_Tuple2('trade', '™'),
			_Utils_Tuple2('TRADE', '™'),
			_Utils_Tuple2('triangle', '▵'),
			_Utils_Tuple2('triangledown', '▿'),
			_Utils_Tuple2('triangleleft', '◃'),
			_Utils_Tuple2('trianglelefteq', '⊴'),
			_Utils_Tuple2('triangleq', '≜'),
			_Utils_Tuple2('triangleright', '▹'),
			_Utils_Tuple2('trianglerighteq', '⊵'),
			_Utils_Tuple2('tridot', '◬'),
			_Utils_Tuple2('trie', '≜'),
			_Utils_Tuple2('triminus', '⨺'),
			_Utils_Tuple2('TripleDot', '⃛'),
			_Utils_Tuple2('triplus', '⨹'),
			_Utils_Tuple2('trisb', '⧍'),
			_Utils_Tuple2('tritime', '⨻'),
			_Utils_Tuple2('trpezium', '⏢'),
			_Utils_Tuple2('Tscr', '\uD835\uDCAF'),
			_Utils_Tuple2('tscr', '\uD835\uDCC9'),
			_Utils_Tuple2('TScy', 'Ц'),
			_Utils_Tuple2('tscy', 'ц'),
			_Utils_Tuple2('TSHcy', 'Ћ'),
			_Utils_Tuple2('tshcy', 'ћ'),
			_Utils_Tuple2('Tstrok', 'Ŧ'),
			_Utils_Tuple2('tstrok', 'ŧ'),
			_Utils_Tuple2('twixt', '≬'),
			_Utils_Tuple2('twoheadleftarrow', '↞'),
			_Utils_Tuple2('twoheadrightarrow', '↠'),
			_Utils_Tuple2('Uacute', 'Ú'),
			_Utils_Tuple2('uacute', 'ú'),
			_Utils_Tuple2('uarr', '↑'),
			_Utils_Tuple2('Uarr', '↟'),
			_Utils_Tuple2('uArr', '⇑'),
			_Utils_Tuple2('Uarrocir', '⥉'),
			_Utils_Tuple2('Ubrcy', 'Ў'),
			_Utils_Tuple2('ubrcy', 'ў'),
			_Utils_Tuple2('Ubreve', 'Ŭ'),
			_Utils_Tuple2('ubreve', 'ŭ'),
			_Utils_Tuple2('Ucirc', 'Û'),
			_Utils_Tuple2('ucirc', 'û'),
			_Utils_Tuple2('Ucy', 'У'),
			_Utils_Tuple2('ucy', 'у'),
			_Utils_Tuple2('udarr', '⇅'),
			_Utils_Tuple2('Udblac', 'Ű'),
			_Utils_Tuple2('udblac', 'ű'),
			_Utils_Tuple2('udhar', '⥮'),
			_Utils_Tuple2('ufisht', '⥾'),
			_Utils_Tuple2('Ufr', '\uD835\uDD18'),
			_Utils_Tuple2('ufr', '\uD835\uDD32'),
			_Utils_Tuple2('Ugrave', 'Ù'),
			_Utils_Tuple2('ugrave', 'ù'),
			_Utils_Tuple2('uHar', '⥣'),
			_Utils_Tuple2('uharl', '↿'),
			_Utils_Tuple2('uharr', '↾'),
			_Utils_Tuple2('uhblk', '▀'),
			_Utils_Tuple2('ulcorn', '⌜'),
			_Utils_Tuple2('ulcorner', '⌜'),
			_Utils_Tuple2('ulcrop', '⌏'),
			_Utils_Tuple2('ultri', '◸'),
			_Utils_Tuple2('Umacr', 'Ū'),
			_Utils_Tuple2('umacr', 'ū'),
			_Utils_Tuple2('uml', '¨'),
			_Utils_Tuple2('UnderBar', '_'),
			_Utils_Tuple2('UnderBrace', '⏟'),
			_Utils_Tuple2('UnderBracket', '⎵'),
			_Utils_Tuple2('UnderParenthesis', '⏝'),
			_Utils_Tuple2('Union', '⋃'),
			_Utils_Tuple2('UnionPlus', '⊎'),
			_Utils_Tuple2('Uogon', 'Ų'),
			_Utils_Tuple2('uogon', 'ų'),
			_Utils_Tuple2('Uopf', '\uD835\uDD4C'),
			_Utils_Tuple2('uopf', '\uD835\uDD66'),
			_Utils_Tuple2('UpArrowBar', '⤒'),
			_Utils_Tuple2('uparrow', '↑'),
			_Utils_Tuple2('UpArrow', '↑'),
			_Utils_Tuple2('Uparrow', '⇑'),
			_Utils_Tuple2('UpArrowDownArrow', '⇅'),
			_Utils_Tuple2('updownarrow', '↕'),
			_Utils_Tuple2('UpDownArrow', '↕'),
			_Utils_Tuple2('Updownarrow', '⇕'),
			_Utils_Tuple2('UpEquilibrium', '⥮'),
			_Utils_Tuple2('upharpoonleft', '↿'),
			_Utils_Tuple2('upharpoonright', '↾'),
			_Utils_Tuple2('uplus', '⊎'),
			_Utils_Tuple2('UpperLeftArrow', '↖'),
			_Utils_Tuple2('UpperRightArrow', '↗'),
			_Utils_Tuple2('upsi', 'υ'),
			_Utils_Tuple2('Upsi', 'ϒ'),
			_Utils_Tuple2('upsih', 'ϒ'),
			_Utils_Tuple2('Upsilon', 'Υ'),
			_Utils_Tuple2('upsilon', 'υ'),
			_Utils_Tuple2('UpTeeArrow', '↥'),
			_Utils_Tuple2('UpTee', '⊥'),
			_Utils_Tuple2('upuparrows', '⇈'),
			_Utils_Tuple2('urcorn', '⌝'),
			_Utils_Tuple2('urcorner', '⌝'),
			_Utils_Tuple2('urcrop', '⌎'),
			_Utils_Tuple2('Uring', 'Ů'),
			_Utils_Tuple2('uring', 'ů'),
			_Utils_Tuple2('urtri', '◹'),
			_Utils_Tuple2('Uscr', '\uD835\uDCB0'),
			_Utils_Tuple2('uscr', '\uD835\uDCCA'),
			_Utils_Tuple2('utdot', '⋰'),
			_Utils_Tuple2('Utilde', 'Ũ'),
			_Utils_Tuple2('utilde', 'ũ'),
			_Utils_Tuple2('utri', '▵'),
			_Utils_Tuple2('utrif', '▴'),
			_Utils_Tuple2('uuarr', '⇈'),
			_Utils_Tuple2('Uuml', 'Ü'),
			_Utils_Tuple2('uuml', 'ü'),
			_Utils_Tuple2('uwangle', '⦧'),
			_Utils_Tuple2('vangrt', '⦜'),
			_Utils_Tuple2('varepsilon', 'ϵ'),
			_Utils_Tuple2('varkappa', 'ϰ'),
			_Utils_Tuple2('varnothing', '∅'),
			_Utils_Tuple2('varphi', 'ϕ'),
			_Utils_Tuple2('varpi', 'ϖ'),
			_Utils_Tuple2('varpropto', '∝'),
			_Utils_Tuple2('varr', '↕'),
			_Utils_Tuple2('vArr', '⇕'),
			_Utils_Tuple2('varrho', 'ϱ'),
			_Utils_Tuple2('varsigma', 'ς'),
			_Utils_Tuple2('varsubsetneq', '⊊︀'),
			_Utils_Tuple2('varsubsetneqq', '⫋︀'),
			_Utils_Tuple2('varsupsetneq', '⊋︀'),
			_Utils_Tuple2('varsupsetneqq', '⫌︀'),
			_Utils_Tuple2('vartheta', 'ϑ'),
			_Utils_Tuple2('vartriangleleft', '⊲'),
			_Utils_Tuple2('vartriangleright', '⊳'),
			_Utils_Tuple2('vBar', '⫨'),
			_Utils_Tuple2('Vbar', '⫫'),
			_Utils_Tuple2('vBarv', '⫩'),
			_Utils_Tuple2('Vcy', 'В'),
			_Utils_Tuple2('vcy', 'в'),
			_Utils_Tuple2('vdash', '⊢'),
			_Utils_Tuple2('vDash', '⊨'),
			_Utils_Tuple2('Vdash', '⊩'),
			_Utils_Tuple2('VDash', '⊫'),
			_Utils_Tuple2('Vdashl', '⫦'),
			_Utils_Tuple2('veebar', '⊻'),
			_Utils_Tuple2('vee', '∨'),
			_Utils_Tuple2('Vee', '⋁'),
			_Utils_Tuple2('veeeq', '≚'),
			_Utils_Tuple2('vellip', '⋮'),
			_Utils_Tuple2('verbar', '|'),
			_Utils_Tuple2('Verbar', '‖'),
			_Utils_Tuple2('vert', '|'),
			_Utils_Tuple2('Vert', '‖'),
			_Utils_Tuple2('VerticalBar', '∣'),
			_Utils_Tuple2('VerticalLine', '|'),
			_Utils_Tuple2('VerticalSeparator', '❘'),
			_Utils_Tuple2('VerticalTilde', '≀'),
			_Utils_Tuple2('VeryThinSpace', '\u200A'),
			_Utils_Tuple2('Vfr', '\uD835\uDD19'),
			_Utils_Tuple2('vfr', '\uD835\uDD33'),
			_Utils_Tuple2('vltri', '⊲'),
			_Utils_Tuple2('vnsub', '⊂⃒'),
			_Utils_Tuple2('vnsup', '⊃⃒'),
			_Utils_Tuple2('Vopf', '\uD835\uDD4D'),
			_Utils_Tuple2('vopf', '\uD835\uDD67'),
			_Utils_Tuple2('vprop', '∝'),
			_Utils_Tuple2('vrtri', '⊳'),
			_Utils_Tuple2('Vscr', '\uD835\uDCB1'),
			_Utils_Tuple2('vscr', '\uD835\uDCCB'),
			_Utils_Tuple2('vsubnE', '⫋︀'),
			_Utils_Tuple2('vsubne', '⊊︀'),
			_Utils_Tuple2('vsupnE', '⫌︀'),
			_Utils_Tuple2('vsupne', '⊋︀'),
			_Utils_Tuple2('Vvdash', '⊪'),
			_Utils_Tuple2('vzigzag', '⦚'),
			_Utils_Tuple2('Wcirc', 'Ŵ'),
			_Utils_Tuple2('wcirc', 'ŵ'),
			_Utils_Tuple2('wedbar', '⩟'),
			_Utils_Tuple2('wedge', '∧'),
			_Utils_Tuple2('Wedge', '⋀'),
			_Utils_Tuple2('wedgeq', '≙'),
			_Utils_Tuple2('weierp', '℘'),
			_Utils_Tuple2('Wfr', '\uD835\uDD1A'),
			_Utils_Tuple2('wfr', '\uD835\uDD34'),
			_Utils_Tuple2('Wopf', '\uD835\uDD4E'),
			_Utils_Tuple2('wopf', '\uD835\uDD68'),
			_Utils_Tuple2('wp', '℘'),
			_Utils_Tuple2('wr', '≀'),
			_Utils_Tuple2('wreath', '≀'),
			_Utils_Tuple2('Wscr', '\uD835\uDCB2'),
			_Utils_Tuple2('wscr', '\uD835\uDCCC'),
			_Utils_Tuple2('xcap', '⋂'),
			_Utils_Tuple2('xcirc', '◯'),
			_Utils_Tuple2('xcup', '⋃'),
			_Utils_Tuple2('xdtri', '▽'),
			_Utils_Tuple2('Xfr', '\uD835\uDD1B'),
			_Utils_Tuple2('xfr', '\uD835\uDD35'),
			_Utils_Tuple2('xharr', '⟷'),
			_Utils_Tuple2('xhArr', '⟺'),
			_Utils_Tuple2('Xi', 'Ξ'),
			_Utils_Tuple2('xi', 'ξ'),
			_Utils_Tuple2('xlarr', '⟵'),
			_Utils_Tuple2('xlArr', '⟸'),
			_Utils_Tuple2('xmap', '⟼'),
			_Utils_Tuple2('xnis', '⋻'),
			_Utils_Tuple2('xodot', '⨀'),
			_Utils_Tuple2('Xopf', '\uD835\uDD4F'),
			_Utils_Tuple2('xopf', '\uD835\uDD69'),
			_Utils_Tuple2('xoplus', '⨁'),
			_Utils_Tuple2('xotime', '⨂'),
			_Utils_Tuple2('xrarr', '⟶'),
			_Utils_Tuple2('xrArr', '⟹'),
			_Utils_Tuple2('Xscr', '\uD835\uDCB3'),
			_Utils_Tuple2('xscr', '\uD835\uDCCD'),
			_Utils_Tuple2('xsqcup', '⨆'),
			_Utils_Tuple2('xuplus', '⨄'),
			_Utils_Tuple2('xutri', '△'),
			_Utils_Tuple2('xvee', '⋁'),
			_Utils_Tuple2('xwedge', '⋀'),
			_Utils_Tuple2('Yacute', 'Ý'),
			_Utils_Tuple2('yacute', 'ý'),
			_Utils_Tuple2('YAcy', 'Я'),
			_Utils_Tuple2('yacy', 'я'),
			_Utils_Tuple2('Ycirc', 'Ŷ'),
			_Utils_Tuple2('ycirc', 'ŷ'),
			_Utils_Tuple2('Ycy', 'Ы'),
			_Utils_Tuple2('ycy', 'ы'),
			_Utils_Tuple2('yen', '¥'),
			_Utils_Tuple2('Yfr', '\uD835\uDD1C'),
			_Utils_Tuple2('yfr', '\uD835\uDD36'),
			_Utils_Tuple2('YIcy', 'Ї'),
			_Utils_Tuple2('yicy', 'ї'),
			_Utils_Tuple2('Yopf', '\uD835\uDD50'),
			_Utils_Tuple2('yopf', '\uD835\uDD6A'),
			_Utils_Tuple2('Yscr', '\uD835\uDCB4'),
			_Utils_Tuple2('yscr', '\uD835\uDCCE'),
			_Utils_Tuple2('YUcy', 'Ю'),
			_Utils_Tuple2('yucy', 'ю'),
			_Utils_Tuple2('yuml', 'ÿ'),
			_Utils_Tuple2('Yuml', 'Ÿ'),
			_Utils_Tuple2('Zacute', 'Ź'),
			_Utils_Tuple2('zacute', 'ź'),
			_Utils_Tuple2('Zcaron', 'Ž'),
			_Utils_Tuple2('zcaron', 'ž'),
			_Utils_Tuple2('Zcy', 'З'),
			_Utils_Tuple2('zcy', 'з'),
			_Utils_Tuple2('Zdot', 'Ż'),
			_Utils_Tuple2('zdot', 'ż'),
			_Utils_Tuple2('zeetrf', 'ℨ'),
			_Utils_Tuple2('ZeroWidthSpace', '\u200B'),
			_Utils_Tuple2('Zeta', 'Ζ'),
			_Utils_Tuple2('zeta', 'ζ'),
			_Utils_Tuple2('zfr', '\uD835\uDD37'),
			_Utils_Tuple2('Zfr', 'ℨ'),
			_Utils_Tuple2('ZHcy', 'Ж'),
			_Utils_Tuple2('zhcy', 'ж'),
			_Utils_Tuple2('zigrarr', '⇝'),
			_Utils_Tuple2('zopf', '\uD835\uDD6B'),
			_Utils_Tuple2('Zopf', 'ℤ'),
			_Utils_Tuple2('Zscr', '\uD835\uDCB5'),
			_Utils_Tuple2('zscr', '\uD835\uDCCF'),
			_Utils_Tuple2('zwj', '\u200D'),
			_Utils_Tuple2('zwnj', '\u200C')
		]));
var $hecrj$html_parser$Html$Parser$namedCharacterReference = A2(
	$elm$parser$Parser$map,
	function (reference) {
		return A2(
			$elm$core$Maybe$withDefault,
			'&' + (reference + ';'),
			A2($elm$core$Dict$get, reference, $hecrj$html_parser$Html$Parser$NamedCharacterReferences$dict));
	},
	$elm$parser$Parser$getChompedString(
		$hecrj$html_parser$Html$Parser$chompOneOrMore($elm$core$Char$isAlpha)));
var $elm$core$String$cons = _String_cons;
var $elm$core$String$fromChar = function (_char) {
	return A2($elm$core$String$cons, _char, '');
};
var $elm$core$Char$fromCode = _Char_fromCode;
var $elm$core$Basics$pow = _Basics_pow;
var $rtfeldman$elm_hex$Hex$fromStringHelp = F3(
	function (position, chars, accumulated) {
		fromStringHelp:
		while (true) {
			if (!chars.b) {
				return $elm$core$Result$Ok(accumulated);
			} else {
				var _char = chars.a;
				var rest = chars.b;
				switch (_char.valueOf()) {
					case '0':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated;
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '1':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + A2($elm$core$Basics$pow, 16, position);
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '2':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (2 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '3':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (3 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '4':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (4 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '5':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (5 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '6':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (6 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '7':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (7 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '8':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (8 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '9':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (9 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'a':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (10 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'b':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (11 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'c':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (12 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'd':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (13 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'e':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (14 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'f':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (15 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					default:
						var nonHex = _char;
						return $elm$core$Result$Err(
							$elm$core$String$fromChar(nonHex) + ' is not a valid hexadecimal character.');
				}
			}
		}
	});
var $elm$core$Result$map = F2(
	function (func, ra) {
		if (ra.$ === 'Ok') {
			var a = ra.a;
			return $elm$core$Result$Ok(
				func(a));
		} else {
			var e = ra.a;
			return $elm$core$Result$Err(e);
		}
	});
var $elm$core$List$tail = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(xs);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$String$foldr = _String_foldr;
var $elm$core$String$toList = function (string) {
	return A3($elm$core$String$foldr, $elm$core$List$cons, _List_Nil, string);
};
var $rtfeldman$elm_hex$Hex$fromString = function (str) {
	if ($elm$core$String$isEmpty(str)) {
		return $elm$core$Result$Err('Empty strings are not valid hexadecimal strings.');
	} else {
		var result = function () {
			if (A2($elm$core$String$startsWith, '-', str)) {
				var list = A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					$elm$core$List$tail(
						$elm$core$String$toList(str)));
				return A2(
					$elm$core$Result$map,
					$elm$core$Basics$negate,
					A3(
						$rtfeldman$elm_hex$Hex$fromStringHelp,
						$elm$core$List$length(list) - 1,
						list,
						0));
			} else {
				return A3(
					$rtfeldman$elm_hex$Hex$fromStringHelp,
					$elm$core$String$length(str) - 1,
					$elm$core$String$toList(str),
					0);
			}
		}();
		var formatError = function (err) {
			return A2(
				$elm$core$String$join,
				' ',
				_List_fromArray(
					['\"' + (str + '\"'), 'is not a valid hexadecimal string because', err]));
		};
		return A2($elm$core$Result$mapError, formatError, result);
	}
};
var $elm$core$Char$isHexDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return ((48 <= code) && (code <= 57)) || (((65 <= code) && (code <= 70)) || ((97 <= code) && (code <= 102)));
};
var $hecrj$html_parser$Html$Parser$hexadecimal = A2(
	$elm$parser$Parser$andThen,
	function (hex) {
		var _v0 = $rtfeldman$elm_hex$Hex$fromString(
			$elm$core$String$toLower(hex));
		if (_v0.$ === 'Ok') {
			var value = _v0.a;
			return $elm$parser$Parser$succeed(value);
		} else {
			var error = _v0.a;
			return $elm$parser$Parser$problem(error);
		}
	},
	$elm$parser$Parser$getChompedString(
		$hecrj$html_parser$Html$Parser$chompOneOrMore($elm$core$Char$isHexDigit)));
var $elm$parser$Parser$ExpectingInt = {$: 'ExpectingInt'};
var $elm$parser$Parser$Advanced$consumeBase = _Parser_consumeBase;
var $elm$parser$Parser$Advanced$consumeBase16 = _Parser_consumeBase16;
var $elm$parser$Parser$Advanced$bumpOffset = F2(
	function (newOffset, s) {
		return {col: s.col + (newOffset - s.offset), context: s.context, indent: s.indent, offset: newOffset, row: s.row, src: s.src};
	});
var $elm$parser$Parser$Advanced$chompBase10 = _Parser_chompBase10;
var $elm$parser$Parser$Advanced$isAsciiCode = _Parser_isAsciiCode;
var $elm$parser$Parser$Advanced$consumeExp = F2(
	function (offset, src) {
		if (A3($elm$parser$Parser$Advanced$isAsciiCode, 101, offset, src) || A3($elm$parser$Parser$Advanced$isAsciiCode, 69, offset, src)) {
			var eOffset = offset + 1;
			var expOffset = (A3($elm$parser$Parser$Advanced$isAsciiCode, 43, eOffset, src) || A3($elm$parser$Parser$Advanced$isAsciiCode, 45, eOffset, src)) ? (eOffset + 1) : eOffset;
			var newOffset = A2($elm$parser$Parser$Advanced$chompBase10, expOffset, src);
			return _Utils_eq(expOffset, newOffset) ? (-newOffset) : newOffset;
		} else {
			return offset;
		}
	});
var $elm$parser$Parser$Advanced$consumeDotAndExp = F2(
	function (offset, src) {
		return A3($elm$parser$Parser$Advanced$isAsciiCode, 46, offset, src) ? A2(
			$elm$parser$Parser$Advanced$consumeExp,
			A2($elm$parser$Parser$Advanced$chompBase10, offset + 1, src),
			src) : A2($elm$parser$Parser$Advanced$consumeExp, offset, src);
	});
var $elm$parser$Parser$Advanced$finalizeInt = F5(
	function (invalid, handler, startOffset, _v0, s) {
		var endOffset = _v0.a;
		var n = _v0.b;
		if (handler.$ === 'Err') {
			var x = handler.a;
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				true,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		} else {
			var toValue = handler.a;
			return _Utils_eq(startOffset, endOffset) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				_Utils_cmp(s.offset, startOffset) < 0,
				A2($elm$parser$Parser$Advanced$fromState, s, invalid)) : A3(
				$elm$parser$Parser$Advanced$Good,
				true,
				toValue(n),
				A2($elm$parser$Parser$Advanced$bumpOffset, endOffset, s));
		}
	});
var $elm$core$String$toFloat = _String_toFloat;
var $elm$parser$Parser$Advanced$finalizeFloat = F6(
	function (invalid, expecting, intSettings, floatSettings, intPair, s) {
		var intOffset = intPair.a;
		var floatOffset = A2($elm$parser$Parser$Advanced$consumeDotAndExp, intOffset, s.src);
		if (floatOffset < 0) {
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				true,
				A4($elm$parser$Parser$Advanced$fromInfo, s.row, s.col - (floatOffset + s.offset), invalid, s.context));
		} else {
			if (_Utils_eq(s.offset, floatOffset)) {
				return A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, expecting));
			} else {
				if (_Utils_eq(intOffset, floatOffset)) {
					return A5($elm$parser$Parser$Advanced$finalizeInt, invalid, intSettings, s.offset, intPair, s);
				} else {
					if (floatSettings.$ === 'Err') {
						var x = floatSettings.a;
						return A2(
							$elm$parser$Parser$Advanced$Bad,
							true,
							A2($elm$parser$Parser$Advanced$fromState, s, invalid));
					} else {
						var toValue = floatSettings.a;
						var _v1 = $elm$core$String$toFloat(
							A3($elm$core$String$slice, s.offset, floatOffset, s.src));
						if (_v1.$ === 'Nothing') {
							return A2(
								$elm$parser$Parser$Advanced$Bad,
								true,
								A2($elm$parser$Parser$Advanced$fromState, s, invalid));
						} else {
							var n = _v1.a;
							return A3(
								$elm$parser$Parser$Advanced$Good,
								true,
								toValue(n),
								A2($elm$parser$Parser$Advanced$bumpOffset, floatOffset, s));
						}
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$number = function (c) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			if (A3($elm$parser$Parser$Advanced$isAsciiCode, 48, s.offset, s.src)) {
				var zeroOffset = s.offset + 1;
				var baseOffset = zeroOffset + 1;
				return A3($elm$parser$Parser$Advanced$isAsciiCode, 120, zeroOffset, s.src) ? A5(
					$elm$parser$Parser$Advanced$finalizeInt,
					c.invalid,
					c.hex,
					baseOffset,
					A2($elm$parser$Parser$Advanced$consumeBase16, baseOffset, s.src),
					s) : (A3($elm$parser$Parser$Advanced$isAsciiCode, 111, zeroOffset, s.src) ? A5(
					$elm$parser$Parser$Advanced$finalizeInt,
					c.invalid,
					c.octal,
					baseOffset,
					A3($elm$parser$Parser$Advanced$consumeBase, 8, baseOffset, s.src),
					s) : (A3($elm$parser$Parser$Advanced$isAsciiCode, 98, zeroOffset, s.src) ? A5(
					$elm$parser$Parser$Advanced$finalizeInt,
					c.invalid,
					c.binary,
					baseOffset,
					A3($elm$parser$Parser$Advanced$consumeBase, 2, baseOffset, s.src),
					s) : A6(
					$elm$parser$Parser$Advanced$finalizeFloat,
					c.invalid,
					c.expecting,
					c._int,
					c._float,
					_Utils_Tuple2(zeroOffset, 0),
					s)));
			} else {
				return A6(
					$elm$parser$Parser$Advanced$finalizeFloat,
					c.invalid,
					c.expecting,
					c._int,
					c._float,
					A3($elm$parser$Parser$Advanced$consumeBase, 10, s.offset, s.src),
					s);
			}
		});
};
var $elm$parser$Parser$Advanced$int = F2(
	function (expecting, invalid) {
		return $elm$parser$Parser$Advanced$number(
			{
				binary: $elm$core$Result$Err(invalid),
				expecting: expecting,
				_float: $elm$core$Result$Err(invalid),
				hex: $elm$core$Result$Err(invalid),
				_int: $elm$core$Result$Ok($elm$core$Basics$identity),
				invalid: invalid,
				octal: $elm$core$Result$Err(invalid)
			});
	});
var $elm$parser$Parser$int = A2($elm$parser$Parser$Advanced$int, $elm$parser$Parser$ExpectingInt, $elm$parser$Parser$ExpectingInt);
var $hecrj$html_parser$Html$Parser$numericCharacterReference = function () {
	var codepoint = $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$Basics$identity),
					$elm$parser$Parser$chompIf(
						function (c) {
							return _Utils_eq(
								c,
								_Utils_chr('x')) || _Utils_eq(
								c,
								_Utils_chr('X'));
						})),
				$hecrj$html_parser$Html$Parser$hexadecimal),
				A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$Basics$identity),
					$elm$parser$Parser$chompWhile(
						$elm$core$Basics$eq(
							_Utils_chr('0')))),
				$elm$parser$Parser$int)
			]));
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$chompIf(
				$elm$core$Basics$eq(
					_Utils_chr('#')))),
		A2(
			$elm$parser$Parser$map,
			A2($elm$core$Basics$composeR, $elm$core$Char$fromCode, $elm$core$String$fromChar),
			codepoint));
}();
var $hecrj$html_parser$Html$Parser$characterReference = A2(
	$elm$parser$Parser$keeper,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed($elm$core$Basics$identity),
		$elm$parser$Parser$chompIf(
			$elm$core$Basics$eq(
				_Utils_chr('&')))),
	$elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$backtrackable($hecrj$html_parser$Html$Parser$namedCharacterReference),
				$hecrj$html_parser$Html$Parser$chompSemicolon),
				A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$backtrackable($hecrj$html_parser$Html$Parser$numericCharacterReference),
				$hecrj$html_parser$Html$Parser$chompSemicolon),
				$elm$parser$Parser$succeed('&')
			])));
var $hecrj$html_parser$Html$Parser$tagAttributeQuotedValue = function (quote) {
	var isQuotedValueChar = function (c) {
		return (!_Utils_eq(c, quote)) && (!_Utils_eq(
			c,
			_Utils_chr('&')));
	};
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$chompIf(
				$elm$core$Basics$eq(quote))),
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$map,
				$elm$core$String$join(''),
				$hecrj$html_parser$Html$Parser$many(
					$elm$parser$Parser$oneOf(
						_List_fromArray(
							[
								$elm$parser$Parser$getChompedString(
								$hecrj$html_parser$Html$Parser$chompOneOrMore(isQuotedValueChar)),
								$hecrj$html_parser$Html$Parser$characterReference
							])))),
			$elm$parser$Parser$chompIf(
				$elm$core$Basics$eq(quote))));
};
var $hecrj$html_parser$Html$Parser$oneOrMore = F2(
	function (type_, parser_) {
		return A2(
			$elm$parser$Parser$loop,
			_List_Nil,
			function (list) {
				return $elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							A2(
							$elm$parser$Parser$map,
							function (_new) {
								return $elm$parser$Parser$Loop(
									A2($elm$core$List$cons, _new, list));
							},
							parser_),
							$elm$core$List$isEmpty(list) ? $elm$parser$Parser$problem('expecting at least one ' + type_) : $elm$parser$Parser$succeed(
							$elm$parser$Parser$Done(
								$elm$core$List$reverse(list)))
						]));
			});
	});
var $hecrj$html_parser$Html$Parser$tagAttributeUnquotedValue = function () {
	var isUnquotedValueChar = function (c) {
		return (!$hecrj$html_parser$Html$Parser$isSpaceCharacter(c)) && ((!_Utils_eq(
			c,
			_Utils_chr('\"'))) && ((!_Utils_eq(
			c,
			_Utils_chr('\''))) && ((!_Utils_eq(
			c,
			_Utils_chr('='))) && ((!_Utils_eq(
			c,
			_Utils_chr('<'))) && ((!_Utils_eq(
			c,
			_Utils_chr('>'))) && ((!_Utils_eq(
			c,
			_Utils_chr('`'))) && (!_Utils_eq(
			c,
			_Utils_chr('&')))))))));
	};
	return A2(
		$elm$parser$Parser$map,
		$elm$core$String$join(''),
		A2(
			$hecrj$html_parser$Html$Parser$oneOrMore,
			'attribute value',
			$elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						$elm$parser$Parser$getChompedString(
						$hecrj$html_parser$Html$Parser$chompOneOrMore(isUnquotedValueChar)),
						$hecrj$html_parser$Html$Parser$characterReference
					]))));
}();
var $hecrj$html_parser$Html$Parser$tagAttributeValue = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$Basics$identity),
					$elm$parser$Parser$chompIf(
						$elm$core$Basics$eq(
							_Utils_chr('=')))),
				$elm$parser$Parser$chompWhile($hecrj$html_parser$Html$Parser$isSpaceCharacter)),
			$elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						$hecrj$html_parser$Html$Parser$tagAttributeUnquotedValue,
						$hecrj$html_parser$Html$Parser$tagAttributeQuotedValue(
						_Utils_chr('\"')),
						$hecrj$html_parser$Html$Parser$tagAttributeQuotedValue(
						_Utils_chr('\''))
					]))),
			$elm$parser$Parser$succeed('')
		]));
var $hecrj$html_parser$Html$Parser$tagAttribute = A2(
	$elm$parser$Parser$keeper,
	A2(
		$elm$parser$Parser$keeper,
		$elm$parser$Parser$succeed($elm$core$Tuple$pair),
		A2(
			$elm$parser$Parser$ignorer,
			$hecrj$html_parser$Html$Parser$tagAttributeName,
			$elm$parser$Parser$chompWhile($hecrj$html_parser$Html$Parser$isSpaceCharacter))),
	A2(
		$elm$parser$Parser$ignorer,
		$hecrj$html_parser$Html$Parser$tagAttributeValue,
		$elm$parser$Parser$chompWhile($hecrj$html_parser$Html$Parser$isSpaceCharacter)));
var $hecrj$html_parser$Html$Parser$tagAttributes = $hecrj$html_parser$Html$Parser$many($hecrj$html_parser$Html$Parser$tagAttribute);
var $hecrj$html_parser$Html$Parser$tagName = A2(
	$elm$parser$Parser$map,
	$elm$core$String$toLower,
	$elm$parser$Parser$getChompedString(
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$chompIf($elm$core$Char$isAlphaNum),
			$elm$parser$Parser$chompWhile(
				function (c) {
					return $elm$core$Char$isAlphaNum(c) || _Utils_eq(
						c,
						_Utils_chr('-'));
				}))));
var $hecrj$html_parser$Html$Parser$Text = function (a) {
	return {$: 'Text', a: a};
};
var $hecrj$html_parser$Html$Parser$text = A2(
	$elm$parser$Parser$map,
	A2(
		$elm$core$Basics$composeR,
		$elm$core$String$join(''),
		$hecrj$html_parser$Html$Parser$Text),
	A2(
		$hecrj$html_parser$Html$Parser$oneOrMore,
		'text element',
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$getChompedString(
					$hecrj$html_parser$Html$Parser$chompOneOrMore(
						function (c) {
							return (!_Utils_eq(
								c,
								_Utils_chr('<'))) && (!_Utils_eq(
								c,
								_Utils_chr('&')));
						})),
					$hecrj$html_parser$Html$Parser$characterReference
				]))));
function $hecrj$html_parser$Html$Parser$cyclic$node() {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$hecrj$html_parser$Html$Parser$text,
				$hecrj$html_parser$Html$Parser$comment,
				$hecrj$html_parser$Html$Parser$cyclic$element()
			]));
}
function $hecrj$html_parser$Html$Parser$cyclic$element() {
	return A2(
		$elm$parser$Parser$andThen,
		function (_v0) {
			var name = _v0.a;
			var attributes = _v0.b;
			return $hecrj$html_parser$Html$Parser$isVoidElement(name) ? A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						A3($hecrj$html_parser$Html$Parser$Element, name, attributes, _List_Nil)),
					$elm$parser$Parser$oneOf(
						_List_fromArray(
							[
								$elm$parser$Parser$chompIf(
								$elm$core$Basics$eq(
									_Utils_chr('/'))),
								$elm$parser$Parser$succeed(_Utils_Tuple0)
							]))),
				$elm$parser$Parser$chompIf(
					$elm$core$Basics$eq(
						_Utils_chr('>')))) : A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						A2($hecrj$html_parser$Html$Parser$Element, name, attributes)),
					$elm$parser$Parser$chompIf(
						$elm$core$Basics$eq(
							_Utils_chr('>')))),
				A2(
					$elm$parser$Parser$ignorer,
					$hecrj$html_parser$Html$Parser$many(
						$elm$parser$Parser$backtrackable(
							$hecrj$html_parser$Html$Parser$cyclic$node())),
					$hecrj$html_parser$Html$Parser$closingTag(name)));
		},
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$Tuple$pair),
					$elm$parser$Parser$chompIf(
						$elm$core$Basics$eq(
							_Utils_chr('<')))),
				A2(
					$elm$parser$Parser$ignorer,
					$hecrj$html_parser$Html$Parser$tagName,
					$elm$parser$Parser$chompWhile($hecrj$html_parser$Html$Parser$isSpaceCharacter))),
			$hecrj$html_parser$Html$Parser$tagAttributes));
}
try {
	var $hecrj$html_parser$Html$Parser$node = $hecrj$html_parser$Html$Parser$cyclic$node();
	$hecrj$html_parser$Html$Parser$cyclic$node = function () {
		return $hecrj$html_parser$Html$Parser$node;
	};
	var $hecrj$html_parser$Html$Parser$element = $hecrj$html_parser$Html$Parser$cyclic$element();
	$hecrj$html_parser$Html$Parser$cyclic$element = function () {
		return $hecrj$html_parser$Html$Parser$element;
	};
} catch ($) {
	throw 'Some top-level definitions from `Html.Parser` are causing infinite recursion:\n\n  ┌─────┐\n  │    node\n  │     ↓\n  │    element\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $hecrj$html_parser$Html$Parser$run = function (str) {
	return $elm$core$String$isEmpty(str) ? $elm$core$Result$Ok(_List_Nil) : A2(
		$elm$parser$Parser$run,
		A2($hecrj$html_parser$Html$Parser$oneOrMore, 'node', $hecrj$html_parser$Html$Parser$node),
		str);
};
var $author$project$Notmuch$textPart = F5(
	function (f, mime, id, content_, l) {
		var _v0 = _Utils_Tuple2(content_, mime);
		_v0$2:
		while (true) {
			if (_v0.a.$ === 'Just') {
				switch (_v0.b) {
					case 'text/plain':
						var content = _v0.a.a;
						return A2(
							$author$project$Notmuch$MimePart,
							id,
							f(content));
					case 'text/html':
						var content = _v0.a.a;
						return A2(
							$author$project$Notmuch$MimePart,
							id,
							function () {
								var _v1 = $hecrj$html_parser$Html$Parser$run(content);
								if (_v1.$ === 'Ok') {
									var nodes = _v1.a;
									return $author$project$Notmuch$HtmlMime(
										$author$project$Notmuch$filterBlockQuotes(nodes));
								} else {
									return $author$project$Notmuch$DownloadMime(
										{
											content: $elm$core$Maybe$Just(content),
											disposition: $elm$core$Maybe$Nothing,
											filename: $elm$core$Maybe$Nothing,
											length: l,
											mime: mime
										});
								}
							}());
					default:
						break _v0$2;
				}
			} else {
				break _v0$2;
			}
		}
		return A2(
			$author$project$Notmuch$MimePart,
			id,
			$author$project$Notmuch$DownloadMime(
				{content: content_, disposition: $elm$core$Maybe$Nothing, filename: $elm$core$Maybe$Nothing, length: l, mime: mime}));
	});
function $author$project$Notmuch$cyclic$bodyDecoder() {
	return $elm$json$Json$Decode$list(
		$author$project$Notmuch$cyclic$textPartDecoder());
}
function $author$project$Notmuch$cyclic$textPartDecoder() {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A6(
				$elm$json$Json$Decode$map5,
				$author$project$Notmuch$mimePartDownload,
				A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$int),
				A2($elm$json$Json$Decode$field, 'content-type', $elm$json$Json$Decode$string),
				A2($elm$json$Json$Decode$field, 'content-disposition', $elm$json$Json$Decode$string),
				A2($elm$json$Json$Decode$field, 'filename', $elm$json$Json$Decode$string),
				A2($elm$json$Json$Decode$field, 'content-length', $elm$json$Json$Decode$int)),
				A4(
				$elm$json$Json$Decode$map3,
				$author$project$Notmuch$multiPart,
				A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$int),
				A2($elm$json$Json$Decode$field, 'content-type', $elm$json$Json$Decode$string),
				$elm$json$Json$Decode$oneOf(
					_List_fromArray(
						[
							A2(
							$elm$json$Json$Decode$field,
							'content',
							$elm$json$Json$Decode$lazy(
								function (_v0) {
									return $author$project$Notmuch$cyclic$bodyDecoder();
								}))
						]))),
				A5(
				$elm$json$Json$Decode$map4,
				$author$project$Notmuch$textPart($author$project$Notmuch$PlainMime),
				A2($elm$json$Json$Decode$field, 'content-type', $elm$json$Json$Decode$string),
				A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$int),
				$elm$json$Json$Decode$maybe(
					A2($elm$json$Json$Decode$field, 'content', $elm$json$Json$Decode$string)),
				$elm$json$Json$Decode$maybe(
					A2($elm$json$Json$Decode$field, 'content-length', $elm$json$Json$Decode$int)))
			]));
}
try {
	var $author$project$Notmuch$bodyDecoder = $author$project$Notmuch$cyclic$bodyDecoder();
	$author$project$Notmuch$cyclic$bodyDecoder = function () {
		return $author$project$Notmuch$bodyDecoder;
	};
	var $author$project$Notmuch$textPartDecoder = $author$project$Notmuch$cyclic$textPartDecoder();
	$author$project$Notmuch$cyclic$textPartDecoder = function () {
		return $author$project$Notmuch$textPartDecoder;
	};
} catch ($) {
	throw 'Some top-level definitions from `Notmuch` are causing infinite recursion:\n\n  ┌─────┐\n  │    bodyDecoder\n  │     ↓\n  │    textPartDecoder\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $elm$json$Json$Decode$bool = _Json_decodeBool;
var $elm$parser$Parser$Optional = {$: 'Optional'};
var $elm$parser$Parser$ExpectingEnd = {$: 'ExpectingEnd'};
var $elm$parser$Parser$Advanced$end = function (x) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return _Utils_eq(
				$elm$core$String$length(s.src),
				s.offset) ? A3($elm$parser$Parser$Advanced$Good, false, _Utils_Tuple0, s) : A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		});
};
var $elm$parser$Parser$end = $elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd);
var $author$project$Access$justIf = F2(
	function (p, x) {
		return p(x) ? $elm$core$Maybe$Just(x) : $elm$core$Maybe$Nothing;
	});
var $author$project$Person$mailKomma = function (c) {
	return !_Utils_eq(
		c,
		_Utils_chr(','));
};
var $elm$parser$Parser$Advanced$revAlways = F2(
	function (_v0, b) {
		return b;
	});
var $elm$parser$Parser$Advanced$skip = F2(
	function (iParser, kParser) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$parser$Parser$Advanced$revAlways, iParser, kParser);
	});
var $elm$parser$Parser$Advanced$sequenceEndForbidden = F5(
	function (ender, ws, parseItem, sep, revItems) {
		var chompRest = function (item) {
			return A5(
				$elm$parser$Parser$Advanced$sequenceEndForbidden,
				ender,
				ws,
				parseItem,
				sep,
				A2($elm$core$List$cons, item, revItems));
		};
		return A2(
			$elm$parser$Parser$Advanced$skip,
			ws,
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$parser$Parser$Advanced$skip,
						sep,
						A2(
							$elm$parser$Parser$Advanced$skip,
							ws,
							A2(
								$elm$parser$Parser$Advanced$map,
								function (item) {
									return $elm$parser$Parser$Advanced$Loop(
										A2($elm$core$List$cons, item, revItems));
								},
								parseItem))),
						A2(
						$elm$parser$Parser$Advanced$map,
						function (_v0) {
							return $elm$parser$Parser$Advanced$Done(
								$elm$core$List$reverse(revItems));
						},
						ender)
					])));
	});
var $elm$parser$Parser$Advanced$sequenceEndMandatory = F4(
	function (ws, parseItem, sep, revItems) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$map,
					function (item) {
						return $elm$parser$Parser$Advanced$Loop(
							A2($elm$core$List$cons, item, revItems));
					},
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						parseItem,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							ws,
							A2($elm$parser$Parser$Advanced$ignorer, sep, ws)))),
					A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return $elm$parser$Parser$Advanced$Done(
							$elm$core$List$reverse(revItems));
					},
					$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0))
				]));
	});
var $elm$parser$Parser$Advanced$sequenceEndOptional = F5(
	function (ender, ws, parseItem, sep, revItems) {
		var parseEnd = A2(
			$elm$parser$Parser$Advanced$map,
			function (_v0) {
				return $elm$parser$Parser$Advanced$Done(
					$elm$core$List$reverse(revItems));
			},
			ender);
		return A2(
			$elm$parser$Parser$Advanced$skip,
			ws,
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$parser$Parser$Advanced$skip,
						sep,
						A2(
							$elm$parser$Parser$Advanced$skip,
							ws,
							$elm$parser$Parser$Advanced$oneOf(
								_List_fromArray(
									[
										A2(
										$elm$parser$Parser$Advanced$map,
										function (item) {
											return $elm$parser$Parser$Advanced$Loop(
												A2($elm$core$List$cons, item, revItems));
										},
										parseItem),
										parseEnd
									])))),
						parseEnd
					])));
	});
var $elm$parser$Parser$Advanced$sequenceEnd = F5(
	function (ender, ws, parseItem, sep, trailing) {
		var chompRest = function (item) {
			switch (trailing.$) {
				case 'Forbidden':
					return A2(
						$elm$parser$Parser$Advanced$loop,
						_List_fromArray(
							[item]),
						A4($elm$parser$Parser$Advanced$sequenceEndForbidden, ender, ws, parseItem, sep));
				case 'Optional':
					return A2(
						$elm$parser$Parser$Advanced$loop,
						_List_fromArray(
							[item]),
						A4($elm$parser$Parser$Advanced$sequenceEndOptional, ender, ws, parseItem, sep));
				default:
					return A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$skip,
							ws,
							A2(
								$elm$parser$Parser$Advanced$skip,
								sep,
								A2(
									$elm$parser$Parser$Advanced$skip,
									ws,
									A2(
										$elm$parser$Parser$Advanced$loop,
										_List_fromArray(
											[item]),
										A3($elm$parser$Parser$Advanced$sequenceEndMandatory, ws, parseItem, sep))))),
						ender);
			}
		};
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($elm$parser$Parser$Advanced$andThen, chompRest, parseItem),
					A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return _List_Nil;
					},
					ender)
				]));
	});
var $elm$parser$Parser$Advanced$sequence = function (i) {
	return A2(
		$elm$parser$Parser$Advanced$skip,
		$elm$parser$Parser$Advanced$token(i.start),
		A2(
			$elm$parser$Parser$Advanced$skip,
			i.spaces,
			A5(
				$elm$parser$Parser$Advanced$sequenceEnd,
				$elm$parser$Parser$Advanced$token(i.end),
				i.spaces,
				i.item,
				$elm$parser$Parser$Advanced$token(i.separator),
				i.trailing)));
};
var $elm$parser$Parser$Advanced$Forbidden = {$: 'Forbidden'};
var $elm$parser$Parser$Advanced$Mandatory = {$: 'Mandatory'};
var $elm$parser$Parser$Advanced$Optional = {$: 'Optional'};
var $elm$parser$Parser$toAdvancedTrailing = function (trailing) {
	switch (trailing.$) {
		case 'Forbidden':
			return $elm$parser$Parser$Advanced$Forbidden;
		case 'Optional':
			return $elm$parser$Parser$Advanced$Optional;
		default:
			return $elm$parser$Parser$Advanced$Mandatory;
	}
};
var $elm$parser$Parser$sequence = function (i) {
	return $elm$parser$Parser$Advanced$sequence(
		{
			end: $elm$parser$Parser$toToken(i.end),
			item: i.item,
			separator: $elm$parser$Parser$toToken(i.separator),
			spaces: i.spaces,
			start: $elm$parser$Parser$toToken(i.start),
			trailing: $elm$parser$Parser$toAdvancedTrailing(i.trailing)
		});
};
var $author$project$Access$unique = function (l) {
	var incUnique = F2(
		function (elem, lst) {
			return A2($elm$core$List$member, elem, lst) ? lst : A2($elm$core$List$cons, elem, lst);
		});
	return A3($elm$core$List$foldr, incUnique, _List_Nil, l);
};
var $author$project$Person$parseEmails = A2(
	$elm$parser$Parser$map,
	function (x) {
		return $author$project$Access$unique(
			A2(
				$elm$core$List$filterMap,
				$author$project$Access$justIf(
					$elm$core$Basics$neq($author$project$Person$noone)),
				x));
	},
	A2(
		$elm$parser$Parser$keeper,
		$elm$parser$Parser$succeed($elm$core$Basics$identity),
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$sequence(
				{
					end: '',
					item: $author$project$Person$parseEmail($author$project$Person$mailKomma),
					separator: ',',
					spaces: $elm$parser$Parser$spaces,
					start: '',
					trailing: $elm$parser$Parser$Optional
				}),
			$elm$parser$Parser$end)));
var $author$project$Person$personsFromString = function (t) {
	return A2(
		$elm$core$Result$withDefault,
		_List_fromArray(
			[
				$author$project$Person$partialEmail(t)
			]),
		A2($elm$parser$Parser$run, $author$project$Person$parseEmails, t));
};
var $author$project$Notmuch$fullheader = F7(
	function (f, t, cc, bcc, subject, in_reply_to, references) {
		return {
			bcc: $author$project$Person$personsFromString(bcc),
			cc: $author$project$Person$personsFromString(cc),
			from: $author$project$Person$fromString(f),
			in_reply_to: in_reply_to,
			references: references,
			subject: subject,
			to: $author$project$Person$personsFromString(t)
		};
	});
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom = $elm$json$Json$Decode$map2($elm$core$Basics$apR);
var $elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
	});
var $elm$json$Json$Decode$decodeValue = _Json_run;
var $elm$json$Json$Decode$value = _Json_decodeValue;
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optionalDecoder = F3(
	function (path, valDecoder, fallback) {
		var nullOr = function (decoder) {
			return $elm$json$Json$Decode$oneOf(
				_List_fromArray(
					[
						decoder,
						$elm$json$Json$Decode$null(fallback)
					]));
		};
		var handleResult = function (input) {
			var _v0 = A2(
				$elm$json$Json$Decode$decodeValue,
				A2($elm$json$Json$Decode$at, path, $elm$json$Json$Decode$value),
				input);
			if (_v0.$ === 'Ok') {
				var rawValue = _v0.a;
				var _v1 = A2(
					$elm$json$Json$Decode$decodeValue,
					nullOr(valDecoder),
					rawValue);
				if (_v1.$ === 'Ok') {
					var finalResult = _v1.a;
					return $elm$json$Json$Decode$succeed(finalResult);
				} else {
					return A2(
						$elm$json$Json$Decode$at,
						path,
						nullOr(valDecoder));
				}
			} else {
				return $elm$json$Json$Decode$succeed(fallback);
			}
		};
		return A2($elm$json$Json$Decode$andThen, handleResult, $elm$json$Json$Decode$value);
	});
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional = F4(
	function (key, valDecoder, fallback, decoder) {
		return A2(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optionalDecoder,
				_List_fromArray(
					[key]),
				valDecoder,
				fallback),
			decoder);
	});
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required = F3(
	function (key, valDecoder, decoder) {
		return A2(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom,
			A2($elm$json$Json$Decode$field, key, valDecoder),
			decoder);
	});
var $author$project$Notmuch$headerDecoder = A4(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
	'References',
	$elm$json$Json$Decode$string,
	'',
	A4(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
		'In-reply-to',
		$elm$json$Json$Decode$string,
		'',
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'Subject',
			$elm$json$Json$Decode$string,
			A4(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
				'Bcc',
				$elm$json$Json$Decode$string,
				'',
				A4(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
					'Cc',
					$elm$json$Json$Decode$string,
					'',
					A4(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
						'To',
						$elm$json$Json$Decode$string,
						'',
						A3(
							$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'From',
							$elm$json$Json$Decode$string,
							$elm$json$Json$Decode$succeed($author$project$Notmuch$fullheader))))))));
var $author$project$Notmuch$simplifyMultiPart = function (x) {
	if (((x.$ === 'MultiPart') && x.c.b) && (!x.c.b.b)) {
		var _v1 = x.c;
		var h = _v1.a;
		return h;
	} else {
		return x;
	}
};
var $author$project$Notmuch$emailDecoder = A9(
	$elm$json$Json$Decode$map8,
	$author$project$Notmuch$Email,
	A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$string),
	A3(
		$elm$json$Json$Decode$map2,
		$author$project$Notmuch$Time,
		A2($elm$json$Json$Decode$field, 'date_relative', $elm$json$Json$Decode$string),
		A2(
			$elm$json$Json$Decode$map,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$Basics$mul(1000),
				$elm$time$Time$millisToPosix),
			A2($elm$json$Json$Decode$field, 'timestamp', $elm$json$Json$Decode$int))),
	A2($elm$json$Json$Decode$field, 'headers', $author$project$Notmuch$headerDecoder),
	$elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$json$Json$Decode$map,
				function (r) {
					return $author$project$Query$Present(
						$elm$core$Maybe$Just(
							$author$project$Notmuch$simplifyMultiPart(
								A3($author$project$Notmuch$MultiPart, -1, $author$project$Notmuch$Body, r))));
				},
				A2($elm$json$Json$Decode$field, 'body', $author$project$Notmuch$bodyDecoder)),
				$elm$json$Json$Decode$succeed(
				$author$project$Query$Present($elm$core$Maybe$Nothing))
			])),
	A2(
		$elm$json$Json$Decode$field,
		'tags',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
	$elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$json$Json$Decode$field,
				'filename',
				$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
				$elm$json$Json$Decode$succeed(_List_Nil)
			])),
	$elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2($elm$json$Json$Decode$field, 'match', $elm$json$Json$Decode$bool),
				$elm$json$Json$Decode$succeed(false)
			])),
	$elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2($elm$json$Json$Decode$field, 'excluded', $elm$json$Json$Decode$bool),
				$elm$json$Json$Decode$succeed(false)
			])));
function $author$project$API$cyclic$showDecoder() {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2($elm$json$Json$Decode$map, $author$project$API$Mail, $author$project$Notmuch$emailDecoder),
				A2(
				$elm$json$Json$Decode$map,
				$author$project$API$Children,
				$elm$json$Json$Decode$list(
					$elm$json$Json$Decode$lazy(
						function (_v0) {
							return $author$project$API$cyclic$showDecoder();
						}))),
				$elm$json$Json$Decode$null(
				$author$project$API$Children(_List_Nil))
			]));
}
try {
	var $author$project$API$showDecoder = $author$project$API$cyclic$showDecoder();
	$author$project$API$cyclic$showDecoder = function () {
		return $author$project$API$showDecoder;
	};
} catch ($) {
	throw 'Some top-level definitions from `API` are causing infinite recursion:\n\n  ┌─────┐\n  │    showDecoder\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $author$project$API$show = F3(
	function (session, path, _v0) {
		var entire_thread = _v0.entire_thread;
		var body = _v0.body;
		var query = _v0.query;
		return $elm$http$Http$post(
			{
				body: $elm$http$Http$jsonBody(
					$elm$json$Json$Encode$object(
						A2(
							$author$project$API$withSession,
							session,
							$author$project$API$juliaSearchQueryParameters(
								A2(
									$author$project$Notmuch$SearchRequest,
									_List_fromArray(
										[
											A2($author$project$Notmuch$Setting, 'exclude', 'true'),
											A2($author$project$Notmuch$settingBool, 'entire-thread', entire_thread),
											A2($author$project$Notmuch$settingBool, 'body', body)
										]),
									query))))),
				expect: A2(
					$elm$http$Http$expectJson,
					A3($author$project$API$GotShow, session, path, entire_thread),
					$author$project$API$showDecoder),
				url: _Utils_ap(
					$author$project$API$server.host,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							['json/show']),
						_List_Nil))
			});
	});
var $author$project$Main$cmdSearchShow = F2(
	function (pa, x) {
		_v0$4:
		while (true) {
			if (x.$ === 'Just') {
				switch (x.a.b.$) {
					case 'Search':
						var _v1 = x.a;
						var m = _v1.a;
						var _v2 = _v1.b;
						var d = _v2.a;
						var ns = _v2.b;
						var _v3 = $author$project$Query$requestNow(d.status);
						if (_v3.a) {
							var n = _v3.b;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(
									_Utils_Tuple2(
										m,
										A2(
											$author$project$ElmailUrl$Search,
											_Utils_update(
												d,
												{status: n}),
											ns))),
								A2(
									$elm$core$Platform$Cmd$map,
									$author$project$Main$ApiMsg($elm$core$Platform$Cmd$none),
									A2(
										$author$project$API$searchQuery,
										$author$project$Main$aggregateSession(pa),
										A2(
											$elm$core$Maybe$withDefault,
											_Utils_Tuple2(0, 10),
											A2(
												$elm$core$Maybe$map,
												function (_v4) {
													var o = _v4.a;
													var l = _v4.b;
													return _Utils_Tuple2(
														o,
														A2($elm$core$Basics$max, l, o + $author$project$ElmailUrl$settings.thread_page_size));
												},
												$author$project$Query$queryable(n))))));
						} else {
							return _Utils_Tuple2(x, $elm$core$Platform$Cmd$none);
						}
					case 'Thread':
						var _v5 = x.a;
						var m = _v5.a;
						var _v6 = _v5.b;
						var d = _v6.a;
						var t = _v6.b;
						var _v7 = function () {
							if (d.hidden) {
								return _Utils_Tuple2(d, $elm$core$Platform$Cmd$none);
							} else {
								var _v8 = $author$project$Query$requestNow(d.entire_thread);
								if (_v8.a) {
									var n = _v8.b;
									return _Utils_Tuple2(
										_Utils_update(
											d,
											{entire_thread: n}),
										A2(
											$elm$core$Platform$Cmd$map,
											$author$project$Main$ApiMsg($elm$core$Platform$Cmd$none),
											A3(
												$author$project$API$show,
												$author$project$Main$aggregateSession(pa),
												pa.rpath,
												{
													body: false,
													entire_thread: A2(
														$elm$core$Maybe$withDefault,
														false,
														$author$project$Query$queryable(n)),
													query: $author$project$Main$aggregateQuery(pa),
													sort: 'oldest-first'
												})));
								} else {
									return _Utils_Tuple2(d, $elm$core$Platform$Cmd$none);
								}
							}
						}();
						var d_ = _v7.a;
						var shows = _v7.b;
						return _Utils_Tuple2(
							$elm$core$Maybe$Just(
								_Utils_Tuple2(
									m,
									A2($author$project$ElmailUrl$Thread, d_, t))),
							shows);
					case 'Email':
						var _v9 = x.a;
						var m = _v9.a;
						var _v10 = _v9.b;
						var d = _v10.a;
						var t = _v10.b;
						var _v11 = function () {
							var _v12 = $author$project$Query$requestNow(t.content);
							if (_v12.a) {
								var n = _v12.b;
								return _Utils_Tuple2(
									_Utils_update(
										t,
										{content: n}),
									A2(
										$elm$core$Platform$Cmd$map,
										$author$project$Main$ApiMsg($elm$core$Platform$Cmd$none),
										A3(
											$author$project$API$show,
											$author$project$Main$aggregateSession(pa),
											pa.rpath,
											{
												body: true,
												entire_thread: false,
												query: $author$project$Main$aggregateQuery(pa),
												sort: 'newest-first'
											})));
							} else {
								return _Utils_Tuple2(t, $elm$core$Platform$Cmd$none);
							}
						}();
						var d_ = _v11.a;
						var shows = _v11.b;
						return _Utils_Tuple2(
							$elm$core$Maybe$Just(
								_Utils_Tuple2(
									m,
									A2($author$project$ElmailUrl$Email, d, d_))),
							shows);
					case 'Draft':
						if (x.a.b.b.$ === 'Just') {
							var _v13 = x.a;
							var m = _v13.a;
							var _v14 = _v13.b;
							var d = _v14.a;
							var t = _v14.b.a;
							var _v15 = function () {
								var _v16 = $author$project$Query$requestNow(t.content);
								if (_v16.a) {
									var n = _v16.b;
									return _Utils_Tuple2(
										_Utils_update(
											t,
											{content: n}),
										A2(
											$elm$core$Platform$Cmd$map,
											$author$project$Main$ApiMsg($elm$core$Platform$Cmd$none),
											A3(
												$author$project$API$show,
												$author$project$Main$aggregateSession(pa),
												pa.rpath,
												{
													body: true,
													entire_thread: false,
													query: $author$project$Main$aggregateQuery(pa),
													sort: 'newest-first'
												})));
								} else {
									return _Utils_Tuple2(t, $elm$core$Platform$Cmd$none);
								}
							}();
							var d_ = _v15.a;
							var shows = _v15.b;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(
									_Utils_Tuple2(
										m,
										A2(
											$author$project$ElmailUrl$Draft,
											d,
											$elm$core$Maybe$Just(d_)))),
								shows);
						} else {
							break _v0$4;
						}
					default:
						break _v0$4;
				}
			} else {
				break _v0$4;
			}
		}
		return _Utils_Tuple2(x, $elm$core$Platform$Cmd$none);
	});
var $pd_andy$elm_limiter$Limiter$Internals$Debounce = F2(
	function (a, b) {
		return {$: 'Debounce', a: a, b: b};
	});
var $pd_andy$elm_limiter$Limiter$Internals$Limiter = function (a) {
	return {$: 'Limiter', a: a};
};
var $pd_andy$elm_limiter$Limiter$Internals$Open = {$: 'Open'};
var $pd_andy$elm_limiter$Limiter$debounce = F2(
	function (tagger, cooldown) {
		return $pd_andy$elm_limiter$Limiter$Internals$Limiter(
			{
				mode: A2($pd_andy$elm_limiter$Limiter$Internals$Debounce, cooldown, _List_Nil),
				state: $pd_andy$elm_limiter$Limiter$Internals$Open,
				tagger: tagger
			});
	});
var $author$project$Lazy$Tree$Zipper$Zipper = F2(
	function (a, b) {
		return {$: 'Zipper', a: a, b: b};
	});
var $author$project$Lazy$Tree$Zipper$fromTree = function (tree) {
	return A2($author$project$Lazy$Tree$Zipper$Zipper, tree, _List_Nil);
};
var $author$project$Lazy$Tree$Tree = F2(
	function (a, b) {
		return {$: 'Tree', a: a, b: b};
	});
var $author$project$Lazy$Tree$descendants = function (_v0) {
	var d = _v0.b;
	return d;
};
var $author$project$Lazy$Lazy = function (a) {
	return {$: 'Lazy', a: a};
};
var $author$project$Lazy$lazy = function (thunk) {
	return $author$project$Lazy$Lazy(thunk);
};
var $author$project$Lazy$LList$llist = F2(
	function (constructor, arg) {
		return $author$project$Lazy$lazy(
			function (_v0) {
				return constructor(arg);
			});
	});
var $author$project$Lazy$LList$fromList = $author$project$Lazy$LList$llist($elm$core$Basics$identity);
var $author$project$Lazy$Tree$item = function (_v0) {
	var i = _v0.a;
	return i;
};
var $author$project$Lazy$force = function (piece) {
	if (piece.$ === 'Evaluated') {
		var a = piece.a;
		return a;
	} else {
		var thunk = piece.a;
		return thunk(_Utils_Tuple0);
	}
};
var $author$project$Lazy$LList$toList = $author$project$Lazy$force;
var $author$project$Show$iTree = F2(
	function (i, x) {
		return A2(
			$author$project$Lazy$Tree$Tree,
			_Utils_Tuple2(
				i,
				$author$project$Lazy$Tree$item(x)),
			$author$project$Lazy$LList$fromList(
				A2(
					$elm$core$List$indexedMap,
					F2(
						function (j, y) {
							return A2($author$project$Show$iTree, j, y);
						}),
					$author$project$Lazy$LList$toList(
						$author$project$Lazy$Tree$descendants(x)))));
	});
var $author$project$Lazy$Tree$Zipper$getTree = function (_v0) {
	var tree = _v0.a;
	return tree;
};
var $author$project$Lazy$map2 = F3(
	function (f, a, b) {
		return $author$project$Lazy$lazy(
			function (_v0) {
				return A2(
					f,
					$author$project$Lazy$force(a),
					$author$project$Lazy$force(b));
			});
	});
var $author$project$Lazy$LList$append = $author$project$Lazy$map2($elm$core$Basics$append);
var $author$project$Lazy$Tree$insert = F2(
	function (t, _v0) {
		var treeItem = _v0.a;
		var c = _v0.b;
		return A2(
			$author$project$Lazy$Tree$Tree,
			treeItem,
			A2(
				$author$project$Lazy$LList$append,
				c,
				$author$project$Lazy$LList$fromList(
					_List_fromArray(
						[t]))));
	});
var $author$project$Lazy$Tree$Zipper$insert = F2(
	function (tree, _v0) {
		var t = _v0.a;
		var zipperBreadcrumbs = _v0.b;
		return A2(
			$author$project$Lazy$Tree$Zipper$Zipper,
			A2($author$project$Lazy$Tree$insert, tree, t),
			zipperBreadcrumbs);
	});
var $author$project$QueryEditor$Free = function (a) {
	return {$: 'Free', a: a};
};
var $author$project$QueryEditor$Operator = function (a) {
	return {$: 'Operator', a: a};
};
var $author$project$QueryEditor$Person = F3(
	function (a, b, c) {
		return {$: 'Person', a: a, b: b, c: c};
	});
var $author$project$QueryEditor$Prefix = F2(
	function (a, b) {
		return {$: 'Prefix', a: a, b: b};
	});
var $author$project$QueryEditor$Tag = function (a) {
	return {$: 'Tag', a: a};
};
var $author$project$AddressInput$DebounceAddress = function (a) {
	return {$: 'DebounceAddress', a: a};
};
var $author$project$AddressInput$addressInput = function (p) {
	return {
		chips: p,
		choices: $author$project$Query$Present(_List_Nil),
		debouncer: A2($pd_andy$elm_limiter$Limiter$debounce, $author$project$AddressInput$DebounceAddress, 1000),
		expanded: false,
		index: 0,
		input: ''
	};
};
var $author$project$Query$dirLabel = function (dir) {
	switch (dir.$) {
		case 'Recipient':
			return 'recipient';
		case 'Participant':
			return 'participant';
		default:
			return 'sender';
	}
};
var $author$project$Query$idString = function (x) {
	if (x.$ === 'ThreadID') {
		var s = x.a;
		return 'thread:' + s;
	} else {
		var s = x.a;
		return 'id:' + s;
	}
};
var $author$project$QueryEditor$queryNode = function (q) {
	switch (q.$) {
		case 'Leaf':
			var l = q.a;
			switch (l.$) {
				case 'Tag':
					var t = l.a;
					return $author$project$QueryEditor$Tag(t);
				case 'Free':
					var t = l.a;
					return $author$project$QueryEditor$Free(t);
				case 'Person':
					var dir = l.a;
					var p = l.b;
					return A3(
						$author$project$QueryEditor$Person,
						{
							label: $author$project$Query$dirLabel(dir)
						},
						function () {
							switch (dir.$) {
								case 'Recipient':
									return 'recipients';
								case 'Sender':
									return 'sender';
								default:
									return 'count';
							}
						}(),
						$author$project$AddressInput$addressInput(
							_List_fromArray(
								[
									{dir: dir, person: p}
								])));
				case 'Prefix':
					var p = l.a;
					var s = l.b;
					return A2($author$project$QueryEditor$Prefix, p, s);
				case 'ID':
					var s = l.a;
					return A2(
						$author$project$QueryEditor$Prefix,
						'id',
						$author$project$Query$idString(s));
				case 'Near':
					var t = l.a;
					return $author$project$QueryEditor$Free(t);
				default:
					var t = l.a;
					return $author$project$QueryEditor$Free(t);
			}
		case 'Operator':
			var op = q.a;
			return $author$project$QueryEditor$Operator(
				{
					op: op,
					subqueries: A2(
						$elm$core$List$map,
						$author$project$Query$Tag,
						_List_fromArray(
							['flagged', 'unread', 'inbox', 'spam']))
				});
		default:
			return $author$project$QueryEditor$Free('');
	}
};
var $author$project$Lazy$LList$empty = A2($author$project$Lazy$LList$llist, $elm$core$Basics$identity, _List_Nil);
var $author$project$Lazy$Tree$singleton = function (a) {
	return A2($author$project$Lazy$Tree$Tree, a, $author$project$Lazy$LList$empty);
};
var $author$project$QueryEditor$tree = function (x) {
	return function () {
		switch (x.$) {
			case 'AnyMessage':
				return $elm$core$Basics$identity;
			case 'Leaf':
				return $elm$core$Basics$identity;
			default:
				var a = x.b;
				return function (t) {
					return $author$project$Lazy$Tree$Zipper$getTree(
						A3(
							$elm$core$List$foldl,
							A2($elm$core$Basics$composeR, $author$project$QueryEditor$tree, $author$project$Lazy$Tree$Zipper$insert),
							$author$project$Lazy$Tree$Zipper$fromTree(t),
							a));
				};
		}
	}()(
		$author$project$Lazy$Tree$singleton(
			$author$project$QueryEditor$queryNode(x)));
};
var $author$project$QueryEditor$editor = function (x) {
	return $author$project$Lazy$Tree$Zipper$fromTree(
		A2(
			$author$project$Show$iTree,
			0,
			$author$project$QueryEditor$tree(x)));
};
var $elm$core$Set$Set_elm_builtin = function (a) {
	return {$: 'Set_elm_builtin', a: a};
};
var $elm$core$Set$empty = $elm$core$Set$Set_elm_builtin($elm$core$Dict$empty);
var $author$project$DictShow$fromTree = function (x) {
	return A2($elm$core$Tuple$mapSecond, $author$project$Lazy$Tree$Zipper$fromTree, x);
};
var $author$project$ElmailUrl$NotFound404 = function (a) {
	return {$: 'NotFound404', a: a};
};
var $author$project$DictShow$dictInsert = F3(
	function (idf, d, a) {
		return A3(
			$elm$core$Dict$insert,
			idf(a),
			a,
			d);
	});
var $elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var $author$project$Lazy$LList$foldl = F2(
	function (predicate, acc) {
		return A2(
			$elm$core$Basics$composeL,
			A2($elm$core$List$foldl, predicate, acc),
			$author$project$Lazy$LList$toList);
	});
var $author$project$Show$foldl = F3(
	function (f, agg, _v0) {
		var lab = _v0.a;
		var chldrn = _v0.b;
		return A3(
			$author$project$Lazy$LList$foldl,
			F2(
				function (child, agg_) {
					return A3($author$project$Show$foldl, f, agg_, child);
				}),
			A2(
				f,
				A2($author$project$Lazy$Tree$Tree, lab, chldrn),
				agg),
			chldrn);
	});
var $author$project$Lazy$map = F2(
	function (f, a) {
		return $author$project$Lazy$lazy(
			function (_v0) {
				return f(
					$author$project$Lazy$force(a));
			});
	});
var $author$project$Lazy$LList$map = function (f) {
	return $author$project$Lazy$map(
		$elm$core$List$map(f));
};
var $author$project$Lazy$Tree$forestMap = function (fc) {
	return $author$project$Lazy$LList$map(
		$author$project$Lazy$Tree$map(fc));
};
var $author$project$Lazy$Tree$map = F2(
	function (fc, _v0) {
		var a = _v0.a;
		var forest = _v0.b;
		return A2(
			$author$project$Lazy$Tree$Tree,
			fc(a),
			A2($author$project$Lazy$Tree$forestMap, fc, forest));
	});
var $author$project$DictShow$iTree = F3(
	function (idf, i, x) {
		var d = A3(
			$author$project$Show$foldl,
			F2(
				function (t, d_) {
					return A2(
						$elm$core$Maybe$withDefault,
						d_,
						A2(
							$elm$core$Maybe$map,
							function (_v0) {
								var a = _v0.b;
								return A3($author$project$DictShow$dictInsert, idf, d_, a);
							},
							$author$project$Lazy$Tree$item(t)));
				}),
			$elm$core$Dict$empty,
			x);
		return _Utils_Tuple2(
			d,
			A2(
				$author$project$Show$iTree,
				i,
				A2(
					$author$project$Lazy$Tree$map,
					$elm$core$Maybe$map(
						$elm$core$Tuple$mapSecond(idf)),
					x)));
	});
var $elm$time$Time$posixToMillis = function (_v0) {
	var millis = _v0.a;
	return millis;
};
var $author$project$Notmuch$postable = function (x) {
	switch (x.$) {
		case 'Unposted':
			var y = x.a;
			return y;
		case 'Post':
			var y = x.a;
			return y;
		case 'Posted':
			var y = x.a;
			return y;
		default:
			var y = x.a;
			return y;
	}
};
var $author$project$Main$keyFromEmailType = function (s) {
	switch (s.$) {
		case 'Thread':
			var t = s.b;
			return $author$project$Query$queryable(t).thread_id;
		case 'Email':
			var mail = s.b;
			return mail.id;
		case 'Search':
			var d = s.a;
			var mail = s.b;
			return A2(
				$elm$core$Maybe$withDefault,
				d.id,
				A2(
					$elm$core$Maybe$map,
					function ($) {
						return $.id;
					},
					mail));
		case 'Draft':
			var d = s.a;
			var mail = s.b;
			return A2(
				$elm$core$Maybe$withDefault,
				$elm$core$String$fromInt(
					$elm$time$Time$posixToMillis(
						$author$project$Notmuch$postable(d).time.timestamp)),
				A2(
					$elm$core$Maybe$map,
					function ($) {
						return $.id;
					},
					mail));
		default:
			return '';
	}
};
var $author$project$Main$iTree = $author$project$DictShow$iTree($author$project$Main$keyFromEmailType);
var $elm$url$Url$Parser$State = F5(
	function (visited, unvisited, params, frag, value) {
		return {frag: frag, params: params, unvisited: unvisited, value: value, visited: visited};
	});
var $elm$url$Url$Parser$getFirstMatch = function (states) {
	getFirstMatch:
	while (true) {
		if (!states.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var state = states.a;
			var rest = states.b;
			var _v1 = state.unvisited;
			if (!_v1.b) {
				return $elm$core$Maybe$Just(state.value);
			} else {
				if ((_v1.a === '') && (!_v1.b.b)) {
					return $elm$core$Maybe$Just(state.value);
				} else {
					var $temp$states = rest;
					states = $temp$states;
					continue getFirstMatch;
				}
			}
		}
	}
};
var $elm$url$Url$Parser$removeFinalEmpty = function (segments) {
	if (!segments.b) {
		return _List_Nil;
	} else {
		if ((segments.a === '') && (!segments.b.b)) {
			return _List_Nil;
		} else {
			var segment = segments.a;
			var rest = segments.b;
			return A2(
				$elm$core$List$cons,
				segment,
				$elm$url$Url$Parser$removeFinalEmpty(rest));
		}
	}
};
var $elm$url$Url$Parser$preparePath = function (path) {
	var _v0 = A2($elm$core$String$split, '/', path);
	if (_v0.b && (_v0.a === '')) {
		var segments = _v0.b;
		return $elm$url$Url$Parser$removeFinalEmpty(segments);
	} else {
		var segments = _v0;
		return $elm$url$Url$Parser$removeFinalEmpty(segments);
	}
};
var $elm$url$Url$Parser$addToParametersHelp = F2(
	function (value, maybeList) {
		if (maybeList.$ === 'Nothing') {
			return $elm$core$Maybe$Just(
				_List_fromArray(
					[value]));
		} else {
			var list = maybeList.a;
			return $elm$core$Maybe$Just(
				A2($elm$core$List$cons, value, list));
		}
	});
var $elm$url$Url$percentDecode = _Url_percentDecode;
var $elm$url$Url$Parser$addParam = F2(
	function (segment, dict) {
		var _v0 = A2($elm$core$String$split, '=', segment);
		if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
			var rawKey = _v0.a;
			var _v1 = _v0.b;
			var rawValue = _v1.a;
			var _v2 = $elm$url$Url$percentDecode(rawKey);
			if (_v2.$ === 'Nothing') {
				return dict;
			} else {
				var key = _v2.a;
				var _v3 = $elm$url$Url$percentDecode(rawValue);
				if (_v3.$ === 'Nothing') {
					return dict;
				} else {
					var value = _v3.a;
					return A3(
						$elm$core$Dict$update,
						key,
						$elm$url$Url$Parser$addToParametersHelp(value),
						dict);
				}
			}
		} else {
			return dict;
		}
	});
var $elm$url$Url$Parser$prepareQuery = function (maybeQuery) {
	if (maybeQuery.$ === 'Nothing') {
		return $elm$core$Dict$empty;
	} else {
		var qry = maybeQuery.a;
		return A3(
			$elm$core$List$foldr,
			$elm$url$Url$Parser$addParam,
			$elm$core$Dict$empty,
			A2($elm$core$String$split, '&', qry));
	}
};
var $elm$url$Url$Parser$parse = F2(
	function (_v0, url) {
		var parser = _v0.a;
		return $elm$url$Url$Parser$getFirstMatch(
			parser(
				A5(
					$elm$url$Url$Parser$State,
					_List_Nil,
					$elm$url$Url$Parser$preparePath(url.path),
					$elm$url$Url$Parser$prepareQuery(url.query),
					url.fragment,
					$elm$core$Basics$identity)));
	});
var $author$project$ElmailUrl$Home = {$: 'Home'};
var $author$project$ElmailUrl$Impressum = {$: 'Impressum'};
var $author$project$ElmailUrl$InitSearches = function (a) {
	return {$: 'InitSearches', a: a};
};
var $elm$url$Url$Parser$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $elm$url$Url$Parser$mapState = F2(
	function (func, _v0) {
		var visited = _v0.visited;
		var unvisited = _v0.unvisited;
		var params = _v0.params;
		var frag = _v0.frag;
		var value = _v0.value;
		return A5(
			$elm$url$Url$Parser$State,
			visited,
			unvisited,
			params,
			frag,
			func(value));
	});
var $elm$url$Url$Parser$map = F2(
	function (subValue, _v0) {
		var parseArg = _v0.a;
		return $elm$url$Url$Parser$Parser(
			function (_v1) {
				var visited = _v1.visited;
				var unvisited = _v1.unvisited;
				var params = _v1.params;
				var frag = _v1.frag;
				var value = _v1.value;
				return A2(
					$elm$core$List$map,
					$elm$url$Url$Parser$mapState(value),
					parseArg(
						A5($elm$url$Url$Parser$State, visited, unvisited, params, frag, subValue)));
			});
	});
var $author$project$ElmailUrl$Layout = function (a) {
	return {$: 'Layout', a: a};
};
var $author$project$ElmailUrl$QueryEditor = {$: 'QueryEditor'};
var $author$project$Grid$Row = {$: 'Row'};
var $author$project$Grid$WireOverlay = {$: 'WireOverlay'};
var $author$project$Grid$NoWire = {$: 'NoWire'};
var $author$project$Tree$branchColumn = $author$project$Grid$NoWire;
var $mdgriffith$elm_ui$Internal$Model$Fill = function (a) {
	return {$: 'Fill', a: a};
};
var $mdgriffith$elm_ui$Element$fill = $mdgriffith$elm_ui$Internal$Model$Fill(1);
var $author$project$Query$foldlOr = F2(
	function (x, agg) {
		if ((x.$ === 'Operator') && (x.a.$ === 'Or')) {
			var _v1 = x.a;
			var a = x.b;
			return A3($elm$core$List$foldl, $author$project$Query$foldlOr, agg, a);
		} else {
			return A2($elm$core$List$cons, x, agg);
		}
	});
var $author$project$Query$Free = function (a) {
	return {$: 'Free', a: a};
};
var $author$project$Query$finalize = F2(
	function (revOps, finalExpr) {
		finalize:
		while (true) {
			if (!revOps.b) {
				return finalExpr;
			} else {
				if (revOps.a.b.$ === 'And') {
					var _v1 = revOps.a;
					var expr = _v1.a;
					var _v2 = _v1.b;
					var otherRevOps = revOps.b;
					var $temp$revOps = otherRevOps,
						$temp$finalExpr = A2(
						$author$project$Query$Operator,
						$author$project$Query$And,
						_List_fromArray(
							[expr, finalExpr]));
					revOps = $temp$revOps;
					finalExpr = $temp$finalExpr;
					continue finalize;
				} else {
					var _v3 = revOps.a;
					var expr = _v3.a;
					var op = _v3.b;
					var otherRevOps = revOps.b;
					return A2(
						$author$project$Query$Operator,
						op,
						_List_fromArray(
							[
								A2($author$project$Query$finalize, otherRevOps, expr),
								finalExpr
							]));
				}
			}
		}
	});
var $elm$core$Set$insert = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return $elm$core$Set$Set_elm_builtin(
			A3($elm$core$Dict$insert, key, _Utils_Tuple0, dict));
	});
var $elm$core$Set$fromList = function (list) {
	return A3($elm$core$List$foldl, $elm$core$Set$insert, $elm$core$Set$empty, list);
};
var $author$project$Query$isVarChar = function (x) {
	return (!_Utils_eq(
		x,
		_Utils_chr(' '))) && ((!_Utils_eq(
		x,
		_Utils_chr('('))) && (!_Utils_eq(
		x,
		_Utils_chr(')'))));
};
var $elm$parser$Parser$Advanced$lazy = function (thunk) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v0 = thunk(_Utils_Tuple0);
			var parse = _v0.a;
			return parse(s);
		});
};
var $elm$parser$Parser$lazy = $elm$parser$Parser$Advanced$lazy;
var $author$project$Query$Prefix = F2(
	function (a, b) {
		return {$: 'Prefix', a: a, b: b};
	});
var $elm$parser$Parser$ExpectingVariable = {$: 'ExpectingVariable'};
var $elm$core$Dict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (_v0.$ === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var $elm$core$Set$member = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return A2($elm$core$Dict$member, key, dict);
	});
var $elm$parser$Parser$Advanced$varHelp = F7(
	function (isGood, offset, row, col, src, indent, context) {
		varHelp:
		while (true) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, src);
			if (_Utils_eq(newOffset, -1)) {
				return {col: col, context: context, indent: indent, offset: offset, row: row, src: src};
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$src = src,
						$temp$indent = indent,
						$temp$context = context;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					src = $temp$src;
					indent = $temp$indent;
					context = $temp$context;
					continue varHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$src = src,
						$temp$indent = indent,
						$temp$context = context;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					src = $temp$src;
					indent = $temp$indent;
					context = $temp$context;
					continue varHelp;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$variable = function (i) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var firstOffset = A3($elm$parser$Parser$Advanced$isSubChar, i.start, s.offset, s.src);
			if (_Utils_eq(firstOffset, -1)) {
				return A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, i.expecting));
			} else {
				var s1 = _Utils_eq(firstOffset, -2) ? A7($elm$parser$Parser$Advanced$varHelp, i.inner, s.offset + 1, s.row + 1, 1, s.src, s.indent, s.context) : A7($elm$parser$Parser$Advanced$varHelp, i.inner, firstOffset, s.row, s.col + 1, s.src, s.indent, s.context);
				var name = A3($elm$core$String$slice, s.offset, s1.offset, s.src);
				return A2($elm$core$Set$member, name, i.reserved) ? A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, i.expecting)) : A3($elm$parser$Parser$Advanced$Good, true, name, s1);
			}
		});
};
var $elm$parser$Parser$variable = function (i) {
	return $elm$parser$Parser$Advanced$variable(
		{expecting: $elm$parser$Parser$ExpectingVariable, inner: i.inner, reserved: i.reserved, start: i.start});
};
var $author$project$Query$prefixQuery = A2(
	$elm$parser$Parser$keeper,
	A2(
		$elm$parser$Parser$keeper,
		$elm$parser$Parser$succeed(
			F2(
				function (p, s) {
					return $author$project$Query$Leaf(
						A2($author$project$Query$Prefix, p, s));
				})),
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$variable(
				{
					inner: $elm$core$Char$isAlpha,
					reserved: $elm$core$Set$fromList(
						_List_fromArray(
							['and', 'or', 'not', 'xor', 'near', 'adj', 'AND', 'OR', 'NOT', 'XOR', 'NEAR', 'ADJ'])),
					start: $elm$core$Char$isAlpha
				}),
			$elm$parser$Parser$symbol(':'))),
	$elm$parser$Parser$getChompedString(
		$elm$parser$Parser$chompWhile($author$project$Query$isVarChar)));
var $author$project$Query$Sequence = {$: 'Sequence'};
var $author$project$Query$queryOperator = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$map,
			function (_v0) {
				return $author$project$Query$And;
			},
			$elm$parser$Parser$oneOf(
				A2(
					$elm$core$List$map,
					$elm$parser$Parser$token,
					_List_fromArray(
						['and', 'AND'])))),
			A2(
			$elm$parser$Parser$map,
			function (_v1) {
				return $author$project$Query$Or;
			},
			$elm$parser$Parser$oneOf(
				A2(
					$elm$core$List$map,
					$elm$parser$Parser$token,
					_List_fromArray(
						['or', 'OR'])))),
			$elm$parser$Parser$succeed($author$project$Query$Sequence)
		]));
var $elm$core$List$singleton = function (value) {
	return _List_fromArray(
		[value]);
};
var $author$project$Query$queryHelp = F2(
	function (revOps, expr) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$andThen,
					function (_v2) {
						var op = _v2.a;
						var newQuery = _v2.b;
						return A2(
							$author$project$Query$queryHelp,
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(expr, op),
								revOps),
							newQuery);
					},
					A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$keeper,
							A2(
								$elm$parser$Parser$ignorer,
								$elm$parser$Parser$succeed($elm$core$Tuple$pair),
								$elm$parser$Parser$spaces),
							A2($elm$parser$Parser$ignorer, $author$project$Query$queryOperator, $elm$parser$Parser$spaces)),
						$author$project$Query$cyclic$queryParser())),
					$elm$parser$Parser$lazy(
					function (_v3) {
						return $elm$parser$Parser$succeed(
							A2($author$project$Query$finalize, revOps, expr));
					})
				]));
	});
function $author$project$Query$cyclic$queryParser() {
	return A2(
		$elm$parser$Parser$andThen,
		$author$project$Query$queryHelp(_List_Nil),
		$author$project$Query$cyclic$queryTerm());
}
function $author$project$Query$cyclic$queryTerm() {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$elm$parser$Parser$backtrackable($author$project$Query$prefixQuery),
				A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$succeed($elm$core$Basics$identity),
						$elm$parser$Parser$symbol('(')),
					$elm$parser$Parser$spaces),
				A2(
					$elm$parser$Parser$ignorer,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$lazy(
							function (_v0) {
								return $author$project$Query$cyclic$queryParser();
							}),
						$elm$parser$Parser$spaces),
					$elm$parser$Parser$symbol(')'))),
				A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$succeed(
							A2(
								$elm$core$Basics$composeR,
								$elm$core$List$singleton,
								$author$project$Query$Operator($author$project$Query$Not))),
						$elm$parser$Parser$token('not')),
					$elm$parser$Parser$spaces),
				$elm$parser$Parser$lazy(
					function (_v1) {
						return $author$project$Query$cyclic$queryParser();
					})),
				A2(
				$elm$parser$Parser$keeper,
				$elm$parser$Parser$succeed(
					A2($elm$core$Basics$composeL, $author$project$Query$Leaf, $author$project$Query$Free)),
				$elm$parser$Parser$variable(
					{
						inner: $author$project$Query$isVarChar,
						reserved: $elm$core$Set$fromList(
							_List_fromArray(
								['and', 'or', 'not', 'xor', 'near', 'adj'])),
						start: $author$project$Query$isVarChar
					}))
			]));
}
try {
	var $author$project$Query$queryParser = $author$project$Query$cyclic$queryParser();
	$author$project$Query$cyclic$queryParser = function () {
		return $author$project$Query$queryParser;
	};
	var $author$project$Query$queryTerm = $author$project$Query$cyclic$queryTerm();
	$author$project$Query$cyclic$queryTerm = function () {
		return $author$project$Query$queryTerm;
	};
} catch ($) {
	throw 'Some top-level definitions from `Query` are causing infinite recursion:\n\n  ┌─────┐\n  │    queryParser\n  │     ↓\n  │    queryHelp\n  │     ↓\n  │    queryTerm\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $author$project$Query$fromString = function (q_) {
	return $author$project$Query$simplify(
		A2(
			$elm$core$Result$withDefault,
			$author$project$Query$Leaf(
				$author$project$Query$Free(q_)),
			A2($elm$parser$Parser$run, $author$project$Query$queryParser, q_)));
};
var $mdgriffith$elm_ui$Internal$Model$Height = function (a) {
	return {$: 'Height', a: a};
};
var $mdgriffith$elm_ui$Element$height = $mdgriffith$elm_ui$Internal$Model$Height;
var $elm$url$Url$Parser$Internal$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $elm$url$Url$Parser$Query$map2 = F3(
	function (func, _v0, _v1) {
		var a = _v0.a;
		var b = _v1.a;
		return $elm$url$Url$Parser$Internal$Parser(
			function (dict) {
				return A2(
					func,
					a(dict),
					b(dict));
			});
	});
var $elm$url$Url$Parser$Query$map = F2(
	function (func, _v0) {
		var a = _v0.a;
		return $elm$url$Url$Parser$Internal$Parser(
			function (dict) {
				return func(
					a(dict));
			});
	});
var $elm$url$Url$Parser$Query$custom = F2(
	function (key, func) {
		return $elm$url$Url$Parser$Internal$Parser(
			function (dict) {
				return func(
					A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						A2($elm$core$Dict$get, key, dict)));
			});
	});
var $elm$url$Url$Parser$Query$string = function (key) {
	return A2(
		$elm$url$Url$Parser$Query$custom,
		key,
		function (stringList) {
			if (stringList.b && (!stringList.b.b)) {
				var str = stringList.a;
				return $elm$core$Maybe$Just(str);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		});
};
var $author$project$ElmailUrl$queryStringEmpty = function (x) {
	return A2(
		$elm$url$Url$Parser$Query$map,
		$elm$core$Maybe$withDefault(''),
		$elm$url$Url$Parser$Query$string(x));
};
var $mdgriffith$elm_ui$Internal$Model$Class = F2(
	function (a, b) {
		return {$: 'Class', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$classes = {above: 'a', active: 'atv', alignBottom: 'ab', alignCenterX: 'cx', alignCenterY: 'cy', alignContainerBottom: 'acb', alignContainerCenterX: 'accx', alignContainerCenterY: 'accy', alignContainerRight: 'acr', alignLeft: 'al', alignRight: 'ar', alignTop: 'at', alignedHorizontally: 'ah', alignedVertically: 'av', any: 's', behind: 'bh', below: 'b', bold: 'w7', borderDashed: 'bd', borderDotted: 'bdt', borderNone: 'bn', borderSolid: 'bs', capturePointerEvents: 'cpe', clip: 'cp', clipX: 'cpx', clipY: 'cpy', column: 'c', container: 'ctr', contentBottom: 'cb', contentCenterX: 'ccx', contentCenterY: 'ccy', contentLeft: 'cl', contentRight: 'cr', contentTop: 'ct', cursorPointer: 'cptr', cursorText: 'ctxt', focus: 'fcs', focusedWithin: 'focus-within', fullSize: 'fs', grid: 'g', hasBehind: 'hbh', heightContent: 'hc', heightExact: 'he', heightFill: 'hf', heightFillPortion: 'hfp', hover: 'hv', imageContainer: 'ic', inFront: 'fr', inputLabel: 'lbl', inputMultiline: 'iml', inputMultilineFiller: 'imlf', inputMultilineParent: 'imlp', inputMultilineWrapper: 'implw', inputText: 'it', italic: 'i', link: 'lnk', nearby: 'nb', noTextSelection: 'notxt', onLeft: 'ol', onRight: 'or', opaque: 'oq', overflowHidden: 'oh', page: 'pg', paragraph: 'p', passPointerEvents: 'ppe', root: 'ui', row: 'r', scrollbars: 'sb', scrollbarsX: 'sbx', scrollbarsY: 'sby', seButton: 'sbt', single: 'e', sizeByCapital: 'cap', spaceEvenly: 'sev', strike: 'sk', text: 't', textCenter: 'tc', textExtraBold: 'w8', textExtraLight: 'w2', textHeavy: 'w9', textJustify: 'tj', textJustifyAll: 'tja', textLeft: 'tl', textLight: 'w3', textMedium: 'w5', textNormalWeight: 'w4', textRight: 'tr', textSemiBold: 'w6', textThin: 'w1', textUnitalicized: 'tun', transition: 'ts', transparent: 'clr', underline: 'u', widthContent: 'wc', widthExact: 'we', widthFill: 'wf', widthFillPortion: 'wfp', wrapped: 'wrp'};
var $mdgriffith$elm_ui$Internal$Flag$Flag = function (a) {
	return {$: 'Flag', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Second = function (a) {
	return {$: 'Second', a: a};
};
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $mdgriffith$elm_ui$Internal$Flag$flag = function (i) {
	return (i > 31) ? $mdgriffith$elm_ui$Internal$Flag$Second(1 << (i - 32)) : $mdgriffith$elm_ui$Internal$Flag$Flag(1 << i);
};
var $mdgriffith$elm_ui$Internal$Flag$overflow = $mdgriffith$elm_ui$Internal$Flag$flag(20);
var $mdgriffith$elm_ui$Element$scrollbars = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.scrollbars);
var $mdgriffith$elm_ui$Internal$Model$Width = function (a) {
	return {$: 'Width', a: a};
};
var $mdgriffith$elm_ui$Element$width = $mdgriffith$elm_ui$Internal$Model$Width;
var $author$project$ElmailUrl$namedSearchUrlParser = function (requester) {
	return A3(
		$elm$url$Url$Parser$Query$map2,
		F2(
			function (d, q_) {
				var queries = A2(
					$author$project$Query$foldlOr,
					$author$project$Query$fromString(q_),
					_List_Nil);
				var mail = $elm$core$Maybe$Nothing;
				return A2(
					$author$project$Lazy$Tree$Tree,
					$elm$core$Maybe$Just(
						_Utils_Tuple2(
							false,
							$author$project$ElmailUrl$Layout(
								{
									cardChildrenStyle: _List_fromArray(
										[
											$mdgriffith$elm_ui$Element$scrollbars,
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
										]),
									childrenContainer: $elm$core$Maybe$Just(
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$scrollbars,
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
											])),
									layout: _Utils_Tuple2($author$project$Grid$Row, false),
									position: $author$project$Grid$WireOverlay,
									wire_children: _Utils_Tuple2(false, false),
									wirestyle: $author$project$Tree$branchColumn
								}))),
					$author$project$Lazy$LList$fromList(
						A2(
							$elm$core$List$map,
							function (e) {
								return $author$project$Lazy$Tree$singleton(
									$elm$core$Maybe$Just(
										_Utils_Tuple2(true, e)));
							},
							A2(
								$elm$core$List$indexedMap,
								F2(
									function (i, q) {
										var id = 'h-' + $elm$core$String$fromInt(i);
										return A2(
											$author$project$ElmailUrl$Search,
											{
												grid: _Utils_Tuple2($author$project$Grid$WrappedRow, false),
												id: id,
												matching: $author$project$Query$Request($elm$core$Maybe$Nothing),
												name: '',
												operator: $author$project$Query$And,
												queryeditor: {
													contextquery: $author$project$Query$AnyMessage,
													prefix: id,
													querytree: $author$project$QueryEditor$editor(q)
												},
												requester: requester,
												status: $author$project$Query$Request($elm$core$Maybe$Nothing),
												subqueries: _List_Nil,
												tagchanges: _List_Nil,
												user: $elm$core$Maybe$Nothing,
												view: $author$project$ElmailUrl$QueryEditor
											},
											mail);
									}),
								$elm$core$List$reverse(queries)))));
			}),
		$elm$url$Url$Parser$Query$string('display'),
		$author$project$ElmailUrl$queryStringEmpty('q'));
};
var $elm$core$List$concatMap = F2(
	function (f, list) {
		return $elm$core$List$concat(
			A2($elm$core$List$map, f, list));
	});
var $elm$url$Url$Parser$oneOf = function (parsers) {
	return $elm$url$Url$Parser$Parser(
		function (state) {
			return A2(
				$elm$core$List$concatMap,
				function (_v0) {
					var parser = _v0.a;
					return parser(state);
				},
				parsers);
		});
};
var $elm$url$Url$Parser$query = function (_v0) {
	var queryParser = _v0.a;
	return $elm$url$Url$Parser$Parser(
		function (_v1) {
			var visited = _v1.visited;
			var unvisited = _v1.unvisited;
			var params = _v1.params;
			var frag = _v1.frag;
			var value = _v1.value;
			return _List_fromArray(
				[
					A5(
					$elm$url$Url$Parser$State,
					visited,
					unvisited,
					params,
					frag,
					value(
						queryParser(params)))
				]);
		});
};
var $elm$url$Url$Parser$s = function (str) {
	return $elm$url$Url$Parser$Parser(
		function (_v0) {
			var visited = _v0.visited;
			var unvisited = _v0.unvisited;
			var params = _v0.params;
			var frag = _v0.frag;
			var value = _v0.value;
			if (!unvisited.b) {
				return _List_Nil;
			} else {
				var next = unvisited.a;
				var rest = unvisited.b;
				return _Utils_eq(next, str) ? _List_fromArray(
					[
						A5(
						$elm$url$Url$Parser$State,
						A2($elm$core$List$cons, next, visited),
						rest,
						params,
						frag,
						value)
					]) : _List_Nil;
			}
		});
};
var $author$project$Main$urlParser = $elm$url$Url$Parser$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$url$Url$Parser$map,
			$author$project$ElmailUrl$InitSearches,
			$elm$url$Url$Parser$query(
				$author$project$ElmailUrl$namedSearchUrlParser(
					A2($pd_andy$elm_limiter$Limiter$debounce, $author$project$Main$RequesterMsg, $author$project$ElmailUrl$settings.delay)))),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$ElmailUrl$Home,
			$elm$url$Url$Parser$s('')),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$ElmailUrl$Impressum,
			$elm$url$Url$Parser$s('impressum'))
		]));
var $author$project$Main$initFromUrl = F2(
	function (url, model) {
		var r = A2(
			$elm$core$Maybe$withDefault,
			$author$project$ElmailUrl$NotFound404(url),
			A2($elm$url$Url$Parser$parse, $author$project$Main$urlParser, url));
		if (r.$ === 'InitSearches') {
			var s = r.a;
			return _Utils_update(
				model,
				{
					searches: $author$project$DictShow$fromTree(
						A2($author$project$Main$iTree, 0, s))
				});
		} else {
			return model;
		}
	});
var $author$project$Main$At = F2(
	function (a, b) {
		return {$: 'At', a: a, b: b};
	});
var $author$project$Lazy$andThen = F2(
	function (callback, a) {
		return $author$project$Lazy$lazy(
			function (_v0) {
				return $author$project$Lazy$force(
					callback(
						$author$project$Lazy$force(a)));
			});
	});
var $author$project$Lazy$LList$lazyFoldr = F2(
	function (predicate, acc) {
		return $author$project$Lazy$andThen(
			A2($elm$core$List$foldr, predicate, acc));
	});
var $author$project$Lazy$LList$concat = A2($author$project$Lazy$LList$lazyFoldr, $author$project$Lazy$LList$append, $author$project$Lazy$LList$empty);
var $author$project$Lazy$LList$cons = function (a) {
	return $author$project$Lazy$map(
		$elm$core$List$cons(a));
};
var $author$project$Lazy$LList$filterMap = function (predicate) {
	return $author$project$Lazy$map(
		$elm$core$List$filterMap(predicate));
};
var $author$project$Lazy$LList$foldr = F2(
	function (predicate, acc) {
		return A2(
			$elm$core$Basics$composeL,
			A2($elm$core$List$foldr, predicate, acc),
			$author$project$Lazy$LList$toList);
	});
var $author$project$DictShow$getTree = function (z) {
	return A2($elm$core$Tuple$mapSecond, $author$project$Lazy$Tree$Zipper$getTree, z);
};
var $elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (maybeValue.$ === 'Just') {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$DictShow$getid = function (d) {
	return function (id) {
		return A2($elm$core$Dict$get, id, d);
	};
};
var $author$project$DictShow$mapDict = function (d) {
	return $elm$core$Maybe$andThen(
		function (_v0) {
			var b = _v0.a;
			var aid = _v0.b;
			return A2(
				$elm$core$Maybe$map,
				function (a) {
					return _Utils_Tuple2(b, a);
				},
				A2($author$project$DictShow$getid, d, aid));
		});
};
var $author$project$Show$mapFoldl_ = F4(
	function (aggf, f, agg, _v0) {
		var lab = _v0.a;
		var chldrn = _v0.b;
		var nagg = A2(aggf, lab, agg);
		return A3(
			f,
			nagg,
			lab,
			A2(
				$author$project$Lazy$LList$map,
				function (c) {
					return A4($author$project$Show$mapFoldl_, aggf, f, nagg, c);
				},
				chldrn));
	});
var $author$project$Show$mapFoldl = F4(
	function (aggf, f, path, x) {
		return A4($author$project$Show$mapFoldl_, aggf, f, path, x);
	});
var $author$project$DictShow$mapFoldl = F4(
	function (aggf, ff, path, _v0) {
		var d = _v0.a;
		var x = _v0.b;
		return A4(
			$author$project$Show$mapFoldl,
			function (_v1) {
				var i = _v1.a;
				var id = _v1.b;
				return aggf(
					_Utils_Tuple2(
						i,
						A2($author$project$DictShow$mapDict, d, id)));
			},
			F3(
				function (agg, _v2, ll) {
					var i = _v2.a;
					var id = _v2.b;
					return A3(
						ff,
						agg,
						_Utils_Tuple2(
							i,
							A2($author$project$DictShow$mapDict, d, id)),
						ll);
				}),
			path,
			x);
	});
var $author$project$DictShow$cmdMapTree = F6(
	function (idf, ccf, treeaggregate, rootAgg, cmdf, _v0) {
		var d = _v0.a;
		var t = _v0.b;
		var uc = A4(
			$author$project$DictShow$mapFoldl,
			treeaggregate,
			F3(
				function (acc, _v2, ll) {
					var a = _v2.b;
					return A2(
						$author$project$Lazy$LList$cons,
						A2(
							$elm$core$Tuple$mapSecond,
							$elm$core$Platform$Cmd$map(
								ccf(acc)),
							A2(cmdf, acc, a)),
						$author$project$Lazy$LList$concat(ll));
				}),
			rootAgg,
			$author$project$DictShow$getTree(
				_Utils_Tuple2(d, t)));
		return _Utils_Tuple2(
			_Utils_Tuple2(
				A3(
					$author$project$Lazy$LList$foldr,
					F2(
						function (_v1, d_) {
							var a = _v1.b;
							return A3($author$project$DictShow$dictInsert, idf, d_, a);
						}),
					d,
					A2(
						$author$project$Lazy$LList$filterMap,
						$elm$core$Basics$identity,
						A2($author$project$Lazy$LList$map, $elm$core$Tuple$first, uc))),
				t),
			A2($author$project$Lazy$LList$map, $elm$core$Tuple$second, uc));
	});
var $author$project$Main$cmdMapTree = A2(
	$author$project$DictShow$cmdMapTree,
	$author$project$Main$keyFromEmailType,
	function (pa) {
		return $author$project$Main$At(pa.rpath);
	});
var $author$project$Main$rootAgg = {psubject: '', queries: _List_Nil, rpath: _List_Nil, rpathstring: '', subject: ''};
var $author$project$Access$withDefaultMaybe = F2(
	function (d, x) {
		if (x.$ === 'Just') {
			return x;
		} else {
			return d;
		}
	});
var $author$project$Main$maybeSubject = function (x) {
	switch (x.$) {
		case 'Email':
			var e = x.b;
			return $elm$core$Maybe$Just(e.header.subject);
		case 'Draft':
			var d = x.a;
			var e = x.b;
			return A2(
				$author$project$Access$withDefaultMaybe,
				A2(
					$elm$core$Maybe$map,
					function ($) {
						return $.subject;
					},
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.header;
						},
						e)),
				$author$project$Notmuch$postable(d).subject);
		case 'Search':
			var ns = x.b;
			return A2(
				$elm$core$Maybe$map,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.header;
					},
					function ($) {
						return $.subject;
					}),
				ns);
		case 'Thread':
			return $elm$core$Maybe$Nothing;
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Access$query = {
	get: function ($) {
		return $.query;
	},
	set: F2(
		function (value, h) {
			return _Utils_update(
				h,
				{query: value});
		})
};
var $author$project$Query$ID = function (a) {
	return {$: 'ID', a: a};
};
var $author$project$Query$MessageID = function (a) {
	return {$: 'MessageID', a: a};
};
var $author$project$Query$ThreadID = function (a) {
	return {$: 'ThreadID', a: a};
};
var $author$project$QueryEditor$queryLeafFromQueryNode = function (q) {
	switch (q.$) {
		case 'Tag':
			var t = q.a;
			return $elm$core$Maybe$Just(
				$author$project$Query$Tag(t));
		case 'Prefix':
			var p = q.a;
			var t = q.b;
			return $elm$core$Maybe$Just(
				A2($author$project$Query$Prefix, p, t));
		case 'Free':
			var t = q.a;
			if (t === '') {
				return $elm$core$Maybe$Nothing;
			} else {
				return $elm$core$Maybe$Just(
					$author$project$Query$Free(t));
			}
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$QueryEditor$queryFromTree = function (_v0) {
	var _v1 = _v0.a;
	var q = _v1.b;
	var cs = _v0.b;
	var cs_ = A2(
		$elm$core$List$filter,
		$elm$core$Basics$neq($author$project$Query$AnyMessage),
		$author$project$Lazy$LList$toList(
			A2($author$project$Lazy$LList$map, $author$project$QueryEditor$queryFromTree, cs)));
	switch (q.$) {
		case 'Operator':
			var op = q.a;
			return A2($author$project$Query$Operator, op.op, cs_);
		case 'Person':
			var p = q.c;
			var _v3 = _Utils_Tuple2(p.choices, p.chips);
			if (!_v3.b.b) {
				return $author$project$Query$AnyMessage;
			} else {
				if (_v3.a.$ === 'Present') {
					return $author$project$Query$and(
						A2(
							$elm$core$List$map,
							function (p_) {
								return $author$project$Query$Leaf(
									A2($author$project$Query$Person, p_.dir, p_.person));
							},
							p.chips));
				} else {
					return $author$project$Query$AnyMessage;
				}
			}
		default:
			return A2(
				$elm$core$Maybe$withDefault,
				$author$project$Query$AnyMessage,
				A2(
					$elm$core$Maybe$map,
					$author$project$Query$Leaf,
					$author$project$QueryEditor$queryLeafFromQueryNode(q)));
	}
};
var $author$project$Lazy$Tree$Zipper$attempt = F2(
	function (action, zipper) {
		return A2(
			$elm$core$Maybe$withDefault,
			zipper,
			action(zipper));
	});
var $author$project$Lazy$LList$reverse = $author$project$Lazy$map($elm$core$List$reverse);
var $author$project$Lazy$Tree$Zipper$up = function (_v0) {
	var tree = _v0.a;
	var zipperBreadcrumbs = _v0.b;
	if (!zipperBreadcrumbs.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var left = zipperBreadcrumbs.a.a.left;
		var parent = zipperBreadcrumbs.a.a.parent;
		var right = zipperBreadcrumbs.a.a.right;
		var tail = zipperBreadcrumbs.b;
		return $elm$core$Maybe$Just(
			A2(
				$author$project$Lazy$Tree$Zipper$Zipper,
				A2(
					$author$project$Lazy$Tree$Tree,
					parent,
					A2(
						$author$project$Lazy$LList$append,
						$author$project$Lazy$LList$reverse(left),
						A2($author$project$Lazy$LList$cons, tree, right))),
				tail));
	}
};
var $author$project$Lazy$Tree$Zipper$upwards = F2(
	function (n, zipper) {
		return (n < 0) ? $elm$core$Maybe$Nothing : ((!n) ? $elm$core$Maybe$Just(zipper) : A2(
			$elm$core$Maybe$andThen,
			$author$project$Lazy$Tree$Zipper$upwards(n - 1),
			$author$project$Lazy$Tree$Zipper$up(zipper)));
	});
var $author$project$Lazy$Tree$Zipper$root = function (zipper) {
	var zipperBreadcrumbs = zipper.b;
	return A2(
		$author$project$Lazy$Tree$Zipper$attempt,
		$author$project$Lazy$Tree$Zipper$upwards(
			$elm$core$List$length(zipperBreadcrumbs)),
		zipper);
};
var $author$project$QueryEditor$query = function (x) {
	return $author$project$QueryEditor$queryFromTree(
		$author$project$Lazy$Tree$Zipper$getTree(
			$author$project$Lazy$Tree$Zipper$root(x)));
};
var $author$project$Main$subquery = F2(
	function (e, acc) {
		var _v0 = _Utils_Tuple2(acc, e);
		_v0$3:
		while (true) {
			if (_v0.b.$ === 'Just') {
				switch (_v0.b.a.$) {
					case 'Layout':
						return acc;
					case 'Search':
						switch (_v0.a.$) {
							case 'AnyMessage':
								var _v1 = _v0.a;
								var _v2 = _v0.b.a;
								var d = _v2.a;
								return $author$project$QueryEditor$query(d.queryeditor.querytree);
							case 'Operator':
								if ((((_v0.a.a.$ === 'Not') && _v0.a.b.b) && (_v0.a.b.a.$ === 'AnyMessage')) && (!_v0.a.b.b.b)) {
									var _v3 = _v0.a;
									var _v4 = _v3.a;
									var _v5 = _v3.b;
									var _v6 = _v5.a;
									var _v7 = _v0.b.a;
									var d = _v7.a;
									return $author$project$QueryEditor$query(d.queryeditor.querytree);
								} else {
									break _v0$3;
								}
							default:
								break _v0$3;
						}
					case 'Email':
						var _v9 = _v0.b.a;
						var mail = _v9.b;
						return $author$project$Query$Leaf(
							$author$project$Query$ID(
								$author$project$Query$MessageID(mail.id)));
					case 'Draft':
						var _v10 = _v0.b.a;
						var mail = _v10.b;
						return A2(
							$elm$core$Maybe$withDefault,
							A2(
								$author$project$Query$Operator,
								$author$project$Query$Not,
								_List_fromArray(
									[$author$project$Query$AnyMessage])),
							A2(
								$elm$core$Maybe$map,
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.id;
									},
									A2(
										$elm$core$Basics$composeR,
										$author$project$Query$MessageID,
										A2($elm$core$Basics$composeR, $author$project$Query$ID, $author$project$Query$Leaf))),
								mail));
					default:
						var _v11 = _v0.b.a;
						var d = _v11.a;
						var t = _v11.b;
						var q = $author$project$Query$Leaf(
							$author$project$Query$ID(
								$author$project$Query$ThreadID(
									$author$project$Query$queryable(t).thread_id)));
						return A2(
							$elm$core$Maybe$withDefault,
							false,
							$author$project$Query$queryable(d.entire_thread)) ? q : $author$project$Query$and(
							_List_fromArray(
								[acc, q]));
				}
			} else {
				var _v12 = _v0.b;
				return acc;
			}
		}
		var _v8 = _v0.b.a;
		var d = _v8.a;
		return A2(
			$author$project$Query$Operator,
			d.operator,
			_List_fromArray(
				[
					acc,
					$author$project$QueryEditor$query(d.queryeditor.querytree)
				]));
	});
var $author$project$Main$treeaggregate = F2(
	function (_v0, pa) {
		var i = _v0.a;
		var e = _v0.b;
		var q = A2(
			$author$project$Main$subquery,
			A2($elm$core$Maybe$map, $elm$core$Tuple$second, e),
			$author$project$Main$aggregateQuery(pa));
		return {
			psubject: pa.subject,
			queries: function () {
				if ((e.$ === 'Just') && (e.a.b.$ === 'Search')) {
					var _v2 = e.a;
					var _v3 = _v2.b;
					var d = _v3.a;
					return A2(
						$elm$core$List$cons,
						{query: q, user: d.user},
						pa.queries);
				} else {
					return A2(
						$elm$core$List$cons,
						A2(
							$author$project$Access$query.set,
							q,
							$author$project$Main$aggregateSession(pa)),
						pa.queries);
				}
			}(),
			rpath: A2($elm$core$List$cons, i, pa.rpath),
			rpathstring: $elm$core$String$fromInt(i) + ('-' + pa.rpathstring),
			subject: A2(
				$elm$core$Maybe$withDefault,
				pa.subject,
				A2(
					$elm$core$Maybe$andThen,
					A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $author$project$Main$maybeSubject),
					e))
		};
	});
var $author$project$Lazy$Tree$Zipper$getPath = F2(
	function (fc, _v0) {
		var tree = _v0.a;
		var zipperBreadcrumbs = _v0.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v1, acc) {
					var parent = _v1.a.parent;
					return A2(
						$elm$core$List$cons,
						fc(parent),
						acc);
				}),
			_List_fromArray(
				[
					fc(
					$author$project$Lazy$Tree$item(tree))
				]),
			zipperBreadcrumbs);
	});
var $author$project$DictShow$getPath = F2(
	function (f, _v0) {
		var d = _v0.a;
		var z = _v0.b;
		return A2(
			$author$project$Lazy$Tree$Zipper$getPath,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$Tuple$mapSecond(
					$author$project$DictShow$mapDict(d)),
				f),
			z);
	});
var $author$project$Show$index = $elm$core$Tuple$first;
var $author$project$Show$equalIndex = F2(
	function (b, a) {
		return _Utils_eq(
			$author$project$Show$index(a),
			b);
	});
var $elm$core$Result$andThen = F2(
	function (callback, result) {
		if (result.$ === 'Ok') {
			var value = result.a;
			return callback(value);
		} else {
			var msg = result.a;
			return $elm$core$Result$Err(msg);
		}
	});
var $elm$core$Result$fromMaybe = F2(
	function (err, maybe) {
		if (maybe.$ === 'Just') {
			var v = maybe.a;
			return $elm$core$Result$Ok(v);
		} else {
			return $elm$core$Result$Err(err);
		}
	});
var $author$project$Lazy$Tree$Zipper$Breadcrumb = function (a) {
	return {$: 'Breadcrumb', a: a};
};
var $author$project$Lazy$Tree$Zipper$cutForest_ = F3(
	function (acc, predicate, forest) {
		cutForest_:
		while (true) {
			var _v0 = $author$project$Lazy$LList$toList(forest);
			if (!_v0.b) {
				return _Utils_Tuple3(acc, $elm$core$Maybe$Nothing, $author$project$Lazy$LList$empty);
			} else {
				var head = _v0.a;
				var tail = _v0.b;
				if (predicate(
					$author$project$Lazy$Tree$item(head))) {
					return _Utils_Tuple3(
						acc,
						$elm$core$Maybe$Just(head),
						$author$project$Lazy$LList$fromList(tail));
				} else {
					var $temp$acc = A2($author$project$Lazy$LList$cons, head, acc),
						$temp$predicate = predicate,
						$temp$forest = $author$project$Lazy$LList$fromList(tail);
					acc = $temp$acc;
					predicate = $temp$predicate;
					forest = $temp$forest;
					continue cutForest_;
				}
			}
		}
	});
var $author$project$Lazy$Tree$Zipper$cutForest = $author$project$Lazy$Tree$Zipper$cutForest_($author$project$Lazy$LList$empty);
var $author$project$Lazy$Tree$Zipper$open = F2(
	function (predicate, _v0) {
		var zipperTree = _v0.a;
		var zipperBreadcrumbs = _v0.b;
		var treeChildren = $author$project$Lazy$Tree$descendants(zipperTree);
		var currentItem = $author$project$Lazy$Tree$item(zipperTree);
		var _v1 = A2($author$project$Lazy$Tree$Zipper$cutForest, predicate, treeChildren);
		var left = _v1.a;
		var item = _v1.b;
		var right = _v1.c;
		return A2(
			$elm$core$Maybe$map,
			function (tree) {
				return A2(
					$author$project$Lazy$Tree$Zipper$Zipper,
					tree,
					A2(
						$elm$core$List$cons,
						$author$project$Lazy$Tree$Zipper$Breadcrumb(
							{left: left, parent: currentItem, right: right}),
						zipperBreadcrumbs));
			},
			item);
	});
var $author$project$Lazy$Tree$Zipper$openPath = F3(
	function (predicate, path, zipper) {
		var toResult = function (_v0) {
			return $elm$core$Result$fromMaybe('Can\'t resolve open');
		};
		return A3(
			$elm$core$List$foldl,
			F2(
				function (i, acc) {
					return A2(
						$elm$core$Result$andThen,
						A2(
							$elm$core$Basics$composeL,
							toResult(i),
							$author$project$Lazy$Tree$Zipper$open(
								predicate(i))),
						acc);
				}),
			$elm$core$Result$Ok(zipper),
			path);
	});
var $author$project$Show$zpath = function (rpath) {
	var _v0 = $elm$core$List$reverse(rpath);
	if (_v0.b) {
		var path = _v0.b;
		return path;
	} else {
		return _List_Nil;
	}
};
var $author$project$Show$openRPath = F2(
	function (hpath, t) {
		return A3(
			$author$project$Lazy$Tree$Zipper$openPath,
			$author$project$Show$equalIndex,
			$author$project$Show$zpath(hpath),
			t);
	});
var $author$project$DictShow$withDict = function (d) {
	return function (z_) {
		return _Utils_Tuple2(d, z_);
	};
};
var $author$project$DictShow$openRPath = F2(
	function (hpath, _v0) {
		var d = _v0.a;
		var t = _v0.b;
		return A2(
			$elm$core$Result$map,
			$author$project$DictShow$withDict(d),
			A2($author$project$Show$openRPath, hpath, t));
	});
var $author$project$DictShow$root = function (_v0) {
	var d = _v0.a;
	var z = _v0.b;
	return _Utils_Tuple2(
		d,
		$author$project$Lazy$Tree$Zipper$root(z));
};
var $author$project$DictShow$updateRootTupleKeepPoint = F2(
	function (f, _v0) {
		var z = _v0.a;
		var l = _v0.b;
		var path = A2($author$project$DictShow$getPath, $author$project$Show$index, z);
		return function (_v1) {
			var t = _v1.a;
			var c = _v1.b;
			return _Utils_Tuple2(
				A2(
					$elm$core$Result$withDefault,
					t,
					A2($author$project$DictShow$openRPath, path, t)),
				A2($author$project$Lazy$LList$append, c, l));
		}(
			f(
				$author$project$DictShow$root(z)));
	});
var $author$project$Main$modelCmdRoot = F2(
	function (f, model) {
		var _v0 = A2(
			$author$project$DictShow$updateRootTupleKeepPoint,
			A3($author$project$Main$cmdMapTree, $author$project$Main$treeaggregate, $author$project$Main$rootAgg, f),
			_Utils_Tuple2(model.searches, $author$project$Lazy$LList$empty));
		var s = _v0.a;
		var c = _v0.b;
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{searches: s}),
			c);
	});
var $author$project$Symbol$IconSymbol = function (a) {
	return {$: 'IconSymbol', a: a};
};
var $author$project$Symbol$Image = function (a) {
	return {$: 'Image', a: a};
};
var $author$project$Symbol$Unicode = function (a) {
	return {$: 'Unicode', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Unkeyed = function (a) {
	return {$: 'Unkeyed', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$AsEl = {$: 'AsEl'};
var $mdgriffith$elm_ui$Internal$Model$asEl = $mdgriffith$elm_ui$Internal$Model$AsEl;
var $mdgriffith$elm_ui$Internal$Model$Generic = {$: 'Generic'};
var $mdgriffith$elm_ui$Internal$Model$div = $mdgriffith$elm_ui$Internal$Model$Generic;
var $mdgriffith$elm_ui$Internal$Model$NoNearbyChildren = {$: 'NoNearbyChildren'};
var $mdgriffith$elm_ui$Internal$Model$columnClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.column);
var $mdgriffith$elm_ui$Internal$Model$gridClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.grid);
var $mdgriffith$elm_ui$Internal$Model$pageClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.page);
var $mdgriffith$elm_ui$Internal$Model$paragraphClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.paragraph);
var $mdgriffith$elm_ui$Internal$Model$rowClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.row);
var $mdgriffith$elm_ui$Internal$Model$singleClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.single);
var $mdgriffith$elm_ui$Internal$Model$contextClasses = function (context) {
	switch (context.$) {
		case 'AsRow':
			return $mdgriffith$elm_ui$Internal$Model$rowClass;
		case 'AsColumn':
			return $mdgriffith$elm_ui$Internal$Model$columnClass;
		case 'AsEl':
			return $mdgriffith$elm_ui$Internal$Model$singleClass;
		case 'AsGrid':
			return $mdgriffith$elm_ui$Internal$Model$gridClass;
		case 'AsParagraph':
			return $mdgriffith$elm_ui$Internal$Model$paragraphClass;
		default:
			return $mdgriffith$elm_ui$Internal$Model$pageClass;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Keyed = function (a) {
	return {$: 'Keyed', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$NoStyleSheet = {$: 'NoStyleSheet'};
var $mdgriffith$elm_ui$Internal$Model$Styled = function (a) {
	return {$: 'Styled', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Unstyled = function (a) {
	return {$: 'Unstyled', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addChildren = F2(
	function (existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 'NoNearbyChildren':
				return existing;
			case 'ChildrenBehind':
				var behind = nearbyChildren.a;
				return _Utils_ap(behind, existing);
			case 'ChildrenInFront':
				var inFront = nearbyChildren.a;
				return _Utils_ap(existing, inFront);
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					behind,
					_Utils_ap(existing, inFront));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$addKeyedChildren = F3(
	function (key, existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 'NoNearbyChildren':
				return existing;
			case 'ChildrenBehind':
				var behind = nearbyChildren.a;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					existing);
			case 'ChildrenInFront':
				var inFront = nearbyChildren.a;
				return _Utils_ap(
					existing,
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						inFront));
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					_Utils_ap(
						existing,
						A2(
							$elm$core$List$map,
							function (x) {
								return _Utils_Tuple2(key, x);
							},
							inFront)));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$AsParagraph = {$: 'AsParagraph'};
var $mdgriffith$elm_ui$Internal$Model$asParagraph = $mdgriffith$elm_ui$Internal$Model$AsParagraph;
var $mdgriffith$elm_ui$Internal$Flag$alignBottom = $mdgriffith$elm_ui$Internal$Flag$flag(41);
var $mdgriffith$elm_ui$Internal$Flag$alignRight = $mdgriffith$elm_ui$Internal$Flag$flag(40);
var $mdgriffith$elm_ui$Internal$Flag$centerX = $mdgriffith$elm_ui$Internal$Flag$flag(42);
var $mdgriffith$elm_ui$Internal$Flag$centerY = $mdgriffith$elm_ui$Internal$Flag$flag(43);
var $elm$html$Html$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$string(string));
	});
var $elm$html$Html$Attributes$class = $elm$html$Html$Attributes$stringProperty('className');
var $elm$html$Html$div = _VirtualDom_node('div');
var $mdgriffith$elm_ui$Internal$Model$lengthClassName = function (x) {
	switch (x.$) {
		case 'Px':
			var px = x.a;
			return $elm$core$String$fromInt(px) + 'px';
		case 'Content':
			return 'auto';
		case 'Fill':
			var i = x.a;
			return $elm$core$String$fromInt(i) + 'fr';
		case 'Min':
			var min = x.a;
			var len = x.b;
			return 'min' + ($elm$core$String$fromInt(min) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
		default:
			var max = x.a;
			var len = x.b;
			return 'max' + ($elm$core$String$fromInt(max) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
	}
};
var $elm$core$Basics$round = _Basics_round;
var $mdgriffith$elm_ui$Internal$Model$floatClass = function (x) {
	return $elm$core$String$fromInt(
		$elm$core$Basics$round(x * 255));
};
var $mdgriffith$elm_ui$Internal$Model$transformClass = function (transform) {
	switch (transform.$) {
		case 'Untransformed':
			return $elm$core$Maybe$Nothing;
		case 'Moved':
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'mv-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(x) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(y) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(z))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			return $elm$core$Maybe$Just(
				'tfrm-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ty) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ox) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oz) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(angle))))))))))))))))))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$getStyleName = function (style) {
	switch (style.$) {
		case 'Shadows':
			var name = style.a;
			return name;
		case 'Transparency':
			var name = style.a;
			var o = style.b;
			return name;
		case 'Style':
			var _class = style.a;
			return _class;
		case 'FontFamily':
			var name = style.a;
			return name;
		case 'FontSize':
			var i = style.a;
			return 'font-size-' + $elm$core$String$fromInt(i);
		case 'Single':
			var _class = style.a;
			return _class;
		case 'Colored':
			var _class = style.a;
			return _class;
		case 'SpacingStyle':
			var cls = style.a;
			var x = style.b;
			var y = style.c;
			return cls;
		case 'PaddingStyle':
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 'BorderWidth':
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 'GridTemplateStyle':
			var template = style.a;
			return 'grid-rows-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.rows)) + ('-cols-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.columns)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.b)))))));
		case 'GridPosition':
			var pos = style.a;
			return 'gp grid-pos-' + ($elm$core$String$fromInt(pos.row) + ('-' + ($elm$core$String$fromInt(pos.col) + ('-' + ($elm$core$String$fromInt(pos.width) + ('-' + $elm$core$String$fromInt(pos.height)))))));
		case 'PseudoSelector':
			var selector = style.a;
			var subStyle = style.b;
			var name = function () {
				switch (selector.$) {
					case 'Focus':
						return 'fs';
					case 'Hover':
						return 'hv';
					default:
						return 'act';
				}
			}();
			return A2(
				$elm$core$String$join,
				' ',
				A2(
					$elm$core$List$map,
					function (sty) {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$getStyleName(sty);
						if (_v1 === '') {
							return '';
						} else {
							var styleName = _v1;
							return styleName + ('-' + name);
						}
					},
					subStyle));
		default:
			var x = style.a;
			return A2(
				$elm$core$Maybe$withDefault,
				'',
				$mdgriffith$elm_ui$Internal$Model$transformClass(x));
	}
};
var $mdgriffith$elm_ui$Internal$Model$reduceStyles = F2(
	function (style, nevermind) {
		var cache = nevermind.a;
		var existing = nevermind.b;
		var styleName = $mdgriffith$elm_ui$Internal$Model$getStyleName(style);
		return A2($elm$core$Set$member, styleName, cache) ? nevermind : _Utils_Tuple2(
			A2($elm$core$Set$insert, styleName, cache),
			A2($elm$core$List$cons, style, existing));
	});
var $mdgriffith$elm_ui$Internal$Model$Property = F2(
	function (a, b) {
		return {$: 'Property', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Style = F2(
	function (a, b) {
		return {$: 'Style', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$dot = function (c) {
	return '.' + c;
};
var $elm$core$String$fromFloat = _String_fromNumber;
var $mdgriffith$elm_ui$Internal$Model$formatColor = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return 'rgba(' + ($elm$core$String$fromInt(
		$elm$core$Basics$round(red * 255)) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(green * 255))) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(blue * 255))) + (',' + ($elm$core$String$fromFloat(alpha) + ')')))));
};
var $mdgriffith$elm_ui$Internal$Model$formatBoxShadow = function (shadow) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					shadow.inset ? $elm$core$Maybe$Just('inset') : $elm$core$Maybe$Nothing,
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.offset.a) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.offset.b) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.blur) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.size) + 'px'),
					$elm$core$Maybe$Just(
					$mdgriffith$elm_ui$Internal$Model$formatColor(shadow.color))
				])));
};
var $mdgriffith$elm_ui$Internal$Model$renderFocusStyle = function (focus) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin) + ':focus-within',
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.borderColor),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.backgroundColor),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										blur: shadow.blur,
										color: shadow.color,
										inset: false,
										offset: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.offset)),
										size: shadow.size
									}));
						},
						focus.shadow),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					]))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + (':focus .focusable, ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + '.focusable:focus')),
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.borderColor),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.backgroundColor),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										blur: shadow.blur,
										color: shadow.color,
										inset: false,
										offset: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.offset)),
										size: shadow.size
									}));
						},
						focus.shadow),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					])))
		]);
};
var $elm$virtual_dom$VirtualDom$node = function (tag) {
	return _VirtualDom_node(
		_VirtualDom_noScript(tag));
};
var $elm$virtual_dom$VirtualDom$property = F2(
	function (key, value) {
		return A2(
			_VirtualDom_property,
			_VirtualDom_noInnerHtmlOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $mdgriffith$elm_ui$Internal$Style$AllChildren = F2(
	function (a, b) {
		return {$: 'AllChildren', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Batch = function (a) {
	return {$: 'Batch', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Child = F2(
	function (a, b) {
		return {$: 'Child', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Class = F2(
	function (a, b) {
		return {$: 'Class', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Descriptor = F2(
	function (a, b) {
		return {$: 'Descriptor', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Left = {$: 'Left'};
var $mdgriffith$elm_ui$Internal$Style$Prop = F2(
	function (a, b) {
		return {$: 'Prop', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Right = {$: 'Right'};
var $mdgriffith$elm_ui$Internal$Style$Self = function (a) {
	return {$: 'Self', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Supports = F2(
	function (a, b) {
		return {$: 'Supports', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Content = function (a) {
	return {$: 'Content', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Bottom = {$: 'Bottom'};
var $mdgriffith$elm_ui$Internal$Style$CenterX = {$: 'CenterX'};
var $mdgriffith$elm_ui$Internal$Style$CenterY = {$: 'CenterY'};
var $mdgriffith$elm_ui$Internal$Style$Top = {$: 'Top'};
var $mdgriffith$elm_ui$Internal$Style$alignments = _List_fromArray(
	[$mdgriffith$elm_ui$Internal$Style$Top, $mdgriffith$elm_ui$Internal$Style$Bottom, $mdgriffith$elm_ui$Internal$Style$Right, $mdgriffith$elm_ui$Internal$Style$Left, $mdgriffith$elm_ui$Internal$Style$CenterX, $mdgriffith$elm_ui$Internal$Style$CenterY]);
var $mdgriffith$elm_ui$Internal$Style$contentName = function (desc) {
	switch (desc.a.$) {
		case 'Top':
			var _v1 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentTop);
		case 'Bottom':
			var _v2 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentBottom);
		case 'Right':
			var _v3 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentRight);
		case 'Left':
			var _v4 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentLeft);
		case 'CenterX':
			var _v5 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX);
		default:
			var _v6 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Style$selfName = function (desc) {
	switch (desc.a.$) {
		case 'Top':
			var _v1 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignTop);
		case 'Bottom':
			var _v2 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignBottom);
		case 'Right':
			var _v3 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignRight);
		case 'Left':
			var _v4 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignLeft);
		case 'CenterX':
			var _v5 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX);
		default:
			var _v6 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Style$describeAlignment = function (values) {
	var createDescription = function (alignment) {
		var _v0 = values(alignment);
		var content = _v0.a;
		var indiv = _v0.b;
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$contentName(
					$mdgriffith$elm_ui$Internal$Style$Content(alignment)),
				content),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(
							$mdgriffith$elm_ui$Internal$Style$Self(alignment)),
						indiv)
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$elDescription = _List_fromArray(
	[
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hasBehind),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.seButton),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'auto !important')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightContent),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
			])),
		$mdgriffith$elm_ui$Internal$Style$describeAlignment(
		function (alignment) {
			switch (alignment.$) {
				case 'Top':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
							]));
				case 'Bottom':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
							]));
				case 'Right':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
							]));
				case 'Left':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							]));
				case 'CenterX':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
							]));
				default:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
									]))
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
							]));
			}
		})
	]);
var $mdgriffith$elm_ui$Internal$Style$gridAlignments = function (values) {
	var createDescription = function (alignment) {
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(
							$mdgriffith$elm_ui$Internal$Style$Self(alignment)),
						values(alignment))
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$Above = {$: 'Above'};
var $mdgriffith$elm_ui$Internal$Style$Behind = {$: 'Behind'};
var $mdgriffith$elm_ui$Internal$Style$Below = {$: 'Below'};
var $mdgriffith$elm_ui$Internal$Style$OnLeft = {$: 'OnLeft'};
var $mdgriffith$elm_ui$Internal$Style$OnRight = {$: 'OnRight'};
var $mdgriffith$elm_ui$Internal$Style$Within = {$: 'Within'};
var $mdgriffith$elm_ui$Internal$Style$locations = function () {
	var loc = $mdgriffith$elm_ui$Internal$Style$Above;
	var _v0 = function () {
		switch (loc.$) {
			case 'Above':
				return _Utils_Tuple0;
			case 'Below':
				return _Utils_Tuple0;
			case 'OnRight':
				return _Utils_Tuple0;
			case 'OnLeft':
				return _Utils_Tuple0;
			case 'Within':
				return _Utils_Tuple0;
			default:
				return _Utils_Tuple0;
		}
	}();
	return _List_fromArray(
		[$mdgriffith$elm_ui$Internal$Style$Above, $mdgriffith$elm_ui$Internal$Style$Below, $mdgriffith$elm_ui$Internal$Style$OnRight, $mdgriffith$elm_ui$Internal$Style$OnLeft, $mdgriffith$elm_ui$Internal$Style$Within, $mdgriffith$elm_ui$Internal$Style$Behind]);
}();
var $mdgriffith$elm_ui$Internal$Style$baseSheet = _List_fromArray(
	[
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		'html,body',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		_Utils_ap(
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
			_Utils_ap(
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.imageContainer))),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-height', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ':focus',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'outline', 'none')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.root),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nearby),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nearby),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				$mdgriffith$elm_ui$Internal$Style$Batch(
				function (fn) {
					return A2($elm$core$List$map, fn, $mdgriffith$elm_ui$Internal$Style$locations);
				}(
					function (loc) {
						switch (loc.$) {
							case 'Above':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.above),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
												])),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'Below':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.below),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												]))
										]));
							case 'OnRight':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onRight),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'OnLeft':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onLeft),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'right', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'Within':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							default:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
						}
					}))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'resize', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'box-sizing', 'border-box'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-size', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-family', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'inherit'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.wrapped),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-wrap', 'wrap')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.noTextSelection),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-moz-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-webkit-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-ms-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'user-select', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cursorPointer),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'pointer')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cursorText),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.passPointerEvents),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.capturePointerEvents),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.transparent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.opaque),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.hover, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.hover, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.focus, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.focus, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.active, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.active, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.transition),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Prop,
						'transition',
						A2(
							$elm$core$String$join,
							', ',
							A2(
								$elm$core$List$map,
								function (x) {
									return x + ' 160ms';
								},
								_List_fromArray(
									['transform', 'opacity', 'filter', 'background-color', 'color', 'font-size']))))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbars),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbarsX),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbarsY),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clip),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clipX),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clipY),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', 'auto')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderNone),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderDashed),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dashed')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderDotted),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dotted')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderSolid),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputText),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1.05'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background', 'transparent'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'inherit')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0%'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.link),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-left', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-right', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 'Bottom':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 'Right':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_Nil);
								case 'Left':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_Nil);
								case 'CenterX':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'baseline')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
											]));
								case 'Bottom':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto')
											]));
								case 'Right':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 'CenterX':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.grid),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', '-ms-grid'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'.gp',
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Supports,
						_Utils_Tuple2('display', 'grid'),
						_List_fromArray(
							[
								_Utils_Tuple2('display', 'grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$gridAlignments(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
										]);
								case 'Bottom':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
										]);
								case 'Right':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
										]);
								case 'Left':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
										]);
								case 'CenterX':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
										]);
								default:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
										]);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.page),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any + ':first-child'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.any + ($mdgriffith$elm_ui$Internal$Style$selfName(
								$mdgriffith$elm_ui$Internal$Style$Self($mdgriffith$elm_ui$Internal$Style$Left)) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.any))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.any + ($mdgriffith$elm_ui$Internal$Style$selfName(
								$mdgriffith$elm_ui$Internal$Style$Self($mdgriffith$elm_ui$Internal$Style$Right)) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.any))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Bottom':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Right':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 'CenterX':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultiline),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background-color', 'transparent')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineWrapper),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineParent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineFiller),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'transparent')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.paragraph),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-wrap', 'break-word'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hasBehind),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.paragraph),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::after',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::before',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.above),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.below),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onRight),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onLeft),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-flex')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.grid),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Bottom':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Right':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right')
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left')
											]));
								case 'CenterX':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.hidden',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textThin),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '100')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textExtraLight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '200')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textLight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '300')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textNormalWeight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '400')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textMedium),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '500')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textSemiBold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '600')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '700')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textExtraBold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '800')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textHeavy),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '900')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.italic),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'italic')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.strike),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.underline),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.underline),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.strike)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textUnitalicized),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'normal')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textJustify),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textJustifyAll),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify-all')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textCenter),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'center')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textRight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'right')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textLeft),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'left')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.modal',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none')
					]))
			]))
	]);
var $mdgriffith$elm_ui$Internal$Style$fontVariant = function (_var) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + _var,
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\"'))
				])),
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + (_var + '-off'),
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\" 0'))
				]))
		]);
};
var $mdgriffith$elm_ui$Internal$Style$commonValues = $elm$core$List$concat(
	_List_fromArray(
		[
			A2(
			$elm$core$List$map,
			function (x) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.border-' + $elm$core$String$fromInt(x),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'border-width',
							$elm$core$String$fromInt(x) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 6)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 8, 32)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.p-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'padding',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 24)),
			_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'small-caps')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp-off',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'normal')
					]))
			]),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('zero'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('onum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('liga'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('dlig'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('ordn'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('tnum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('afrc'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('frac')
		]));
var $mdgriffith$elm_ui$Internal$Style$explainer = '\n.explain {\n    border: 6px solid rgb(174, 121, 15) !important;\n}\n.explain > .' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n.ctr {\n    border: none !important;\n}\n.explain > .ctr > .' + ($mdgriffith$elm_ui$Internal$Style$classes.any + ' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n')));
var $mdgriffith$elm_ui$Internal$Style$inputTextReset = '\ninput[type="search"],\ninput[type="search"]::-webkit-search-decoration,\ninput[type="search"]::-webkit-search-cancel-button,\ninput[type="search"]::-webkit-search-results-button,\ninput[type="search"]::-webkit-search-results-decoration {\n  -webkit-appearance:none;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$sliderReset = '\ninput[type=range] {\n  -webkit-appearance: none; \n  background: transparent;\n  position:absolute;\n  left:0;\n  top:0;\n  z-index:10;\n  width: 100%;\n  outline: dashed 1px;\n  height: 100%;\n  opacity: 0;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$thumbReset = '\ninput[type=range]::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-moz-range-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-ms-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range][orient=vertical]{\n    writing-mode: bt-lr; /* IE */\n    -webkit-appearance: slider-vertical;  /* WebKit */\n}\n';
var $mdgriffith$elm_ui$Internal$Style$trackReset = '\ninput[type=range]::-moz-range-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-ms-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-webkit-slider-runnable-track {\n    background: transparent;\n    cursor: pointer;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$overrides = '@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + (' { flex-basis: auto !important; } ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container) + (' { flex-basis: auto !important; }}' + ($mdgriffith$elm_ui$Internal$Style$inputTextReset + ($mdgriffith$elm_ui$Internal$Style$sliderReset + ($mdgriffith$elm_ui$Internal$Style$trackReset + ($mdgriffith$elm_ui$Internal$Style$thumbReset + $mdgriffith$elm_ui$Internal$Style$explainer)))))))))))))));
var $elm$core$String$concat = function (strings) {
	return A2($elm$core$String$join, '', strings);
};
var $mdgriffith$elm_ui$Internal$Style$Intermediate = function (a) {
	return {$: 'Intermediate', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$emptyIntermediate = F2(
	function (selector, closing) {
		return $mdgriffith$elm_ui$Internal$Style$Intermediate(
			{closing: closing, others: _List_Nil, props: _List_Nil, selector: selector});
	});
var $mdgriffith$elm_ui$Internal$Style$renderRules = F2(
	function (_v0, rulesToRender) {
		var parent = _v0.a;
		var generateIntermediates = F2(
			function (rule, rendered) {
				switch (rule.$) {
					case 'Prop':
						var name = rule.a;
						var val = rule.b;
						return _Utils_update(
							rendered,
							{
								props: A2(
									$elm$core$List$cons,
									_Utils_Tuple2(name, val),
									rendered.props)
							});
					case 'Supports':
						var _v2 = rule.a;
						var prop = _v2.a;
						var value = _v2.b;
						var props = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Style$Intermediate(
										{closing: '\n}', others: _List_Nil, props: props, selector: '@supports (' + (prop + (':' + (value + (') {' + parent.selector))))}),
									rendered.others)
							});
					case 'Adjacent':
						var selector = rule.a;
						var adjRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' + ' + selector), ''),
										adjRules),
									rendered.others)
							});
					case 'Child':
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' > ' + child), ''),
										childRules),
									rendered.others)
							});
					case 'AllChildren':
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' ' + child), ''),
										childRules),
									rendered.others)
							});
					case 'Descriptor':
						var descriptor = rule.a;
						var descriptorRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2(
											$mdgriffith$elm_ui$Internal$Style$emptyIntermediate,
											_Utils_ap(parent.selector, descriptor),
											''),
										descriptorRules),
									rendered.others)
							});
					default:
						var batched = rule.a;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector, ''),
										batched),
									rendered.others)
							});
				}
			});
		return $mdgriffith$elm_ui$Internal$Style$Intermediate(
			A3($elm$core$List$foldr, generateIntermediates, parent, rulesToRender));
	});
var $mdgriffith$elm_ui$Internal$Style$renderCompact = function (styleClasses) {
	var renderValues = function (values) {
		return $elm$core$String$concat(
			A2(
				$elm$core$List$map,
				function (_v3) {
					var x = _v3.a;
					var y = _v3.b;
					return x + (':' + (y + ';'));
				},
				values));
	};
	var renderClass = function (rule) {
		var _v2 = rule.props;
		if (!_v2.b) {
			return '';
		} else {
			return rule.selector + ('{' + (renderValues(rule.props) + (rule.closing + '}')));
		}
	};
	var renderIntermediate = function (_v0) {
		var rule = _v0.a;
		return _Utils_ap(
			renderClass(rule),
			$elm$core$String$concat(
				A2($elm$core$List$map, renderIntermediate, rule.others)));
	};
	return $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			renderIntermediate,
			A3(
				$elm$core$List$foldr,
				F2(
					function (_v1, existing) {
						var name = _v1.a;
						var styleRules = _v1.b;
						return A2(
							$elm$core$List$cons,
							A2(
								$mdgriffith$elm_ui$Internal$Style$renderRules,
								A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, name, ''),
								styleRules),
							existing);
					}),
				_List_Nil,
				styleClasses)));
};
var $mdgriffith$elm_ui$Internal$Style$rules = _Utils_ap(
	$mdgriffith$elm_ui$Internal$Style$overrides,
	$mdgriffith$elm_ui$Internal$Style$renderCompact(
		_Utils_ap($mdgriffith$elm_ui$Internal$Style$baseSheet, $mdgriffith$elm_ui$Internal$Style$commonValues)));
var $elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
var $mdgriffith$elm_ui$Internal$Model$staticRoot = function (opts) {
	var _v0 = opts.mode;
	switch (_v0.$) {
		case 'Layout':
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'div',
				_List_Nil,
				_List_fromArray(
					[
						A3(
						$elm$virtual_dom$VirtualDom$node,
						'style',
						_List_Nil,
						_List_fromArray(
							[
								$elm$virtual_dom$VirtualDom$text($mdgriffith$elm_ui$Internal$Style$rules)
							]))
					]));
		case 'NoStaticStyleSheet':
			return $elm$virtual_dom$VirtualDom$text('');
		default:
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'elm-ui-static-rules',
				_List_fromArray(
					[
						A2(
						$elm$virtual_dom$VirtualDom$property,
						'rules',
						$elm$json$Json$Encode$string($mdgriffith$elm_ui$Internal$Style$rules))
					]),
				_List_Nil);
	}
};
var $mdgriffith$elm_ui$Internal$Model$fontName = function (font) {
	switch (font.$) {
		case 'Serif':
			return 'serif';
		case 'SansSerif':
			return 'sans-serif';
		case 'Monospace':
			return 'monospace';
		case 'Typeface':
			var name = font.a;
			return '\"' + (name + '\"');
		case 'ImportFont':
			var name = font.a;
			var url = font.b;
			return '\"' + (name + '\"');
		default:
			var name = font.a.name;
			return '\"' + (name + '\"');
	}
};
var $mdgriffith$elm_ui$Internal$Model$isSmallCaps = function (_var) {
	switch (_var.$) {
		case 'VariantActive':
			var name = _var.a;
			return name === 'smcp';
		case 'VariantOff':
			var name = _var.a;
			return false;
		default:
			var name = _var.a;
			var index = _var.b;
			return (name === 'smcp') && (index === 1);
	}
};
var $mdgriffith$elm_ui$Internal$Model$hasSmallCaps = function (typeface) {
	if (typeface.$ === 'FontWith') {
		var font = typeface.a;
		return A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$isSmallCaps, font.variants);
	} else {
		return false;
	}
};
var $elm$core$Basics$min = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) < 0) ? x : y;
	});
var $mdgriffith$elm_ui$Internal$Model$renderProps = F3(
	function (force, _v0, existing) {
		var key = _v0.a;
		var val = _v0.b;
		return force ? (existing + ('\n  ' + (key + (': ' + (val + ' !important;'))))) : (existing + ('\n  ' + (key + (': ' + (val + ';')))));
	});
var $mdgriffith$elm_ui$Internal$Model$renderStyle = F4(
	function (options, maybePseudo, selector, props) {
		if (maybePseudo.$ === 'Nothing') {
			return _List_fromArray(
				[
					selector + ('{' + (A3(
					$elm$core$List$foldl,
					$mdgriffith$elm_ui$Internal$Model$renderProps(false),
					'',
					props) + '\n}'))
				]);
		} else {
			var pseudo = maybePseudo.a;
			switch (pseudo.$) {
				case 'Hover':
					var _v2 = options.hover;
					switch (_v2.$) {
						case 'NoHover':
							return _List_Nil;
						case 'ForceHover':
							return _List_fromArray(
								[
									selector + ('-hv {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(true),
									'',
									props) + '\n}'))
								]);
						default:
							return _List_fromArray(
								[
									selector + ('-hv:hover {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(false),
									'',
									props) + '\n}'))
								]);
					}
				case 'Focus':
					var renderedProps = A3(
						$elm$core$List$foldl,
						$mdgriffith$elm_ui$Internal$Model$renderProps(false),
						'',
						props);
					return _List_fromArray(
						[selector + ('-fs:focus {' + (renderedProps + '\n}')), ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (':focus ' + (selector + '-fs  {')))) + (renderedProps + '\n}'), (selector + '-fs:focus-within {') + (renderedProps + '\n}'), ('.focusable-parent:focus ~ ' + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + (selector + '-fs {'))))) + (renderedProps + '\n}')]);
				default:
					return _List_fromArray(
						[
							selector + ('-act:active {' + (A3(
							$elm$core$List$foldl,
							$mdgriffith$elm_ui$Internal$Model$renderProps(false),
							'',
							props) + '\n}'))
						]);
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderVariant = function (_var) {
	switch (_var.$) {
		case 'VariantActive':
			var name = _var.a;
			return '\"' + (name + '\"');
		case 'VariantOff':
			var name = _var.a;
			return '\"' + (name + '\" 0');
		default:
			var name = _var.a;
			var index = _var.b;
			return '\"' + (name + ('\" ' + $elm$core$String$fromInt(index)));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderVariants = function (typeface) {
	if (typeface.$ === 'FontWith') {
		var font = typeface.a;
		return $elm$core$Maybe$Just(
			A2(
				$elm$core$String$join,
				', ',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$renderVariant, font.variants)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformValue = function (transform) {
	switch (transform.$) {
		case 'Untransformed':
			return $elm$core$Maybe$Nothing;
		case 'Moved':
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'translate3d(' + ($elm$core$String$fromFloat(x) + ('px, ' + ($elm$core$String$fromFloat(y) + ('px, ' + ($elm$core$String$fromFloat(z) + 'px)'))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			var translate = 'translate3d(' + ($elm$core$String$fromFloat(tx) + ('px, ' + ($elm$core$String$fromFloat(ty) + ('px, ' + ($elm$core$String$fromFloat(tz) + 'px)')))));
			var scale = 'scale3d(' + ($elm$core$String$fromFloat(sx) + (', ' + ($elm$core$String$fromFloat(sy) + (', ' + ($elm$core$String$fromFloat(sz) + ')')))));
			var rotate = 'rotate3d(' + ($elm$core$String$fromFloat(ox) + (', ' + ($elm$core$String$fromFloat(oy) + (', ' + ($elm$core$String$fromFloat(oz) + (', ' + ($elm$core$String$fromFloat(angle) + 'rad)')))))));
			return $elm$core$Maybe$Just(translate + (' ' + (scale + (' ' + rotate))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderStyleRule = F3(
	function (options, rule, maybePseudo) {
		switch (rule.$) {
			case 'Style':
				var selector = rule.a;
				var props = rule.b;
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, selector, props);
			case 'Shadows':
				var name = rule.a;
				var prop = rule.b;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, 'box-shadow', prop)
						]));
			case 'Transparency':
				var name = rule.a;
				var transparency = rule.b;
				var opacity = A2(
					$elm$core$Basics$max,
					0,
					A2($elm$core$Basics$min, 1, 1 - transparency));
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'opacity',
							$elm$core$String$fromFloat(opacity))
						]));
			case 'FontSize':
				var i = rule.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			case 'FontFamily':
				var name = rule.a;
				var typefaces = rule.b;
				var features = A2(
					$elm$core$String$join,
					', ',
					A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Internal$Model$renderVariants, typefaces));
				var families = _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-family',
						A2(
							$elm$core$String$join,
							', ',
							A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$fontName, typefaces))),
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'font-feature-settings', features),
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-variant',
						A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$hasSmallCaps, typefaces) ? 'small-caps' : 'normal')
					]);
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, '.' + name, families);
			case 'Single':
				var _class = rule.a;
				var prop = rule.b;
				var val = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, prop, val)
						]));
			case 'Colored':
				var _class = rule.a;
				var prop = rule.b;
				var color = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							prop,
							$mdgriffith$elm_ui$Internal$Model$formatColor(color))
						]));
			case 'SpacingStyle':
				var cls = rule.a;
				var x = rule.b;
				var y = rule.c;
				var yPx = $elm$core$String$fromInt(y) + 'px';
				var xPx = $elm$core$String$fromInt(x) + 'px';
				var single = '.' + $mdgriffith$elm_ui$Internal$Style$classes.single;
				var row = '.' + $mdgriffith$elm_ui$Internal$Style$classes.row;
				var wrappedRow = '.' + ($mdgriffith$elm_ui$Internal$Style$classes.wrapped + row);
				var right = '.' + $mdgriffith$elm_ui$Internal$Style$classes.alignRight;
				var paragraph = '.' + $mdgriffith$elm_ui$Internal$Style$classes.paragraph;
				var page = '.' + $mdgriffith$elm_ui$Internal$Style$classes.page;
				var left = '.' + $mdgriffith$elm_ui$Internal$Style$classes.alignLeft;
				var halfY = $elm$core$String$fromFloat(y / 2) + 'px';
				var halfX = $elm$core$String$fromFloat(x / 2) + 'px';
				var column = '.' + $mdgriffith$elm_ui$Internal$Style$classes.column;
				var _class = '.' + cls;
				var any = '.' + $mdgriffith$elm_ui$Internal$Style$classes.any;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (row + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (wrappedRow + (' > ' + any)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin', halfY + (' ' + halfX))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (column + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_Utils_ap(_class, paragraph),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							'textarea' + (any + _class),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)')),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'height',
									'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::after'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-top',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::before'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-bottom',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								]))
						]));
			case 'PaddingStyle':
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'padding',
							$elm$core$String$fromFloat(top) + ('px ' + ($elm$core$String$fromFloat(right) + ('px ' + ($elm$core$String$fromFloat(bottom) + ('px ' + ($elm$core$String$fromFloat(left) + 'px')))))))
						]));
			case 'BorderWidth':
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'border-width',
							$elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px')))))))
						]));
			case 'GridTemplateStyle':
				var template = rule.a;
				var toGridLengthHelper = F3(
					function (minimum, maximum, x) {
						toGridLengthHelper:
						while (true) {
							switch (x.$) {
								case 'Px':
									var px = x.a;
									return $elm$core$String$fromInt(px) + 'px';
								case 'Content':
									var _v2 = _Utils_Tuple2(minimum, maximum);
									if (_v2.a.$ === 'Nothing') {
										if (_v2.b.$ === 'Nothing') {
											var _v3 = _v2.a;
											var _v4 = _v2.b;
											return 'max-content';
										} else {
											var _v6 = _v2.a;
											var maxSize = _v2.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v2.b.$ === 'Nothing') {
											var minSize = _v2.a.a;
											var _v5 = _v2.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + 'max-content)'));
										} else {
											var minSize = _v2.a.a;
											var maxSize = _v2.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 'Fill':
									var i = x.a;
									var _v7 = _Utils_Tuple2(minimum, maximum);
									if (_v7.a.$ === 'Nothing') {
										if (_v7.b.$ === 'Nothing') {
											var _v8 = _v7.a;
											var _v9 = _v7.b;
											return $elm$core$String$fromInt(i) + 'fr';
										} else {
											var _v11 = _v7.a;
											var maxSize = _v7.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v7.b.$ === 'Nothing') {
											var minSize = _v7.a.a;
											var _v10 = _v7.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(i) + ('fr' + 'fr)'))));
										} else {
											var minSize = _v7.a.a;
											var maxSize = _v7.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 'Min':
									var m = x.a;
									var len = x.b;
									var $temp$minimum = $elm$core$Maybe$Just(m),
										$temp$maximum = maximum,
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
								default:
									var m = x.a;
									var len = x.b;
									var $temp$minimum = minimum,
										$temp$maximum = $elm$core$Maybe$Just(m),
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
							}
						}
					});
				var toGridLength = function (x) {
					return A3(toGridLengthHelper, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, x);
				};
				var xSpacing = toGridLength(template.spacing.a);
				var ySpacing = toGridLength(template.spacing.b);
				var rows = function (x) {
					return 'grid-template-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.rows)));
				var msRows = function (x) {
					return '-ms-grid-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.columns)));
				var msColumns = function (x) {
					return '-ms-grid-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.columns)));
				var gapY = 'grid-row-gap:' + (toGridLength(template.spacing.b) + ';');
				var gapX = 'grid-column-gap:' + (toGridLength(template.spacing.a) + ';');
				var columns = function (x) {
					return 'grid-template-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.columns)));
				var _class = '.grid-rows-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.rows)) + ('-cols-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.columns)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.b)))))));
				var modernGrid = _class + ('{' + (columns + (rows + (gapX + (gapY + '}')))));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msColumns + (msRows + '}')));
				return _List_fromArray(
					[base, supports]);
			case 'GridPosition':
				var position = rule.a;
				var msPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'-ms-grid-row: ' + ($elm$core$String$fromInt(position.row) + ';'),
							'-ms-grid-row-span: ' + ($elm$core$String$fromInt(position.height) + ';'),
							'-ms-grid-column: ' + ($elm$core$String$fromInt(position.col) + ';'),
							'-ms-grid-column-span: ' + ($elm$core$String$fromInt(position.width) + ';')
						]));
				var modernPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'grid-row: ' + ($elm$core$String$fromInt(position.row) + (' / ' + ($elm$core$String$fromInt(position.row + position.height) + ';'))),
							'grid-column: ' + ($elm$core$String$fromInt(position.col) + (' / ' + ($elm$core$String$fromInt(position.col + position.width) + ';')))
						]));
				var _class = '.grid-pos-' + ($elm$core$String$fromInt(position.row) + ('-' + ($elm$core$String$fromInt(position.col) + ('-' + ($elm$core$String$fromInt(position.width) + ('-' + $elm$core$String$fromInt(position.height)))))));
				var modernGrid = _class + ('{' + (modernPosition + '}'));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msPosition + '}'));
				return _List_fromArray(
					[base, supports]);
			case 'PseudoSelector':
				var _class = rule.a;
				var styles = rule.b;
				var renderPseudoRule = function (style) {
					return A3(
						$mdgriffith$elm_ui$Internal$Model$renderStyleRule,
						options,
						style,
						$elm$core$Maybe$Just(_class));
				};
				return A2($elm$core$List$concatMap, renderPseudoRule, styles);
			default:
				var transform = rule.a;
				var val = $mdgriffith$elm_ui$Internal$Model$transformValue(transform);
				var _class = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				var _v12 = _Utils_Tuple2(_class, val);
				if ((_v12.a.$ === 'Just') && (_v12.b.$ === 'Just')) {
					var cls = _v12.a.a;
					var v = _v12.b.a;
					return A4(
						$mdgriffith$elm_ui$Internal$Model$renderStyle,
						options,
						maybePseudo,
						'.' + cls,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Model$Property, 'transform', v)
							]));
				} else {
					return _List_Nil;
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$encodeStyles = F2(
	function (options, stylesheet) {
		return $elm$json$Json$Encode$object(
			A2(
				$elm$core$List$map,
				function (style) {
					var styled = A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing);
					return _Utils_Tuple2(
						$mdgriffith$elm_ui$Internal$Model$getStyleName(style),
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, styled));
				},
				stylesheet));
	});
var $mdgriffith$elm_ui$Internal$Model$bracket = F2(
	function (selector, rules) {
		var renderPair = function (_v0) {
			var name = _v0.a;
			var val = _v0.b;
			return name + (': ' + (val + ';'));
		};
		return selector + (' {' + (A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$map, renderPair, rules)) + '}'));
	});
var $mdgriffith$elm_ui$Internal$Model$fontRule = F3(
	function (name, modifier, _v0) {
		var parentAdj = _v0.a;
		var textAdjustment = _v0.b;
		return _List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + (', ' + ('.' + (name + (' .' + modifier))))))), parentAdj),
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (', .' + (name + (' .' + (modifier + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.text)))))))))), textAdjustment)
			]);
	});
var $mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule = F3(
	function (fontToAdjust, _v0, otherFontName) {
		var full = _v0.a;
		var capital = _v0.b;
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_Utils_ap(
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital, capital),
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.fullSize, full)));
	});
var $mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule = F2(
	function (fontToAdjust, otherFontName) {
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + (', ' + ('.' + (name + (' .' + $mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('line-height', '1')
						])),
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (', .' + (name + (' .' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.text)))))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('vertical-align', '0'),
							_Utils_Tuple2('line-height', '1')
						]))
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$adjust = F3(
	function (size, height, vertical) {
		return {height: height / size, size: size, vertical: vertical};
	});
var $elm$core$List$maximum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$max, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$List$minimum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$min, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$convertAdjustment = function (adjustment) {
	var lines = _List_fromArray(
		[adjustment.capital, adjustment.baseline, adjustment.descender, adjustment.lowercase]);
	var lineHeight = 1.5;
	var normalDescender = (lineHeight - 1) / 2;
	var oldMiddle = lineHeight / 2;
	var descender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.descender,
		$elm$core$List$minimum(lines));
	var newBaseline = A2(
		$elm$core$Maybe$withDefault,
		adjustment.baseline,
		$elm$core$List$minimum(
			A2(
				$elm$core$List$filter,
				function (x) {
					return !_Utils_eq(x, descender);
				},
				lines)));
	var base = lineHeight;
	var ascender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.capital,
		$elm$core$List$maximum(lines));
	var capitalSize = 1 / (ascender - newBaseline);
	var capitalVertical = 1 - ascender;
	var fullSize = 1 / (ascender - descender);
	var fullVertical = 1 - ascender;
	var newCapitalMiddle = ((ascender - newBaseline) / 2) + newBaseline;
	var newFullMiddle = ((ascender - descender) / 2) + descender;
	return {
		capital: A3($mdgriffith$elm_ui$Internal$Model$adjust, capitalSize, ascender - newBaseline, capitalVertical),
		full: A3($mdgriffith$elm_ui$Internal$Model$adjust, fullSize, ascender - descender, fullVertical)
	};
};
var $mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules = function (converted) {
	return _Utils_Tuple2(
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'block')
			]),
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'inline-block'),
				_Utils_Tuple2(
				'line-height',
				$elm$core$String$fromFloat(converted.height)),
				_Utils_Tuple2(
				'vertical-align',
				$elm$core$String$fromFloat(converted.vertical) + 'em'),
				_Utils_Tuple2(
				'font-size',
				$elm$core$String$fromFloat(converted.size) + 'em')
			]));
};
var $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment = function (typefaces) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (face, found) {
				if (found.$ === 'Nothing') {
					if (face.$ === 'FontWith') {
						var _with = face.a;
						var _v2 = _with.adjustment;
						if (_v2.$ === 'Nothing') {
							return found;
						} else {
							var adjustment = _v2.a;
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.full;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment))),
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.capital;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment)))));
						}
					} else {
						return found;
					}
				} else {
					return found;
				}
			}),
		$elm$core$Maybe$Nothing,
		typefaces);
};
var $mdgriffith$elm_ui$Internal$Model$renderTopLevelValues = function (rules) {
	var withImport = function (font) {
		if (font.$ === 'ImportFont') {
			var url = font.b;
			return $elm$core$Maybe$Just('@import url(\'' + (url + '\');'));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	var fontImports = function (_v2) {
		var name = _v2.a;
		var typefaces = _v2.b;
		var imports = A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$filterMap, withImport, typefaces));
		return imports;
	};
	var allNames = A2($elm$core$List$map, $elm$core$Tuple$first, rules);
	var fontAdjustments = function (_v1) {
		var name = _v1.a;
		var typefaces = _v1.b;
		var _v0 = $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment(typefaces);
		if (_v0.$ === 'Nothing') {
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					$mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule(name),
					allNames));
		} else {
			var adjustment = _v0.a;
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					A2($mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule, name, adjustment),
					allNames));
		}
	};
	return _Utils_ap(
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontImports, rules)),
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontAdjustments, rules)));
};
var $mdgriffith$elm_ui$Internal$Model$topLevelValue = function (rule) {
	if (rule.$ === 'FontFamily') {
		var name = rule.a;
		var typefaces = rule.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(name, typefaces));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$toStyleSheetString = F2(
	function (options, stylesheet) {
		var combine = F2(
			function (style, rendered) {
				return {
					rules: _Utils_ap(
						rendered.rules,
						A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing)),
					topLevel: function () {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$topLevelValue(style);
						if (_v1.$ === 'Nothing') {
							return rendered.topLevel;
						} else {
							var topLevel = _v1.a;
							return A2($elm$core$List$cons, topLevel, rendered.topLevel);
						}
					}()
				};
			});
		var _v0 = A3(
			$elm$core$List$foldl,
			combine,
			{rules: _List_Nil, topLevel: _List_Nil},
			stylesheet);
		var topLevel = _v0.topLevel;
		var rules = _v0.rules;
		return _Utils_ap(
			$mdgriffith$elm_ui$Internal$Model$renderTopLevelValues(topLevel),
			$elm$core$String$concat(rules));
	});
var $mdgriffith$elm_ui$Internal$Model$toStyleSheet = F2(
	function (options, styleSheet) {
		var _v0 = options.mode;
		switch (_v0.$) {
			case 'Layout':
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			case 'NoStaticStyleSheet':
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			default:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'elm-ui-rules',
					_List_fromArray(
						[
							A2(
							$elm$virtual_dom$VirtualDom$property,
							'rules',
							A2($mdgriffith$elm_ui$Internal$Model$encodeStyles, options, styleSheet))
						]),
					_List_Nil);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$embedKeyed = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			_Utils_Tuple2(
				'static-stylesheet',
				$mdgriffith$elm_ui$Internal$Model$staticRoot(opts)),
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
				children)) : A2(
			$elm$core$List$cons,
			_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
			children);
	});
var $mdgriffith$elm_ui$Internal$Model$embedWith = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Internal$Model$staticRoot(opts),
			A2($elm$core$List$cons, dynamicStyleSheet, children)) : A2($elm$core$List$cons, dynamicStyleSheet, children);
	});
var $mdgriffith$elm_ui$Internal$Flag$heightBetween = $mdgriffith$elm_ui$Internal$Flag$flag(45);
var $mdgriffith$elm_ui$Internal$Flag$heightFill = $mdgriffith$elm_ui$Internal$Flag$flag(37);
var $elm$virtual_dom$VirtualDom$keyedNode = function (tag) {
	return _VirtualDom_keyedNode(
		_VirtualDom_noScript(tag));
};
var $elm$html$Html$p = _VirtualDom_node('p');
var $elm$core$Bitwise$and = _Bitwise_and;
var $mdgriffith$elm_ui$Internal$Flag$present = F2(
	function (myFlag, _v0) {
		var fieldOne = _v0.a;
		var fieldTwo = _v0.b;
		if (myFlag.$ === 'Flag') {
			var first = myFlag.a;
			return _Utils_eq(first & fieldOne, first);
		} else {
			var second = myFlag.a;
			return _Utils_eq(second & fieldTwo, second);
		}
	});
var $elm$html$Html$s = _VirtualDom_node('s');
var $elm$html$Html$u = _VirtualDom_node('u');
var $mdgriffith$elm_ui$Internal$Flag$widthBetween = $mdgriffith$elm_ui$Internal$Flag$flag(44);
var $mdgriffith$elm_ui$Internal$Flag$widthFill = $mdgriffith$elm_ui$Internal$Flag$flag(39);
var $mdgriffith$elm_ui$Internal$Model$finalizeNode = F6(
	function (has, node, attributes, children, embedMode, parentContext) {
		var createNode = F2(
			function (nodeName, attrs) {
				if (children.$ === 'Keyed') {
					var keyed = children.a;
					return A3(
						$elm$virtual_dom$VirtualDom$keyedNode,
						nodeName,
						attrs,
						function () {
							switch (embedMode.$) {
								case 'NoStyleSheet':
									return keyed;
								case 'OnlyDynamic':
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, false, opts, styles, keyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, true, opts, styles, keyed);
							}
						}());
				} else {
					var unkeyed = children.a;
					return A2(
						function () {
							switch (nodeName) {
								case 'div':
									return $elm$html$Html$div;
								case 'p':
									return $elm$html$Html$p;
								default:
									return $elm$virtual_dom$VirtualDom$node(nodeName);
							}
						}(),
						attrs,
						function () {
							switch (embedMode.$) {
								case 'NoStyleSheet':
									return unkeyed;
								case 'OnlyDynamic':
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, false, opts, styles, unkeyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, true, opts, styles, unkeyed);
							}
						}());
				}
			});
		var html = function () {
			switch (node.$) {
				case 'Generic':
					return A2(createNode, 'div', attributes);
				case 'NodeName':
					var nodeName = node.a;
					return A2(createNode, nodeName, attributes);
				default:
					var nodeName = node.a;
					var internal = node.b;
					return A3(
						$elm$virtual_dom$VirtualDom$node,
						nodeName,
						attributes,
						_List_fromArray(
							[
								A2(
								createNode,
								internal,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.single))
									]))
							]));
			}
		}();
		switch (parentContext.$) {
			case 'AsRow':
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignRight, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerX, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX])))
						]),
					_List_fromArray(
						[html])) : html));
			case 'AsColumn':
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerY, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignBottom, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom])))
						]),
					_List_fromArray(
						[html])) : html));
			default:
				return html;
		}
	});
var $elm$html$Html$text = $elm$virtual_dom$VirtualDom$text;
var $mdgriffith$elm_ui$Internal$Model$textElementClasses = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthContent + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.heightContent)))));
var $mdgriffith$elm_ui$Internal$Model$textElement = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$textElementFillClasses = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthFill + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.heightFill)))));
var $mdgriffith$elm_ui$Internal$Model$textElementFill = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementFillClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$createElement = F3(
	function (context, children, rendered) {
		var gatherKeyed = F2(
			function (_v8, _v9) {
				var key = _v8.a;
				var child = _v8.b;
				var htmls = _v9.a;
				var existingStyles = _v9.b;
				switch (child.$) {
					case 'Unstyled':
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles);
					case 'Styled':
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles));
					case 'Text':
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str)),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		var gather = F2(
			function (child, _v6) {
				var htmls = _v6.a;
				var existingStyles = _v6.b;
				switch (child.$) {
					case 'Unstyled':
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles);
					case 'Styled':
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles));
					case 'Text':
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		if (children.$ === 'Keyed') {
			var keyedChildren = children.a;
			var _v1 = A3(
				$elm$core$List$foldr,
				gatherKeyed,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				keyedChildren);
			var keyed = _v1.a;
			var styles = _v1.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.styles : _Utils_ap(rendered.styles, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.has,
						rendered.node,
						rendered.attributes,
						$mdgriffith$elm_ui$Internal$Model$Keyed(
							A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.children)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.has,
							rendered.node,
							rendered.attributes,
							$mdgriffith$elm_ui$Internal$Model$Keyed(
								A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.children))),
						styles: allStyles
					});
			}
		} else {
			var unkeyedChildren = children.a;
			var _v3 = A3(
				$elm$core$List$foldr,
				gather,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				unkeyedChildren);
			var unkeyed = _v3.a;
			var styles = _v3.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.styles : _Utils_ap(rendered.styles, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.has,
						rendered.node,
						rendered.attributes,
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.children)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.has,
							rendered.node,
							rendered.attributes,
							$mdgriffith$elm_ui$Internal$Model$Unkeyed(
								A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.children))),
						styles: allStyles
					});
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Single = F3(
	function (a, b, c) {
		return {$: 'Single', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$Transform = function (a) {
	return {$: 'Transform', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$core$Bitwise$or = _Bitwise_or;
var $mdgriffith$elm_ui$Internal$Flag$add = F2(
	function (myFlag, _v0) {
		var one = _v0.a;
		var two = _v0.b;
		if (myFlag.$ === 'Flag') {
			var first = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, first | one, two);
		} else {
			var second = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, one, second | two);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehind = function (a) {
	return {$: 'ChildrenBehind', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront = F2(
	function (a, b) {
		return {$: 'ChildrenBehindAndInFront', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenInFront = function (a) {
	return {$: 'ChildrenInFront', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$nearbyElement = F2(
	function (location, elem) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class(
					function () {
						switch (location.$) {
							case 'Above':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.above]));
							case 'Below':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.below]));
							case 'OnRight':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.onRight]));
							case 'OnLeft':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.onLeft]));
							case 'InFront':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.inFront]));
							default:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.behind]));
						}
					}())
				]),
			_List_fromArray(
				[
					function () {
					switch (elem.$) {
						case 'Empty':
							return $elm$virtual_dom$VirtualDom$text('');
						case 'Text':
							var str = elem.a;
							return $mdgriffith$elm_ui$Internal$Model$textElement(str);
						case 'Unstyled':
							var html = elem.a;
							return html($mdgriffith$elm_ui$Internal$Model$asEl);
						default:
							var styled = elem.a;
							return A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, $mdgriffith$elm_ui$Internal$Model$asEl);
					}
				}()
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$addNearbyElement = F3(
	function (location, elem, existing) {
		var nearby = A2($mdgriffith$elm_ui$Internal$Model$nearbyElement, location, elem);
		switch (existing.$) {
			case 'NoNearbyChildren':
				if (location.$ === 'Behind') {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						_List_fromArray(
							[nearby]));
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						_List_fromArray(
							[nearby]));
				}
			case 'ChildrenBehind':
				var existingBehind = existing.a;
				if (location.$ === 'Behind') {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						A2($elm$core$List$cons, nearby, existingBehind));
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						_List_fromArray(
							[nearby]));
				}
			case 'ChildrenInFront':
				var existingInFront = existing.a;
				if (location.$ === 'Behind') {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						_List_fromArray(
							[nearby]),
						existingInFront);
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						A2($elm$core$List$cons, nearby, existingInFront));
				}
			default:
				var existingBehind = existing.a;
				var existingInFront = existing.b;
				if (location.$ === 'Behind') {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						A2($elm$core$List$cons, nearby, existingBehind),
						existingInFront);
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						A2($elm$core$List$cons, nearby, existingInFront));
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Embedded = F2(
	function (a, b) {
		return {$: 'Embedded', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$NodeName = function (a) {
	return {$: 'NodeName', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addNodeName = F2(
	function (newNode, old) {
		switch (old.$) {
			case 'Generic':
				return $mdgriffith$elm_ui$Internal$Model$NodeName(newNode);
			case 'NodeName':
				var name = old.a;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, name, newNode);
			default:
				var x = old.a;
				var y = old.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, x, y);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$alignXName = function (align) {
	switch (align.$) {
		case 'Left':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignLeft);
		case 'Right':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignRight);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignCenterX);
	}
};
var $mdgriffith$elm_ui$Internal$Model$alignYName = function (align) {
	switch (align.$) {
		case 'Top':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignTop);
		case 'Bottom':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignBottom);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignCenterY);
	}
};
var $elm$virtual_dom$VirtualDom$attribute = F2(
	function (key, value) {
		return A2(
			_VirtualDom_attribute,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $mdgriffith$elm_ui$Internal$Model$FullTransform = F4(
	function (a, b, c, d) {
		return {$: 'FullTransform', a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Internal$Model$Moved = function (a) {
	return {$: 'Moved', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$composeTransformation = F2(
	function (transform, component) {
		switch (transform.$) {
			case 'Untransformed':
				switch (component.$) {
					case 'MoveX':
						var x = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, 0, 0));
					case 'MoveY':
						var y = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, y, 0));
					case 'MoveZ':
						var z = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, 0, z));
					case 'MoveXYZ':
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 'Rotate':
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var xyz = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							xyz,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			case 'Moved':
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				switch (component.$) {
					case 'MoveX':
						var newX = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(newX, y, z));
					case 'MoveY':
						var newY = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, newY, z));
					case 'MoveZ':
						var newZ = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, y, newZ));
					case 'MoveXYZ':
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 'Rotate':
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var scale = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							scale,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			default:
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				var scaled = transform.b;
				var origin = transform.c;
				var angle = transform.d;
				switch (component.$) {
					case 'MoveX':
						var newX = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(newX, y, z),
							scaled,
							origin,
							angle);
					case 'MoveY':
						var newY = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, newY, z),
							scaled,
							origin,
							angle);
					case 'MoveZ':
						var newZ = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, y, newZ),
							scaled,
							origin,
							angle);
					case 'MoveXYZ':
						var newMove = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, newMove, scaled, origin, angle);
					case 'Rotate':
						var newOrigin = component.a;
						var newAngle = component.b;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, scaled, newOrigin, newAngle);
					default:
						var newScale = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, newScale, origin, angle);
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$height = $mdgriffith$elm_ui$Internal$Flag$flag(7);
var $mdgriffith$elm_ui$Internal$Flag$heightContent = $mdgriffith$elm_ui$Internal$Flag$flag(36);
var $mdgriffith$elm_ui$Internal$Flag$merge = F2(
	function (_v0, _v1) {
		var one = _v0.a;
		var two = _v0.b;
		var three = _v1.a;
		var four = _v1.b;
		return A2($mdgriffith$elm_ui$Internal$Flag$Field, one | three, two | four);
	});
var $mdgriffith$elm_ui$Internal$Flag$none = A2($mdgriffith$elm_ui$Internal$Flag$Field, 0, 0);
var $mdgriffith$elm_ui$Internal$Model$renderHeight = function (h) {
	switch (h.$) {
		case 'Px':
			var px = h.a;
			var val = $elm$core$String$fromInt(px);
			var name = 'height-px-' + val;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.heightExact + (' ' + name),
				_List_fromArray(
					[
						A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height', val + 'px')
					]));
		case 'Content':
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightContent,
				_List_Nil);
		case 'Fill':
			var portion = h.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightFill,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion + (' height-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.column + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'height-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 'Min':
			var minSize = h.a;
			var len = h.b;
			var cls = 'min-height-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-height',
				$elm$core$String$fromInt(minSize) + 'px');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = h.a;
			var len = h.b;
			var cls = 'max-height-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-height',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$widthContent = $mdgriffith$elm_ui$Internal$Flag$flag(38);
var $mdgriffith$elm_ui$Internal$Model$renderWidth = function (w) {
	switch (w.$) {
		case 'Px':
			var px = w.a;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.widthExact + (' width-px-' + $elm$core$String$fromInt(px)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						'width-px-' + $elm$core$String$fromInt(px),
						'width',
						$elm$core$String$fromInt(px) + 'px')
					]));
		case 'Content':
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthContent,
				_List_Nil);
		case 'Fill':
			var portion = w.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthFill,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion + (' width-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.row + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'width-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 'Min':
			var minSize = w.a;
			var len = w.b;
			var cls = 'min-width-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-width',
				$elm$core$String$fromInt(minSize) + 'px');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = w.a;
			var len = w.b;
			var cls = 'max-width-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-width',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$borderWidth = $mdgriffith$elm_ui$Internal$Flag$flag(27);
var $elm$core$Basics$ge = _Utils_ge;
var $mdgriffith$elm_ui$Internal$Model$skippable = F2(
	function (flag, style) {
		if (_Utils_eq(flag, $mdgriffith$elm_ui$Internal$Flag$borderWidth)) {
			if (style.$ === 'Single') {
				var val = style.c;
				switch (val) {
					case '0px':
						return true;
					case '1px':
						return true;
					case '2px':
						return true;
					case '3px':
						return true;
					case '4px':
						return true;
					case '5px':
						return true;
					case '6px':
						return true;
					default:
						return false;
				}
			} else {
				return false;
			}
		} else {
			switch (style.$) {
				case 'FontSize':
					var i = style.a;
					return (i >= 8) && (i <= 32);
				case 'PaddingStyle':
					var name = style.a;
					var t = style.b;
					var r = style.c;
					var b = style.d;
					var l = style.e;
					return _Utils_eq(t, b) && (_Utils_eq(t, r) && (_Utils_eq(t, l) && ((t >= 0) && (t <= 24))));
				default:
					return false;
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$width = $mdgriffith$elm_ui$Internal$Flag$flag(6);
var $mdgriffith$elm_ui$Internal$Flag$xAlign = $mdgriffith$elm_ui$Internal$Flag$flag(30);
var $mdgriffith$elm_ui$Internal$Flag$yAlign = $mdgriffith$elm_ui$Internal$Flag$flag(29);
var $mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive = F8(
	function (classes, node, has, transform, styles, attrs, children, elementAttrs) {
		gatherAttrRecursive:
		while (true) {
			if (!elementAttrs.b) {
				var _v1 = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				if (_v1.$ === 'Nothing') {
					return {
						attributes: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes),
							attrs),
						children: children,
						has: has,
						node: node,
						styles: styles
					};
				} else {
					var _class = _v1.a;
					return {
						attributes: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes + (' ' + _class)),
							attrs),
						children: children,
						has: has,
						node: node,
						styles: A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$Transform(transform),
							styles)
					};
				}
			} else {
				var attribute = elementAttrs.a;
				var remaining = elementAttrs.b;
				switch (attribute.$) {
					case 'NoAttribute':
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'Class':
						var flag = attribute.a;
						var exactClassName = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = exactClassName + (' ' + classes),
								$temp$node = node,
								$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					case 'Attr':
						var actualAttribute = attribute.a;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = A2($elm$core$List$cons, actualAttribute, attrs),
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'StyleClass':
						var flag = attribute.a;
						var style = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							if (A2($mdgriffith$elm_ui$Internal$Model$skippable, flag, style)) {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							} else {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = A2($elm$core$List$cons, style, styles),
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							}
						}
					case 'TransformComponent':
						var flag = attribute.a;
						var component = attribute.b;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
							$temp$transform = A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, transform, component),
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'Width':
						var width = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$width, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (width.$) {
								case 'Px':
									var px = width.a;
									var $temp$classes = ($mdgriffith$elm_ui$Internal$Style$classes.widthExact + (' width-px-' + $elm$core$String$fromInt(px))) + (' ' + classes),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3(
											$mdgriffith$elm_ui$Internal$Model$Single,
											'width-px-' + $elm$core$String$fromInt(px),
											'width',
											$elm$core$String$fromInt(px) + 'px'),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Content':
									var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.widthContent),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$widthContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Fill':
									var portion = width.a;
									if (portion === 1) {
										var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.widthFill),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion + (' width-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.row + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'width-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v4 = $mdgriffith$elm_ui$Internal$Model$renderWidth(width);
									var addToFlags = _v4.a;
									var newClass = _v4.b;
									var newStyles = _v4.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 'Height':
						var height = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$height, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (height.$) {
								case 'Px':
									var px = height.a;
									var val = $elm$core$String$fromInt(px) + 'px';
									var name = 'height-px-' + val;
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightExact + (' ' + (name + (' ' + classes))),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height ', val),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Content':
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightContent + (' ' + classes),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$heightContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Fill':
									var portion = height.a;
									if (portion === 1) {
										var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightFill + (' ' + classes),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion + (' height-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.column + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'height-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v6 = $mdgriffith$elm_ui$Internal$Model$renderHeight(height);
									var addToFlags = _v6.a;
									var newClass = _v6.b;
									var newStyles = _v6.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 'Describe':
						var description = attribute.a;
						switch (description.$) {
							case 'Main':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'main', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Navigation':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'nav', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'ContentInfo':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'footer', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Complementary':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'aside', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Heading':
								var i = description.a;
								if (i <= 1) {
									var $temp$classes = classes,
										$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h1', node),
										$temp$has = has,
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								} else {
									if (i < 7) {
										var $temp$classes = classes,
											$temp$node = A2(
											$mdgriffith$elm_ui$Internal$Model$addNodeName,
											'h' + $elm$core$String$fromInt(i),
											node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes,
											$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h6', node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								}
							case 'Paragraph':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Button':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'role', 'button'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Label':
								var label = description.a;
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-label', label),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'LivePolite':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'polite'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							default:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'assertive'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
						}
					case 'Nearby':
						var location = attribute.a;
						var elem = attribute.b;
						var newStyles = function () {
							switch (elem.$) {
								case 'Empty':
									return styles;
								case 'Text':
									var str = elem.a;
									return styles;
								case 'Unstyled':
									var html = elem.a;
									return styles;
								default:
									var styled = elem.a;
									return _Utils_ap(styles, styled.styles);
							}
						}();
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = newStyles,
							$temp$attrs = attrs,
							$temp$children = A3($mdgriffith$elm_ui$Internal$Model$addNearbyElement, location, elem, children),
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'AlignX':
						var x = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignXName(x) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (x.$) {
									case 'CenterX':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerX, flags);
									case 'Right':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignRight, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					default:
						var y = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignYName(y) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (y.$) {
									case 'CenterY':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerY, flags);
									case 'Bottom':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignBottom, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
				}
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Untransformed = {$: 'Untransformed'};
var $mdgriffith$elm_ui$Internal$Model$untransformed = $mdgriffith$elm_ui$Internal$Model$Untransformed;
var $mdgriffith$elm_ui$Internal$Model$element = F4(
	function (context, node, attributes, children) {
		return A3(
			$mdgriffith$elm_ui$Internal$Model$createElement,
			context,
			children,
			A8(
				$mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive,
				$mdgriffith$elm_ui$Internal$Model$contextClasses(context),
				node,
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Model$untransformed,
				_List_Nil,
				_List_Nil,
				$mdgriffith$elm_ui$Internal$Model$NoNearbyChildren,
				$elm$core$List$reverse(attributes)));
	});
var $mdgriffith$elm_ui$Internal$Model$Content = {$: 'Content'};
var $mdgriffith$elm_ui$Element$shrink = $mdgriffith$elm_ui$Internal$Model$Content;
var $mdgriffith$elm_ui$Element$el = F2(
	function (attrs, child) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					attrs)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[child])));
	});
var $elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
var $elm$html$Html$Attributes$style = $elm$virtual_dom$VirtualDom$style;
var $author$project$Style$fontsizeHtml = function (size) {
	return A2(
		$elm$html$Html$Attributes$style,
		'font-size',
		$elm$core$String$fromInt(size));
};
var $mdgriffith$elm_ui$Internal$Model$unstyled = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Unstyled, $elm$core$Basics$always);
var $mdgriffith$elm_ui$Element$html = $mdgriffith$elm_ui$Internal$Model$unstyled;
var $avh4$elm_color$Color$toCssString = function (_v0) {
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	var a = _v0.d;
	var roundTo = function (x) {
		return $elm$core$Basics$round(x * 1000) / 1000;
	};
	var pct = function (x) {
		return $elm$core$Basics$round(x * 10000) / 100;
	};
	return $elm$core$String$concat(
		_List_fromArray(
			[
				'rgba(',
				$elm$core$String$fromFloat(
				pct(r)),
				'%,',
				$elm$core$String$fromFloat(
				pct(g)),
				'%,',
				$elm$core$String$fromFloat(
				pct(b)),
				'%,',
				$elm$core$String$fromFloat(
				roundTo(a)),
				')'
			]));
};
var $elm$svg$Svg$Attributes$class = _VirtualDom_attribute('class');
var $elm$svg$Svg$Attributes$fill = _VirtualDom_attribute('fill');
var $elm$svg$Svg$Attributes$height = _VirtualDom_attribute('height');
var $elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
var $elm$svg$Svg$map = $elm$virtual_dom$VirtualDom$map;
var $elm$svg$Svg$Attributes$stroke = _VirtualDom_attribute('stroke');
var $elm$svg$Svg$Attributes$strokeLinecap = _VirtualDom_attribute('stroke-linecap');
var $elm$svg$Svg$Attributes$strokeLinejoin = _VirtualDom_attribute('stroke-linejoin');
var $elm$svg$Svg$trustedNode = _VirtualDom_nodeNS('http://www.w3.org/2000/svg');
var $elm$svg$Svg$svg = $elm$svg$Svg$trustedNode('svg');
var $elm$svg$Svg$Attributes$viewBox = _VirtualDom_attribute('viewBox');
var $elm$svg$Svg$Attributes$width = _VirtualDom_attribute('width');
var $phosphor_icons$phosphor_elm$Phosphor$xmlns = function (s) {
	return A2(
		$elm$virtual_dom$VirtualDom$property,
		'xmlns',
		$elm$json$Json$Encode$string(s));
};
var $phosphor_icons$phosphor_elm$Phosphor$toHtml = F2(
	function (attributes, _v0) {
		var src = _v0.a.src;
		var attrs = _v0.a.attrs;
		var strSize = $elm$core$String$fromFloat(attrs.size);
		var baseAttributes = _List_fromArray(
			[
				$phosphor_icons$phosphor_elm$Phosphor$xmlns('http://www.w3.org/2000/svg'),
				$elm$svg$Svg$Attributes$fill('currentColor'),
				$elm$svg$Svg$Attributes$height(
				_Utils_ap(strSize, attrs.sizeUnit)),
				$elm$svg$Svg$Attributes$width(
				_Utils_ap(strSize, attrs.sizeUnit)),
				$elm$svg$Svg$Attributes$stroke('currentColor'),
				$elm$svg$Svg$Attributes$strokeLinecap('round'),
				$elm$svg$Svg$Attributes$strokeLinejoin('round'),
				$elm$svg$Svg$Attributes$viewBox('0 0 256 256')
			]);
		var combinedAttributes = _Utils_ap(
			function () {
				var _v1 = attrs._class;
				if (_v1.$ === 'Just') {
					var c = _v1.a;
					return A2(
						$elm$core$List$cons,
						$elm$svg$Svg$Attributes$class(c),
						baseAttributes);
				} else {
					return baseAttributes;
				}
			}(),
			attributes);
		return A2(
			$elm$svg$Svg$svg,
			combinedAttributes,
			A2(
				$elm$core$List$map,
				$elm$svg$Svg$map($elm$core$Basics$never),
				src));
	});
var $mdgriffith$elm_ui$Internal$Model$Px = function (a) {
	return {$: 'Px', a: a};
};
var $mdgriffith$elm_ui$Element$px = $mdgriffith$elm_ui$Internal$Model$Px;
var $author$project$Symbol$withWidthHeight = F3(
	function (factor, attr, l) {
		return _Utils_ap(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(
						$elm$core$Basics$round(l.size * factor))),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(
						$elm$core$Basics$round(l.size * factor)))
				]),
			attr(l));
	});
var $author$project$Style$elmPhosphor = F2(
	function (icon, weight) {
		return function (sc) {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				A3(
					$author$project$Symbol$withWidthHeight,
					1.0,
					$elm$core$Basics$always(_List_Nil),
					sc),
				$mdgriffith$elm_ui$Element$html(
					A2(
						$phosphor_icons$phosphor_elm$Phosphor$toHtml,
						_List_fromArray(
							[
								$author$project$Style$fontsizeHtml(sc.size),
								A2(
								$elm$html$Html$Attributes$style,
								'width',
								$elm$core$String$fromInt(sc.size) + 'px'),
								A2(
								$elm$html$Html$Attributes$style,
								'height',
								$elm$core$String$fromInt(sc.size) + 'px'),
								A2(
								$elm$html$Html$Attributes$style,
								'color',
								$avh4$elm_color$Color$toCssString(sc.color))
							]),
						icon(weight))));
		};
	});
var $author$project$Main$imagesymbols = _List_fromArray(
	[
		_Utils_Tuple2('unijena', 'https://images.static-collegedunia.com/public/college_data/images/studyabroad/logos/college_674_02-12:51_674.png?tr=h-80,w-80,c-force'),
		_Utils_Tuple2('amazon', 'https://sguru.org/wp-content/uploads/2018/02/Amazon-150x150.png'),
		_Utils_Tuple2('elmail', 'http://localhost:9999/img/elmail_small.svg'),
		_Utils_Tuple2('and', 'http://localhost:9999/img/and.svg'),
		_Utils_Tuple2('not', 'http://localhost:9999/img/not.svg'),
		_Utils_Tuple2('set', 'http://localhost:9999/img/search.svg'),
		_Utils_Tuple2('or', 'http://localhost:9999/img/or.svg'),
		_Utils_Tuple2('but', 'http://localhost:9999/img/andnot.svg')
	]);
var $phosphor_icons$phosphor_elm$Phosphor$Regular = {$: 'Regular'};
var $elm$svg$Svg$Attributes$d = _VirtualDom_attribute('d');
var $phosphor_icons$phosphor_elm$Phosphor$IconVariant = function (a) {
	return {$: 'IconVariant', a: a};
};
var $phosphor_icons$phosphor_elm$Phosphor$defaultAttributes = {
	_class: $elm$core$Maybe$Just('ph-icon'),
	size: 1,
	sizeUnit: 'em'
};
var $phosphor_icons$phosphor_elm$Phosphor$makeBuilder = function (src) {
	return $phosphor_icons$phosphor_elm$Phosphor$IconVariant(
		{attrs: $phosphor_icons$phosphor_elm$Phosphor$defaultAttributes, src: src});
};
var $elm$svg$Svg$path = $elm$svg$Svg$trustedNode('path');
var $elm$svg$Svg$Attributes$points = _VirtualDom_attribute('points');
var $elm$svg$Svg$polyline = $elm$svg$Svg$trustedNode('polyline');
var $elm$svg$Svg$Attributes$strokeWidth = _VirtualDom_attribute('stroke-width');
var $phosphor_icons$phosphor_elm$Phosphor$arrowBendDownLeft = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('80 104 32 152 80 200'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M224,56a96,96,0,0,1-96,96H32'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('80 104 32 152 80 200'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M224,56a96,96,0,0,1-96,96H32'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M232,56A104.2,104.2,0,0,1,128,160H88v40a8,8,0,0,1-4.9,7.4,8.5,8.5,0,0,1-3.1.6,8.3,8.3,0,0,1-5.7-2.3l-48-48a8.1,8.1,0,0,1,0-11.4l48-48a8.4,8.4,0,0,1,8.8-1.7A8,8,0,0,1,88,104v40h40a88.1,88.1,0,0,0,88-88,8,8,0,0,1,16,0Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('80 104 32 152 80 200'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M224,56a96,96,0,0,1-96,96H32'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('80 104 32 152 80 200'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M224,56a96,96,0,0,1-96,96H32'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('80 104 32 152 80 200'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M224,56a96,96,0,0,1-96,96H32'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $phosphor_icons$phosphor_elm$Phosphor$arrowBendDownRight = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('176 104 224 152 176 200'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,56a96,96,0,0,0,96,96h96'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('176 104 224 152 176 200'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,56a96,96,0,0,0,96,96h96'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M229.7,157.7l-48,48A8.3,8.3,0,0,1,176,208a8.5,8.5,0,0,1-3.1-.6A8,8,0,0,1,168,200V160H128A104.2,104.2,0,0,1,24,56a8,8,0,0,1,16,0,88.1,88.1,0,0,0,88,88h40V104a8,8,0,0,1,4.9-7.4,8.4,8.4,0,0,1,8.8,1.7l48,48A8.1,8.1,0,0,1,229.7,157.7Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('176 104 224 152 176 200'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,56a96,96,0,0,0,96,96h96'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('176 104 224 152 176 200'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,56a96,96,0,0,0,96,96h96'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('176 104 224 152 176 200'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,56a96,96,0,0,0,96,96h96'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $elm$svg$Svg$line = $elm$svg$Svg$trustedNode('line');
var $elm$svg$Svg$Attributes$opacity = _VirtualDom_attribute('opacity');
var $elm$svg$Svg$polygon = $elm$svg$Svg$trustedNode('polygon');
var $elm$svg$Svg$Attributes$x1 = _VirtualDom_attribute('x1');
var $elm$svg$Svg$Attributes$x2 = _VirtualDom_attribute('x2');
var $elm$svg$Svg$Attributes$y1 = _VirtualDom_attribute('y1');
var $elm$svg$Svg$Attributes$y2 = _VirtualDom_attribute('y2');
var $phosphor_icons$phosphor_elm$Phosphor$arrowFatLinesRight = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polygon,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('136 32 232 128 136 224 136 176 116 176 116 80 136 80 136 32'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('44'),
								$elm$svg$Svg$Attributes$y1('176'),
								$elm$svg$Svg$Attributes$x2('44'),
								$elm$svg$Svg$Attributes$y2('80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('80'),
								$elm$svg$Svg$Attributes$y1('176'),
								$elm$svg$Svg$Attributes$x2('80'),
								$elm$svg$Svg$Attributes$y2('80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polygon,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('136 32 232 128 136 224 136 176 104 176 104 80 136 80 136 32'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polygon,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('136 32 232 128 136 224 136 176 104 176 104 80 136 80 136 32'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('176'),
								$elm$svg$Svg$Attributes$x2('40'),
								$elm$svg$Svg$Attributes$y2('80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('72'),
								$elm$svg$Svg$Attributes$y1('176'),
								$elm$svg$Svg$Attributes$x2('72'),
								$elm$svg$Svg$Attributes$y2('80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M132.9,231.4A8,8,0,0,1,128,224V184H104a8,8,0,0,1-8-8V80a8,8,0,0,1,8-8h24V32a8,8,0,0,1,4.9-7.4,8.4,8.4,0,0,1,8.8,1.7l96,96a8.1,8.1,0,0,1,0,11.4l-96,96A8.4,8.4,0,0,1,132.9,231.4ZM48,176V80a8,8,0,0,0-16,0v96a8,8,0,0,0,16,0Zm32,0V80a8,8,0,0,0-16,0v96a8,8,0,0,0,16,0Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polygon,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('136 32 232 128 136 224 136 176 104 176 104 80 136 80 136 32'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('176'),
								$elm$svg$Svg$Attributes$x2('40'),
								$elm$svg$Svg$Attributes$y2('80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('72'),
								$elm$svg$Svg$Attributes$y1('176'),
								$elm$svg$Svg$Attributes$x2('72'),
								$elm$svg$Svg$Attributes$y2('80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polygon,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('136 32 232 128 136 224 136 176 104 176 104 80 136 80 136 32'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('176'),
								$elm$svg$Svg$Attributes$x2('40'),
								$elm$svg$Svg$Attributes$y2('80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('72'),
								$elm$svg$Svg$Attributes$y1('176'),
								$elm$svg$Svg$Attributes$x2('72'),
								$elm$svg$Svg$Attributes$y2('80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polygon,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('136 32 232 128 136 224 136 176 104 176 104 80 136 80 136 32'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('176'),
								$elm$svg$Svg$Attributes$x2('40'),
								$elm$svg$Svg$Attributes$y2('80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('72'),
								$elm$svg$Svg$Attributes$y1('176'),
								$elm$svg$Svg$Attributes$x2('72'),
								$elm$svg$Svg$Attributes$y2('80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $elm$svg$Svg$rect = $elm$svg$Svg$trustedNode('rect');
var $elm$svg$Svg$Attributes$rx = _VirtualDom_attribute('rx');
var $elm$svg$Svg$Attributes$x = _VirtualDom_attribute('x');
var $elm$svg$Svg$Attributes$y = _VirtualDom_attribute('y');
var $phosphor_icons$phosphor_elm$Phosphor$arrowSquareOut = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('216 100 216 40 156 40'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('144'),
								$elm$svg$Svg$Attributes$y1('112'),
								$elm$svg$Svg$Attributes$x2('216'),
								$elm$svg$Svg$Attributes$y2('40'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M184,144v64a8,8,0,0,1-8,8H48a8,8,0,0,1-8-8V80a8,8,0,0,1,8-8h64'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$rect,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x('40'),
								$elm$svg$Svg$Attributes$y('72'),
								$elm$svg$Svg$Attributes$width('144'),
								$elm$svg$Svg$Attributes$height('144'),
								$elm$svg$Svg$Attributes$rx('8'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('216 100 216 40 156 40'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('144'),
								$elm$svg$Svg$Attributes$y1('112'),
								$elm$svg$Svg$Attributes$x2('216'),
								$elm$svg$Svg$Attributes$y2('40'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M184,144v64a8,8,0,0,1-8,8H48a8,8,0,0,1-8-8V80a8,8,0,0,1,8-8h64'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M224,100a8,8,0,0,1-4.9,7.4,8.5,8.5,0,0,1-3.1.6,8.3,8.3,0,0,1-5.7-2.3L186,81.3l-36.4,36.4A8,8,0,0,1,144,120a8.3,8.3,0,0,1-5.7-2.3,8,8,0,0,1,0-11.3L174.7,70,150.3,45.7a8.4,8.4,0,0,1-1.7-8.8A8,8,0,0,1,156,32h60a8,8,0,0,1,8,8Zm-40,36a8,8,0,0,0-8,8v64H48V80h64a8,8,0,0,0,0-16H48A16,16,0,0,0,32,80V208a16,16,0,0,0,16,16H176a16,16,0,0,0,16-16V144A8,8,0,0,0,184,136Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('216 100 216 40 156 40'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('144'),
								$elm$svg$Svg$Attributes$y1('112'),
								$elm$svg$Svg$Attributes$x2('216'),
								$elm$svg$Svg$Attributes$y2('40'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M184,144v64a8,8,0,0,1-8,8H48a8,8,0,0,1-8-8V80a8,8,0,0,1,8-8h64'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('216 100 216 40 156 40'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('144'),
								$elm$svg$Svg$Attributes$y1('112'),
								$elm$svg$Svg$Attributes$x2('216'),
								$elm$svg$Svg$Attributes$y2('40'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M184,144v64a8,8,0,0,1-8,8H48a8,8,0,0,1-8-8V80a8,8,0,0,1,8-8h64'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('216 100 216 40 156 40'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('144'),
								$elm$svg$Svg$Attributes$y1('112'),
								$elm$svg$Svg$Attributes$x2('216'),
								$elm$svg$Svg$Attributes$y2('40'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M184,144v64a8,8,0,0,1-8,8H48a8,8,0,0,1-8-8V80a8,8,0,0,1,8-8h64'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $phosphor_icons$phosphor_elm$Phosphor$arrowsInCardinal = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('156.3 188.3 128 160 99.7 188.3'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('128'),
								$elm$svg$Svg$Attributes$y1('232'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('160'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('99.7 67.7 128 96 156.3 67.7'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('128'),
								$elm$svg$Svg$Attributes$y1('24'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('96'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('67.7 156.3 96 128 67.7 99.7'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('24'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('96'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('188.3 99.7 160 128 188.3 156.3'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('232'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('160'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('156.3 188.3 128 160 99.7 188.3'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('128'),
								$elm$svg$Svg$Attributes$y1('232'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('160'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('99.7 67.7 128 96 156.3 67.7'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('128'),
								$elm$svg$Svg$Attributes$y1('24'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('96'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('67.7 156.3 96 128 67.7 99.7'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('24'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('96'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('188.3 99.7 160 128 188.3 156.3'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('232'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('160'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M161.9,182.6a8,8,0,0,1-5.6,13.7H136V232a8,8,0,0,1-16,0V196.3H99.7a8,8,0,0,1-5.6-13.7l28.2-28.3a8.1,8.1,0,0,1,11.4,0Zm-39.6-80.9a8.2,8.2,0,0,0,11.4,0l28.2-28.3a8,8,0,0,0-5.6-13.7H136V24a8,8,0,0,0-16,0V59.7H99.7a8,8,0,0,0-5.6,13.7Zm-20.6,20.6L73.4,94.1a8,8,0,0,0-13.7,5.6V120H24a8,8,0,0,0,0,16H59.7v20.3a8.2,8.2,0,0,0,5,7.4,7.7,7.7,0,0,0,3,.6,8,8,0,0,0,5.7-2.4l28.3-28.2A8.1,8.1,0,0,0,101.7,122.3ZM232,120H196.3V99.7a8,8,0,0,0-13.7-5.6l-28.3,28.2a8.1,8.1,0,0,0,0,11.4l28.3,28.2a8,8,0,0,0,5.7,2.4,7.7,7.7,0,0,0,3-.6,8.2,8.2,0,0,0,5-7.4V136H232a8,8,0,0,0,0-16Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('156.3 188.3 128 160 99.7 188.3'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('128'),
								$elm$svg$Svg$Attributes$y1('232'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('160'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('99.7 67.7 128 96 156.3 67.7'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('128'),
								$elm$svg$Svg$Attributes$y1('24'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('96'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('67.7 156.3 96 128 67.7 99.7'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('24'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('96'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('188.3 99.7 160 128 188.3 156.3'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('232'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('160'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('156.3 188.3 128 160 99.7 188.3'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('128'),
								$elm$svg$Svg$Attributes$y1('232'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('160'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('99.7 67.7 128 96 156.3 67.7'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('128'),
								$elm$svg$Svg$Attributes$y1('24'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('96'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('67.7 156.3 96 128 67.7 99.7'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('24'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('96'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('188.3 99.7 160 128 188.3 156.3'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('232'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('160'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('156.3 188.3 128 160 99.7 188.3'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('128'),
								$elm$svg$Svg$Attributes$y1('232'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('160'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('99.7 67.7 128 96 156.3 67.7'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('128'),
								$elm$svg$Svg$Attributes$y1('24'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('96'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('67.7 156.3 96 128 67.7 99.7'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('24'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('96'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('188.3 99.7 160 128 188.3 156.3'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('232'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('160'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $elm$svg$Svg$circle = $elm$svg$Svg$trustedNode('circle');
var $elm$svg$Svg$Attributes$cx = _VirtualDom_attribute('cx');
var $elm$svg$Svg$Attributes$cy = _VirtualDom_attribute('cy');
var $elm$svg$Svg$Attributes$r = _VirtualDom_attribute('r');
var $phosphor_icons$phosphor_elm$Phosphor$circleWavyQuestion = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M54.5,201.5c-9.2-9.2-3.1-28.5-7.8-39.8S24,140.5,24,128s17.8-22,22.7-33.7-1.4-30.6,7.8-39.8S83,51.4,94.3,46.7,115.5,24,128,24s22,17.8,33.7,22.7,30.6-1.4,39.8,7.8,3.1,28.5,7.8,39.8S232,115.5,232,128s-17.8,22-22.7,33.7,1.4,30.6-7.8,39.8-28.5,3.1-39.8,7.8S140.5,232,128,232s-22-17.8-33.7-22.7S63.7,210.7,54.5,201.5Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('128'),
								$elm$svg$Svg$Attributes$cy('176'),
								$elm$svg$Svg$Attributes$r('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M128,136a28,28,0,1,0-28-28'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M54.5,201.5c-9.2-9.2-3.1-28.5-7.8-39.8S24,140.5,24,128s17.8-22,22.7-33.7-1.4-30.6,7.8-39.8S83,51.4,94.3,46.7,115.5,24,128,24s22,17.8,33.7,22.7,30.6-1.4,39.8,7.8,3.1,28.5,7.8,39.8S232,115.5,232,128s-17.8,22-22.7,33.7,1.4,30.6-7.8,39.8-28.5,3.1-39.8,7.8S140.5,232,128,232s-22-17.8-33.7-22.7S63.7,210.7,54.5,201.5Z'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M54.5,201.5c-9.2-9.2-3.1-28.5-7.8-39.8S24,140.5,24,128s17.8-22,22.7-33.7-1.4-30.6,7.8-39.8S83,51.4,94.3,46.7,115.5,24,128,24s22,17.8,33.7,22.7,30.6-1.4,39.8,7.8,3.1,28.5,7.8,39.8S232,115.5,232,128s-17.8,22-22.7,33.7,1.4,30.6-7.8,39.8-28.5,3.1-39.8,7.8S140.5,232,128,232s-22-17.8-33.7-22.7S63.7,210.7,54.5,201.5Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('128'),
								$elm$svg$Svg$Attributes$cy('180'),
								$elm$svg$Svg$Attributes$r('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M128,144v-8a28,28,0,1,0-28-28'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M225.9,102.8c-3.8-3.9-7.7-8-9.2-11.5s-1.4-8.7-1.5-14c-.1-9.7-.3-20.8-8-28.5s-18.8-7.9-28.5-8c-5.3-.1-10.7-.2-14-1.5s-7.6-5.4-11.5-9.2C146.3,23.5,138.4,16,128,16s-18.3,7.5-25.2,14.1c-3.9,3.8-8,7.7-11.5,9.2s-8.7,1.4-14,1.5c-9.7.1-20.8.3-28.5,8s-7.9,18.8-8,28.5c-.1,5.3-.2,10.7-1.5,14s-5.4,7.6-9.2,11.5C23.5,109.7,16,117.6,16,128s7.5,18.3,14.1,25.2c3.8,3.9,7.7,8,9.2,11.5s1.4,8.7,1.5,14c.1,9.7.3,20.8,8,28.5s18.8,7.9,28.5,8c5.3.1,10.7.2,14,1.5s7.6,5.4,11.5,9.2c6.9,6.6,14.8,14.1,25.2,14.1s18.3-7.5,25.2-14.1c3.9-3.8,8-7.7,11.5-9.2s8.7-1.4,14-1.5c9.7-.1,20.8-.3,28.5-8s7.9-18.8,8-28.5c.1-5.3.2-10.7,1.5-14s5.4-7.6,9.2-11.5c6.6-6.9,14.1-14.8,14.1-25.2S232.5,109.7,225.9,102.8ZM128,192a12,12,0,1,1,12-12A12,12,0,0,1,128,192Zm8-48.9v.9a8,8,0,0,1-16,0v-8a8,8,0,0,1,8-8,20,20,0,1,0-20-20,8,8,0,0,1-16,0,36,36,0,1,1,44,35.1Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M54.5,201.5c-9.2-9.2-3.1-28.5-7.8-39.8S24,140.5,24,128s17.8-22,22.7-33.7-1.4-30.6,7.8-39.8S83,51.4,94.3,46.7,115.5,24,128,24s22,17.8,33.7,22.7,30.6-1.4,39.8,7.8,3.1,28.5,7.8,39.8S232,115.5,232,128s-17.8,22-22.7,33.7,1.4,30.6-7.8,39.8-28.5,3.1-39.8,7.8S140.5,232,128,232s-22-17.8-33.7-22.7S63.7,210.7,54.5,201.5Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('128'),
								$elm$svg$Svg$Attributes$cy('180'),
								$elm$svg$Svg$Attributes$r('10')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M128,144v-8a28,28,0,1,0-28-28'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M54.5,201.5c-9.2-9.2-3.1-28.5-7.8-39.8S24,140.5,24,128s17.8-22,22.7-33.7-1.4-30.6,7.8-39.8S83,51.4,94.3,46.7,115.5,24,128,24s22,17.8,33.7,22.7,30.6-1.4,39.8,7.8,3.1,28.5,7.8,39.8S232,115.5,232,128s-17.8,22-22.7,33.7,1.4,30.6-7.8,39.8-28.5,3.1-39.8,7.8S140.5,232,128,232s-22-17.8-33.7-22.7S63.7,210.7,54.5,201.5Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('128'),
								$elm$svg$Svg$Attributes$cy('180'),
								$elm$svg$Svg$Attributes$r('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M128,144v-8a28,28,0,1,0-28-28'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M54.5,201.5c-9.2-9.2-3.1-28.5-7.8-39.8S24,140.5,24,128s17.8-22,22.7-33.7-1.4-30.6,7.8-39.8S83,51.4,94.3,46.7,115.5,24,128,24s22,17.8,33.7,22.7,30.6-1.4,39.8,7.8,3.1,28.5,7.8,39.8S232,115.5,232,128s-17.8,22-22.7,33.7,1.4,30.6-7.8,39.8-28.5,3.1-39.8,7.8S140.5,232,128,232s-22-17.8-33.7-22.7S63.7,210.7,54.5,201.5Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('128'),
								$elm$svg$Svg$Attributes$cy('180'),
								$elm$svg$Svg$Attributes$r('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M128,144v-8a28,28,0,1,0-28-28'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $phosphor_icons$phosphor_elm$Phosphor$envelopeSimple = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,56H224a0,0,0,0,1,0,0V192a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V56A0,0,0,0,1,32,56Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('224 56 128 144 32 56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polygon,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('224 56 128 144 32 56 224 56'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,56H224a0,0,0,0,1,0,0V192a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V56A0,0,0,0,1,32,56Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('224 56 128 144 32 56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M224,48H32a8,8,0,0,0-8,8V192a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A8,8,0,0,0,224,48Zm-8,144H40V74.2l82.6,75.7a8,8,0,0,0,10.8,0L216,74.2V192Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,56H224a0,0,0,0,1,0,0V192a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V56A0,0,0,0,1,32,56Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('224 56 128 144 32 56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,56H224a0,0,0,0,1,0,0V192a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V56A0,0,0,0,1,32,56Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('224 56 128 144 32 56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,56H224a0,0,0,0,1,0,0V192a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V56A0,0,0,0,1,32,56Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('224 56 128 144 32 56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $phosphor_icons$phosphor_elm$Phosphor$fileDotted = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('148 32 148 92 208 92'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M72,224H56a8,8,0,0,1-8-8V184'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('120 32 152 32 208 88 208 136'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M48,64V40a8,8,0,0,1,8-8H80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M208,176v40a8,8,0,0,1-8,8h-8'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('48'),
								$elm$svg$Svg$Attributes$y1('104'),
								$elm$svg$Svg$Attributes$x2('48'),
								$elm$svg$Svg$Attributes$y2('144'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('112'),
								$elm$svg$Svg$Attributes$y1('224'),
								$elm$svg$Svg$Attributes$x2('152'),
								$elm$svg$Svg$Attributes$y2('224'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polygon,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('152 32 152 88 208 88 152 32'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M72,224H56a8,8,0,0,1-8-8V184'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('120 32 152 32 208 88 208 136'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M48,64V40a8,8,0,0,1,8-8H80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('152 32 152 88 208 88'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M208,176v40a8,8,0,0,1-8,8h-8'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('48'),
								$elm$svg$Svg$Attributes$y1('104'),
								$elm$svg$Svg$Attributes$x2('48'),
								$elm$svg$Svg$Attributes$y2('144'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('112'),
								$elm$svg$Svg$Attributes$y1('224'),
								$elm$svg$Svg$Attributes$x2('152'),
								$elm$svg$Svg$Attributes$y2('224'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M80,224a8,8,0,0,1-8,8H56a16,16,0,0,1-16-16V184a8,8,0,0,1,16,0v32H72A8,8,0,0,1,80,224ZM80,24H56A16,16,0,0,0,40,40V64a8,8,0,0,0,16,0V40H80a8,8,0,0,0,0-16ZM216,88a7.8,7.8,0,0,0-2.4-5.7l-55.9-56h-.2l-.4-.4h-.2l-.4-.3c-.1-.1-.2-.1-.2-.2l-.5-.3h-.2l-.5-.3H155l-.7-.3H120a8,8,0,0,0,0,16h24V88a8,8,0,0,0,8,8h48v40a8,8,0,0,0,16,0V88Zm-8,80a8,8,0,0,0-8,8v40h-8a8,8,0,0,0,0,16h8a16,16,0,0,0,16-16V176A8,8,0,0,0,208,168ZM48,152a8,8,0,0,0,8-8V104a8,8,0,0,0-16,0v40A8,8,0,0,0,48,152Zm104,64H112a8,8,0,0,0,0,16h40a8,8,0,0,0,0-16Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M72,224H56a8,8,0,0,1-8-8V184'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('120 32 152 32 208 88 208 136'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M48,64V40a8,8,0,0,1,8-8H80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('152 32 152 88 208 88'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M208,176v40a8,8,0,0,1-8,8h-8'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('48'),
								$elm$svg$Svg$Attributes$y1('104'),
								$elm$svg$Svg$Attributes$x2('48'),
								$elm$svg$Svg$Attributes$y2('144'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('112'),
								$elm$svg$Svg$Attributes$y1('224'),
								$elm$svg$Svg$Attributes$x2('152'),
								$elm$svg$Svg$Attributes$y2('224'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M72,224H56a8,8,0,0,1-8-8V184'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('120 32 152 32 208 88 208 136'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M48,64V40a8,8,0,0,1,8-8H80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('152 32 152 88 208 88'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M208,176v40a8,8,0,0,1-8,8h-8'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('48'),
								$elm$svg$Svg$Attributes$y1('104'),
								$elm$svg$Svg$Attributes$x2('48'),
								$elm$svg$Svg$Attributes$y2('144'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('112'),
								$elm$svg$Svg$Attributes$y1('224'),
								$elm$svg$Svg$Attributes$x2('152'),
								$elm$svg$Svg$Attributes$y2('224'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M72,224H56a8,8,0,0,1-8-8V184'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('120 32 152 32 208 88 208 136'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M48,64V40a8,8,0,0,1,8-8H80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('152 32 152 88 208 88'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M208,176v40a8,8,0,0,1-8,8h-8'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('48'),
								$elm$svg$Svg$Attributes$y1('104'),
								$elm$svg$Svg$Attributes$x2('48'),
								$elm$svg$Svg$Attributes$y2('144'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('112'),
								$elm$svg$Svg$Attributes$y1('224'),
								$elm$svg$Svg$Attributes$x2('152'),
								$elm$svg$Svg$Attributes$y2('224'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $phosphor_icons$phosphor_elm$Phosphor$flag = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('216'),
								$elm$svg$Svg$Attributes$x2('40'),
								$elm$svg$Svg$Attributes$y2('48'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M40,168c64-48,112,48,176,0V48C152,96,104,0,40,48'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M40,168c64-48,112,48,176,0V48C152,96,104,0,40,48Z'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('216'),
								$elm$svg$Svg$Attributes$x2('40'),
								$elm$svg$Svg$Attributes$y2('48'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M40,168c64-48,112,48,176,0V48C152,96,104,0,40,48'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M219.6,40.8a8.2,8.2,0,0,0-8.4.8c-28.3,21.2-52.3,11-80-.9s-60.3-25.9-96,.9h-.1l-.4.3-.2.2-.3.3-.3.3-.2.3-.3.3c0,.1-.1.2-.2.3l-.2.4c0,.1-.1.2-.1.3a.8.8,0,0,0-.2.4c-.1.1-.1.2-.2.4s-.1.2-.1.3-.1.3-.1.4-.1.2-.1.3-.1.3-.1.4V47c0,.1-.1.3-.1.4V216a8,8,0,0,0,16,0V172.1c26.9-18.1,50.1-8.2,76.8,3.3,16.3,6.9,33.8,14.4,52.6,14.4,13.8,0,28.3-4,43.4-15.4A8.1,8.1,0,0,0,224,168V48A8.2,8.2,0,0,0,219.6,40.8Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('216'),
								$elm$svg$Svg$Attributes$x2('40'),
								$elm$svg$Svg$Attributes$y2('48'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M40,168c64-48,112,48,176,0V48C152,96,104,0,40,48'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('216'),
								$elm$svg$Svg$Attributes$x2('40'),
								$elm$svg$Svg$Attributes$y2('48'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M40,168c64-48,112,48,176,0V48C152,96,104,0,40,48'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('216'),
								$elm$svg$Svg$Attributes$x2('40'),
								$elm$svg$Svg$Attributes$y2('48'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M40,168c64-48,112,48,176,0V48C152,96,104,0,40,48'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $phosphor_icons$phosphor_elm$Phosphor$folderSimpleDotted = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,80V64a8,8,0,0,1,8-8H93.3a8.1,8.1,0,0,1,4.8,1.6L128,80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M88,208H39.4a7.4,7.4,0,0,1-7.4-7.4V192'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('160'),
								$elm$svg$Svg$Attributes$y1('208'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('208'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M224,152v48.9a7.1,7.1,0,0,1-7.1,7.1H200'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M168,80h48a8,8,0,0,1,8,8v24'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('32'),
								$elm$svg$Svg$Attributes$y1('120'),
								$elm$svg$Svg$Attributes$x2('32'),
								$elm$svg$Svg$Attributes$y2('152'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M224,88V200.9a7.1,7.1,0,0,1-7.1,7.1H40a8,8,0,0,1-8-8V64a8,8,0,0,1,8-8H93.3a8.1,8.1,0,0,1,4.8,1.6l27.8,20.8a8.1,8.1,0,0,0,4.8,1.6H216A8,8,0,0,1,224,88Z'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,80V64a8,8,0,0,1,8-8H93.3a8.1,8.1,0,0,1,4.8,1.6L128,80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M88,208H39.4a7.4,7.4,0,0,1-7.4-7.4V192'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('160'),
								$elm$svg$Svg$Attributes$y1('208'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('208'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M224,152v48.9a7.1,7.1,0,0,1-7.1,7.1H200'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M168,80h48a8,8,0,0,1,8,8v24'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('32'),
								$elm$svg$Svg$Attributes$y1('120'),
								$elm$svg$Svg$Attributes$x2('32'),
								$elm$svg$Svg$Attributes$y2('152'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M24,80V64A16,16,0,0,1,40,48H93.3a15.6,15.6,0,0,1,9.6,3.2l29.9,22.4A8,8,0,0,1,128,88a7.7,7.7,0,0,1-4.8-1.6L93.3,64H40V80a8,8,0,0,1-16,0ZM88,200H40v-8a8,8,0,0,0-16,0v8.6A15.4,15.4,0,0,0,39.4,216H88a8,8,0,0,0,0-16Zm72,0H128a8,8,0,0,0,0,16h32a8,8,0,0,0,0-16Zm64-56a8,8,0,0,0-8,8v48H200a8,8,0,0,0,0,16h16.9A15.2,15.2,0,0,0,232,200.9V152A8,8,0,0,0,224,144Zm-8-72H168a8,8,0,0,0,0,16h48v24a8,8,0,0,0,16,0V88A16,16,0,0,0,216,72ZM32,160a8,8,0,0,0,8-8V120a8,8,0,0,0-16,0v32A8,8,0,0,0,32,160Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,80V64a8,8,0,0,1,8-8H93.3a8.1,8.1,0,0,1,4.8,1.6L128,80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M88,208H39.4a7.4,7.4,0,0,1-7.4-7.4V192'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('160'),
								$elm$svg$Svg$Attributes$y1('208'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('208'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M224,152v48.9a7.1,7.1,0,0,1-7.1,7.1H200'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M168,80h48a8,8,0,0,1,8,8v24'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('32'),
								$elm$svg$Svg$Attributes$y1('120'),
								$elm$svg$Svg$Attributes$x2('32'),
								$elm$svg$Svg$Attributes$y2('152'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,80V64a8,8,0,0,1,8-8H93.3a8.1,8.1,0,0,1,4.8,1.6L128,80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M88,208H39.4a7.4,7.4,0,0,1-7.4-7.4V192'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('160'),
								$elm$svg$Svg$Attributes$y1('208'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('208'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M224,152v48.9a7.1,7.1,0,0,1-7.1,7.1H200'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M168,80h48a8,8,0,0,1,8,8v24'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('32'),
								$elm$svg$Svg$Attributes$y1('120'),
								$elm$svg$Svg$Attributes$x2('32'),
								$elm$svg$Svg$Attributes$y2('152'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,80V64a8,8,0,0,1,8-8H93.3a8.1,8.1,0,0,1,4.8,1.6L128,80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M88,208H39.4a7.4,7.4,0,0,1-7.4-7.4V192'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('160'),
								$elm$svg$Svg$Attributes$y1('208'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('208'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M224,152v48.9a7.1,7.1,0,0,1-7.1,7.1H200'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M168,80h48a8,8,0,0,1,8,8v24'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('32'),
								$elm$svg$Svg$Attributes$y1('120'),
								$elm$svg$Svg$Attributes$x2('32'),
								$elm$svg$Svg$Attributes$y2('152'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $phosphor_icons$phosphor_elm$Phosphor$folderSimpleStar = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M112,208H40a8,8,0,0,1-8-8V64a8,8,0,0,1,8-8H93.3a8.1,8.1,0,0,1,4.8,1.6l27.8,20.8a8.1,8.1,0,0,0,4.8,1.6H216a8,8,0,0,1,8,8v24'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polygon,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('188 198.5 217.7 216 209.6 183.4 236 161.6 201.3 158.9 188 128 174.7 158.9 140 161.6 166.4 183.4 158.3 216 188 198.5'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polygon,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('188 198.5 217.7 216 209.6 183.4 236 161.6 201.3 158.9 188 128 174.7 158.9 140 161.6 166.4 183.4 158.3 216 188 198.5'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M120,208H40a8,8,0,0,1-8-8V64a8,8,0,0,1,8-8H93.3a8.1,8.1,0,0,1,4.8,1.6l27.8,20.8a8.1,8.1,0,0,0,4.8,1.6H216a8,8,0,0,1,8,8v32'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polygon,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('188 198.5 217.7 216 209.6 183.4 236 161.6 201.3 158.9 188 128 174.7 158.9 140 161.6 166.4 183.4 158.3 216 188 198.5'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M40,64V200h80a8,8,0,0,1,0,16H40a16,16,0,0,1-16-16V64A16,16,0,0,1,40,48H93.3a15.6,15.6,0,0,1,9.6,3.2L130.7,72H216a16,16,0,0,1,16,16v32a8,8,0,0,1-16,0V88H130.7a15.6,15.6,0,0,1-9.6-3.2L93.3,64Zm203.6,95.2a8.1,8.1,0,0,0-7-5.6l-29.8-2.3-11.5-26.5a8,8,0,0,0-14.6,0l-11.5,26.5-29.8,2.3a8.1,8.1,0,0,0-4.5,14.2l22.5,18.6-6.8,27.7a7.9,7.9,0,0,0,3,8.3,8,8,0,0,0,8.8.5L188,207.8l25.6,15.1a8.7,8.7,0,0,0,4.1,1.1,7.4,7.4,0,0,0,4.7-1.6,7.9,7.9,0,0,0,3-8.3l-6.8-27.7,22.5-18.6A8,8,0,0,0,243.6,159.2Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M120,208H40a8,8,0,0,1-8-8V64a8,8,0,0,1,8-8H93.3a8.1,8.1,0,0,1,4.8,1.6l27.8,20.8a8.1,8.1,0,0,0,4.8,1.6H216a8,8,0,0,1,8,8v32'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polygon,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('188 198.5 217.7 216 209.6 183.4 236 161.6 201.3 158.9 188 128 174.7 158.9 140 161.6 166.4 183.4 158.3 216 188 198.5'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M120,208H40a8,8,0,0,1-8-8V64a8,8,0,0,1,8-8H93.3a8.1,8.1,0,0,1,4.8,1.6l27.8,20.8a8.1,8.1,0,0,0,4.8,1.6H216a8,8,0,0,1,8,8v32'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polygon,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('188 198.5 217.7 216 209.6 183.4 236 161.6 201.3 158.9 188 128 174.7 158.9 140 161.6 166.4 183.4 158.3 216 188 198.5'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M120,208H40a8,8,0,0,1-8-8V64a8,8,0,0,1,8-8H93.3a8.1,8.1,0,0,1,4.8,1.6l27.8,20.8a8.1,8.1,0,0,0,4.8,1.6H216a8,8,0,0,1,8,8v32'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polygon,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('188 198.5 217.7 216 209.6 183.4 236 161.6 201.3 158.9 188 128 174.7 158.9 140 161.6 166.4 183.4 158.3 216 188 198.5'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $phosphor_icons$phosphor_elm$Phosphor$gitBranch = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M68,160v-8a23.9,23.9,0,0,1,24-24h72a23.9,23.9,0,0,0,24-24V96'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('68'),
								$elm$svg$Svg$Attributes$y1('96'),
								$elm$svg$Svg$Attributes$x2('68'),
								$elm$svg$Svg$Attributes$y2('160'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('68'),
								$elm$svg$Svg$Attributes$cy('188'),
								$elm$svg$Svg$Attributes$r('28'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('188'),
								$elm$svg$Svg$Attributes$cy('68'),
								$elm$svg$Svg$Attributes$r('28'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('68'),
								$elm$svg$Svg$Attributes$cy('68'),
								$elm$svg$Svg$Attributes$r('28'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('188'),
								$elm$svg$Svg$Attributes$cy('68'),
								$elm$svg$Svg$Attributes$r('28'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M68,160v-8a23.9,23.9,0,0,1,24-24h72a24,24,0,0,0,24-24V96'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('68'),
								$elm$svg$Svg$Attributes$y1('96'),
								$elm$svg$Svg$Attributes$x2('68'),
								$elm$svg$Svg$Attributes$y2('160'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('68'),
								$elm$svg$Svg$Attributes$cy('188'),
								$elm$svg$Svg$Attributes$r('28'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('188'),
								$elm$svg$Svg$Attributes$cy('68'),
								$elm$svg$Svg$Attributes$r('28'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('68'),
								$elm$svg$Svg$Attributes$cy('68'),
								$elm$svg$Svg$Attributes$r('28'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M224,68a36,36,0,1,0-44,35.1v.9a16,16,0,0,1-16,16H92a32.2,32.2,0,0,0-16,4.3V103.1a36,36,0,1,0-16,0v49.8a36,36,0,1,0,16,0V152a16,16,0,0,1,16-16h72a32.1,32.1,0,0,0,32-32v-.9A36.1,36.1,0,0,0,224,68ZM48,68A20,20,0,1,1,68,88,20.1,20.1,0,0,1,48,68ZM88,188a20,20,0,1,1-20-20A20.1,20.1,0,0,1,88,188Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M68,160v-8a23.9,23.9,0,0,1,24-24h72a23.9,23.9,0,0,0,24-24V96'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('68'),
								$elm$svg$Svg$Attributes$y1('96'),
								$elm$svg$Svg$Attributes$x2('68'),
								$elm$svg$Svg$Attributes$y2('160'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('68'),
								$elm$svg$Svg$Attributes$cy('188'),
								$elm$svg$Svg$Attributes$r('28'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('188'),
								$elm$svg$Svg$Attributes$cy('68'),
								$elm$svg$Svg$Attributes$r('28'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('68'),
								$elm$svg$Svg$Attributes$cy('68'),
								$elm$svg$Svg$Attributes$r('28'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M68,160v-8a23.9,23.9,0,0,1,24-24h72a23.9,23.9,0,0,0,24-24V96'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('68'),
								$elm$svg$Svg$Attributes$y1('96'),
								$elm$svg$Svg$Attributes$x2('68'),
								$elm$svg$Svg$Attributes$y2('160'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('68'),
								$elm$svg$Svg$Attributes$cy('188'),
								$elm$svg$Svg$Attributes$r('28'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('188'),
								$elm$svg$Svg$Attributes$cy('68'),
								$elm$svg$Svg$Attributes$r('28'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('68'),
								$elm$svg$Svg$Attributes$cy('68'),
								$elm$svg$Svg$Attributes$r('28'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('68'),
								$elm$svg$Svg$Attributes$cy('188'),
								$elm$svg$Svg$Attributes$r('28'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('188'),
								$elm$svg$Svg$Attributes$cy('68'),
								$elm$svg$Svg$Attributes$r('28'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('68'),
								$elm$svg$Svg$Attributes$cy('68'),
								$elm$svg$Svg$Attributes$r('28'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M68,160v-8a23.9,23.9,0,0,1,24-24h72a23.9,23.9,0,0,0,24-24V96'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('68'),
								$elm$svg$Svg$Attributes$y1('96'),
								$elm$svg$Svg$Attributes$x2('68'),
								$elm$svg$Svg$Attributes$y2('160'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $phosphor_icons$phosphor_elm$Phosphor$paperclip = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M96,176l95.8-92.2a28,28,0,0,0-39.6-39.6L54.1,142.1a47.9,47.9,0,0,0,67.8,67.8L204,128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M160,80,76.7,164.7a16,16,0,0,0,22.6,22.6L198.6,86.6a32,32,0,0,0-45.2-45.2L54.1,142.1a47.9,47.9,0,0,0,67.8,67.8L204,128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M209.7,122.3a8.1,8.1,0,0,1-.1,11.4l-82,81.9a56,56,0,0,1-79.2-79.2L147.7,35.8a40,40,0,1,1,56.6,56.5L105,192.9A23.8,23.8,0,0,1,88,200a24,24,0,0,1-17-41l83.3-84.6a8,8,0,1,1,11.4,11.2L82.4,170.3A8,8,0,0,0,80,176a8.1,8.1,0,0,0,13.7,5.7L192.9,81A23.8,23.8,0,0,0,200,64a24,24,0,0,0-41-17L59.8,147.7a40,40,0,1,0,56.5,56.6l82-82A8.1,8.1,0,0,1,209.7,122.3Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M160,80,76.7,164.7a16,16,0,0,0,22.6,22.6L198.6,86.6a32,32,0,0,0-45.2-45.2L54.1,142.1a47.9,47.9,0,0,0,67.8,67.8L204,128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M160,80,76.7,164.7a16,16,0,0,0,22.6,22.6L198.6,86.6a32,32,0,0,0-45.2-45.2L54.1,142.1a47.9,47.9,0,0,0,67.8,67.8L204,128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M160,80,76.7,164.7a16,16,0,0,0,22.6,22.6L198.6,86.6a32,32,0,0,0-45.2-45.2L54.1,142.1a47.9,47.9,0,0,0,67.8,67.8L204,128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $phosphor_icons$phosphor_elm$Phosphor$penNib = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('116'),
								$elm$svg$Svg$Attributes$cy('140'),
								$elm$svg$Svg$Attributes$r('24'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,224l139.5-23.2a7.9,7.9,0,0,0,6.1-5.1L200,136,120,56,60.3,78.4a8.1,8.1,0,0,0-5.1,6.2Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M200,136l26.3-26.3a8,8,0,0,0,0-11.4L157.7,29.7a8,8,0,0,0-11.4,0L120,56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('32'),
								$elm$svg$Svg$Attributes$y1('224'),
								$elm$svg$Svg$Attributes$x2('99'),
								$elm$svg$Svg$Attributes$y2('157'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M120,56,60.3,78.4a8.1,8.1,0,0,0-5.1,6.2L32,224l139.5-23.2a7.9,7.9,0,0,0,6.1-5.1L200,136Zm-4,104a20,20,0,1,1,20-20A20.1,20.1,0,0,1,116,160Z'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('116'),
								$elm$svg$Svg$Attributes$cy('140'),
								$elm$svg$Svg$Attributes$r('20'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('32'),
								$elm$svg$Svg$Attributes$y1('224'),
								$elm$svg$Svg$Attributes$x2('101.9'),
								$elm$svg$Svg$Attributes$y2('154.1'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,224l139.5-23.2a7.9,7.9,0,0,0,6.1-5.1L200,136,120,56,60.3,78.4a8.1,8.1,0,0,0-5.1,6.2Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M200,136l26.3-26.3a8,8,0,0,0,0-11.4L157.7,29.7a8,8,0,0,0-11.4,0L120,56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M232,92.7,163.3,24a16.1,16.1,0,0,0-22.6,0L115.6,49.1,57.5,70.9A15.9,15.9,0,0,0,47.4,83.2L26.6,207.8a4,4,0,0,0,6.8,3.5l55-55.1A31.7,31.7,0,0,1,84,140a32,32,0,1,1,32,32,31.7,31.7,0,0,1-16.2-4.4l-55.1,55a4,4,0,0,0,3.5,6.8l124.6-20.7a16.2,16.2,0,0,0,12.3-10.2l21.8-58.1L232,115.3a15.9,15.9,0,0,0,0-22.6Zm-32,32L131.3,56,152,35.3,220.7,104Z')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('116'),
								$elm$svg$Svg$Attributes$cy('140'),
								$elm$svg$Svg$Attributes$r('16')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('116'),
								$elm$svg$Svg$Attributes$cy('140'),
								$elm$svg$Svg$Attributes$r('20'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('32'),
								$elm$svg$Svg$Attributes$y1('224'),
								$elm$svg$Svg$Attributes$x2('101.9'),
								$elm$svg$Svg$Attributes$y2('154.1'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,224l139.5-23.2a7.9,7.9,0,0,0,6.1-5.1L200,136,120,56,60.3,78.4a8.1,8.1,0,0,0-5.1,6.2Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M200,136l26.3-26.3a8,8,0,0,0,0-11.4L157.7,29.7a8,8,0,0,0-11.4,0L120,56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('116'),
								$elm$svg$Svg$Attributes$cy('140'),
								$elm$svg$Svg$Attributes$r('20'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('32'),
								$elm$svg$Svg$Attributes$y1('224'),
								$elm$svg$Svg$Attributes$x2('101.9'),
								$elm$svg$Svg$Attributes$y2('154.1'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,224l139.5-23.2a7.9,7.9,0,0,0,6.1-5.1L200,136,120,56,60.3,78.4a8.1,8.1,0,0,0-5.1,6.2Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M200,136l26.3-26.3a8,8,0,0,0,0-11.4L157.7,29.7a8,8,0,0,0-11.4,0L120,56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('116'),
								$elm$svg$Svg$Attributes$cy('140'),
								$elm$svg$Svg$Attributes$r('20'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('32'),
								$elm$svg$Svg$Attributes$y1('224'),
								$elm$svg$Svg$Attributes$x2('101.9'),
								$elm$svg$Svg$Attributes$y2('154.1'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,224l139.5-23.2a7.9,7.9,0,0,0,6.1-5.1L200,136,120,56,60.3,78.4a8.1,8.1,0,0,0-5.1,6.2Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M200,136l26.3-26.3a8,8,0,0,0,0-11.4L157.7,29.7a8,8,0,0,0-11.4,0L120,56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $phosphor_icons$phosphor_elm$Phosphor$pizza = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M23.4,75.7a7.9,7.9,0,0,1,2.2-10.8,175.8,175.8,0,0,1,204.8,0,7.9,7.9,0,0,1,2.2,10.8L134.7,229.4a7.9,7.9,0,0,1-13.4,0Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M41.1,103.4a135.9,135.9,0,0,1,173.8,0'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M159.4,190.7a28,28,0,1,1,29.1-45.8'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M59.7,132.7A28,28,0,0,1,108,152a28.1,28.1,0,0,1-19.1,26.6'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M144,156a28,28,0,0,1,49.1-18.4l26.2-41a144.1,144.1,0,0,0-182.6,0l21.2,33.3A28,28,0,1,1,84,168H82.1l39.2,61.5a7.9,7.9,0,0,0,13.4,0l29.6-46.5A28,28,0,0,1,144,156Z'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M23.4,75.7a7.9,7.9,0,0,1,2.2-10.8,175.8,175.8,0,0,1,204.8,0,7.9,7.9,0,0,1,2.2,10.8L134.7,229.4a7.9,7.9,0,0,1-13.4,0Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M36.7,96.6a144.1,144.1,0,0,1,182.6,0'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M164.3,182.9a28,28,0,1,1,28.8-45.3'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M57.9,129.8A28,28,0,1,1,84,168H82.2'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M239.3,80a16,16,0,0,0-4.2-21.6,183.9,183.9,0,0,0-214.2,0A16,16,0,0,0,16.7,80h0l97.8,153.7a16,16,0,0,0,27,0l58.4-91.8h.1ZM23.4,75.7ZM128,225.1l-32.5-51A36,36,0,0,0,84,104a35.6,35.6,0,0,0-26,11.1L47.4,98.5a135.8,135.8,0,0,1,161.2,0l-17.3,27.1a36,36,0,0,0-38.6,60.8Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M23.4,75.7a7.9,7.9,0,0,1,2.2-10.8,175.8,175.8,0,0,1,204.8,0,7.9,7.9,0,0,1,2.2,10.8L134.7,229.4a7.9,7.9,0,0,1-13.4,0Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M36.7,96.6a144.1,144.1,0,0,1,182.6,0'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M164.3,182.9a28,28,0,1,1,28.8-45.3'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M57.9,129.8A28,28,0,1,1,84,168H82.2'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M23.4,75.7a7.9,7.9,0,0,1,2.2-10.8,175.8,175.8,0,0,1,204.8,0,7.9,7.9,0,0,1,2.2,10.8L134.7,229.4a7.9,7.9,0,0,1-13.4,0Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M36.7,96.6a144.1,144.1,0,0,1,182.6,0'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M164.3,182.9a28,28,0,1,1,28.8-45.3'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M57.9,129.8A28,28,0,1,1,84,168H82.2'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M23.4,75.7a7.9,7.9,0,0,1,2.2-10.8,175.8,175.8,0,0,1,204.8,0,7.9,7.9,0,0,1,2.2,10.8L134.7,229.4a7.9,7.9,0,0,1-13.4,0Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M36.7,96.6a144.1,144.1,0,0,1,182.6,0'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M164.3,182.9a28,28,0,1,1,28.8-45.3'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M57.9,129.8A28,28,0,1,1,84,168H82.2'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $phosphor_icons$phosphor_elm$Phosphor$target = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('128'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('224'),
								$elm$svg$Svg$Attributes$y2('32'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M161.9,94.1a47.9,47.9,0,1,0,0,67.8,47.1,47.1,0,0,0,13.2-24.4'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M195.9,60.1A96.1,96.1,0,1,0,218,94.6'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('128'),
								$elm$svg$Svg$Attributes$cy('128'),
								$elm$svg$Svg$Attributes$r('48'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('128'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('224'),
								$elm$svg$Svg$Attributes$y2('32'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M195.9,60.1a96.2,96.2,0,1,0,18.7,26.5'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M161.9,94.1a47.9,47.9,0,1,0,14,31.2'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M211.2,79.4a8,8,0,0,0-3.8,10.7,88,88,0,1,1-23.1-29.7L161.5,83.2a56,56,0,0,0-73.1,84.4h0a56,56,0,0,0,95.5-42.8,7.9,7.9,0,0,0-8.4-7.5,8,8,0,0,0-7.6,8.4,40,40,0,0,1-62,35.7l24-24,37.7-37.7h0l62.1-62a8.1,8.1,0,0,0-11.4-11.4L195.7,49A104,104,0,0,0,54.5,54.5a103.8,103.8,0,0,0,0,147,103.8,103.8,0,0,0,147,0A104,104,0,0,0,221.9,83.2,8,8,0,0,0,211.2,79.4Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('128'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('224'),
								$elm$svg$Svg$Attributes$y2('32'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M195.9,60.1a96.2,96.2,0,1,0,18.7,26.5'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M161.9,94.1a47.9,47.9,0,1,0,14,31.2'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('128'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('224'),
								$elm$svg$Svg$Attributes$y2('32'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M195.9,60.1a96.2,96.2,0,1,0,18.7,26.5'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M161.9,94.1a47.9,47.9,0,1,0,14,31.2'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('128'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('224'),
								$elm$svg$Svg$Attributes$y2('32'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M195.9,60.1a96.2,96.2,0,1,0,18.7,26.5'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M161.9,94.1a47.9,47.9,0,1,0,14,31.2'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $elm$svg$Svg$ellipse = $elm$svg$Svg$trustedNode('ellipse');
var $elm$svg$Svg$Attributes$ry = _VirtualDom_attribute('ry');
var $phosphor_icons$phosphor_elm$Phosphor$toiletPaper = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('64'),
								$elm$svg$Svg$Attributes$cy('120'),
								$elm$svg$Svg$Attributes$r('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$ellipse,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('64'),
								$elm$svg$Svg$Attributes$cy('120'),
								$elm$svg$Svg$Attributes$rx('40'),
								$elm$svg$Svg$Attributes$ry('80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M104,120v88a8,8,0,0,0,8,8H224a8,8,0,0,0,8-8V120c0-44.2-17.9-80-40-80H64'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('104'),
								$elm$svg$Svg$Attributes$y1('120'),
								$elm$svg$Svg$Attributes$x2('124'),
								$elm$svg$Svg$Attributes$y2('120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('164'),
								$elm$svg$Svg$Attributes$y1('120'),
								$elm$svg$Svg$Attributes$x2('172'),
								$elm$svg$Svg$Attributes$y2('120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('212'),
								$elm$svg$Svg$Attributes$y1('120'),
								$elm$svg$Svg$Attributes$x2('232'),
								$elm$svg$Svg$Attributes$y2('120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$ellipse,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('64'),
								$elm$svg$Svg$Attributes$cy('120'),
								$elm$svg$Svg$Attributes$rx('40'),
								$elm$svg$Svg$Attributes$ry('80'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('64'),
								$elm$svg$Svg$Attributes$cy('120'),
								$elm$svg$Svg$Attributes$r('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$ellipse,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('64'),
								$elm$svg$Svg$Attributes$cy('120'),
								$elm$svg$Svg$Attributes$rx('40'),
								$elm$svg$Svg$Attributes$ry('80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M104,120v88a8,8,0,0,0,8,8H224a8,8,0,0,0,8-8V120c0-44.2-17.9-80-40-80H64'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('104'),
								$elm$svg$Svg$Attributes$y1('120'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('160'),
								$elm$svg$Svg$Attributes$y1('120'),
								$elm$svg$Svg$Attributes$x2('176'),
								$elm$svg$Svg$Attributes$y2('120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('208'),
								$elm$svg$Svg$Attributes$y1('120'),
								$elm$svg$Svg$Attributes$x2('232'),
								$elm$svg$Svg$Attributes$y2('120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M184,120a8,8,0,0,1-8,8H160a8,8,0,0,1,0-16h16A8,8,0,0,1,184,120Zm56,0v88a16,16,0,0,1-16,16H112a16,16,0,0,1-16-16V186.3C87.4,200.4,76.2,208,64,208c-13.9,0-26.5-9.9-35.4-27.9C20.5,163.9,16,142.6,16,120s4.5-43.9,12.6-60.1C37.5,41.9,50.1,32,64,32H192c13.9,0,26.5,9.9,35.4,27.9C235.5,76.1,240,97.4,240,120ZM76,120a12,12,0,1,0-12,12A12,12,0,0,0,76,120Zm148,8H208a8,8,0,0,1,0-16h15.8c-2-38.1-17.6-64-31.8-64H92.1a65,65,0,0,1,7.3,11.9c7.2,14.2,11.5,32.5,12.4,52.1H128a8,8,0,0,1,0,16H112v80H224Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('64'),
								$elm$svg$Svg$Attributes$cy('120'),
								$elm$svg$Svg$Attributes$r('10')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$ellipse,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('64'),
								$elm$svg$Svg$Attributes$cy('120'),
								$elm$svg$Svg$Attributes$rx('40'),
								$elm$svg$Svg$Attributes$ry('80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M104,120v88a8,8,0,0,0,8,8H224a8,8,0,0,0,8-8V120c0-44.2-17.9-80-40-80H64'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('104'),
								$elm$svg$Svg$Attributes$y1('120'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('160'),
								$elm$svg$Svg$Attributes$y1('120'),
								$elm$svg$Svg$Attributes$x2('176'),
								$elm$svg$Svg$Attributes$y2('120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('208'),
								$elm$svg$Svg$Attributes$y1('120'),
								$elm$svg$Svg$Attributes$x2('232'),
								$elm$svg$Svg$Attributes$y2('120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('64'),
								$elm$svg$Svg$Attributes$cy('120'),
								$elm$svg$Svg$Attributes$r('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$ellipse,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('64'),
								$elm$svg$Svg$Attributes$cy('120'),
								$elm$svg$Svg$Attributes$rx('40'),
								$elm$svg$Svg$Attributes$ry('80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M104,120v88a8,8,0,0,0,8,8H224a8,8,0,0,0,8-8V120c0-44.2-17.9-80-40-80H64'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('104'),
								$elm$svg$Svg$Attributes$y1('120'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('160'),
								$elm$svg$Svg$Attributes$y1('120'),
								$elm$svg$Svg$Attributes$x2('176'),
								$elm$svg$Svg$Attributes$y2('120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('208'),
								$elm$svg$Svg$Attributes$y1('120'),
								$elm$svg$Svg$Attributes$x2('232'),
								$elm$svg$Svg$Attributes$y2('120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('64'),
								$elm$svg$Svg$Attributes$cy('120'),
								$elm$svg$Svg$Attributes$r('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$ellipse,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('64'),
								$elm$svg$Svg$Attributes$cy('120'),
								$elm$svg$Svg$Attributes$rx('40'),
								$elm$svg$Svg$Attributes$ry('80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M104,120v88a8,8,0,0,0,8,8H224a8,8,0,0,0,8-8V120c0-44.2-17.9-80-40-80H64'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('104'),
								$elm$svg$Svg$Attributes$y1('120'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('160'),
								$elm$svg$Svg$Attributes$y1('120'),
								$elm$svg$Svg$Attributes$x2('176'),
								$elm$svg$Svg$Attributes$y2('120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('208'),
								$elm$svg$Svg$Attributes$y1('120'),
								$elm$svg$Svg$Attributes$x2('232'),
								$elm$svg$Svg$Attributes$y2('120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $phosphor_icons$phosphor_elm$Phosphor$trash = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('216'),
								$elm$svg$Svg$Attributes$y1('60'),
								$elm$svg$Svg$Attributes$x2('40'),
								$elm$svg$Svg$Attributes$y2('60'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('104'),
								$elm$svg$Svg$Attributes$y1('104'),
								$elm$svg$Svg$Attributes$x2('104'),
								$elm$svg$Svg$Attributes$y2('168'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('152'),
								$elm$svg$Svg$Attributes$y1('104'),
								$elm$svg$Svg$Attributes$x2('152'),
								$elm$svg$Svg$Attributes$y2('168'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M200,60V208a8,8,0,0,1-8,8H64a8,8,0,0,1-8-8V60'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M168,60V36a16,16,0,0,0-16-16H104A16,16,0,0,0,88,36V60'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M200,56V208a8,8,0,0,1-8,8H64a8,8,0,0,1-8-8V56Z'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('216'),
								$elm$svg$Svg$Attributes$y1('56'),
								$elm$svg$Svg$Attributes$x2('40'),
								$elm$svg$Svg$Attributes$y2('56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('104'),
								$elm$svg$Svg$Attributes$y1('104'),
								$elm$svg$Svg$Attributes$x2('104'),
								$elm$svg$Svg$Attributes$y2('168'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('152'),
								$elm$svg$Svg$Attributes$y1('104'),
								$elm$svg$Svg$Attributes$x2('152'),
								$elm$svg$Svg$Attributes$y2('168'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M200,56V208a8,8,0,0,1-8,8H64a8,8,0,0,1-8-8V56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M168,56V40a16,16,0,0,0-16-16H104A16,16,0,0,0,88,40V56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M216,48H176V40a24.1,24.1,0,0,0-24-24H104A24.1,24.1,0,0,0,80,40v8H40a8,8,0,0,0,0,16h8V208a16,16,0,0,0,16,16H192a16,16,0,0,0,16-16V64h8a8,8,0,0,0,0-16ZM112,168a8,8,0,0,1-16,0V104a8,8,0,0,1,16,0Zm48,0a8,8,0,0,1-16,0V104a8,8,0,0,1,16,0Zm0-120H96V40a8,8,0,0,1,8-8h48a8,8,0,0,1,8,8Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('216'),
								$elm$svg$Svg$Attributes$y1('56'),
								$elm$svg$Svg$Attributes$x2('40'),
								$elm$svg$Svg$Attributes$y2('56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('104'),
								$elm$svg$Svg$Attributes$y1('104'),
								$elm$svg$Svg$Attributes$x2('104'),
								$elm$svg$Svg$Attributes$y2('168'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('152'),
								$elm$svg$Svg$Attributes$y1('104'),
								$elm$svg$Svg$Attributes$x2('152'),
								$elm$svg$Svg$Attributes$y2('168'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M200,56V208a8,8,0,0,1-8,8H64a8,8,0,0,1-8-8V56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M168,56V40a16,16,0,0,0-16-16H104A16,16,0,0,0,88,40V56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('216'),
								$elm$svg$Svg$Attributes$y1('56'),
								$elm$svg$Svg$Attributes$x2('40'),
								$elm$svg$Svg$Attributes$y2('56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('104'),
								$elm$svg$Svg$Attributes$y1('104'),
								$elm$svg$Svg$Attributes$x2('104'),
								$elm$svg$Svg$Attributes$y2('168'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('152'),
								$elm$svg$Svg$Attributes$y1('104'),
								$elm$svg$Svg$Attributes$x2('152'),
								$elm$svg$Svg$Attributes$y2('168'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M200,56V208a8,8,0,0,1-8,8H64a8,8,0,0,1-8-8V56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M168,56V40a16,16,0,0,0-16-16H104A16,16,0,0,0,88,40V56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('216'),
								$elm$svg$Svg$Attributes$y1('56'),
								$elm$svg$Svg$Attributes$x2('40'),
								$elm$svg$Svg$Attributes$y2('56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('104'),
								$elm$svg$Svg$Attributes$y1('104'),
								$elm$svg$Svg$Attributes$x2('104'),
								$elm$svg$Svg$Attributes$y2('168'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('152'),
								$elm$svg$Svg$Attributes$y1('104'),
								$elm$svg$Svg$Attributes$x2('152'),
								$elm$svg$Svg$Attributes$y2('168'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M200,56V208a8,8,0,0,1-8,8H64a8,8,0,0,1-8-8V56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M168,56V40a16,16,0,0,0-16-16H104A16,16,0,0,0,88,40V56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $phosphor_icons$phosphor_elm$Phosphor$tray = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$rect,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x('40'),
								$elm$svg$Svg$Attributes$y('40'),
								$elm$svg$Svg$Attributes$width('176'),
								$elm$svg$Svg$Attributes$height('176'),
								$elm$svg$Svg$Attributes$rx('8'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M40,156H76.7a7.9,7.9,0,0,1,5.6,2.3l19.4,19.4a7.9,7.9,0,0,0,5.6,2.3h41.4a7.9,7.9,0,0,0,5.6-2.3l19.4-19.4a7.9,7.9,0,0,1,5.6-2.3H216'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M76.7,160a7.9,7.9,0,0,1,5.6,2.3l19.4,19.4a7.9,7.9,0,0,0,5.6,2.3h41.4a7.9,7.9,0,0,0,5.6-2.3l19.4-19.4a7.9,7.9,0,0,1,5.6-2.3H216V48a8,8,0,0,0-8-8H48a8,8,0,0,0-8,8V160Z'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$rect,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x('40'),
								$elm$svg$Svg$Attributes$y('40'),
								$elm$svg$Svg$Attributes$width('176'),
								$elm$svg$Svg$Attributes$height('176'),
								$elm$svg$Svg$Attributes$rx('8'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M40,160H76.7a7.9,7.9,0,0,1,5.6,2.3l19.4,19.4a7.9,7.9,0,0,0,5.6,2.3h41.4a7.9,7.9,0,0,0,5.6-2.3l19.4-19.4a7.9,7.9,0,0,1,5.6-2.3H216'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M208,32H48A16,16,0,0,0,32,48V159.9h0V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32Zm0,176H48V168H76.7L96,187.3a15.9,15.9,0,0,0,11.3,4.7h41.4a15.9,15.9,0,0,0,11.3-4.7L179.3,168H208v40Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$rect,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x('40'),
								$elm$svg$Svg$Attributes$y('40'),
								$elm$svg$Svg$Attributes$width('176'),
								$elm$svg$Svg$Attributes$height('176'),
								$elm$svg$Svg$Attributes$rx('8'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M40,160H76.7a7.9,7.9,0,0,1,5.6,2.3l19.4,19.4a7.9,7.9,0,0,0,5.6,2.3h41.4a7.9,7.9,0,0,0,5.6-2.3l19.4-19.4a7.9,7.9,0,0,1,5.6-2.3H216'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$rect,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x('40'),
								$elm$svg$Svg$Attributes$y('40'),
								$elm$svg$Svg$Attributes$width('176'),
								$elm$svg$Svg$Attributes$height('176'),
								$elm$svg$Svg$Attributes$rx('8'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M40,160H76.7a7.9,7.9,0,0,1,5.6,2.3l19.4,19.4a7.9,7.9,0,0,0,5.6,2.3h41.4a7.9,7.9,0,0,0,5.6-2.3l19.4-19.4a7.9,7.9,0,0,1,5.6-2.3H216'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$rect,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x('40'),
								$elm$svg$Svg$Attributes$y('40'),
								$elm$svg$Svg$Attributes$width('176'),
								$elm$svg$Svg$Attributes$height('176'),
								$elm$svg$Svg$Attributes$rx('8'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M40,160H76.7a7.9,7.9,0,0,1,5.6,2.3l19.4,19.4a7.9,7.9,0,0,0,5.6,2.3h41.4a7.9,7.9,0,0,0,5.6-2.3l19.4-19.4a7.9,7.9,0,0,1,5.6-2.3H216'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $author$project$Main$phosphorsymbols = _List_fromArray(
	[
		_Utils_Tuple2(
		'unread',
		_Utils_Tuple2($phosphor_icons$phosphor_elm$Phosphor$envelopeSimple, $phosphor_icons$phosphor_elm$Phosphor$Regular)),
		_Utils_Tuple2(
		'inbox',
		_Utils_Tuple2($phosphor_icons$phosphor_elm$Phosphor$tray, $phosphor_icons$phosphor_elm$Phosphor$Regular)),
		_Utils_Tuple2(
		'flagged',
		_Utils_Tuple2($phosphor_icons$phosphor_elm$Phosphor$flag, $phosphor_icons$phosphor_elm$Phosphor$Regular)),
		_Utils_Tuple2(
		'delete',
		_Utils_Tuple2($phosphor_icons$phosphor_elm$Phosphor$trash, $phosphor_icons$phosphor_elm$Phosphor$Regular)),
		_Utils_Tuple2(
		'deleted',
		_Utils_Tuple2($phosphor_icons$phosphor_elm$Phosphor$trash, $phosphor_icons$phosphor_elm$Phosphor$Regular)),
		_Utils_Tuple2(
		'spam',
		_Utils_Tuple2($phosphor_icons$phosphor_elm$Phosphor$toiletPaper, $phosphor_icons$phosphor_elm$Phosphor$Regular)),
		_Utils_Tuple2(
		'archive',
		_Utils_Tuple2($phosphor_icons$phosphor_elm$Phosphor$fileDotted, $phosphor_icons$phosphor_elm$Phosphor$Regular)),
		_Utils_Tuple2(
		'delete-completely',
		_Utils_Tuple2($phosphor_icons$phosphor_elm$Phosphor$trash, $phosphor_icons$phosphor_elm$Phosphor$Regular)),
		_Utils_Tuple2(
		'revisionreply',
		_Utils_Tuple2($phosphor_icons$phosphor_elm$Phosphor$gitBranch, $phosphor_icons$phosphor_elm$Phosphor$Regular)),
		_Utils_Tuple2(
		'draftversion',
		_Utils_Tuple2($phosphor_icons$phosphor_elm$Phosphor$arrowSquareOut, $phosphor_icons$phosphor_elm$Phosphor$Regular)),
		_Utils_Tuple2(
		'todo',
		_Utils_Tuple2($phosphor_icons$phosphor_elm$Phosphor$target, $phosphor_icons$phosphor_elm$Phosphor$Regular)),
		_Utils_Tuple2(
		'attachment',
		_Utils_Tuple2($phosphor_icons$phosphor_elm$Phosphor$paperclip, $phosphor_icons$phosphor_elm$Phosphor$Regular)),
		_Utils_Tuple2(
		'signed',
		_Utils_Tuple2($phosphor_icons$phosphor_elm$Phosphor$penNib, $phosphor_icons$phosphor_elm$Phosphor$Regular)),
		_Utils_Tuple2(
		'replied',
		_Utils_Tuple2($phosphor_icons$phosphor_elm$Phosphor$arrowBendDownLeft, $phosphor_icons$phosphor_elm$Phosphor$Regular)),
		_Utils_Tuple2(
		'passed',
		_Utils_Tuple2($phosphor_icons$phosphor_elm$Phosphor$arrowBendDownRight, $phosphor_icons$phosphor_elm$Phosphor$Regular)),
		_Utils_Tuple2(
		'movemail',
		_Utils_Tuple2($phosphor_icons$phosphor_elm$Phosphor$arrowFatLinesRight, $phosphor_icons$phosphor_elm$Phosphor$Regular)),
		_Utils_Tuple2(
		'relevant',
		_Utils_Tuple2($phosphor_icons$phosphor_elm$Phosphor$folderSimpleStar, $phosphor_icons$phosphor_elm$Phosphor$Regular)),
		_Utils_Tuple2(
		'irrelevant',
		_Utils_Tuple2($phosphor_icons$phosphor_elm$Phosphor$folderSimpleDotted, $phosphor_icons$phosphor_elm$Phosphor$Regular)),
		_Utils_Tuple2(
		'mayberelevant',
		_Utils_Tuple2($phosphor_icons$phosphor_elm$Phosphor$circleWavyQuestion, $phosphor_icons$phosphor_elm$Phosphor$Regular)),
		_Utils_Tuple2(
		'subject',
		_Utils_Tuple2($phosphor_icons$phosphor_elm$Phosphor$arrowsInCardinal, $phosphor_icons$phosphor_elm$Phosphor$Regular)),
		_Utils_Tuple2(
		'pizza',
		_Utils_Tuple2($phosphor_icons$phosphor_elm$Phosphor$pizza, $phosphor_icons$phosphor_elm$Phosphor$Regular))
	]);
var $author$project$Main$unicodesymbols = _List_fromArray(
	[
		_Utils_Tuple2('highprio', '❗'),
		_Utils_Tuple2('metheval', 'ψΩ'),
		_Utils_Tuple2('statistics', 'Ω'),
		_Utils_Tuple2('science', 'sci'),
		_Utils_Tuple2('bestellung', '🧾'),
		_Utils_Tuple2('mlist', '@'),
		_Utils_Tuple2('mailing', '@'),
		_Utils_Tuple2('sent', '➤'),
		_Utils_Tuple2('junk', '🗑'),
		_Utils_Tuple2('socialmedia', '💬'),
		_Utils_Tuple2('advertisement', '✨'),
		_Utils_Tuple2('freizeit', '🌞'),
		_Utils_Tuple2('video', '📺'),
		_Utils_Tuple2('orglink', '🦄'),
		_Utils_Tuple2('orgmode', '🦄'),
		_Utils_Tuple2('orgthread', '🦄'),
		_Utils_Tuple2('newsletter', '📰'),
		_Utils_Tuple2('news', '📰'),
		_Utils_Tuple2('replied', '↩'),
		_Utils_Tuple2('test', '🚦'),
		_Utils_Tuple2('draft', '✎'),
		_Utils_Tuple2('done', '✅'),
		_Utils_Tuple2('new', '🆕'),
		_Utils_Tuple2('steuer', '%'),
		_Utils_Tuple2('rechnung', '€'),
		_Utils_Tuple2('oldrechnung', '€'),
		_Utils_Tuple2('notmuchsearch', '🔎'),
		_Utils_Tuple2('suche', '🤷'),
		_Utils_Tuple2('biete', '👷'),
		_Utils_Tuple2('vermittelt', '🤝'),
		_Utils_Tuple2('disput', '⚔'),
		_Utils_Tuple2('winwin', '👍')
	]);
var $author$project$Main$nooverlay = {
	symbols: $elm$core$Dict$fromList(
		_Utils_ap(
			A2(
				$elm$core$List$map,
				function (_v0) {
					var t = _v0.a;
					var u = _v0.b;
					return _Utils_Tuple2(
						t,
						$author$project$Symbol$Unicode(u));
				},
				$author$project$Main$unicodesymbols),
			_Utils_ap(
				A2(
					$elm$core$List$map,
					function (_v1) {
						var t = _v1.a;
						var u = _v1.b;
						return _Utils_Tuple2(
							t,
							$author$project$Symbol$Image(
								{description: t, src: u}));
					},
					$author$project$Main$imagesymbols),
				A2(
					$elm$core$List$map,
					function (_v2) {
						var t = _v2.a;
						var _v3 = _v2.b;
						var i = _v3.a;
						var s = _v3.b;
						return _Utils_Tuple2(
							t,
							$author$project$Symbol$IconSymbol(
								A2($author$project$Style$elmPhosphor, i, s)));
					},
					$author$project$Main$phosphorsymbols)))),
	thread_indent: 15
};
var $phosphor_icons$phosphor_elm$Phosphor$Thin = {$: 'Thin'};
var $phosphor_icons$phosphor_elm$Phosphor$envelope = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('224 56 128 144 32 56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,56H224a0,0,0,0,1,0,0V192a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V56a0,0,0,0,1,0,0Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('110.5'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('34.5'),
								$elm$svg$Svg$Attributes$y2('197.7'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('221.5'),
								$elm$svg$Svg$Attributes$y1('197.7'),
								$elm$svg$Svg$Attributes$x2('145.5'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polygon,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('224 56 128 144 32 56 224 56'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('224 56 128 144 32 56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,56H224a0,0,0,0,1,0,0V192a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V56A0,0,0,0,1,32,56Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('110.5'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('34.5'),
								$elm$svg$Svg$Attributes$y2('197.7'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('221.5'),
								$elm$svg$Svg$Attributes$y1('197.7'),
								$elm$svg$Svg$Attributes$x2('145.5'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M224,48H32a8,8,0,0,0-8,8V192a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A8,8,0,0,0,224,48ZM98.7,128,40,181.8V74.2Zm11.8,10.9,12.1,11a8,8,0,0,0,10.8,0l12.1-11L203.4,192H52.6ZM157.3,128,216,74.2V181.8Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('224 56 128 144 32 56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,56H224a0,0,0,0,1,0,0V192a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V56A0,0,0,0,1,32,56Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('110.5'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('34.5'),
								$elm$svg$Svg$Attributes$y2('197.7'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('221.5'),
								$elm$svg$Svg$Attributes$y1('197.7'),
								$elm$svg$Svg$Attributes$x2('145.5'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('224 56 128 144 32 56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,56H224a0,0,0,0,1,0,0V192a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V56A0,0,0,0,1,32,56Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('110.5'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('34.5'),
								$elm$svg$Svg$Attributes$y2('197.7'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('221.5'),
								$elm$svg$Svg$Attributes$y1('197.7'),
								$elm$svg$Svg$Attributes$x2('145.5'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('224 56 128 144 32 56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,56H224a0,0,0,0,1,0,0V192a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V56A0,0,0,0,1,32,56Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('110.5'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('34.5'),
								$elm$svg$Svg$Attributes$y2('197.7'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('221.5'),
								$elm$svg$Svg$Attributes$y1('197.7'),
								$elm$svg$Svg$Attributes$x2('145.5'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $elm$svg$Svg$Attributes$style = _VirtualDom_attribute('style');
var $Holmusk$elmoji$Styles$categoryIcon = $elm$svg$Svg$Attributes$style('margin: 5px 7px 5px 6px; cursor: pointer;');
var $elm$svg$Svg$Attributes$xmlSpace = A2(_VirtualDom_attributeNS, 'http://www.w3.org/XML/1998/namespace', 'xml:space');
var $Holmusk$elmoji$Icons$helperFun = F2(
	function (d_attributes, style) {
		return A2(
			$elm$svg$Svg$svg,
			A2(
				$elm$core$List$cons,
				$Holmusk$elmoji$Styles$categoryIcon,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$xmlSpace('http://www.w3.org/2000/svg'),
						$elm$svg$Svg$Attributes$viewBox('0 0 24 24'),
						$elm$svg$Svg$Attributes$width('24'),
						$elm$svg$Svg$Attributes$height('24')
					])),
			A2(
				$elm$core$List$map,
				function (path_attribute) {
					return A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[path_attribute, style]),
						_List_Nil);
				},
				d_attributes));
	});
var $Holmusk$elmoji$Icons$people_path = _List_fromArray(
	[
		$elm$svg$Svg$Attributes$d('M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0m0 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10'),
		$elm$svg$Svg$Attributes$d('M8 7a2 2 0 1 0-.001 3.999A2 2 0 0 0 8 7M16 7a2 2 0 1 0-.001 3.999A2 2 0 0 0 16 7M15.232 15c-.693 1.195-1.87 2-3.349 2-1.477 0-2.655-.805-3.347-2H15m3-2H6a6 6 0 1 0 12 0')
	]);
var $Holmusk$elmoji$Icons$people = _Utils_Tuple2(
	{
		emojis: _List_fromArray(
			['grinning', 'grin', 'joy', 'rolling_on_the_floor_laughing', 'smiley', 'smile', 'sweat_smile', 'laughing', 'wink', 'blush', 'yum', 'sunglasses', 'heart_eyes', 'kissing_heart', 'kissing', 'kissing_smiling_eyes', 'kissing_closed_eyes', 'relaxed', 'slightly_smiling_face', 'hugging_face', 'star-struck', 'thinking_face', 'face_with_raised_eyebrow', 'neutral_face', 'expressionless', 'no_mouth', 'face_with_rolling_eyes', 'smirk', 'persevere', 'disappointed_relieved', 'open_mouth', 'zipper_mouth_face', 'hushed', 'sleepy', 'tired_face', 'sleeping', 'relieved', 'stuck_out_tongue', 'stuck_out_tongue_winking_eye', 'stuck_out_tongue_closed_eyes', 'drooling_face', 'unamused', 'sweat', 'pensive', 'confused', 'upside_down_face', 'money_mouth_face', 'astonished', 'white_frowning_face', 'slightly_frowning_face', 'confounded', 'disappointed', 'worried', 'triumph', 'cry', 'sob', 'frowning', 'anguished', 'fearful', 'weary', 'exploding_head', 'grimacing', 'cold_sweat', 'scream', 'flushed', 'zany_face', 'dizzy_face', 'rage', 'angry', 'face_with_symbols_on_mouth', 'mask', 'face_with_thermometer', 'face_with_head_bandage', 'nauseated_face', 'face_vomiting', 'sneezing_face', 'innocent', 'face_with_cowboy_hat', 'clown_face', 'lying_face', 'shushing_face', 'face_with_hand_over_mouth', 'face_with_monocle', 'nerd_face', 'smiling_imp', 'imp', 'japanese_ogre', 'japanese_goblin', 'skull', 'skull_and_crossbones', 'ghost', 'alien', 'space_invader', 'robot_face', 'hankey', 'smiley_cat', 'smile_cat', 'joy_cat', 'heart_eyes_cat', 'smirk_cat', 'kissing_cat', 'scream_cat', 'crying_cat_face', 'pouting_cat', 'see_no_evil', 'hear_no_evil', 'speak_no_evil', 'baby', 'child', 'boy', 'girl', 'adult', 'man', 'woman', 'older_adult', 'older_man', 'older_woman', 'male-doctor', 'female-doctor', 'male-student', 'female-student', 'male-teacher', 'female-teacher', 'male-judge', 'female-judge', 'male-farmer', 'female-farmer', 'male-cook', 'female-cook', 'male-mechanic', 'female-mechanic', 'male-factory-worker', 'female-factory-worker', 'male-office-worker', 'female-office-worker', 'male-scientist', 'female-scientist', 'male-technologist', 'female-technologist', 'male-singer', 'female-singer', 'male-artist', 'female-artist', 'male-pilot', 'female-pilot', 'male-astronaut', 'female-astronaut', 'male-firefighter', 'female-firefighter', 'cop', 'male-police-officer', 'female-police-officer', 'sleuth_or_spy', 'male-detective', 'female-detective', 'guardsman', 'male-guard', 'female-guard', 'construction_worker', 'male-construction-worker', 'female-construction-worker', 'prince', 'princess', 'man_with_turban', 'man-wearing-turban', 'woman-wearing-turban', 'man_with_gua_pi_mao', 'person_with_headscarf', 'bearded_person', 'person_with_blond_hair', 'blond-haired-man', 'blond-haired-woman', 'man_in_tuxedo', 'bride_with_veil', 'pregnant_woman', 'breast-feeding', 'angel', 'santa', 'mrs_claus', 'mage', 'female_mage', 'male_mage', 'fairy', 'female_fairy', 'male_fairy', 'vampire', 'female_vampire', 'male_vampire', 'merperson', 'mermaid', 'merman', 'elf', 'female_elf', 'male_elf', 'genie', 'female_genie', 'male_genie', 'zombie', 'female_zombie', 'male_zombie', 'person_frowning', 'man-frowning', 'woman-frowning', 'person_with_pouting_face', 'man-pouting', 'woman-pouting', 'no_good', 'man-gesturing-no', 'woman-gesturing-no', 'ok_woman', 'man-gesturing-ok', 'woman-gesturing-ok', 'information_desk_person', 'man-tipping-hand', 'woman-tipping-hand', 'raising_hand', 'man-raising-hand', 'woman-raising-hand', 'bow', 'man-bowing', 'woman-bowing', 'face_palm', 'man-facepalming', 'woman-facepalming', 'shrug', 'man-shrugging', 'woman-shrugging', 'massage', 'man-getting-massage', 'woman-getting-massage', 'haircut', 'man-getting-haircut', 'woman-getting-haircut', 'walking', 'man-walking', 'woman-walking', 'runner', 'man-running', 'woman-running', 'dancer', 'man_dancing', 'dancers', 'man-with-bunny-ears-partying', 'woman-with-bunny-ears-partying', 'person_in_steamy_room', 'woman_in_steamy_room', 'man_in_steamy_room', 'person_climbing', 'woman_climbing', 'man_climbing', 'person_in_lotus_position', 'woman_in_lotus_position', 'man_in_lotus_position', 'bath', 'sleeping_accommodation', 'man_in_business_suit_levitating', 'speaking_head_in_silhouette', 'bust_in_silhouette', 'busts_in_silhouette', 'fencer', 'horse_racing', 'skier', 'snowboarder', 'golfer', 'man-golfing', 'woman-golfing', 'surfer', 'man-surfing', 'woman-surfing', 'rowboat', 'man-rowing-boat', 'woman-rowing-boat', 'swimmer', 'man-swimming', 'woman-swimming', 'person_with_ball', 'man-bouncing-ball', 'woman-bouncing-ball', 'weight_lifter', 'man-lifting-weights', 'woman-lifting-weights', 'bicyclist', 'man-biking', 'woman-biking', 'mountain_bicyclist', 'man-mountain-biking', 'woman-mountain-biking', 'racing_car', 'racing_motorcycle', 'person_doing_cartwheel', 'man-cartwheeling', 'woman-cartwheeling', 'wrestlers', 'man-wrestling', 'woman-wrestling', 'water_polo', 'man-playing-water-polo', 'woman-playing-water-polo', 'handball', 'man-playing-handball', 'woman-playing-handball', 'juggling', 'man-juggling', 'woman-juggling', 'couple', 'two_men_holding_hands', 'two_women_holding_hands', 'couplekiss', 'woman-kiss-man', 'man-kiss-man', 'woman-kiss-woman', 'couple_with_heart', 'woman-heart-man', 'man-heart-man', 'woman-heart-woman', 'family', 'man-woman-boy', 'man-woman-girl', 'man-woman-girl-boy', 'man-woman-boy-boy', 'man-woman-girl-girl', 'man-man-boy', 'man-man-girl', 'man-man-girl-boy', 'man-man-boy-boy', 'man-man-girl-girl', 'woman-woman-boy', 'woman-woman-girl', 'woman-woman-girl-boy', 'woman-woman-boy-boy', 'woman-woman-girl-girl', 'man-boy', 'man-boy-boy', 'man-girl', 'man-girl-boy', 'man-girl-girl', 'woman-boy', 'woman-boy-boy', 'woman-girl', 'woman-girl-boy', 'woman-girl-girl', 'selfie', 'muscle', 'point_left', 'point_right', 'point_up', 'point_up_2', 'middle_finger', 'point_down', 'v', 'crossed_fingers', 'spock-hand', 'the_horns', 'call_me_hand', 'raised_hand_with_fingers_splayed', 'hand', 'ok_hand', '+1', '-1', 'fist', 'facepunch', 'left-facing_fist', 'right-facing_fist', 'raised_back_of_hand', 'wave', 'i_love_you_hand_sign', 'writing_hand', 'clap', 'open_hands', 'raised_hands', 'palms_up_together', 'pray', 'handshake', 'nail_care', 'ear', 'nose', 'footprints', 'eyes', 'eye', 'eye-in-speech-bubble', 'brain', 'tongue', 'lips', 'kiss', 'cupid', 'heart', 'heartbeat', 'broken_heart', 'two_hearts', 'sparkling_heart', 'heartpulse', 'blue_heart', 'green_heart', 'yellow_heart', 'orange_heart', 'purple_heart', 'black_heart', 'gift_heart', 'revolving_hearts', 'heart_decoration', 'heavy_heart_exclamation_mark_ornament', 'love_letter', 'zzz', 'anger', 'bomb', 'boom', 'sweat_drops', 'dash', 'dizzy', 'speech_balloon', 'left_speech_bubble', 'right_anger_bubble', 'thought_balloon', 'hole', 'eyeglasses', 'dark_sunglasses', 'necktie', 'shirt', 'jeans', 'scarf', 'gloves', 'coat', 'socks', 'dress', 'kimono', 'bikini', 'womans_clothes', 'purse', 'handbag', 'pouch', 'shopping_bags', 'school_satchel', 'mans_shoe', 'athletic_shoe', 'high_heel', 'sandal', 'boot', 'crown', 'womans_hat', 'tophat', 'mortar_board', 'billed_cap', 'helmet_with_white_cross', 'prayer_beads', 'lipstick', 'ring', 'gem']),
		id: 'people',
		name: 'Smileys & People'
	},
	$Holmusk$elmoji$Icons$helperFun($Holmusk$elmoji$Icons$people_path));
var $Holmusk$elmoji$EmojiPicker$init = function (config) {
	return {activeCategory: $Holmusk$elmoji$Icons$people.a, closeOnSelect: config.closeOnSelect, hidden: true, offsetX: config.offsetX, offsetY: config.offsetY, skinColor: 'none'};
};
var $author$project$Main$pickerConfig = {closeOnSelect: true, offsetX: 0, offsetY: 0};
var $author$project$Main$noselection = {
	emojiModel: $Holmusk$elmoji$EmojiPicker$init($author$project$Main$pickerConfig),
	id: $elm$core$Maybe$Nothing,
	selected_query: $author$project$Query$AnyMessage,
	tag_input: '',
	users: _List_fromArray(
		[
			{
			avatar: $author$project$Symbol$Image(
				{description: 'handelsregister', src: 'https://www.handelsregister.de/rp_web/javax.faces.resource/images/favicon.ico.xhtml'}),
			from: $author$project$Query$Request($elm$core$Maybe$Nothing),
			login: 'handelsregister'
		},
			{
			avatar: $author$project$Symbol$Image(
				{description: 'enron', src: 'https://1000marcas.net/wp-content/uploads/2021/06/Logo-Enron-1536x960.jpg'}),
			from: $author$project$Query$Request($elm$core$Maybe$Nothing),
			login: 'enron'
		},
			{
			avatar: $author$project$Symbol$IconSymbol(
				A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$envelope, $phosphor_icons$phosphor_elm$Phosphor$Thin)),
			from: $author$project$Query$Request($elm$core$Maybe$Nothing),
			login: 'notmuch'
		},
			{
			avatar: $author$project$Symbol$Image(
				{description: 'elmail', src: 'https://elm-lang.org/favicon.ico'}),
			from: $author$project$Query$Request($elm$core$Maybe$Nothing),
			login: 'elmail'
		}
		]),
	viewcol: 0
};
var $author$project$DictShow$singleton = F2(
	function (idf, _v0) {
		var i = _v0.a;
		var x = _v0.b;
		return A3(
			$author$project$DictShow$iTree,
			idf,
			i,
			$author$project$Lazy$Tree$singleton(x));
	});
var $author$project$Main$singleton = $author$project$DictShow$singleton($author$project$Main$keyFromEmailType);
var $author$project$Query$tag = function (x) {
	return $author$project$Query$Leaf(
		$author$project$Query$Tag(x));
};
var $author$project$Main$init = F3(
	function (_v0, url, key) {
		var model = {
			dangling_edits: _List_Nil,
			display: $author$project$ElmailUrl$Searches(
				_List_fromArray(
					[
						_List_fromArray(
						[0]),
						_List_fromArray(
						[1])
					])),
			error: $elm$core$Maybe$Nothing,
			from: $author$project$ElmailUrl$settings.me,
			key: key,
			loading: false,
			overlay: $author$project$Main$nooverlay,
			queryAt: _List_Nil,
			savingQueries: $elm$core$Set$empty,
			searches: $author$project$DictShow$fromTree(
				$author$project$Main$singleton(
					_Utils_Tuple2(
						0,
						$elm$core$Maybe$Just(
							_Utils_Tuple2(
								false,
								A2(
									$author$project$ElmailUrl$Search,
									{
										grid: _Utils_Tuple2($author$project$Grid$WrappedRow, false),
										id: 'notmuchsearch',
										matching: $author$project$Query$Request($elm$core$Maybe$Nothing),
										name: 'Saved Searches',
										operator: $author$project$Query$And,
										queryeditor: {
											contextquery: $author$project$Query$AnyMessage,
											prefix: 'notmuchsearch',
											querytree: $author$project$QueryEditor$editor(
												$author$project$Query$tag('notmuchsearch'))
										},
										requester: A2($pd_andy$elm_limiter$Limiter$debounce, $author$project$Main$RequesterMsg, $author$project$ElmailUrl$settings.delay),
										status: $author$project$Query$Request($elm$core$Maybe$Nothing),
										subqueries: _List_Nil,
										tagchanges: _List_Nil,
										user: $elm$core$Maybe$Nothing,
										view: $author$project$ElmailUrl$SearchHidden
									},
									$elm$core$Maybe$Nothing)))))),
			selection: $author$project$Main$noselection
		};
		return A2(
			$elm$core$Tuple$mapSecond,
			A2($elm$core$Basics$composeR, $author$project$Lazy$LList$toList, $elm$core$Platform$Cmd$batch),
			A2(
				$author$project$Main$modelCmdRoot,
				$author$project$Main$chain(
					_List_fromArray(
						[$author$project$Main$cmdSearchShow, $author$project$Main$cmdCount])),
				A2($author$project$Main$initFromUrl, url, model)));
	});
var $elm$core$Platform$Sub$batch = _Platform_batch;
var $author$project$Main$subscriptions = function (_v0) {
	return $elm$core$Platform$Sub$batch(_List_Nil);
};
var $author$project$Main$AddressMsg = function (a) {
	return {$: 'AddressMsg', a: a};
};
var $author$project$Main$CardClicked = {$: 'CardClicked'};
var $author$project$API$GotNewReplyHeader = F2(
	function (a, b) {
		return {$: 'GotNewReplyHeader', a: a, b: b};
	});
var $author$project$Main$QueryAt = function (a) {
	return {$: 'QueryAt', a: a};
};
var $author$project$Main$QueryEditorMsg = function (a) {
	return {$: 'QueryEditorMsg', a: a};
};
var $author$project$Main$SelectQuery = function (a) {
	return {$: 'SelectQuery', a: a};
};
var $author$project$Notmuch$Unposted = function (a) {
	return {$: 'Unposted', a: a};
};
var $elm$core$Task$onError = _Scheduler_onError;
var $elm$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2(
					$elm$core$Task$onError,
					A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
						$elm$core$Result$Err),
					A2(
						$elm$core$Task$andThen,
						A2(
							$elm$core$Basics$composeL,
							A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
							$elm$core$Result$Ok),
						task))));
	});
var $author$project$Access$content = {
	get: function ($) {
		return $.content;
	},
	set: F2(
		function (value, h) {
			return _Utils_update(
				h,
				{content: value});
		})
};
var $author$project$Lazy$Tree$Zipper$current = A2($elm$core$Basics$composeL, $author$project$Lazy$Tree$item, $author$project$Lazy$Tree$Zipper$getTree);
var $author$project$Show$current = function (x) {
	return $author$project$Lazy$Tree$Zipper$current(x).b;
};
var $author$project$DictShow$current = function (_v0) {
	var d = _v0.a;
	var z = _v0.b;
	return A2(
		$author$project$DictShow$mapDict,
		d,
		$author$project$Show$current(z));
};
var $author$project$Lazy$Tree$Zipper$delete = function (_v0) {
	var zipperBreadcrumbs = _v0.b;
	if (!zipperBreadcrumbs.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var left = zipperBreadcrumbs.a.a.left;
		var parent = zipperBreadcrumbs.a.a.parent;
		var right = zipperBreadcrumbs.a.a.right;
		var tail = zipperBreadcrumbs.b;
		return $elm$core$Maybe$Just(
			A2(
				$author$project$Lazy$Tree$Zipper$Zipper,
				A2(
					$author$project$Lazy$Tree$Tree,
					parent,
					A2($author$project$Lazy$LList$append, left, right)),
				tail));
	}
};
var $author$project$DictShow$delete = function (_v0) {
	var d = _v0.a;
	var z = _v0.b;
	return A2(
		$elm$core$Maybe$map,
		$author$project$DictShow$withDict(d),
		$author$project$Lazy$Tree$Zipper$delete(z));
};
var $author$project$Query$Bcc = {$: 'Bcc'};
var $author$project$Query$Cc = {$: 'Cc'};
var $author$project$Query$To = {$: 'To'};
var $author$project$Main$draftEmailFromDraftEditor = F2(
	function (v, mailversion) {
		var reinfo = F2(
			function (re, e) {
				return _Utils_Tuple2(
					_List_fromArray(
						[e.id]),
					_Utils_ap(re, e.header.subject));
			});
		var plist = function (dir) {
			return A2(
				$elm$core$List$filterMap,
				function (p) {
					return _Utils_eq(p.dir, dir) ? $elm$core$Maybe$Just(p.person) : $elm$core$Maybe$Nothing;
				},
				v.participants.chips);
		};
		var _v0 = A2(
			$elm$core$Maybe$withDefault,
			_Utils_Tuple2(_List_Nil, ''),
			A2(
				$author$project$Access$withDefaultMaybe,
				A2(
					$elm$core$Maybe$map,
					reinfo(''),
					mailversion),
				A2(
					$elm$core$Maybe$map,
					reinfo('re: '),
					v.inreplyto)));
		var id = _v0.a;
		var subject = _v0.b;
		return {
			bcc: A2(
				$elm$core$List$cons,
				v.from,
				plist($author$project$Query$Bcc)),
			cc: plist($author$project$Query$Cc),
			content: v.content,
			filename: _List_Nil,
			from: v.from,
			id: $elm$core$String$fromInt(
				$elm$time$Time$posixToMillis(v.time.timestamp)),
			in_reply_to: id,
			references: _List_Nil,
			subject: A2($elm$core$Maybe$withDefault, subject, v.subject),
			tags: v.tags,
			to: plist($author$project$Query$To)
		};
	});
var $author$project$Main$emailFromEmailType = function (s) {
	switch (s.$) {
		case 'Email':
			var mail = s.b;
			return $elm$core$Maybe$Just(mail);
		case 'Draft':
			var mail = s.b;
			return mail;
		case 'Search':
			var ns = s.b;
			return ns;
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Lazy$LList$length = A2($elm$core$Basics$composeL, $elm$core$List$length, $author$project$Lazy$LList$toList);
var $author$project$Lazy$Tree$Zipper$setTree = F2(
	function (tree, _v0) {
		var zipperBreadcrumbs = _v0.b;
		return A2($author$project$Lazy$Tree$Zipper$Zipper, tree, zipperBreadcrumbs);
	});
var $author$project$Show$insertFirst = F2(
	function (_v0, z) {
		var _v1 = _v0.a;
		var a = _v1.b;
		var f = _v0.b;
		var d = $author$project$Lazy$Tree$descendants(
			$author$project$Lazy$Tree$Zipper$getTree(z));
		var n = $author$project$Lazy$LList$length(d);
		var d_ = A2(
			$author$project$Lazy$LList$cons,
			A2(
				$author$project$Lazy$Tree$Tree,
				_Utils_Tuple2(n + 1, a),
				f),
			d);
		return A2(
			$author$project$Lazy$Tree$Zipper$setTree,
			A2(
				$author$project$Lazy$Tree$Tree,
				$author$project$Lazy$Tree$Zipper$current(z),
				d_),
			z);
	});
var $elm$core$Dict$foldl = F3(
	function (func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var $elm$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _v0) {
				stepState:
				while (true) {
					var list = _v0.a;
					var result = _v0.b;
					if (!list.b) {
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					} else {
						var _v2 = list.a;
						var lKey = _v2.a;
						var lValue = _v2.b;
						var rest = list.b;
						if (_Utils_cmp(lKey, rKey) < 0) {
							var $temp$rKey = rKey,
								$temp$rValue = rValue,
								$temp$_v0 = _Utils_Tuple2(
								rest,
								A3(leftStep, lKey, lValue, result));
							rKey = $temp$rKey;
							rValue = $temp$rValue;
							_v0 = $temp$_v0;
							continue stepState;
						} else {
							if (_Utils_cmp(lKey, rKey) > 0) {
								return _Utils_Tuple2(
									list,
									A3(rightStep, rKey, rValue, result));
							} else {
								return _Utils_Tuple2(
									rest,
									A4(bothStep, lKey, lValue, rValue, result));
							}
						}
					}
				}
			});
		var _v3 = A3(
			$elm$core$Dict$foldl,
			stepState,
			_Utils_Tuple2(
				$elm$core$Dict$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _v3.a;
		var intermediateResult = _v3.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v4, result) {
					var k = _v4.a;
					var v = _v4.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var $author$project$DictShow$insertFirst = F3(
	function (merge, _v0, _v1) {
		var db = _v0.a;
		var t = _v0.b;
		var da = _v1.a;
		var z = _v1.b;
		return _Utils_Tuple2(
			A6(
				$elm$core$Dict$merge,
				F2(
					function (key, a) {
						return A2($elm$core$Dict$insert, key, a);
					}),
				F3(
					function (key, a, b) {
						return A2(
							$elm$core$Dict$insert,
							key,
							A2(merge, a, b));
					}),
				F2(
					function (key, b) {
						return A2($elm$core$Dict$insert, key, b);
					}),
				da,
				db,
				$elm$core$Dict$empty),
			A2($author$project$Show$insertFirst, t, z));
	});
var $author$project$Main$isModified = function (x) {
	if ((x.$ === 'Draft') && (x.a.$ === 'Unposted')) {
		return true;
	} else {
		return false;
	}
};
var $author$project$Main$replace = F2(
	function (old, _new) {
		var _v0 = _Utils_Tuple2(old, _new);
		_v0$4:
		while (true) {
			switch (_v0.a.$) {
				case 'Thread':
					if (_v0.b.$ === 'Thread') {
						var _v1 = _v0.a;
						var _v2 = _v0.b;
						return _new;
					} else {
						break _v0$4;
					}
				case 'Email':
					if (_v0.b.$ === 'Email') {
						var _v3 = _v0.a;
						var d = _v3.a;
						var e = _v3.b;
						var _v4 = _v0.b;
						var e_ = _v4.b;
						var _v5 = e.content;
						if ((_v5.$ === 'Present') && (_v5.a.$ === 'Just')) {
							return A2(
								$author$project$ElmailUrl$Email,
								d,
								_Utils_update(
									e_,
									{content: e.content}));
						} else {
							return A2($author$project$ElmailUrl$Email, d, e_);
						}
					} else {
						break _v0$4;
					}
				case 'Search':
					var _v6 = _v0.a;
					return old;
				case 'Draft':
					var _v7 = _v0.a;
					var e = _v7.b;
					if ($author$project$Main$isModified(old)) {
						return old;
					} else {
						var _v8 = A2(
							$elm$core$Maybe$map,
							function ($) {
								return $.content;
							},
							e);
						if (((_v8.$ === 'Just') && (_v8.a.$ === 'Present')) && (_v8.a.a.$ === 'Just')) {
							return old;
						} else {
							return _new;
						}
					}
				default:
					break _v0$4;
			}
		}
		return _new;
	});
var $author$project$Main$insertFirst = $author$project$DictShow$insertFirst($author$project$Main$replace);
var $author$project$Main$justEval = function (f) {
	return function (a) {
		return A2($elm$core$Maybe$map, f, a);
	};
};
var $elm$browser$Browser$Navigation$load = _Browser_load;
var $author$project$Query$request = function (x) {
	switch (x.$) {
		case 'Request':
			return x;
		case 'Requested':
			var y = x.a;
			return $author$project$Query$Request(y);
		default:
			var y = x.a;
			return $author$project$Query$Request(y);
	}
};
var $author$project$Lazy$Tree$Zipper$updateItem = F2(
	function (fc, _v0) {
		var tree = _v0.a;
		var zipperBreadcrumbs = _v0.b;
		return A2(
			$author$project$Lazy$Tree$Zipper$Zipper,
			A2(
				$author$project$Lazy$Tree$Tree,
				fc(
					$author$project$Lazy$Tree$item(tree)),
				$author$project$Lazy$Tree$descendants(tree)),
			zipperBreadcrumbs);
	});
var $author$project$Show$updateItem = F2(
	function (f, z) {
		return A2(
			$author$project$Lazy$Tree$Zipper$updateItem,
			function (_v0) {
				var i = _v0.a;
				var v = _v0.b;
				return _Utils_Tuple2(
					i,
					f(v));
			},
			z);
	});
var $author$project$DictShow$updateItem = F2(
	function (f, _v0) {
		var d = _v0.a;
		var z = _v0.b;
		var b_d = A2(
			$elm$core$Maybe$andThen,
			function (_v1) {
				var b = _v1.a;
				var id = _v1.b;
				return A2(
					$elm$core$Maybe$map,
					function (_v2) {
						var b_ = _v2.a;
						var uv = _v2.b;
						return _Utils_Tuple2(
							A3($elm$core$Dict$insert, id, uv, d),
							A2(
								$author$project$Show$updateItem,
								$elm$core$Basics$always(
									$elm$core$Maybe$Just(
										_Utils_Tuple2(b_, id))),
								z));
					},
					f(
						A2(
							$elm$core$Maybe$map,
							function (a) {
								return _Utils_Tuple2(b, a);
							},
							A2($author$project$DictShow$getid, d, id))));
			},
			$author$project$Show$current(z));
		return A2(
			$elm$core$Maybe$withDefault,
			_Utils_Tuple2(d, z),
			b_d);
	});
var $author$project$Main$login = F3(
	function (u, _v0, z) {
		return _Utils_Tuple2(
			A2(
				$author$project$DictShow$updateItem,
				$author$project$Main$justEval(
					function (e) {
						if (e.b.$ === 'Search') {
							var b = e.a;
							var _v2 = e.b;
							var d = _v2.a;
							var ns = _v2.b;
							return _Utils_Tuple2(
								b,
								A2(
									$author$project$ElmailUrl$Search,
									_Utils_update(
										d,
										{
											status: $author$project$Query$request(d.status),
											user: u
										}),
									ns));
						} else {
							return e;
						}
					}),
				z),
			$elm$core$Platform$Cmd$none);
	});
var $author$project$Main$mapAtRPath = F3(
	function (f, path, t) {
		return function (r) {
			if (r.$ === 'Ok') {
				var x = r.a;
				return f(x);
			} else {
				return t;
			}
		}(
			A2(
				$author$project$DictShow$openRPath,
				path,
				$author$project$DictShow$root(t)));
	});
var $elm$core$Tuple$mapBoth = F3(
	function (funcA, funcB, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			funcA(x),
			funcB(y));
	});
var $author$project$Main$mapDraftEditor = F3(
	function (f, _v0, e) {
		if ((e.$ === 'Just') && (e.a.b.$ === 'Draft')) {
			var _v2 = e.a;
			var b = _v2.a;
			var _v3 = _v2.b;
			var d = _v3.a;
			var mail = _v3.b;
			return _Utils_Tuple2(
				$elm$core$Maybe$Just(
					_Utils_Tuple2(
						b,
						A2(
							$author$project$ElmailUrl$Draft,
							f(d),
							mail))),
				$elm$core$Platform$Cmd$none);
		} else {
			return _Utils_Tuple2(e, $elm$core$Platform$Cmd$none);
		}
	});
var $author$project$DictShow$open = F2(
	function (f, _v0) {
		var d = _v0.a;
		var z = _v0.b;
		return A2(
			$elm$core$Maybe$map,
			$author$project$DictShow$withDict(d),
			A2(
				$author$project$Lazy$Tree$Zipper$open,
				function (_v1) {
					var i = _v1.a;
					var n = _v1.b;
					return f(
						_Utils_Tuple2(
							i,
							A2($author$project$DictShow$mapDict, d, n)));
				},
				z));
	});
var $author$project$Show$tupleIndex = F2(
	function (i, x) {
		return _Utils_eq(i, x.a);
	});
var $author$project$DictShow$up = function (_v0) {
	var d = _v0.a;
	var z = _v0.b;
	return A2(
		$elm$core$Maybe$map,
		$author$project$DictShow$withDict(d),
		$author$project$Lazy$Tree$Zipper$up(z));
};
var $author$project$Main$mapOnIndexPath = F3(
	function (f, path, x) {
		if (!path.b) {
			return $elm$core$Maybe$Just(
				A2(f, _List_Nil, x));
		} else {
			var l = path.a;
			var rest = path.b;
			return A2(
				$elm$core$Maybe$map,
				f(path),
				A2(
					$elm$core$Maybe$andThen,
					$author$project$DictShow$up,
					A2(
						$elm$core$Maybe$andThen,
						A2($author$project$Main$mapOnIndexPath, f, rest),
						A2(
							$author$project$DictShow$open,
							$author$project$Show$tupleIndex(l),
							x))));
		}
	});
var $author$project$Main$mapOnRPath = F3(
	function (f, path, x) {
		return A3(
			$author$project$Main$mapOnIndexPath,
			f,
			$author$project$Show$zpath(path),
			$author$project$DictShow$root(x));
	});
var $author$project$Main$mapSearchDisplay = F3(
	function (f, _v0, e) {
		if ((e.$ === 'Just') && (e.a.b.$ === 'Search')) {
			var _v2 = e.a;
			var b = _v2.a;
			var _v3 = _v2.b;
			var d = _v3.a;
			var s = _v3.b;
			return _Utils_Tuple2(
				$elm$core$Maybe$Just(
					_Utils_Tuple2(
						b,
						A2(
							$author$project$ElmailUrl$Search,
							f(d),
							s))),
				$elm$core$Platform$Cmd$none);
		} else {
			return _Utils_Tuple2(e, $elm$core$Platform$Cmd$none);
		}
	});
var $elm$time$Time$Name = function (a) {
	return {$: 'Name', a: a};
};
var $elm$time$Time$Offset = function (a) {
	return {$: 'Offset', a: a};
};
var $elm$time$Time$Zone = F2(
	function (a, b) {
		return {$: 'Zone', a: a, b: b};
	});
var $elm$time$Time$customZone = $elm$time$Time$Zone;
var $elm$time$Time$now = _Time_now($elm$time$Time$millisToPosix);
var $author$project$Notmuch$Posted = function (a) {
	return {$: 'Posted', a: a};
};
var $author$project$ListChange$Remove = function (a) {
	return {$: 'Remove', a: a};
};
var $author$project$ListChange$UpAdd = function (a) {
	return {$: 'UpAdd', a: a};
};
var $author$project$API$RemoteChangedTags = F3(
	function (a, b, c) {
		return {$: 'RemoteChangedTags', a: a, b: b, c: c};
	});
var $elm$http$Http$expectString = function (toMsg) {
	return A2(
		$elm$http$Http$expectStringResponse,
		toMsg,
		$elm$http$Http$resolve($elm$core$Result$Ok));
};
var $author$project$API$changeTags = F2(
	function (session, c) {
		return $elm$http$Http$post(
			{
				body: $elm$http$Http$jsonBody(
					$elm$json$Json$Encode$object(
						A2(
							$author$project$API$withSession,
							session,
							_List_fromArray(
								[
									_Utils_Tuple2(
									'q',
									$elm$json$Json$Encode$string(
										$author$project$Query$queryString(session.query))),
									_Utils_Tuple2(
									'tags',
									A2(
										$elm$json$Json$Encode$list,
										function (t) {
											return $elm$json$Json$Encode$object(
												function () {
													if (t.$ === 'UpAdd') {
														var tt = t.a;
														return _List_fromArray(
															[
																_Utils_Tuple2(
																'action',
																$elm$json$Json$Encode$string('+')),
																_Utils_Tuple2(
																'tag',
																$elm$json$Json$Encode$string(tt))
															]);
													} else {
														var tt = t.a;
														return _List_fromArray(
															[
																_Utils_Tuple2(
																'action',
																$elm$json$Json$Encode$string('-')),
																_Utils_Tuple2(
																'tag',
																$elm$json$Json$Encode$string(tt))
															]);
													}
												}());
										},
										c))
								])))),
				expect: $elm$http$Http$expectString(
					A2($author$project$API$RemoteChangedTags, session, c)),
				url: _Utils_ap(
					$author$project$API$server.host,
					A2(
						$elm$url$Url$Builder$absolute,
						_List_fromArray(
							['api/tag']),
						_List_Nil))
			});
	});
var $author$project$QueryEditor$queryString = function (x) {
	return $author$project$Query$queryString(
		$author$project$QueryEditor$query(x));
};
var $author$project$API$SavedDraft = F2(
	function (a, b) {
		return {$: 'SavedDraft', a: a, b: b};
	});
var $author$project$Person$nameEmailString = function (user) {
	var u = A2(
		$elm$core$Maybe$map,
		function (name) {
			return A2($elm$core$String$contains, ',', name) ? ('\"' + (name + '\"')) : name;
		},
		user.name);
	var e_ = A2(
		$elm$core$Maybe$map,
		function (m) {
			return m.local + ('@' + m.domain);
		},
		$elm$core$List$head(user.mailbox));
	var _v0 = _Utils_Tuple2(u, e_);
	if (_v0.b.$ === 'Just') {
		if (_v0.a.$ === 'Just') {
			var qname = _v0.a.a;
			var e = _v0.b.a;
			return $elm$core$Maybe$Just(qname + (' <' + (e + '>')));
		} else {
			var e = _v0.b.a;
			return $elm$core$Maybe$Just(e);
		}
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Notmuch$wraplg = function (x) {
	return '<' + (x + '>');
};
var $author$project$API$encodeMailBody = function (reply) {
	return _List_fromArray(
		[
			_Utils_Tuple2(
			'in_reply_to',
			$elm$json$Json$Encode$string(
				A2(
					$elm$core$String$join,
					' ',
					A2($elm$core$List$map, $author$project$Notmuch$wraplg, reply.in_reply_to)))),
			_Utils_Tuple2(
			'references',
			$elm$json$Json$Encode$string(
				A2(
					$elm$core$String$join,
					' ',
					A2($elm$core$List$map, $author$project$Notmuch$wraplg, reply.references)))),
			_Utils_Tuple2(
			'message_id',
			$elm$json$Json$Encode$string(reply.id)),
			_Utils_Tuple2(
			'subject',
			$elm$json$Json$Encode$string(reply.subject)),
			_Utils_Tuple2(
			'body',
			$elm$json$Json$Encode$string(reply.content)),
			_Utils_Tuple2(
			'from',
			$elm$json$Json$Encode$string(
				A2(
					$elm$core$Maybe$withDefault,
					'',
					$author$project$Person$nameEmailString(reply.from)))),
			_Utils_Tuple2(
			'to',
			A2(
				$elm$json$Json$Encode$list,
				$elm$json$Json$Encode$string,
				A2($elm$core$List$filterMap, $author$project$Person$nameEmailString, reply.to))),
			_Utils_Tuple2(
			'cc',
			A2(
				$elm$json$Json$Encode$list,
				$elm$json$Json$Encode$string,
				A2($elm$core$List$filterMap, $author$project$Person$nameEmailString, reply.cc))),
			_Utils_Tuple2(
			'bcc',
			A2(
				$elm$json$Json$Encode$list,
				$elm$json$Json$Encode$string,
				A2($elm$core$List$filterMap, $author$project$Person$nameEmailString, reply.bcc))),
			_Utils_Tuple2(
			'tags',
			A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, reply.tags)),
			_Utils_Tuple2(
			'filename',
			A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, reply.filename)),
			_Utils_Tuple2(
			'content',
			$elm$json$Json$Encode$string(reply.content))
		]);
};
var $author$project$API$saveReplyQuery = F2(
	function (session, reply) {
		return $elm$http$Http$post(
			{
				body: $elm$http$Http$jsonBody(
					$elm$json$Json$Encode$object(
						A2(
							$author$project$API$withSession,
							session,
							$author$project$API$encodeMailBody(reply)))),
				expect: $elm$http$Http$expectString(
					$author$project$API$SavedDraft(reply)),
				url: $author$project$API$server.host + '/api/save'
			});
	});
var $author$project$Main$postSave = F2(
	function (pa, e) {
		var session = $author$project$Main$aggregateSession(pa);
		var tagOldVersion = function (email) {
			return A2(
				$elm$core$Maybe$withDefault,
				$elm$core$Platform$Cmd$none,
				A2(
					$elm$core$Maybe$map,
					function (e_) {
						return A2(
							$author$project$API$changeTags,
							_Utils_update(
								session,
								{
									query: $author$project$Query$Leaf(
										$author$project$Query$ID(
											$author$project$Query$MessageID(e_.id)))
								}),
							_List_fromArray(
								[
									$author$project$ListChange$UpAdd('draftversion'),
									$author$project$ListChange$Remove('new')
								]));
					},
					email));
		};
		var _v0 = function () {
			_v1$2:
			while (true) {
				if (e.$ === 'Just') {
					switch (e.a.b.$) {
						case 'Search':
							var _v2 = e.a;
							var b = _v2.a;
							var _v3 = _v2.b;
							var d = _v3.a;
							var ns = _v3.b;
							return _Utils_Tuple2(
								$elm$core$Result$Ok(
									{
										bcc: _List_Nil,
										cc: _List_Nil,
										content: A2(
											$elm$core$String$join,
											'\n',
											A2(
												$elm$core$List$cons,
												$author$project$QueryEditor$queryString(d.queryeditor.querytree),
												A2(
													$elm$core$List$map,
													$author$project$Query$queryString,
													A2(
														$elm$core$List$map,
														function ($) {
															return $.subquery;
														},
														d.subqueries)))),
										filename: _List_Nil,
										from: A2(
											$elm$core$Maybe$withDefault,
											$author$project$Person$noone,
											A2(
												$elm$core$Maybe$andThen,
												A2(
													$elm$core$Basics$composeR,
													function ($) {
														return $.from;
													},
													$author$project$Query$queryable),
												session.user)),
										id: d.name,
										in_reply_to: _List_Nil,
										references: _List_Nil,
										subject: d.name,
										tags: $author$project$Access$unique(
											A2(
												$elm$core$List$cons,
												'notmuchsearch',
												A2(
													$elm$core$Maybe$withDefault,
													_List_Nil,
													A2(
														$elm$core$Maybe$map,
														function ($) {
															return $.tags;
														},
														ns)))),
										to: _List_Nil
									}),
								$elm$core$Maybe$Just(
									_Utils_Tuple2(
										b,
										A2($author$project$ElmailUrl$Search, d, ns))));
						case 'Draft':
							var _v4 = e.a;
							var b = _v4.a;
							var _v5 = _v4.b;
							var v = _v5.a;
							var email = _v5.b;
							return _Utils_Tuple2(
								$elm$core$Result$Ok(
									A2(
										$author$project$Main$draftEmailFromDraftEditor,
										$author$project$Notmuch$postable(v),
										email)),
								$elm$core$Maybe$Just(
									_Utils_Tuple2(
										b,
										A2(
											$author$project$ElmailUrl$Draft,
											$author$project$Notmuch$Posted(
												$author$project$Notmuch$postable(v)),
											email))));
						default:
							break _v1$2;
					}
				} else {
					break _v1$2;
				}
			}
			return _Utils_Tuple2(
				$elm$core$Result$Err('no draft'),
				e);
		}();
		var payload = _v0.a;
		var e__ = _v0.b;
		return _Utils_Tuple2(
			e__,
			A2(
				$elm$core$Result$withDefault,
				$elm$core$Platform$Cmd$none,
				A2(
					$elm$core$Result$map,
					A2(
						$elm$core$Basics$composeR,
						$author$project$API$saveReplyQuery(session),
						$elm$core$Platform$Cmd$map(
							$author$project$Main$ApiMsg(
								A2(
									$elm$core$Platform$Cmd$map,
									$author$project$Main$ApiMsg($elm$core$Platform$Cmd$none),
									tagOldVersion(
										A2(
											$elm$core$Maybe$andThen,
											A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $author$project$Main$emailFromEmailType),
											e)))))),
					payload)));
	});
var $elm$browser$Browser$Navigation$pushUrl = _Browser_pushUrl;
var $author$project$API$NewMail = function (a) {
	return {$: 'NewMail', a: a};
};
var $author$project$API$quickpoll = function (session) {
	return $elm$http$Http$post(
		{
			body: $elm$http$Http$jsonBody(
				$elm$json$Json$Encode$object(
					A2($author$project$API$withSession, session, _List_Nil))),
			expect: $elm$http$Http$expectString($author$project$API$NewMail),
			url: _Utils_ap(
				$author$project$API$server.host,
				A2(
					$elm$url$Url$Builder$absolute,
					_List_fromArray(
						['admin', 'quickpoll']),
					_List_Nil))
		});
};
var $author$project$API$handleJsonResponse = F2(
	function (decoder, response) {
		switch (response.$) {
			case 'BadUrl_':
				var url = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadUrl(url));
			case 'Timeout_':
				return $elm$core$Result$Err($elm$http$Http$Timeout);
			case 'BadStatus_':
				var statusCode = response.a.statusCode;
				return $elm$core$Result$Err(
					$elm$http$Http$BadStatus(statusCode));
			case 'NetworkError_':
				return $elm$core$Result$Err($elm$http$Http$NetworkError);
			default:
				var body = response.b;
				var _v1 = A2($elm$json$Json$Decode$decodeString, decoder, body);
				if (_v1.$ === 'Err') {
					return $elm$core$Result$Err(
						$elm$http$Http$BadBody(body));
				} else {
					var result = _v1.a;
					return $elm$core$Result$Ok(result);
				}
		}
	});
var $elm$http$Http$stringResolver = A2(_Http_expect, '', $elm$core$Basics$identity);
var $elm$core$Task$fail = _Scheduler_fail;
var $elm$http$Http$resultToTask = function (result) {
	if (result.$ === 'Ok') {
		var a = result.a;
		return $elm$core$Task$succeed(a);
	} else {
		var x = result.a;
		return $elm$core$Task$fail(x);
	}
};
var $elm$http$Http$task = function (r) {
	return A3(
		_Http_toTask,
		_Utils_Tuple0,
		$elm$http$Http$resultToTask,
		{allowCookiesFromOtherDomains: false, body: r.body, expect: r.resolver, headers: r.headers, method: r.method, timeout: r.timeout, tracker: $elm$core$Maybe$Nothing, url: r.url});
};
var $author$project$API$replyQuery = function (session) {
	return $elm$http$Http$task(
		{
			body: $elm$http$Http$jsonBody(
				$elm$json$Json$Encode$object(
					A2(
						$author$project$API$withSession,
						session,
						$author$project$API$juliaSearchQueryParameters(
							A2($author$project$Notmuch$SearchRequest, _List_Nil, session.query))))),
			headers: _List_Nil,
			method: 'POST',
			resolver: $elm$http$Http$stringResolver(
				$author$project$API$handleJsonResponse(
					A3(
						$elm$json$Json$Decode$map2,
						$elm$core$Tuple$pair,
						A2($elm$json$Json$Decode$field, 'reply-headers', $author$project$Notmuch$headerDecoder),
						A2($elm$json$Json$Decode$field, 'original', $author$project$Notmuch$emailDecoder)))),
			timeout: $elm$core$Maybe$Nothing,
			url: _Utils_ap(
				$author$project$API$server.host,
				A2(
					$elm$url$Url$Builder$absolute,
					_List_fromArray(
						['json/reply']),
					_List_Nil))
		});
};
var $author$project$Access$mapField = F3(
	function (a, f, x) {
		return A2(
			a.set,
			f(
				a.get(x)),
			x);
	});
var $author$project$Touch$requestMatching = A2($author$project$Access$mapField, $author$project$Access$matching, $author$project$Query$request);
var $author$project$Touch$requestSubqueriesCounts = A2(
	$author$project$Access$mapField,
	$author$project$Access$subqueries,
	$elm$core$List$map($author$project$Touch$requestMatching));
var $author$project$Main$requestTagChangesCounts = function (x) {
	return _Utils_update(
		x,
		{
			tagchanges: A2($elm$core$List$map, $author$project$Touch$requestMatching, x.tagchanges)
		});
};
var $author$project$Main$requestCount = function (x) {
	switch (x.$) {
		case 'Email':
			return x;
		case 'Search':
			var d = x.a;
			var ns = x.b;
			return A2(
				$author$project$ElmailUrl$Search,
				$author$project$Touch$requestMatching(
					$author$project$Touch$requestSubqueriesCounts(
						$author$project$Main$requestTagChangesCounts(d))),
				ns);
		case 'Thread':
			var d = x.a;
			var t = x.b;
			return A2(
				$author$project$ElmailUrl$Thread,
				$author$project$Main$requestTagChangesCounts(d),
				$author$project$Query$request(t));
		case 'Draft':
			var d = x.a;
			var e = x.b;
			return A2($author$project$ElmailUrl$Draft, d, e);
		default:
			return x;
	}
};
var $author$project$Main$requestQuery = function (x) {
	var f = $author$project$Query$request;
	_v0$4:
	while (true) {
		switch (x.$) {
			case 'Thread':
				var d = x.a;
				var s = x.b;
				return A2(
					$author$project$ElmailUrl$Thread,
					_Utils_update(
						d,
						{
							entire_thread: f(d.entire_thread)
						}),
					s);
			case 'Search':
				var d = x.a;
				var s = x.b;
				return A2(
					$author$project$ElmailUrl$Search,
					_Utils_update(
						d,
						{
							status: f(d.status)
						}),
					s);
			case 'Email':
				var d = x.a;
				var e = x.b;
				return A2(
					$author$project$ElmailUrl$Email,
					d,
					_Utils_update(
						e,
						{
							content: f(e.content)
						}));
			case 'Draft':
				if (x.b.$ === 'Just') {
					var d = x.a;
					var e = x.b.a;
					return A2(
						$author$project$ElmailUrl$Draft,
						d,
						$elm$core$Maybe$Just(
							_Utils_update(
								e,
								{
									content: f(e.content)
								})));
				} else {
					break _v0$4;
				}
			default:
				break _v0$4;
		}
	}
	return x;
};
var $author$project$API$sendQuery = F2(
	function (session, reply) {
		return $elm$http$Http$post(
			{
				body: $elm$http$Http$jsonBody(
					$elm$json$Json$Encode$object(
						A2(
							$author$project$API$withSession,
							session,
							$author$project$API$encodeMailBody(reply)))),
				expect: $elm$http$Http$expectString(
					$author$project$API$SavedDraft(reply)),
				url: $author$project$API$server.host + '/api/send'
			});
	});
var $author$project$Notmuch$setPostable = F3(
	function (q, f, x) {
		return q(
			f(
				$author$project$Notmuch$postable(x)));
	});
var $author$project$Access$tags = {
	get: function ($) {
		return $.tags;
	},
	set: F2(
		function (value, h) {
			return _Utils_update(
				h,
				{tags: value});
		})
};
var $elm$core$Result$toMaybe = function (result) {
	if (result.$ === 'Ok') {
		var v = result.a;
		return $elm$core$Maybe$Just(v);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$url$Url$addPort = F2(
	function (maybePort, starter) {
		if (maybePort.$ === 'Nothing') {
			return starter;
		} else {
			var port_ = maybePort.a;
			return starter + (':' + $elm$core$String$fromInt(port_));
		}
	});
var $elm$url$Url$addPrefixed = F3(
	function (prefix, maybeSegment, starter) {
		if (maybeSegment.$ === 'Nothing') {
			return starter;
		} else {
			var segment = maybeSegment.a;
			return _Utils_ap(
				starter,
				_Utils_ap(prefix, segment));
		}
	});
var $elm$url$Url$toString = function (url) {
	var http = function () {
		var _v0 = url.protocol;
		if (_v0.$ === 'Http') {
			return 'http://';
		} else {
			return 'https://';
		}
	}();
	return A3(
		$elm$url$Url$addPrefixed,
		'#',
		url.fragment,
		A3(
			$elm$url$Url$addPrefixed,
			'?',
			url.query,
			_Utils_ap(
				A2(
					$elm$url$Url$addPort,
					url.port_,
					_Utils_ap(http, url.host)),
				url.path)));
};
var $author$project$Access$justIfKeep = F3(
	function (eq, x, y) {
		return A2(
			$author$project$Access$justIf,
			eq(x),
			y);
	});
var $author$project$ListChange$change = F3(
	function (replmaybe, c, t) {
		if (c.$ === 'UpAdd') {
			var x = c.a;
			var _v1 = A3(
				$elm$core$List$foldr,
				F2(
					function (d, _v2) {
						var mc = _v2.a;
						var r = _v2.b;
						return A2(
							$elm$core$Maybe$withDefault,
							_Utils_Tuple2(
								mc,
								A2($elm$core$List$cons, d, r)),
							A2(
								$elm$core$Maybe$map,
								function (h) {
									return _Utils_Tuple2(
										$elm$core$Maybe$Nothing,
										A2($elm$core$List$cons, h, r));
								},
								A2(replmaybe, x, d)));
					}),
				_Utils_Tuple2(
					$elm$core$Maybe$Just(x),
					_List_Nil),
				t);
			var add = _v1.a;
			var upd = _v1.b;
			if (add.$ === 'Just') {
				var a = add.a;
				return A2($elm$core$List$cons, a, upd);
			} else {
				return upd;
			}
		} else {
			var x = c.a;
			return A2(
				$elm$core$List$filterMap,
				function (d) {
					var _v4 = A2(replmaybe, x, d);
					if (_v4.$ === 'Just') {
						return $elm$core$Maybe$Nothing;
					} else {
						return $elm$core$Maybe$Just(d);
					}
				},
				t);
		}
	});
var $author$project$ListChange$listChange = F3(
	function (eq, c, t) {
		return A3(
			$elm$core$List$foldr,
			$author$project$ListChange$change(eq),
			t,
			c);
	});
var $author$project$Query$mapQueryable = F2(
	function (f, x) {
		switch (x.$) {
			case 'Request':
				var y = x.a;
				return $author$project$Query$Request(
					f(y));
			case 'Requested':
				var y = x.a;
				return $author$project$Query$Requested(
					f(y));
			default:
				var y = x.a;
				return $author$project$Query$Present(
					f(y));
		}
	});
var $author$project$Main$fEqual = F2(
	function (f, x) {
		return function (y) {
			return _Utils_eq(
				f(x),
				f(y));
		};
	});
var $author$project$Main$requestSubquery = F2(
	function (e, l) {
		return A3(
			$author$project$ListChange$change,
			F2(
				function (x, y) {
					return A3(
						$author$project$Main$fEqual,
						function ($) {
							return $.subquery;
						},
						x,
						y) ? $elm$core$Maybe$Just(
						$author$project$Touch$requestMatching(y)) : $elm$core$Maybe$Nothing;
				}),
			$author$project$ListChange$UpAdd(e),
			l);
	});
var $author$project$Access$justIfReplace = F3(
	function (eq, x, y) {
		return A2(eq, x, y) ? $elm$core$Maybe$Just(x) : $elm$core$Maybe$Nothing;
	});
var $elm$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			$elm$core$List$any,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, isOkay),
			list);
	});
var $author$project$Tags$none = F2(
	function (l, x) {
		return A2(
			$elm$core$List$all,
			$elm$core$Basics$neq(x),
			l);
	});
var $author$project$Main$tagChangeEqual = F2(
	function (x, y) {
		return _Utils_eq(x.tagchange, y.tagchange);
	});
var $author$project$Main$updateTagChangeRequests = F3(
	function (blacklist, q, _v0) {
		var queries = _v0.a;
		var tagchanges = _v0.b;
		if ((q.$ === 'Leaf') && (q.a.$ === 'Tag')) {
			var tag = q.a.a;
			return A2($author$project$Tags$none, blacklist, tag) ? _Utils_Tuple2(
				queries,
				A3(
					$author$project$ListChange$listChange,
					$author$project$Access$justIfReplace($author$project$Main$tagChangeEqual),
					_List_fromArray(
						[
							$author$project$ListChange$UpAdd(
							{
								matching: $author$project$Query$Request($elm$core$Maybe$Nothing),
								tagchange: tag
							}),
							$author$project$ListChange$UpAdd(
							{
								matching: $author$project$Query$Request($elm$core$Maybe$Nothing),
								tagchange: tag
							})
						]),
					tagchanges)) : _Utils_Tuple2(
				A2($elm$core$List$cons, q, queries),
				tagchanges);
		} else {
			return _Utils_Tuple2(
				A2($elm$core$List$cons, q, queries),
				tagchanges);
		}
	});
var $author$project$Main$touchSubquery = F3(
	function (blacklist, q, e) {
		var removeTags = function (ns) {
			if ((q.$ === 'Leaf') && (q.a.$ === 'Tag')) {
				var t = q.a.a;
				return _Utils_update(
					ns,
					{
						tags: A3(
							$author$project$ListChange$listChange,
							$author$project$Access$justIfKeep($elm$core$Basics$eq),
							_List_fromArray(
								[
									$author$project$ListChange$Remove(t)
								]),
							ns.tags)
					});
			} else {
				return ns;
			}
		};
		switch (e.$) {
			case 'Search':
				var d = e.a;
				var ns = e.b;
				var _v1 = A3(
					$author$project$Main$updateTagChangeRequests,
					blacklist,
					q,
					_Utils_Tuple2(_List_Nil, d.tagchanges));
				var nontagqueries = _v1.a;
				var tagchanges = _v1.b;
				return A2(
					$author$project$ElmailUrl$Search,
					_Utils_update(
						d,
						{
							subqueries: A2(
								$elm$core$Maybe$withDefault,
								d.subqueries,
								A2(
									$elm$core$Maybe$map,
									function (q_) {
										return A2(
											$author$project$Main$requestSubquery,
											{
												matching: $author$project$Query$Request($elm$core$Maybe$Nothing),
												subquery: q_
											},
											d.subqueries);
									},
									$elm$core$List$head(nontagqueries))),
							tagchanges: tagchanges
						}),
					ns);
			case 'Thread':
				var d = e.a;
				var ns = e.b;
				var _v2 = A3(
					$author$project$Main$updateTagChangeRequests,
					blacklist,
					q,
					_Utils_Tuple2(_List_Nil, d.tagchanges));
				var tagchanges = _v2.b;
				return A2(
					$author$project$ElmailUrl$Thread,
					_Utils_update(
						d,
						{tagchanges: tagchanges}),
					A2($author$project$Query$mapQueryable, removeTags, ns));
			default:
				return e;
		}
	});
var $pd_andy$elm_limiter$Limiter$Internals$Closed = {$: 'Closed'};
var $pd_andy$elm_limiter$Limiter$Internals$EmitIfSettled = function (a) {
	return {$: 'EmitIfSettled', a: a};
};
var $pd_andy$elm_limiter$Limiter$Internals$Reopen = {$: 'Reopen'};
var $pd_andy$elm_limiter$Limiter$Internals$emit = function (msg) {
	return A2(
		$elm$core$Task$perform,
		$elm$core$Basics$identity,
		$elm$core$Task$succeed(msg));
};
var $elm$core$Process$sleep = _Process_sleep;
var $pd_andy$elm_limiter$Limiter$Internals$emitAfter = F2(
	function (delay, msg) {
		return A2(
			$elm$core$Task$perform,
			$elm$core$Basics$always(msg),
			$elm$core$Process$sleep(delay));
	});
var $pd_andy$elm_limiter$Limiter$update = F2(
	function (internalMsg, _v0) {
		var limiter = _v0.a;
		var tagger = limiter.tagger;
		var mode = limiter.mode;
		var state = limiter.state;
		var _v1 = _Utils_Tuple3(internalMsg, state, mode);
		_v1$4:
		while (true) {
			switch (_v1.a.$) {
				case 'Emit':
					if ((_v1.b.$ === 'Open') && (_v1.c.$ === 'Throttle')) {
						var msg = _v1.a.a;
						var _v2 = _v1.b;
						var interval = _v1.c.a;
						return _Utils_Tuple2(
							$pd_andy$elm_limiter$Limiter$Internals$Limiter(
								_Utils_update(
									limiter,
									{state: $pd_andy$elm_limiter$Limiter$Internals$Closed})),
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A2(
										$pd_andy$elm_limiter$Limiter$Internals$emitAfter,
										interval,
										tagger($pd_andy$elm_limiter$Limiter$Internals$Reopen)),
										$pd_andy$elm_limiter$Limiter$Internals$emit(msg)
									])));
					} else {
						break _v1$4;
					}
				case 'EmitIfSettled':
					if ((_v1.b.$ === 'Open') && (_v1.c.$ === 'Debounce')) {
						var msgCount = _v1.a.a;
						var _v3 = _v1.b;
						var _v4 = _v1.c;
						var cooldown = _v4.a;
						var queue = _v4.b;
						return _Utils_eq(
							$elm$core$List$length(queue),
							msgCount) ? _Utils_Tuple2(
							$pd_andy$elm_limiter$Limiter$Internals$Limiter(
								_Utils_update(
									limiter,
									{
										mode: A2($pd_andy$elm_limiter$Limiter$Internals$Debounce, cooldown, _List_Nil)
									})),
							A2(
								$elm$core$Maybe$withDefault,
								$elm$core$Platform$Cmd$none,
								A2(
									$elm$core$Maybe$map,
									$pd_andy$elm_limiter$Limiter$Internals$emit,
									$elm$core$List$head(queue)))) : _Utils_Tuple2(
							$pd_andy$elm_limiter$Limiter$Internals$Limiter(limiter),
							$elm$core$Platform$Cmd$none);
					} else {
						break _v1$4;
					}
				case 'Reopen':
					var _v5 = _v1.a;
					return _Utils_Tuple2(
						$pd_andy$elm_limiter$Limiter$Internals$Limiter(
							_Utils_update(
								limiter,
								{state: $pd_andy$elm_limiter$Limiter$Internals$Open})),
						$elm$core$Platform$Cmd$none);
				case 'Push':
					if ((_v1.b.$ === 'Open') && (_v1.c.$ === 'Debounce')) {
						var msg = _v1.a.a;
						var _v6 = _v1.b;
						var _v7 = _v1.c;
						var cooldown = _v7.a;
						var queue = _v7.b;
						return _Utils_Tuple2(
							$pd_andy$elm_limiter$Limiter$Internals$Limiter(
								_Utils_update(
									limiter,
									{
										mode: A2(
											$pd_andy$elm_limiter$Limiter$Internals$Debounce,
											cooldown,
											A2($elm$core$List$cons, msg, queue))
									})),
							A2(
								$pd_andy$elm_limiter$Limiter$Internals$emitAfter,
								cooldown,
								tagger(
									$pd_andy$elm_limiter$Limiter$Internals$EmitIfSettled(
										$elm$core$List$length(queue) + 1))));
					} else {
						break _v1$4;
					}
				default:
					break _v1$4;
			}
		}
		return _Utils_Tuple2(
			$pd_andy$elm_limiter$Limiter$Internals$Limiter(limiter),
			$elm$core$Platform$Cmd$none);
	});
var $author$project$Grid$Column = {$: 'Column'};
var $author$project$Main$getid = $author$project$DictShow$getid;
var $author$project$Show$item = function (x) {
	return $author$project$Lazy$Tree$item(x).b;
};
var $author$project$DictShow$item = function (_v0) {
	var d = _v0.a;
	var z = _v0.b;
	return A2(
		$author$project$DictShow$mapDict,
		d,
		$author$project$Show$item(z));
};
var $author$project$Main$appendOrUpdateThreads = F3(
	function (_v0, threads, x) {
		var offset = _v0.a;
		var limit = _v0.b;
		var old = $elm$core$Dict$fromList(
			$author$project$Lazy$LList$toList(
				A2(
					$author$project$Lazy$LList$filterMap,
					function (t) {
						return A2(
							$elm$core$Maybe$map,
							function (_v2) {
								var e = _v2.b;
								return _Utils_Tuple2(
									$author$project$Main$keyFromEmailType(e),
									t);
							},
							$author$project$DictShow$item(t));
					},
					x)));
		var nt = A2(
			$elm$core$List$indexedMap,
			F2(
				function (i, t) {
					return _Utils_Tuple2(
						offset + i,
						$elm$core$Maybe$Just(
							_Utils_Tuple2(true, t)));
				}),
			threads);
		var no = $author$project$Lazy$LList$length(x);
		return _Utils_eq(no, offset) ? A2(
			$author$project$Lazy$LList$append,
			x,
			$author$project$Lazy$LList$fromList(
				A2($elm$core$List$map, $author$project$Main$singleton, nt))) : $author$project$Lazy$LList$fromList(
			A2(
				$elm$core$List$map,
				function (_v1) {
					var i = _v1.a;
					var n = _v1.b;
					return A2(
						$elm$core$Maybe$withDefault,
						$author$project$Main$singleton(
							_Utils_Tuple2(i, n)),
						A2(
							$elm$core$Maybe$andThen,
							$author$project$Main$getid(old),
							A2(
								$elm$core$Maybe$map,
								A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $author$project$Main$keyFromEmailType),
								n)));
				},
				nt));
	});
var $author$project$DictShow$descendants = function (_v0) {
	var d = _v0.a;
	var t = _v0.b;
	return A2(
		$author$project$Lazy$LList$map,
		$author$project$DictShow$withDict(d),
		$author$project$Lazy$Tree$descendants(t));
};
var $author$project$Show$setTree = F2(
	function (t, z) {
		return A2(
			$author$project$Lazy$Tree$Zipper$setTree,
			A2(
				$author$project$Show$iTree,
				$author$project$Lazy$Tree$Zipper$current(z).a,
				A2($author$project$Lazy$Tree$map, $elm$core$Tuple$second, t)),
			z);
	});
var $author$project$Access$status = {
	get: function ($) {
		return $.status;
	},
	set: F2(
		function (value, h) {
			return _Utils_update(
				h,
				{status: value});
		})
};
var $author$project$Main$addThreads = F5(
	function (offset, limit, ts, pa, _v0) {
		var d = _v0.a;
		var z = _v0.b;
		var ets = A2(
			$elm$core$List$map,
			A2(
				$elm$core$Basics$composeR,
				$author$project$Query$Present,
				function (t) {
					return A2(
						$author$project$ElmailUrl$Thread,
						{
							authors: $author$project$ElmailUrl$settings.skipQueryAuthourCounts ? $author$project$Query$Present(_List_Nil) : $author$project$Query$Request(_List_Nil),
							entire_thread: $author$project$Query$Request($elm$core$Maybe$Nothing),
							grid: _Utils_Tuple2($author$project$Grid$Column, false),
							hidden: _Utils_cmp(
								$author$project$Query$queryable(t).matching,
								$author$project$ElmailUrl$settings.max_auto_show) > 0,
							tagchanges: _List_Nil
						},
						t);
				}),
			ts);
		var cs = A3(
			$author$project$Main$appendOrUpdateThreads,
			_Utils_Tuple2(offset, limit),
			ets,
			$author$project$DictShow$descendants(
				$author$project$DictShow$getTree(
					_Utils_Tuple2(d, z))));
		var _v1 = A3(
			$author$project$Main$mapSearchDisplay,
			$author$project$Access$status.set(
				$author$project$Query$Present(
					$elm$core$Maybe$Just(
						_Utils_Tuple2(
							0,
							$author$project$Lazy$LList$length(cs))))),
			pa,
			$author$project$DictShow$current(
				_Utils_Tuple2(d, z)));
		var it = _v1.a;
		return A2(
			$elm$core$Tuple$mapSecond,
			A2($elm$core$Basics$composeR, $author$project$Lazy$LList$toList, $elm$core$Platform$Cmd$batch),
			A2(
				$author$project$DictShow$updateRootTupleKeepPoint,
				A3($author$project$Main$cmdMapTree, $author$project$Main$treeaggregate, $author$project$Main$rootAgg, $author$project$Main$cmdSearchShow),
				_Utils_Tuple2(
					_Utils_Tuple2(
						A3(
							$elm$core$List$foldl,
							F2(
								function (t_, d_) {
									return A3(
										$elm$core$Dict$insert,
										$author$project$Main$keyFromEmailType(t_),
										t_,
										d_);
								}),
							A2(
								$elm$core$Maybe$withDefault,
								d,
								A2(
									$elm$core$Maybe$map,
									function (_v2) {
										var v = _v2.b;
										return A3(
											$elm$core$Dict$insert,
											$author$project$Main$keyFromEmailType(v),
											v,
											d);
									},
									it)),
							ets),
						A2(
							$author$project$Show$setTree,
							A2(
								$author$project$Show$iTree,
								0,
								A2(
									$author$project$Lazy$Tree$Tree,
									A2(
										$elm$core$Maybe$map,
										function (_v3) {
											var b = _v3.a;
											var e = _v3.b;
											return _Utils_Tuple2(
												b,
												$author$project$Main$keyFromEmailType(e));
										},
										it),
									A2(
										$author$project$Lazy$LList$map,
										A2(
											$elm$core$Basics$composeR,
											$elm$core$Tuple$second,
											$author$project$Lazy$Tree$map($elm$core$Tuple$second)),
										cs))),
							z)),
					$author$project$Lazy$LList$empty)));
	});
var $author$project$Main$draftDefault = function (t) {
	return {
		content: '',
		debouncer: A2($pd_andy$elm_limiter$Limiter$debounce, $author$project$Main$RequesterMsg, $author$project$ElmailUrl$settings.delay),
		from: $author$project$ElmailUrl$settings.me,
		grid: _Utils_Tuple2($author$project$Grid$Column, false),
		inreplyto: $elm$core$Maybe$Nothing,
		participants: $author$project$AddressInput$addressInput(_List_Nil),
		quoted: '',
		subject: $elm$core$Maybe$Nothing,
		tagchanges: _List_Nil,
		tags: _List_fromArray(
			['draft']),
		time: t
	};
};
var $author$project$ListChange$listGet = F2(
	function (i, l) {
		return $elm$core$List$head(
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				A2(
					$elm$core$List$indexedMap,
					F2(
						function (j, x) {
							return _Utils_eq(j, i) ? $elm$core$Maybe$Just(x) : $elm$core$Maybe$Nothing;
						}),
					l)));
	});
var $author$project$Notmuch$plainText = function (e) {
	plainText:
	while (true) {
		switch (e.$) {
			case 'MultiPart':
				if (e.b.$ === 'Alternative') {
					var display = e.b.a.display;
					var parts = e.c;
					return A2(
						$elm$core$Maybe$withDefault,
						'',
						A2(
							$elm$core$Maybe$map,
							$author$project$Notmuch$plainText,
							A2($author$project$ListChange$listGet, display, parts)));
				} else {
					return '';
				}
			case 'Hidden':
				var s = e.a;
				var $temp$e = s;
				e = $temp$e;
				continue plainText;
			default:
				switch (e.b.$) {
					case 'PlainMime':
						var l = e.b.a;
						return $elm$core$String$trim(l);
					case 'HtmlMime':
						return '';
					default:
						return '';
				}
		}
	}
};
var $author$project$Main$drafteditorFromEmail = function (x) {
	var d = $author$project$Main$draftDefault(x.time);
	return _Utils_update(
		d,
		{
			content: A2(
				$elm$core$Maybe$withDefault,
				'',
				A2(
					$elm$core$Maybe$map,
					$author$project$Notmuch$plainText,
					$author$project$Query$queryable(x.content))),
			from: x.header.from,
			participants: $author$project$AddressInput$addressInput(
				_Utils_ap(
					A2(
						$elm$core$List$map,
						function (p) {
							return {dir: $author$project$Query$To, person: p};
						},
						x.header.to),
					A2(
						$elm$core$List$map,
						function (p) {
							return {dir: $author$project$Query$Cc, person: p};
						},
						x.header.cc))),
			quoted: '',
			subject: $elm$core$Maybe$Just(x.header.subject),
			tags: x.tags
		});
};
var $elm$core$Dict$diff = F2(
	function (t1, t2) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, v, t) {
					return A2($elm$core$Dict$remove, k, t);
				}),
			t1,
			t2);
	});
var $elm$core$Set$diff = F2(
	function (_v0, _v1) {
		var dict1 = _v0.a;
		var dict2 = _v1.a;
		return $elm$core$Set$Set_elm_builtin(
			A2($elm$core$Dict$diff, dict1, dict2));
	});
var $elm$core$Dict$filter = F2(
	function (isGood, dict) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, v, d) {
					return A2(isGood, k, v) ? A3($elm$core$Dict$insert, k, v, d) : d;
				}),
			$elm$core$Dict$empty,
			dict);
	});
var $author$project$Show$root = function (z) {
	return $author$project$Lazy$Tree$Zipper$root(z);
};
var $author$project$Main$findDangling = function (m) {
	var treeids = $elm$core$Set$fromList(
		A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A3(
				$author$project$Show$foldl,
				F2(
					function (e, l) {
						return A2(
							$elm$core$List$cons,
							A2(
								$elm$core$Maybe$map,
								$elm$core$Tuple$second,
								$author$project$Show$item(e)),
							l);
					}),
				_List_Nil,
				$author$project$Lazy$Tree$Zipper$getTree(
					$author$project$Show$root(m.searches.b)))));
	var allids = $elm$core$Set$fromList(
		$elm$core$Dict$keys(
			A2(
				$elm$core$Dict$filter,
				$elm$core$Basics$always($author$project$Main$isModified),
				m.searches.a)));
	return _Utils_update(
		m,
		{
			dangling_edits: $elm$core$Set$toList(
				A2($elm$core$Set$diff, allids, treeids))
		});
};
var $author$project$Notmuch$Confirmed = function (a) {
	return {$: 'Confirmed', a: a};
};
var $author$project$Tags$hiddenTags = _List_fromArray(
	['draftversion']);
var $author$project$Tags$lockedTags = _Utils_ap(
	_List_fromArray(
		['draft', 'attachment', 'replied', 'passed']),
	$author$project$Tags$hiddenTags);
var $author$project$Tags$systemTags = _Utils_ap(
	_List_fromArray(
		['inbox', 'flagged', 'unread']),
	$author$project$Tags$lockedTags);
var $author$project$Main$draftTags = function (tags) {
	return A3(
		$author$project$ListChange$listChange,
		$author$project$Access$justIfKeep($elm$core$Basics$eq),
		_List_fromArray(
			[
				$author$project$ListChange$UpAdd('draft'),
				$author$project$ListChange$UpAdd('unread')
			]),
		A2(
			$elm$core$List$filter,
			$author$project$Tags$none($author$project$Tags$systemTags),
			tags));
};
var $author$project$Notmuch$header = F2(
	function (f, subject) {
		return {bcc: _List_Nil, cc: _List_Nil, from: f, in_reply_to: '', references: '', subject: subject, to: _List_Nil};
	});
var $author$project$Notmuch$emptyEmail = F2(
	function (id, now) {
		return {
			content: $author$project$Query$Present(
				$elm$core$Maybe$Just(
					A3($author$project$Notmuch$MultiPart, 0, $author$project$Notmuch$Body, _List_Nil))),
			excluded: false,
			filename: _List_Nil,
			header: A2($author$project$Notmuch$header, $author$project$Person$noone, ''),
			id: id,
			match: false,
			tags: _List_Nil,
			time: now
		};
	});
var $author$project$Access$inreplyto = {
	get: function ($) {
		return $.inreplyto;
	},
	set: F2(
		function (value, h) {
			return _Utils_update(
				h,
				{inreplyto: value});
		})
};
var $author$project$AddressInput$withPerson = F2(
	function (dir, p) {
		return {dir: dir, person: p};
	});
var $author$project$Main$setReplyHeader = F2(
	function (h, x) {
		return _Utils_update(
			x,
			{
				from: h.from,
				participants: $author$project$AddressInput$addressInput(
					_Utils_ap(
						A2(
							$elm$core$List$map,
							$author$project$AddressInput$withPerson($author$project$Query$To),
							h.to),
						A2(
							$elm$core$List$map,
							$author$project$AddressInput$withPerson($author$project$Query$Cc),
							h.cc))),
				subject: (h.subject === '') ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(h.subject)
			});
	});
var $author$project$Access$subject = {
	get: function ($) {
		return $.subject;
	},
	set: F2(
		function (value, h) {
			return _Utils_update(
				h,
				{subject: value});
		})
};
var $author$project$Main$tagsFromQuery = F2(
	function (x, agg) {
		_v0$2:
		while (true) {
			switch (x.$) {
				case 'Leaf':
					if (x.a.$ === 'Tag') {
						var t = x.a.a;
						return A2($elm$core$List$cons, t, agg);
					} else {
						break _v0$2;
					}
				case 'Operator':
					var a = x.b;
					return A3($elm$core$List$foldr, $author$project$Main$tagsFromQuery, agg, a);
				default:
					break _v0$2;
			}
		}
		return agg;
	});
var $author$project$Main$insertDraftInShow = F3(
	function (q, _v0, s) {
		var now = _v0.now;
		var header = _v0.header;
		var email = _v0.email;
		var time = {date_relative: 'now', timestamp: now};
		var now_ = {date_relative: 'now', timestamp: now};
		var inreplyto = email;
		var d_ = $author$project$Main$draftDefault(time);
		var d = function () {
			var _v1 = A2(
				$elm$core$Maybe$map,
				$elm$core$Tuple$second,
				$author$project$DictShow$current(s));
			_v1$4:
			while (true) {
				if (_v1.$ === 'Just') {
					switch (_v1.a.$) {
						case 'Email':
							var _v2 = _v1.a;
							var e = _v2.b;
							if (header.$ === 'Just') {
								var h = header.a;
								return $author$project$Notmuch$Confirmed(
									A2(
										$author$project$Main$setReplyHeader,
										A2(
											$elm$core$Debug$log,
											'header',
											A2($author$project$Access$subject.set, '', h)),
										A2(
											$author$project$Access$inreplyto.set,
											email,
											_Utils_update(
												d_,
												{
													quoted: A2(
														$elm$core$Maybe$withDefault,
														'',
														A2(
															$elm$core$Maybe$andThen,
															A2(
																$elm$core$Basics$composeR,
																function ($) {
																	return $.content;
																},
																A2(
																	$elm$core$Basics$composeR,
																	$author$project$Query$queryable,
																	$elm$core$Maybe$map($author$project$Notmuch$plainText))),
															email)),
													tags: $author$project$Main$draftTags(e.tags)
												}))));
							} else {
								return $author$project$Notmuch$Confirmed(
									A2(
										$author$project$Access$inreplyto.set,
										email,
										_Utils_update(
											d_,
											{
												quoted: A2(
													$elm$core$Maybe$withDefault,
													'',
													A2(
														$elm$core$Maybe$andThen,
														A2(
															$elm$core$Basics$composeR,
															function ($) {
																return $.content;
															},
															A2(
																$elm$core$Basics$composeR,
																$author$project$Query$queryable,
																$elm$core$Maybe$map($author$project$Notmuch$plainText))),
														email)),
												tags: $author$project$Main$draftTags(e.tags)
											})));
							}
						case 'Draft':
							var _v4 = _v1.a;
							if (header.$ === 'Just') {
								var h = header.a;
								return $author$project$Notmuch$Confirmed(
									A2(
										$author$project$Access$inreplyto.set,
										inreplyto,
										A2(
											$author$project$Main$setReplyHeader,
											A2($author$project$Access$subject.set, '', h),
											_Utils_update(
												d_,
												{
													quoted: A2(
														$elm$core$Maybe$withDefault,
														'',
														A2(
															$elm$core$Maybe$andThen,
															A2(
																$elm$core$Basics$composeR,
																function ($) {
																	return $.content;
																},
																A2(
																	$elm$core$Basics$composeR,
																	$author$project$Query$queryable,
																	$elm$core$Maybe$map($author$project$Notmuch$plainText))),
															email)),
													tags: $author$project$Main$draftTags(
														A2(
															$elm$core$Maybe$withDefault,
															_List_Nil,
															A2(
																$elm$core$Maybe$map,
																function ($) {
																	return $.tags;
																},
																email)))
												}))));
							} else {
								return $author$project$Notmuch$Confirmed(
									_Utils_update(
										d_,
										{
											quoted: A2(
												$elm$core$Maybe$withDefault,
												'',
												A2(
													$elm$core$Maybe$andThen,
													A2(
														$elm$core$Basics$composeR,
														function ($) {
															return $.content;
														},
														A2(
															$elm$core$Basics$composeR,
															$author$project$Query$queryable,
															$elm$core$Maybe$map($author$project$Notmuch$plainText))),
													email)),
											tags: $author$project$Main$draftTags(
												A2(
													$elm$core$Maybe$withDefault,
													_List_Nil,
													A2(
														$elm$core$Maybe$map,
														function ($) {
															return $.tags;
														},
														email)))
										}));
							}
						case 'Search':
							var _v6 = _v1.a;
							var ns = _v6.b;
							return $author$project$Notmuch$Confirmed(
								A3(
									$author$project$Access$mapField,
									$author$project$Access$tags,
									function (ts) {
										return $author$project$Access$unique(
											_Utils_ap(
												ts,
												_Utils_ap(
													A2(
														$author$project$Main$tagsFromQuery,
														q,
														_List_fromArray(
															['unread'])),
													A2(
														$elm$core$Maybe$withDefault,
														_List_Nil,
														A2(
															$elm$core$Maybe$map,
															function ($) {
																return $.tags;
															},
															ns)))));
									},
									A2(
										$author$project$Access$inreplyto.set,
										$elm$core$Maybe$Just(
											A2(
												$author$project$Notmuch$emptyEmail,
												$author$project$Query$queryString(q),
												now_)),
										$author$project$Main$draftDefault(now_))));
						case 'Thread':
							var _v7 = _v1.a;
							var t = _v7.b;
							return $author$project$Notmuch$Confirmed(
								A3(
									$author$project$Access$mapField,
									$author$project$Access$tags,
									function (ts) {
										return $author$project$Access$unique(
											_Utils_ap(
												ts,
												A2(
													$author$project$Main$tagsFromQuery,
													q,
													_List_fromArray(
														['unread']))));
									},
									A2(
										$author$project$Access$inreplyto.set,
										$elm$core$Maybe$Just(
											A2(
												$author$project$Notmuch$emptyEmail,
												$author$project$Query$queryable(t).thread_id,
												now_)),
										$author$project$Main$draftDefault(now_))));
						default:
							break _v1$4;
					}
				} else {
					break _v1$4;
				}
			}
			return $author$project$Notmuch$Confirmed(
				A3(
					$author$project$Access$mapField,
					$author$project$Access$tags,
					function (ts) {
						return $author$project$Access$unique(
							_Utils_ap(
								ts,
								A2(
									$author$project$Main$tagsFromQuery,
									q,
									_List_fromArray(
										['unread']))));
					},
					$author$project$Main$draftDefault(now_)));
		}();
		return A2(
			$author$project$Main$insertFirst,
			$author$project$Main$singleton(
				_Utils_Tuple2(
					0,
					$elm$core$Maybe$Just(
						_Utils_Tuple2(
							true,
							A2($author$project$ElmailUrl$Draft, d, $elm$core$Maybe$Nothing))))),
			s);
	});
var $author$project$Lazy$Tree$Zipper$sliceForest_ = F3(
	function (acc, left, right) {
		sliceForest_:
		while (true) {
			var _v0 = $author$project$Lazy$LList$toList(right);
			if (!_v0.b) {
				return $elm$core$List$reverse(acc);
			} else {
				var head = _v0.a;
				var tail = _v0.b;
				var newItem = _Utils_Tuple3(
					left,
					head,
					$author$project$Lazy$LList$fromList(tail));
				var $temp$acc = A2($elm$core$List$cons, newItem, acc),
					$temp$left = A2($author$project$Lazy$LList$cons, head, left),
					$temp$right = $author$project$Lazy$LList$fromList(tail);
				acc = $temp$acc;
				left = $temp$left;
				right = $temp$right;
				continue sliceForest_;
			}
		}
	});
var $author$project$Lazy$Tree$Zipper$sliceForest = A2($author$project$Lazy$Tree$Zipper$sliceForest_, _List_Nil, $author$project$Lazy$LList$empty);
var $author$project$Lazy$Tree$Zipper$openAll = function (_v0) {
	var tree = _v0.a;
	var zipperBreadcrumbs = _v0.b;
	return A2(
		$elm$core$List$map,
		function (_v1) {
			var left = _v1.a;
			var parent = _v1.b;
			var right = _v1.c;
			return A2(
				$author$project$Lazy$Tree$Zipper$Zipper,
				parent,
				A2(
					$elm$core$List$cons,
					$author$project$Lazy$Tree$Zipper$Breadcrumb(
						{
							left: left,
							parent: $author$project$Lazy$Tree$item(tree),
							right: right
						}),
					zipperBreadcrumbs));
		},
		$author$project$Lazy$Tree$Zipper$sliceForest(
			$author$project$Lazy$Tree$descendants(tree)));
};
var $author$project$DictShow$setTree = F3(
	function (merge, _v0, _v1) {
		var db = _v0.a;
		var t = _v0.b;
		var da = _v1.a;
		var z = _v1.b;
		return _Utils_Tuple2(
			A6(
				$elm$core$Dict$merge,
				F2(
					function (key, a) {
						return A2($elm$core$Dict$insert, key, a);
					}),
				F3(
					function (key, a, b) {
						return A2(
							$elm$core$Dict$insert,
							key,
							A2(merge, a, b));
					}),
				F2(
					function (key, b) {
						return A2($elm$core$Dict$insert, key, b);
					}),
				da,
				db,
				$elm$core$Dict$empty),
			A2($author$project$Show$setTree, t, z));
	});
var $author$project$DictShow$mapAtAgg = F5(
	function (aggf, at, f, path, _v0) {
		var d = _v0.a;
		var z = _v0.b;
		var mpath = A2(
			aggf,
			$author$project$DictShow$current(
				_Utils_Tuple2(d, z)),
			path);
		var _v1 = A3(
			$elm$core$List$foldr,
			F2(
				function (c, _v2) {
					var d__ = _v2.a;
					var t = _v2.b;
					return function (_v3) {
						var d___ = _v3.a;
						var t_ = _v3.b;
						return _Utils_Tuple2(
							d___,
							A2($elm$core$List$cons, t_, t));
					}(
						A5(
							$author$project$DictShow$mapAtAgg,
							aggf,
							at,
							f,
							mpath,
							_Utils_Tuple2(d__, c)));
				}),
			_Utils_Tuple2(d, _List_Nil),
			$author$project$Lazy$Tree$Zipper$openAll(z));
		var d_ = _v1.a;
		var cs = _v1.b;
		return _Utils_eq(at, mpath) ? f(
			_Utils_Tuple2(d, z)) : A3(
			$author$project$DictShow$setTree,
			F2(
				function (_v4, _new) {
					return _new;
				}),
			_Utils_Tuple2(
				d_,
				A2(
					$author$project$Lazy$Tree$Tree,
					$author$project$Lazy$Tree$Zipper$current(z),
					$author$project$Lazy$LList$fromList(
						A2($elm$core$List$map, $author$project$Lazy$Tree$Zipper$getTree, cs)))),
			_Utils_Tuple2(d, z));
	});
var $author$project$DictShow$mapInDict = F3(
	function (f, d__, id) {
		return A2(
			$elm$core$Maybe$map,
			function (a) {
				return A3($elm$core$Dict$insert, id, a, d__);
			},
			f(
				A2($author$project$DictShow$getid, d__, id)));
	});
var $author$project$DictShow$mapValues = F2(
	function (f, _v0) {
		var d = _v0.a;
		var t = _v0.b;
		var ids = A3(
			$author$project$Show$foldl,
			F2(
				function (_v2, l) {
					var _v3 = _v2.a;
					var id = _v3.b;
					return A2($elm$core$List$cons, id, l);
				}),
			_List_Nil,
			$author$project$Lazy$Tree$Zipper$getTree(t));
		var nd = A3(
			$elm$core$List$foldl,
			F2(
				function (id_, d__) {
					return A2(
						$elm$core$Maybe$withDefault,
						d__,
						A2(
							$elm$core$Maybe$andThen,
							function (_v1) {
								var id = _v1.b;
								return A3($author$project$DictShow$mapInDict, f, d__, id);
							},
							id_));
				}),
			d,
			ids);
		return _Utils_Tuple2(nd, t);
	});
var $author$project$ElmailUrl$defaultView = {
	email: {
		grid: _Utils_Tuple2($author$project$Grid$Column, false),
		tagchanges: _List_Nil
	}
};
var $author$project$Query$requestUnfetched = function (x) {
	if ((x.$ === 'Present') && (x.a.$ === 'Nothing')) {
		var _v1 = x.a;
		return $author$project$Query$Request($elm$core$Maybe$Nothing);
	} else {
		return x;
	}
};
var $author$project$Main$emailToMaybeDraft = F2(
	function (c, e) {
		return A2(
			$elm$core$List$any,
			function (t) {
				return t === 'draft';
			},
			e.tags) ? $elm$core$Maybe$Just(
			_Utils_Tuple2(
				e.match,
				A2(
					$author$project$ElmailUrl$Draft,
					A2(
						$elm$core$Maybe$withDefault,
						$author$project$Notmuch$Confirmed(
							$author$project$Main$drafteditorFromEmail(e)),
						c),
					$elm$core$Maybe$Just(
						_Utils_update(
							e,
							{
								content: $author$project$Query$requestUnfetched(e.content)
							}))))) : $elm$core$Maybe$Nothing;
	});
var $author$project$Main$emailTypeFromEmail = F2(
	function (_v0, e_) {
		var e = e_.match ? _Utils_update(
			e_,
			{
				content: $author$project$Query$requestUnfetched(e_.content)
			}) : e_;
		return A2(
			$elm$core$Maybe$withDefault,
			_Utils_Tuple2(
				e.match,
				A2($author$project$ElmailUrl$Email, $author$project$ElmailUrl$defaultView.email, e)),
			A2($author$project$Main$emailToMaybeDraft, $elm$core$Maybe$Nothing, e));
	});
var $author$project$Main$setTree = $author$project$DictShow$setTree($author$project$Main$replace);
var $author$project$Main$mergeThreadTree = F4(
	function (replyf, entire_thread, e, z) {
		var e_ = A2(
			$author$project$Lazy$Tree$map,
			$elm$core$Maybe$map(
				$author$project$Main$emailTypeFromEmail(replyf)),
			e);
		return A2(
			$author$project$Main$setTree,
			A2(
				$author$project$Main$iTree,
				0,
				A2(
					$author$project$Lazy$Tree$Tree,
					function (et) {
						if ((et.$ === 'Just') && (et.a.b.$ === 'Thread')) {
							var _v1 = et.a;
							var b = _v1.a;
							var _v2 = _v1.b;
							var d = _v2.a;
							var t = _v2.b;
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(
									b,
									A2(
										$author$project$ElmailUrl$Thread,
										_Utils_update(
											d,
											{
												entire_thread: $author$project$Query$Present(
													$elm$core$Maybe$Just(entire_thread))
											}),
										$author$project$Query$Present(
											$author$project$Query$queryable(t)))));
						} else {
							return et;
						}
					}(
						$author$project$DictShow$current(z)),
					$author$project$Lazy$Tree$descendants(e_))),
			z);
	});
var $author$project$Main$removeId = F2(
	function (de, z) {
		return A2(
			$elm$core$Tuple$mapFirst,
			function (d) {
				return A2($elm$core$Dict$remove, de.id, d);
			},
			z);
	});
var $author$project$Main$treeFromNotmuchShow = function (x) {
	var recurs = function (replies) {
		return $author$project$Lazy$LList$fromList(
			A2($elm$core$List$map, $author$project$Main$treeFromNotmuchShow, replies));
	};
	_v0$4:
	while (true) {
		if (x.$ === 'Mail') {
			var e = x.a;
			return $author$project$Lazy$Tree$singleton(
				$elm$core$Maybe$Just(e));
		} else {
			if (!x.a.b) {
				return $author$project$Lazy$Tree$singleton($elm$core$Maybe$Nothing);
			} else {
				if (x.a.a.$ === 'Mail') {
					if ((x.a.b.b && (x.a.b.a.$ === 'Children')) && (!x.a.b.b.b)) {
						var _v1 = x.a;
						var e = _v1.a.a;
						var _v2 = _v1.b;
						var replies = _v2.a.a;
						return A2(
							$author$project$Lazy$Tree$Tree,
							$elm$core$Maybe$Just(e),
							recurs(replies));
					} else {
						break _v0$4;
					}
				} else {
					if ((((!x.a.a.a.b) && x.a.b.b) && (x.a.b.a.$ === 'Children')) && (!x.a.b.b.b)) {
						var _v3 = x.a;
						var _v4 = _v3.b;
						var replies = _v4.a.a;
						return A2(
							$author$project$Lazy$Tree$Tree,
							$elm$core$Maybe$Nothing,
							recurs(replies));
					} else {
						break _v0$4;
					}
				}
			}
		}
	}
	var replies = x.a;
	return A2(
		$author$project$Lazy$Tree$Tree,
		$elm$core$Maybe$Nothing,
		recurs(replies));
};
var $author$project$Access$authors = {
	get: function ($) {
		return $.authors;
	},
	set: F2(
		function (value, h) {
			return _Utils_update(
				h,
				{authors: value});
		})
};
var $author$project$Notmuch$length = function (m) {
	return A2(
		$elm$core$Maybe$withDefault,
		0,
		$author$project$Query$queryable(m));
};
var $elm$core$List$sortBy = _List_sortBy;
var $author$project$Main$threadMap = F2(
	function (f, x) {
		if ((x.$ === 'Just') && (x.a.b.$ === 'Thread')) {
			var _v1 = x.a;
			var b = _v1.a;
			var _v2 = _v1.b;
			var d = _v2.a;
			var thread = _v2.b;
			return $elm$core$Maybe$Just(
				_Utils_Tuple2(
					b,
					A2(
						$author$project$ElmailUrl$Thread,
						f(d),
						thread)));
		} else {
			return x;
		}
	});
var $author$project$DictShow$updateRootKeepPoint = F2(
	function (f, z) {
		var z_ = A2(
			$author$project$DictShow$updateRootTupleKeepPoint,
			function (t) {
				return _Utils_Tuple2(
					f(t),
					$author$project$Lazy$LList$empty);
			},
			_Utils_Tuple2(z, $author$project$Lazy$LList$empty));
		return z_.a;
	});
var $author$project$Main$updateAuthors = F3(
	function (q, r_, model) {
		var r = A2(
			$elm$core$List$sortBy,
			function (m) {
				return 0 - $author$project$Notmuch$length(m.matching);
			},
			r_);
		var _v0 = q.query;
		return A2(
			$author$project$DictShow$updateRootKeepPoint,
			A4(
				$author$project$DictShow$mapAtAgg,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$Maybe$map($elm$core$Tuple$second),
					$author$project$Main$subquery),
				q.query,
				function (z) {
					return A2(
						$author$project$DictShow$updateItem,
						$author$project$Main$threadMap(
							$author$project$Access$authors.set(
								$author$project$Query$Present(r))),
						z);
				},
				A2(
					$author$project$Query$Operator,
					$author$project$Query$Not,
					_List_fromArray(
						[$author$project$Query$AnyMessage]))),
			model);
	});
var $author$project$Main$updateChangeSubqueries = F2(
	function (l, x) {
		if (x.$ === 'Search') {
			var d = x.a;
			var ns = x.b;
			return A2(
				$author$project$ElmailUrl$Search,
				_Utils_update(
					d,
					{
						subqueries: A3(
							$author$project$ListChange$listChange,
							$author$project$Access$justIfReplace(
								$author$project$Main$fEqual(
									function ($) {
										return $.subquery;
									})),
							l,
							d.subqueries)
					}),
				ns);
		} else {
			return x;
		}
	});
var $author$project$Main$emailtypeUpdateCount = F2(
	function (count, mail) {
		switch (mail.$) {
			case 'Search':
				var d = mail.a;
				var ns = mail.b;
				return A2(
					$author$project$ElmailUrl$Search,
					_Utils_update(
						d,
						{
							matching: $author$project$Query$Present(
								$elm$core$Maybe$Just(count))
						}),
					ns);
			case 'Thread':
				return mail;
			case 'Email':
				return mail;
			case 'Draft':
				return mail;
			default:
				return mail;
		}
	});
var $author$project$Main$tagChangesFromCounts = F2(
	function (subqueries, counts) {
		var _v0 = _Utils_Tuple2(subqueries, counts);
		if (((((((((((((_v0.a.b && (_v0.a.a.$ === 'Leaf')) && (_v0.a.a.a.$ === 'Tag')) && _v0.a.b.b) && (_v0.a.b.a.$ === 'Operator')) && (_v0.a.b.a.a.$ === 'Not')) && _v0.a.b.a.b.b) && (_v0.a.b.a.b.a.$ === 'Leaf')) && (_v0.a.b.a.b.a.a.$ === 'Tag')) && (!_v0.a.b.a.b.b.b)) && (!_v0.a.b.b.b)) && _v0.b.b) && _v0.b.b.b) && (!_v0.b.b.b.b)) {
			var _v1 = _v0.a;
			var t = _v1.a.a.a;
			var _v2 = _v1.b;
			var _v3 = _v2.a;
			var _v4 = _v3.a;
			var _v5 = _v3.b;
			var t_ = _v5.a.a.a;
			var _v6 = _v0.b;
			var tc = _v6.a;
			var _v7 = _v6.b;
			var ntc = _v7.a;
			return _Utils_eq(t, t_) ? _List_fromArray(
				[
					$author$project$ListChange$UpAdd(
					{
						matching: $author$project$Query$Present(
							$elm$core$Maybe$Just(
								_Utils_Tuple2(
									$author$project$Notmuch$Unposted(tc),
									$author$project$Notmuch$Unposted(ntc)))),
						tagchange: t
					})
				]) : _List_Nil;
		} else {
			return _List_Nil;
		}
	});
var $author$project$Main$updateCount = F4(
	function (context, subqueries, counts, model) {
		var updateSingleCount = function (v) {
			return A4(
				$author$project$DictShow$mapAtAgg,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$Maybe$map($elm$core$Tuple$second),
					$author$project$Main$subquery),
				context.query,
				$author$project$DictShow$updateItem(
					$author$project$Main$justEval(
						$elm$core$Tuple$mapSecond(
							$author$project$Main$emailtypeUpdateCount(v)))),
				$author$project$Query$AnyMessage);
		};
		var _v0 = _Utils_Tuple2(subqueries, counts);
		if (((!_v0.a.b) && _v0.b.b) && (!_v0.b.b.b)) {
			var _v1 = _v0.b;
			var v = _v1.a;
			return A2(updateSingleCount, v, model);
		} else {
			var updateTagChanges = function (d) {
				return _Utils_update(
					d,
					{
						tagchanges: A3(
							$author$project$ListChange$listChange,
							$author$project$Access$justIfReplace($author$project$Main$tagChangeEqual),
							A2($author$project$Main$tagChangesFromCounts, subqueries, counts),
							d.tagchanges)
					});
			};
			var sqs = A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				A3(
					$elm$core$List$map2,
					F2(
						function (sq, c) {
							_v3$2:
							while (true) {
								switch (sq.$) {
									case 'Leaf':
										if (sq.a.$ === 'Tag') {
											return $elm$core$Maybe$Nothing;
										} else {
											break _v3$2;
										}
									case 'Operator':
										if (((((sq.a.$ === 'Not') && sq.b.b) && (sq.b.a.$ === 'Leaf')) && (sq.b.a.a.$ === 'Tag')) && (!sq.b.b.b)) {
											var _v4 = sq.a;
											var _v5 = sq.b;
											return $elm$core$Maybe$Nothing;
										} else {
											break _v3$2;
										}
									default:
										break _v3$2;
								}
							}
							return $elm$core$Maybe$Just(
								$author$project$ListChange$UpAdd(
									{
										matching: $author$project$Query$Present(
											$elm$core$Maybe$Just(c)),
										subquery: sq
									}));
						}),
					subqueries,
					counts));
			return A5(
				$author$project$DictShow$mapAtAgg,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$Maybe$map($elm$core$Tuple$second),
					$author$project$Main$subquery),
				context.query,
				$author$project$DictShow$updateItem(
					$author$project$Main$justEval(
						$elm$core$Tuple$mapSecond(
							function (e) {
								switch (e.$) {
									case 'Search':
										var d = e.a;
										var ns = e.b;
										return A2(
											$author$project$ElmailUrl$Search,
											A3(
												$author$project$Access$mapField,
												$author$project$Access$subqueries,
												A2(
													$author$project$ListChange$listChange,
													$author$project$Access$justIfReplace(
														$author$project$Main$fEqual(
															function ($) {
																return $.subquery;
															})),
													sqs),
												updateTagChanges(d)),
											ns);
									case 'Thread':
										var d = e.a;
										var t = e.b;
										return A2(
											$author$project$ElmailUrl$Thread,
											updateTagChanges(d),
											t);
									default:
										return e;
								}
							}))),
				$author$project$Query$AnyMessage,
				model);
		}
	});
var $author$project$Main$updateEmailType = F2(
	function (f, z) {
		return A2(
			$author$project$DictShow$updateItem,
			function (e) {
				return A2(
					$elm$core$Maybe$map,
					$elm$core$Tuple$mapSecond(f),
					e);
			},
			z);
	});
var $author$project$Notmuch$Post = function (a) {
	return {$: 'Post', a: a};
};
var $author$project$Notmuch$mapPostable = F2(
	function (f, x) {
		switch (x.$) {
			case 'Unposted':
				var y = x.a;
				return $author$project$Notmuch$Unposted(
					f(y));
			case 'Post':
				var y = x.a;
				return $author$project$Notmuch$Post(
					f(y));
			case 'Posted':
				var y = x.a;
				return $author$project$Notmuch$Posted(
					f(y));
			default:
				var y = x.a;
				return $author$project$Notmuch$Confirmed(
					f(y));
		}
	});
var $author$project$Main$updateRemoteTags = F2(
	function (rtc, x) {
		var pf = function (ptcc) {
			var tcc = ptcc.tagchange;
			return A2(
				$elm$core$Maybe$withDefault,
				ptcc,
				$elm$core$List$head(
					A2(
						$elm$core$List$filterMap,
						function (rc) {
							var _v1 = _Utils_Tuple2(rc, ptcc.matching);
							_v1$2:
							while (true) {
								if (_v1.a.$ === 'UpAdd') {
									if ((_v1.b.$ === 'Present') && (_v1.b.a.$ === 'Just')) {
										var x_ = _v1.a.a;
										var _v2 = _v1.b.a.a;
										var p = _v2.a;
										var n = _v2.b;
										return _Utils_eq(x_, tcc) ? $elm$core$Maybe$Just(
											_Utils_update(
												ptcc,
												{
													matching: $author$project$Query$Present(
														$elm$core$Maybe$Just(
															_Utils_Tuple2(
																$author$project$Notmuch$Confirmed(
																	$author$project$Notmuch$postable(p)),
																n)))
												})) : $elm$core$Maybe$Nothing;
									} else {
										break _v1$2;
									}
								} else {
									if ((_v1.b.$ === 'Present') && (_v1.b.a.$ === 'Just')) {
										var x_ = _v1.a.a;
										var _v3 = _v1.b.a.a;
										var p = _v3.a;
										var n = _v3.b;
										return _Utils_eq(x_, tcc) ? $elm$core$Maybe$Just(
											_Utils_update(
												ptcc,
												{
													matching: $author$project$Query$Present(
														$elm$core$Maybe$Just(
															_Utils_Tuple2(
																p,
																$author$project$Notmuch$Confirmed(
																	$author$project$Notmuch$postable(n)))))
												})) : $elm$core$Maybe$Nothing;
									} else {
										break _v1$2;
									}
								}
							}
							return $elm$core$Maybe$Nothing;
						},
						rtc)));
		};
		var changeTags = function (d) {
			return _Utils_update(
				d,
				{
					tagchanges: A2($elm$core$List$map, pf, d.tagchanges)
				});
		};
		switch (x.$) {
			case 'Email':
				var c = x.a;
				var m = x.b;
				return A2(
					$author$project$ElmailUrl$Email,
					changeTags(c),
					m);
			case 'Draft':
				var c = x.a;
				var m = x.b;
				return A2(
					$author$project$ElmailUrl$Draft,
					A2($author$project$Notmuch$mapPostable, changeTags, c),
					m);
			case 'Search':
				var d = x.a;
				var s = x.b;
				return A2(
					$author$project$ElmailUrl$Search,
					A3(
						$author$project$Access$mapField,
						$author$project$Access$status,
						$author$project$Query$request,
						changeTags(d)),
					s);
			case 'Thread':
				var d = x.a;
				var s = x.b;
				return A2(
					$author$project$ElmailUrl$Thread,
					changeTags(d),
					$author$project$Query$request(s));
			default:
				return x;
		}
	});
var $author$project$Main$updateSearches = F2(
	function (f, model) {
		var _v0 = f(
			_Utils_Tuple2(model.searches, _List_Nil));
		var s = _v0.a;
		var c = _v0.b;
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{searches: s}),
			$elm$core$Platform$Cmd$batch(c));
	});
var $author$project$Access$id = {
	get: function ($) {
		return $.id;
	},
	set: F2(
		function (value, h) {
			return _Utils_update(
				h,
				{id: value});
		})
};
var $author$project$Main$HtmlId = function (a) {
	return {$: 'HtmlId', a: a};
};
var $author$project$Main$emailTypeID = function (x) {
	switch (x.$) {
		case 'Email':
			var mail = x.b;
			return $elm$core$Maybe$Just(
				$author$project$Query$MessageID(mail.id));
		case 'Thread':
			var t = x.b;
			return $elm$core$Maybe$Just(
				$author$project$Query$ThreadID(
					$author$project$Query$queryable(t).thread_id));
		case 'Draft':
			var mail = x.b;
			return A2(
				$elm$core$Maybe$map,
				$author$project$Query$MessageID,
				A2(
					$elm$core$Maybe$map,
					function ($) {
						return $.id;
					},
					mail));
		case 'Search':
			var ns = x.b;
			return A2(
				$elm$core$Maybe$map,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.id;
					},
					$author$project$Query$MessageID),
				ns);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Show$stringFromIndexPath = function (col) {
	return A2(
		$elm$core$String$join,
		'-',
		A2($elm$core$List$map, $elm$core$String$fromInt, col));
};
var $author$project$Main$htmlIdString = F2(
	function (suffix, x) {
		if (x.$ === 'HtmlId') {
			if (x.a.$ === 'MessageID') {
				var id = x.a.a;
				return 'message-' + (id + suffix);
			} else {
				var id = x.a.a;
				return 'thread-' + (id + suffix);
			}
		} else {
			var col = x.a;
			return 'search-' + ($author$project$Show$stringFromIndexPath(col) + suffix);
		}
	});
var $author$project$Main$idStringMaybe = function (x) {
	return A2(
		$elm$core$Maybe$map,
		A2(
			$elm$core$Basics$composeR,
			$author$project$Main$HtmlId,
			$author$project$Main$htmlIdString('')),
		$author$project$Main$emailTypeID(x));
};
var $author$project$Show$openIndex = F2(
	function (i, t) {
		return A2(
			$author$project$Lazy$Tree$Zipper$open,
			$author$project$Show$equalIndex(i),
			t);
	});
var $author$project$DictShow$mapAggAtRPath_ = F5(
	function (accf, f, acc, path, _v0) {
		var d = _v0.a;
		var z = _v0.b;
		var acc_ = A2(
			accf,
			A2(
				$elm$core$Tuple$mapSecond,
				$author$project$DictShow$mapDict(d),
				$author$project$Lazy$Tree$Zipper$current(z)),
			acc);
		if (!path.b) {
			return $elm$core$Maybe$Just(
				A2(
					f,
					acc_,
					_Utils_Tuple2(d, z)));
		} else {
			var h = path.a;
			var rest = path.b;
			return A2(
				$elm$core$Maybe$andThen,
				function (z_) {
					return A5(
						$author$project$DictShow$mapAggAtRPath_,
						accf,
						f,
						acc_,
						rest,
						_Utils_Tuple2(d, z_));
				},
				A2($author$project$Show$openIndex, h, z));
		}
	});
var $author$project$DictShow$mapAggAtRPath = F5(
	function (accf, f, acc, hpath, z) {
		return A5(
			$author$project$DictShow$mapAggAtRPath_,
			accf,
			f,
			acc,
			$author$project$Show$zpath(hpath),
			$author$project$DictShow$root(z));
	});
var $author$project$Main$updateSearchesAt = F4(
	function (f, selectf, rpath, model) {
		var _v0 = A2(
			$elm$core$Maybe$withDefault,
			_Utils_Tuple2(model.searches, $elm$core$Platform$Cmd$none),
			A5($author$project$DictShow$mapAggAtRPath, $author$project$Main$treeaggregate, f, $author$project$Main$rootAgg, rpath, model.searches));
		var s = _v0.a;
		var c_ = _v0.b;
		var id = A2(
			$elm$core$Maybe$andThen,
			A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $author$project$Main$idStringMaybe),
			$author$project$DictShow$current(s));
		var m = _Utils_update(
			model,
			{
				searches: s,
				selection: A3(
					$author$project$Access$mapField,
					$author$project$Access$id,
					selectf(id),
					model.selection)
			});
		return _Utils_Tuple2(
			m,
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[c_])));
	});
var $author$project$Show$openPathFold = F4(
	function (accf, acc, hpath, z) {
		var _v1 = $elm$core$List$reverse(hpath);
		if (_v1.b) {
			var path = _v1.b;
			return A4($author$project$Show$openPathFold_, accf, acc, path, z);
		} else {
			return A4($author$project$Show$openPathFold_, accf, acc, hpath, z);
		}
	});
var $author$project$Show$openPathFold_ = F4(
	function (accf, acc, p, z) {
		var acc_ = A2(
			accf,
			$author$project$Lazy$Tree$Zipper$current(z),
			acc);
		if (p.b) {
			var l = p.a;
			var rest = p.b;
			return A2(
				$elm$core$Maybe$withDefault,
				$elm$core$Result$Err(
					$elm$core$String$fromInt(l) + ' not found'),
				A2(
					$elm$core$Maybe$map,
					A3($author$project$Show$openPathFold, accf, acc_, rest),
					A2(
						$author$project$Lazy$Tree$Zipper$open,
						function (a) {
							return _Utils_eq(
								$author$project$Show$index(a),
								l);
						},
						z)));
		} else {
			return $elm$core$Result$Ok(
				_Utils_Tuple2(acc_, z));
		}
	});
var $author$project$DictShow$updatesAt = F5(
	function (treeaggregate, rootAgg, f, pa, _v0) {
		var _v1 = _v0.a;
		var d = _v1.a;
		var z_ = _v1.b;
		var acc = _v0.b;
		var upf = function (_v4) {
			var ta = _v4.a;
			var z = _v4.b;
			var upz = A2(
				f,
				ta,
				A2(
					$author$project$DictShow$mapDict,
					d,
					$author$project$Show$current(z)));
			return A2(
				$elm$core$Tuple$mapFirst,
				function (i_) {
					return A2(
						$author$project$DictShow$updateItem,
						$elm$core$Basics$always(i_),
						_Utils_Tuple2(d, z));
				},
				upz);
		};
		var _v2 = A2(
			$elm$core$Result$withDefault,
			_Utils_Tuple2(
				_Utils_Tuple2(d, z_),
				$elm$core$Platform$Cmd$none),
			A2(
				$elm$core$Result$map,
				upf,
				A4(
					$author$project$Show$openPathFold,
					function (_v3) {
						var i = _v3.a;
						var id = _v3.b;
						return treeaggregate(
							_Utils_Tuple2(
								i,
								A2($author$project$DictShow$mapDict, d, id)));
					},
					rootAgg,
					pa,
					$author$project$Lazy$Tree$Zipper$root(z_))));
		var rt = _v2.a;
		var c = _v2.b;
		return _Utils_Tuple2(
			rt,
			A2($elm$core$List$cons, c, acc));
	});
var $author$project$Main$updateAPI = F3(
	function (msg, rpath, model) {
		switch (msg.$) {
			case 'GotShow':
				var session = msg.a;
				var entire_thread = msg.c;
				var r_ = msg.d;
				var trees = A2($elm$core$Result$map, $author$project$Main$treeFromNotmuchShow, r_);
				var _v1 = A2(
					$elm$core$Result$withDefault,
					_Utils_Tuple2(model, $elm$core$Platform$Cmd$none),
					A2(
						$elm$core$Result$map,
						function (s) {
							return _Utils_Tuple2(
								$author$project$Main$findDangling(
									_Utils_update(
										model,
										{
											searches: A3(
												$author$project$Main$mapAtRPath,
												function (x) {
													return A4($author$project$Main$mergeThreadTree, $author$project$Main$drafteditorFromEmail, entire_thread, s, x);
												},
												rpath,
												model.searches)
										})),
								$elm$core$Platform$Cmd$none);
						},
						trees));
				var m = _v1.a;
				var c = _v1.b;
				var _v2 = session.query;
				if (((_v2.$ === 'Leaf') && (_v2.a.$ === 'ID')) && (_v2.a.a.$ === 'MessageID')) {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								searches: _Utils_Tuple2(m.searches.a, model.searches.b)
							}),
						c);
				} else {
					return _Utils_Tuple2(m, c);
				}
			case 'GotThreads':
				var _v3 = msg.b;
				var offset = _v3.a;
				var limit = _v3.b;
				var r = msg.c;
				return A2(
					$elm$core$Result$withDefault,
					_Utils_Tuple2(model, $elm$core$Platform$Cmd$none),
					A2(
						$elm$core$Result$map,
						function (t) {
							return A2(
								$elm$core$Tuple$mapFirst,
								$author$project$Main$findDangling,
								A4(
									$author$project$Main$updateSearchesAt,
									A3($author$project$Main$addThreads, offset, limit, t),
									F2(
										function (n, _v4) {
											return n;
										}),
									rpath,
									model));
						},
						r));
			case 'GotAuthors':
				var session = msg.a;
				var r = msg.b;
				return A2(
					$elm$core$Result$withDefault,
					_Utils_Tuple2(model, $elm$core$Platform$Cmd$none),
					A2(
						$elm$core$Result$map,
						function (ac) {
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{
										searches: A3($author$project$Main$updateAuthors, session, ac, model.searches)
									}),
								$elm$core$Platform$Cmd$none);
						},
						r));
			case 'GotCounts':
				var session = msg.a;
				var sq = msg.b;
				var r = msg.c;
				return A2(
					$elm$core$Result$withDefault,
					_Utils_Tuple2(model, $elm$core$Platform$Cmd$none),
					A2(
						$elm$core$Result$map,
						function (ac) {
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{
										searches: A3(
											$elm$core$Basics$apR,
											A3($author$project$Main$updateCount, session, sq, ac),
											$author$project$DictShow$updateRootKeepPoint,
											model.searches)
									}),
								$elm$core$Platform$Cmd$none);
						},
						r));
			case 'GotTags':
				var r = msg.b;
				return A2(
					$elm$core$Result$withDefault,
					_Utils_Tuple2(model, $elm$core$Platform$Cmd$none),
					A2(
						$elm$core$Result$map,
						function (ac) {
							return A4(
								$author$project$Main$updateSearchesAt,
								F2(
									function (_v5, e) {
										return _Utils_Tuple2(
											A3(
												$author$project$Main$mapAtRPath,
												$author$project$Main$updateEmailType(
													$author$project$Main$updateChangeSubqueries(
														A2($elm$core$List$map, $author$project$ListChange$UpAdd, ac))),
												rpath,
												e),
											$elm$core$Platform$Cmd$none);
									}),
								F2(
									function (n, _v6) {
										return n;
									}),
								rpath,
								model);
						},
						r));
			case 'RemoteChangedTags':
				var session = msg.a;
				var changes = msg.b;
				var r_ = msg.c;
				var m = A2(
					$elm$core$Result$map,
					function (_v7) {
						return _Utils_update(
							model,
							{
								searches: A3(
									$elm$core$Basics$apR,
									A4(
										$author$project$DictShow$mapAtAgg,
										A2(
											$elm$core$Basics$composeR,
											$elm$core$Maybe$map($elm$core$Tuple$second),
											$author$project$Main$subquery),
										session.query,
										$author$project$DictShow$updateItem(
											$author$project$Main$justEval(
												$elm$core$Tuple$mapSecond(
													$author$project$Main$updateRemoteTags(changes)))),
										$author$project$Query$AnyMessage),
									$author$project$DictShow$updateRootKeepPoint,
									model.searches)
							});
					},
					r_);
				return A2(
					$elm$core$Result$withDefault,
					_Utils_Tuple2(model, $elm$core$Platform$Cmd$none),
					A2(
						$elm$core$Result$map,
						A2(
							$elm$core$Basics$composeR,
							$author$project$Main$updateSearches(
								A4(
									$author$project$DictShow$updatesAt,
									$author$project$Main$treeaggregate,
									$author$project$Main$rootAgg,
									$author$project$Main$chain(
										_List_fromArray(
											[$author$project$Main$cmdSearchShow, $author$project$Main$cmdCount])),
									rpath)),
							$elm$core$Tuple$mapSecond(
								$elm$core$Platform$Cmd$map(
									$author$project$Main$At(rpath)))),
						m));
			case 'GotNewReplyHeader':
				if (msg.b.$ === 'Ok') {
					var session = msg.a;
					var r = msg.b.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								searches: A3(
									$author$project$Main$mapAtRPath,
									A2($author$project$Main$insertDraftInShow, session.query, r),
									rpath,
									model.searches)
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					var session = msg.a;
					var r = msg.b.a;
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'SavedDraft':
				var d = msg.a;
				var r = msg.b;
				if ((r.$ === 'Ok') && (r.a === 'ok')) {
					var _v9 = A2(
						$author$project$DictShow$updateRootTupleKeepPoint,
						A3(
							$author$project$Main$cmdMapTree,
							$author$project$Main$treeaggregate,
							$author$project$Main$rootAgg,
							$author$project$Main$chain(
								_List_fromArray(
									[$author$project$Main$cmdSearchShow, $author$project$Main$cmdCount]))),
						_Utils_Tuple2(
							A2(
								$elm$core$Maybe$withDefault,
								model.searches,
								A3(
									$author$project$Main$mapOnRPath,
									F2(
										function (_v10, z) {
											return A2(
												$author$project$DictShow$updateItem,
												$author$project$Main$justEval(
													$elm$core$Tuple$mapSecond($author$project$Main$requestQuery)),
												z);
										}),
									rpath,
									model.searches)),
							$author$project$Lazy$LList$empty));
					var m = _v9.a;
					var c = _v9.b;
					var m_ = A2($author$project$Main$removeId, d, m);
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{searches: m_}),
						$elm$core$Platform$Cmd$batch(
							$author$project$Lazy$LList$toList(c)));
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			default:
				var r = msg.a;
				if (r.$ === 'Ok') {
					var _v12 = A4(
						$author$project$Main$cmdMapTree,
						$author$project$Main$treeaggregate,
						$author$project$Main$rootAgg,
						$author$project$Main$chain(
							_List_fromArray(
								[$author$project$Main$cmdSearchShow, $author$project$Main$cmdCount])),
						A2(
							$author$project$DictShow$mapValues,
							$elm$core$Maybe$map(
								A2($elm$core$Basics$composeR, $author$project$Main$requestQuery, $author$project$Main$requestCount)),
							model.searches));
					var s = _v12.a;
					var c = _v12.b;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{loading: false, searches: s}),
						$elm$core$Platform$Cmd$batch(
							$author$project$Lazy$LList$toList(c)));
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
		}
	});
var $author$project$AddressInput$ApiMsg = function (a) {
	return {$: 'ApiMsg', a: a};
};
var $author$project$AddressInput$AuthorCountsQuery = {$: 'AuthorCountsQuery'};
var $elm$core$String$fromList = _String_fromList;
var $author$project$Query$re_query = function (q) {
	return '\"/^' + (q + ('|[ .-@_]' + (q + '/\"')));
};
var $elm$core$Char$toLocaleLower = _Char_toLocaleLower;
var $elm$core$Char$toLocaleUpper = _Char_toLocaleUpper;
var $author$project$Query$andPrefixRE = F3(
	function (contextquery, key, input) {
		var _v0 = $elm$core$String$toList(input);
		if (!_v0.b) {
			return contextquery;
		} else {
			var fc = _v0.a;
			var t = _v0.b;
			return $author$project$Query$and(
				_List_fromArray(
					[
						contextquery,
						$author$project$Query$or(
						_List_fromArray(
							[
								$author$project$Query$Leaf(
								A2(
									$author$project$Query$Prefix,
									key,
									$author$project$Query$re_query(
										$elm$core$String$fromList(
											A2(
												$elm$core$List$cons,
												$elm$core$Char$toLocaleLower(fc),
												t))))),
								$author$project$Query$Leaf(
								A2(
									$author$project$Query$Prefix,
									key,
									$author$project$Query$re_query(
										$elm$core$String$fromList(
											A2(
												$elm$core$List$cons,
												$elm$core$Char$toLocaleUpper(fc),
												t)))))
							]))
					]));
		}
	});
var $author$project$AddressInput$cmdAddressInput = F3(
	function (session, dir, p) {
		var _v0 = $author$project$Query$requestNow(p.choices);
		if (_v0.a) {
			var n = _v0.b;
			return _Utils_Tuple2(
				_Utils_update(
					p,
					{choices: n}),
				A2(
					$author$project$API$authorsCountsQuery,
					_Utils_update(
						session,
						{
							query: A3($author$project$Query$andPrefixRE, session.query, 'from', p.input)
						}),
					dir));
		} else {
			return _Utils_Tuple2(p, $elm$core$Platform$Cmd$none);
		}
	});
var $pd_andy$elm_limiter$Limiter$push = F2(
	function (msg, _v0) {
		var limiter = _v0.a;
		var tagger = limiter.tagger;
		var mode = limiter.mode;
		var state = limiter.state;
		var _v1 = _Utils_Tuple2(state, mode);
		if (_v1.a.$ === 'Open') {
			if (_v1.b.$ === 'Debounce') {
				var _v2 = _v1.a;
				var _v3 = _v1.b;
				var cooldown = _v3.a;
				var queue = _v3.b;
				return _Utils_Tuple2(
					$pd_andy$elm_limiter$Limiter$Internals$Limiter(
						_Utils_update(
							limiter,
							{
								mode: A2(
									$pd_andy$elm_limiter$Limiter$Internals$Debounce,
									cooldown,
									A2($elm$core$List$cons, msg, queue))
							})),
					A2(
						$pd_andy$elm_limiter$Limiter$Internals$emitAfter,
						cooldown,
						tagger(
							$pd_andy$elm_limiter$Limiter$Internals$EmitIfSettled(
								$elm$core$List$length(queue) + 1))));
			} else {
				var _v4 = _v1.a;
				var interval = _v1.b.a;
				return _Utils_Tuple2(
					$pd_andy$elm_limiter$Limiter$Internals$Limiter(
						_Utils_update(
							limiter,
							{state: $pd_andy$elm_limiter$Limiter$Internals$Closed})),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2(
								$pd_andy$elm_limiter$Limiter$Internals$emitAfter,
								interval,
								tagger($pd_andy$elm_limiter$Limiter$Internals$Reopen)),
								$pd_andy$elm_limiter$Limiter$Internals$emit(msg)
							])));
			}
		} else {
			var _v5 = _v1.a;
			return _Utils_Tuple2(
				$pd_andy$elm_limiter$Limiter$Internals$Limiter(limiter),
				$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$AddressInput$updatePartialEmail = F3(
	function (_v0, l, a) {
		return _Utils_update(
			a,
			{
				choices: A2(
					$elm$core$Debug$log,
					'authors',
					$author$project$Query$Present(l))
			});
	});
var $author$project$AddressInput$updateAuthors = F3(
	function (q, r_, model) {
		var r = A2(
			$elm$core$List$sortBy,
			function (m) {
				return 0 - $author$project$Notmuch$length(m.matching);
			},
			r_);
		var model_ = A3($author$project$AddressInput$updatePartialEmail, q, r, model);
		return _Utils_update(
			model_,
			{expanded: true});
	});
var $author$project$AddressInput$update = F3(
	function (sessions, msg, model) {
		switch (msg.$) {
			case 'AuthorCountsQuery':
				var session_ = A2($author$project$ListChange$listGet, model.index, sessions);
				return A2(
					$elm$core$Maybe$withDefault,
					_Utils_Tuple2(model, $elm$core$Platform$Cmd$none),
					A2(
						$elm$core$Maybe$map,
						function (s) {
							return A2(
								$elm$core$Tuple$mapSecond,
								$elm$core$Platform$Cmd$map($author$project$AddressInput$ApiMsg),
								A3($author$project$AddressInput$cmdAddressInput, s, 'sender', model));
						},
						session_));
			case 'DebounceAddress':
				var debounceMsg = msg.a;
				return A2(
					$elm$core$Tuple$mapFirst,
					function (debouncer) {
						return _Utils_update(
							model,
							{debouncer: debouncer});
					},
					A2($pd_andy$elm_limiter$Limiter$update, debounceMsg, model.debouncer));
			case 'MapEditor':
				var deb = msg.a;
				var f = msg.b;
				var m_ = f(model);
				return deb ? A2(
					$elm$core$Tuple$mapFirst,
					function (d) {
						return _Utils_update(
							m_,
							{debouncer: d});
					},
					A2($pd_andy$elm_limiter$Limiter$push, $author$project$AddressInput$AuthorCountsQuery, m_.debouncer)) : _Utils_Tuple2(m_, $elm$core$Platform$Cmd$none);
			case 'SelectPerson':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			default:
				var m = msg.a;
				return A3($author$project$AddressInput$updateAPI, sessions, m, model);
		}
	});
var $author$project$AddressInput$updateAPI = F3(
	function (sessions, msg, model) {
		if (msg.$ === 'GotAuthors') {
			var q = msg.a;
			var r = msg.b;
			return A2(
				$elm$core$Result$withDefault,
				_Utils_Tuple2(model, $elm$core$Platform$Cmd$none),
				A2(
					$elm$core$Result$map,
					function (ac) {
						return ($elm$core$List$isEmpty(ac) && (_Utils_cmp(
							model.index,
							$elm$core$List$length(sessions)) < 0)) ? A3(
							$author$project$AddressInput$update,
							sessions,
							$author$project$AddressInput$AuthorCountsQuery,
							_Utils_update(
								model,
								{
									choices: $author$project$Query$Request(_List_Nil),
									index: model.index + 1
								})) : _Utils_Tuple2(
							A3($author$project$AddressInput$updateAuthors, q, ac, model),
							$elm$core$Platform$Cmd$none);
					},
					r));
		} else {
			return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Main$updateAddressInput = F4(
	function (f, qm, pa, x) {
		if ((x.$ === 'Just') && (x.a.b.$ === 'Draft')) {
			var _v1 = x.a;
			var b = _v1.a;
			var _v2 = _v1.b;
			var d = _v2.a;
			var e = _v2.b;
			var d_c = A2(
				$author$project$Notmuch$mapPostable,
				function (d_) {
					return A2(
						$elm$core$Tuple$mapFirst,
						function (ai) {
							return _Utils_update(
								d_,
								{participants: ai});
						},
						A3($author$project$AddressInput$update, pa.queries, qm, d_.participants));
				},
				d);
			return _Utils_Tuple2(
				$elm$core$Maybe$Just(
					_Utils_Tuple2(
						b,
						A2(
							$author$project$ElmailUrl$Draft,
							A3($author$project$Notmuch$setPostable, $author$project$Notmuch$Unposted, $elm$core$Tuple$first, d_c),
							e))),
				A2(
					$elm$core$Platform$Cmd$map,
					f,
					$author$project$Notmuch$postable(d_c).b));
		} else {
			return _Utils_Tuple2(
				x,
				A2($elm$core$Platform$Cmd$map, f, $elm$core$Platform$Cmd$none));
		}
	});
var $author$project$Main$cmdBatch = F3(
	function (pa, ls, x) {
		return A2(
			$elm$core$Tuple$mapSecond,
			$elm$core$Platform$Cmd$batch,
			A3(
				$elm$core$List$foldl,
				F2(
					function (f, _v0) {
						var a = _v0.a;
						var cs = _v0.b;
						return A2(
							$elm$core$Tuple$mapSecond,
							function (c) {
								return A2($elm$core$List$cons, c, cs);
							},
							A2(f, pa, a));
					}),
				_Utils_Tuple2(x, _List_Nil),
				ls));
	});
var $author$project$Main$cmdTag = F2(
	function (pa, x) {
		var session = $author$project$Main$aggregateSession(pa);
		var request_tagchanges = function (y) {
			return function (l) {
				return _Utils_Tuple2(
					_Utils_update(
						y,
						{
							tagchanges: A2($elm$core$List$map, $elm$core$Tuple$first, l)
						}),
					A2($elm$core$List$map, $elm$core$Tuple$second, l));
			}(
				A2(
					$elm$core$List$map,
					function (tc) {
						var _v12 = $author$project$Query$queryable(tc.matching);
						_v12$2:
						while (true) {
							if (_v12.$ === 'Just') {
								if (_v12.a.a.$ === 'Post') {
									var _v13 = _v12.a;
									var a = _v13.a.a;
									var b = _v13.b;
									return _Utils_Tuple2(
										_Utils_update(
											tc,
											{
												matching: $author$project$Query$Present(
													$elm$core$Maybe$Just(
														_Utils_Tuple2(
															$author$project$Notmuch$Posted(a),
															b)))
											}),
										A2(
											$author$project$API$changeTags,
											session,
											_List_fromArray(
												[
													$author$project$ListChange$UpAdd(tc.tagchange)
												])));
								} else {
									if (_v12.a.b.$ === 'Post') {
										var _v14 = _v12.a;
										var a_ = _v14.a;
										var b = _v14.b.a;
										return _Utils_Tuple2(
											_Utils_update(
												tc,
												{
													matching: $author$project$Query$Present(
														$elm$core$Maybe$Just(
															_Utils_Tuple2(
																a_,
																$author$project$Notmuch$Posted(b))))
												}),
											A2(
												$author$project$API$changeTags,
												session,
												_List_fromArray(
													[
														$author$project$ListChange$Remove(tc.tagchange)
													])));
									} else {
										break _v12$2;
									}
								}
							} else {
								break _v12$2;
							}
						}
						return _Utils_Tuple2(tc, $elm$core$Platform$Cmd$none);
					},
					y.tagchanges));
		};
		_v0$4:
		while (true) {
			if (x.$ === 'Just') {
				switch (x.a.b.$) {
					case 'Search':
						var _v1 = x.a;
						var m = _v1.a;
						var _v2 = _v1.b;
						var d = _v2.a;
						var ns = _v2.b;
						var _v3 = request_tagchanges(d);
						var d_tag = _v3.a;
						var c_tag = _v3.b;
						return _Utils_Tuple2(
							$elm$core$Maybe$Just(
								_Utils_Tuple2(
									m,
									A2($author$project$ElmailUrl$Search, d_tag, ns))),
							A2(
								$elm$core$Platform$Cmd$map,
								$author$project$Main$ApiMsg($elm$core$Platform$Cmd$none),
								$elm$core$Platform$Cmd$batch(c_tag)));
					case 'Thread':
						var _v4 = x.a;
						var m = _v4.a;
						var _v5 = _v4.b;
						var d = _v5.a;
						var t = _v5.b;
						var _v6 = request_tagchanges(d);
						var d__ = _v6.a;
						var rtc = _v6.b;
						return _Utils_Tuple2(
							$elm$core$Maybe$Just(
								_Utils_Tuple2(
									m,
									A2($author$project$ElmailUrl$Thread, d__, t))),
							A2(
								$elm$core$Platform$Cmd$map,
								$author$project$Main$ApiMsg($elm$core$Platform$Cmd$none),
								$elm$core$Platform$Cmd$batch(rtc)));
					case 'Email':
						var _v7 = x.a;
						var m = _v7.a;
						var _v8 = _v7.b;
						var d = _v8.a;
						var e = _v8.b;
						return function (_v9) {
							var tc = _v9.a;
							var c = _v9.b;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(
									_Utils_Tuple2(
										m,
										A2($author$project$ElmailUrl$Email, tc, e))),
								A2(
									$elm$core$Platform$Cmd$map,
									$author$project$Main$ApiMsg($elm$core$Platform$Cmd$none),
									$elm$core$Platform$Cmd$batch(c)));
						}(
							request_tagchanges(d));
					case 'Draft':
						var _v10 = x.a;
						var m = _v10.a;
						var _v11 = _v10.b;
						var d = _v11.a;
						var e = _v11.b;
						var d_c = A2(
							$author$project$Notmuch$mapPostable,
							A2(
								$elm$core$Basics$composeR,
								request_tagchanges,
								$elm$core$Tuple$mapSecond(
									$elm$core$List$map(
										$elm$core$Platform$Cmd$map(
											$author$project$Main$ApiMsg($elm$core$Platform$Cmd$none))))),
							d);
						var d_ = A2($author$project$Notmuch$mapPostable, $elm$core$Tuple$first, d_c);
						var c_ = $author$project$Notmuch$postable(d_c).b;
						return _Utils_Tuple2(
							$elm$core$Maybe$Just(
								_Utils_Tuple2(
									m,
									A2($author$project$ElmailUrl$Draft, d_, e))),
							$elm$core$Platform$Cmd$batch(c_));
					default:
						break _v0$4;
				}
			} else {
				break _v0$4;
			}
		}
		return _Utils_Tuple2(x, $elm$core$Platform$Cmd$none);
	});
var $author$project$ListChange$item = function (x) {
	if (x.$ === 'UpAdd') {
		var t_ = x.a;
		return t_;
	} else {
		var t_ = x.a;
		return t_;
	}
};
var $author$project$Main$updateChangeTags = F3(
	function (tc, pa, x) {
		var postEmailTagChange = function (t) {
			return $author$project$ListChange$UpAdd(
				{
					matching: $author$project$Query$Present(
						$elm$core$Maybe$Just(
							function () {
								if (t.$ === 'UpAdd') {
									return _Utils_Tuple2(
										$author$project$Notmuch$Post(1),
										$author$project$Notmuch$Unposted(1));
								} else {
									return _Utils_Tuple2(
										$author$project$Notmuch$Unposted(1),
										$author$project$Notmuch$Post(1));
								}
							}())),
					tagchange: $author$project$ListChange$item(t)
				});
		};
		var changeTags_ = function (tags) {
			return A3(
				$author$project$ListChange$listChange,
				$author$project$Access$justIfKeep($elm$core$Basics$eq),
				tc,
				tags);
		};
		var changeTags = function (d) {
			return _Utils_update(
				d,
				{
					tagchanges: A3(
						$author$project$ListChange$listChange,
						$author$project$Access$justIfReplace($author$project$Main$tagChangeEqual),
						A2($elm$core$List$map, postEmailTagChange, tc),
						d.tagchanges)
				});
		};
		return A3(
			$author$project$Main$cmdBatch,
			pa,
			_List_fromArray(
				[$author$project$Main$cmdCount, $author$project$Main$cmdTag]),
			function () {
				_v0$4:
				while (true) {
					if (x.$ === 'Just') {
						switch (x.a.b.$) {
							case 'Search':
								var _v1 = x.a;
								var b = _v1.a;
								var _v2 = _v1.b;
								var c = _v2.a;
								var ns = _v2.b;
								return $elm$core$Maybe$Just(
									_Utils_Tuple2(
										b,
										A2(
											$author$project$ElmailUrl$Search,
											changeTags(c),
											ns)));
							case 'Thread':
								var _v3 = x.a;
								var b = _v3.a;
								var _v4 = _v3.b;
								var d = _v4.a;
								var m = _v4.b;
								return $elm$core$Maybe$Just(
									_Utils_Tuple2(
										b,
										A2(
											$author$project$ElmailUrl$Thread,
											changeTags(d),
											$author$project$Query$request(
												A2(
													$author$project$Query$mapQueryable,
													A2($author$project$Access$mapField, $author$project$Access$tags, changeTags_),
													m)))));
							case 'Email':
								var _v5 = x.a;
								var b = _v5.a;
								var _v6 = _v5.b;
								var c = _v6.a;
								var m = _v6.b;
								return $elm$core$Maybe$Just(
									_Utils_Tuple2(
										b,
										A2(
											$author$project$ElmailUrl$Email,
											changeTags(c),
											A3($author$project$Access$mapField, $author$project$Access$tags, changeTags_, m))));
							case 'Draft':
								var _v7 = x.a;
								var b = _v7.a;
								var _v8 = _v7.b;
								var c = _v8.a;
								var m = _v8.b;
								var d = A2(
									$author$project$Notmuch$mapPostable,
									changeTags,
									A2(
										$author$project$Notmuch$mapPostable,
										A2($author$project$Access$mapField, $author$project$Access$tags, changeTags_),
										c));
								return $elm$core$Maybe$Just(
									A2(
										$elm$core$Maybe$withDefault,
										_Utils_Tuple2(
											b,
											A2(
												$author$project$ElmailUrl$Draft,
												A2(
													$author$project$Notmuch$mapPostable,
													A2($author$project$Access$mapField, $author$project$Access$tags, changeTags_),
													d),
												$elm$core$Maybe$Nothing)),
										A2(
											$elm$core$Maybe$map,
											function (m_) {
												return _Utils_Tuple2(
													b,
													A2(
														$author$project$ElmailUrl$Draft,
														d,
														$elm$core$Maybe$Just(
															A3($author$project$Access$mapField, $author$project$Access$tags, changeTags_, m_))));
											},
											m)));
							default:
								break _v0$4;
						}
					} else {
						break _v0$4;
					}
				}
				return x;
			}());
	});
var $author$project$DictShow$updateMapItem = F3(
	function (idf, f, _v0) {
		var d = _v0.a;
		var z = _v0.b;
		var a_b = A2(
			$elm$core$Tuple$mapFirst,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$Maybe$map(
					function (_v1) {
						var b = _v1.a;
						var a_ = _v1.b;
						return _Utils_Tuple2(
							A3(
								$elm$core$Dict$insert,
								idf(a_),
								a_,
								d),
							A2(
								$author$project$Show$updateItem,
								function (_v2) {
									return $elm$core$Maybe$Just(
										_Utils_Tuple2(
											b,
											idf(a_)));
								},
								z));
					}),
				$elm$core$Maybe$withDefault(
					_Utils_Tuple2(d, z))),
			f(
				A2(
					$author$project$DictShow$mapDict,
					d,
					$author$project$Show$current(z))));
		return a_b;
	});
var $author$project$Main$updateMapItem = F3(
	function (f, pa, z) {
		return A3(
			$author$project$DictShow$updateMapItem,
			$author$project$Main$keyFromEmailType,
			f(pa),
			z);
	});
var $author$project$Main$updateMapItemAt = F3(
	function (f, pa, z) {
		return A3(
			$author$project$DictShow$updateMapItem,
			$author$project$Main$keyFromEmailType,
			A2(
				$elm$core$Basics$composeR,
				f(pa),
				$elm$core$Tuple$mapSecond(
					$elm$core$Platform$Cmd$map(
						$author$project$Main$At(pa.rpath)))),
			z);
	});
var $author$project$QueryEditor$AddressMsg = function (a) {
	return {$: 'AddressMsg', a: a};
};
var $author$project$QueryEditor$At = F2(
	function (a, b) {
		return {$: 'At', a: a, b: b};
	});
var $author$project$QueryEditor$Noop = {$: 'Noop'};
var $author$project$QueryEditor$SetLeafQuery = function (a) {
	return {$: 'SetLeafQuery', a: a};
};
var $elm$browser$Browser$Dom$focus = _Browser_call('focus');
var $author$project$Show$tupleAtIndexRPath = F3(
	function (f, path, z_) {
		return A2(
			$elm$core$Result$withDefault,
			_Utils_Tuple2(z_, $elm$core$Maybe$Nothing),
			A2(
				$elm$core$Result$map,
				f,
				A2(
					$author$project$Show$openRPath,
					path,
					$author$project$Lazy$Tree$Zipper$root(z_))));
	});
var $author$project$QueryEditor$updateNode = F4(
	function (session, rpath, msg, model) {
		switch (msg.$) {
			case 'DoQueries':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'MapEditor':
				var f = msg.a;
				var _v1 = A3($author$project$Show$tupleAtIndexRPath, f, rpath, model.querytree);
				var searches = _v1.a;
				var focus = _v1.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{querytree: searches}),
					A2(
						$elm$core$Maybe$withDefault,
						$elm$core$Platform$Cmd$none,
						A2(
							$elm$core$Maybe$map,
							function (fc) {
								return A2(
									$elm$core$Task$attempt,
									function (e) {
										if (e.$ === 'Ok') {
											return $author$project$QueryEditor$Noop;
										} else {
											var e_ = e.a;
											var _v3 = A2($elm$core$Debug$log, 'focus error', e_);
											return $author$project$QueryEditor$Noop;
										}
									},
									$elm$browser$Browser$Dom$focus(
										_Utils_ap(
											model.prefix,
											$author$project$Show$stringFromIndexPath(fc))));
							},
							focus)));
			default:
				var m = msg.a;
				var _v4 = A3(
					$author$project$Show$tupleAtIndexRPath,
					function (qn) {
						var _v5 = $author$project$Show$current(qn);
						if (_v5.$ === 'Person') {
							var s = _v5.a;
							var dir = _v5.b;
							var p_ = _v5.c;
							return A3(
								$elm$core$Tuple$mapBoth,
								function (p) {
									return A2(
										$author$project$Show$updateItem,
										$elm$core$Basics$always(
											A3($author$project$QueryEditor$Person, s, dir, p)),
										qn);
								},
								A2(
									$elm$core$Basics$composeR,
									$elm$core$Platform$Cmd$map(
										A2(
											$elm$core$Basics$composeR,
											$author$project$QueryEditor$AddressMsg,
											$author$project$QueryEditor$At(rpath))),
									$elm$core$Maybe$Just),
								A3($author$project$AddressInput$update, session, m, p_));
						} else {
							return _Utils_Tuple2(qn, $elm$core$Maybe$Nothing);
						}
					},
					rpath,
					model.querytree);
				var qt = _v4.a;
				var c = _v4.b;
				var m_ = _Utils_update(
					model,
					{querytree: qt});
				if (m.$ === 'SelectPerson') {
					var p = m.a;
					return _Utils_Tuple2(
						m_,
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									A2($elm$core$Maybe$withDefault, $elm$core$Platform$Cmd$none, c),
									A2(
									$elm$core$Task$perform,
									$elm$core$Basics$identity,
									$elm$core$Task$succeed(
										A2(
											$elm$core$Debug$log,
											'sel',
											$author$project$QueryEditor$SetLeafQuery(
												A2($author$project$Query$Person, $author$project$Query$Participant, p)))))
								])));
				} else {
					return _Utils_Tuple2(
						m_,
						A2($elm$core$Maybe$withDefault, $elm$core$Platform$Cmd$none, c));
				}
		}
	});
var $author$project$QueryEditor$update = F3(
	function (session, msg, model) {
		switch (msg.$) {
			case 'Noop':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'SetLeafQuery':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			default:
				var rpath = msg.a;
				var nmsg = msg.b;
				return A4($author$project$QueryEditor$updateNode, session, rpath, nmsg, model);
		}
	});
var $author$project$Main$updateQueryEditor = F5(
	function (f, doqueries, qm, pa, x) {
		if ((x.$ === 'Just') && (x.a.b.$ === 'Search')) {
			var _v1 = x.a;
			var b = _v1.a;
			var _v2 = _v1.b;
			var d = _v2.a;
			var ns = _v2.b;
			var _v3 = A3($author$project$QueryEditor$update, pa.queries, qm, d.queryeditor);
			var qe = _v3.a;
			var qc = _v3.b;
			var _v4 = A2($pd_andy$elm_limiter$Limiter$push, doqueries, d.requester);
			var req = _v4.a;
			var c = _v4.b;
			return _Utils_Tuple2(
				$elm$core$Maybe$Just(
					_Utils_Tuple2(
						b,
						A2(
							$author$project$ElmailUrl$Search,
							_Utils_update(
								d,
								{
									queryeditor: qe,
									requester: req,
									status: $author$project$Query$Request($elm$core$Maybe$Nothing)
								}),
							ns))),
				$elm$core$Platform$Cmd$batch(
					_List_fromArray(
						[
							c,
							A2($elm$core$Platform$Cmd$map, f, qc)
						])));
		} else {
			return _Utils_Tuple2(
				x,
				A2($elm$core$Platform$Cmd$map, f, $elm$core$Platform$Cmd$none));
		}
	});
var $author$project$Main$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'At':
				var rpath = msg.a;
				var m = msg.b;
				return A3($author$project$Main$updateNode, rpath, m, model);
			case 'GotoUrl':
				var url = msg.a;
				return _Utils_Tuple2(
					model,
					A2($elm$browser$Browser$Navigation$pushUrl, model.key, url));
			case 'UrlChanged':
				var url = msg.a;
				var m_ = A2($author$project$Main$initFromUrl, url, model);
				var _v54 = A2(
					$author$project$DictShow$updateRootTupleKeepPoint,
					A3(
						$author$project$Main$cmdMapTree,
						$author$project$Main$treeaggregate,
						$author$project$Main$rootAgg,
						$author$project$Main$chain(
							_List_fromArray(
								[$author$project$Main$cmdSearchShow, $author$project$Main$cmdCount]))),
					_Utils_Tuple2(m_.searches, $author$project$Lazy$LList$empty));
				var m = _v54.a;
				var c = _v54.b;
				return _Utils_Tuple2(
					_Utils_update(
						m_,
						{searches: m}),
					$elm$core$Platform$Cmd$batch(
						$author$project$Lazy$LList$toList(c)));
			case 'LinkClicked':
				var urlRequest = msg.a;
				if (urlRequest.$ === 'Internal') {
					var url = urlRequest.a;
					return _Utils_Tuple2(
						model,
						A2(
							$elm$browser$Browser$Navigation$pushUrl,
							model.key,
							$elm$url$Url$toString(url)));
				} else {
					var href = urlRequest.a;
					return _Utils_Tuple2(
						model,
						$elm$browser$Browser$Navigation$load(href));
				}
			case 'CurrentDisplay':
				var x = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{display: x}),
					$elm$core$Platform$Cmd$none);
			case 'Noop':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'ScrollInColumn':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			default:
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							selection: function (o) {
								return _Utils_update(
									o,
									{tag_input: s});
							}(model.selection)
						}),
					$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Main$updateNode = F3(
	function (rpath, msg, model) {
		var nochange = F2(
			function (_v52, z) {
				return _Utils_Tuple2(z, $elm$core$Platform$Cmd$none);
			});
		switch (msg.$) {
			case 'Login':
				var u = msg.a;
				return A4(
					$author$project$Main$updateSearchesAt,
					$author$project$Main$login(u),
					F2(
						function (n, _v1) {
							return n;
						}),
					rpath,
					model);
			case 'ChangeSubqueries':
				var changes = msg.a;
				return A4(
					$author$project$Main$updateSearchesAt,
					F2(
						function (_v2, e) {
							return _Utils_Tuple2(
								A3(
									$author$project$Main$mapAtRPath,
									$author$project$Main$updateEmailType(
										$author$project$Main$updateChangeSubqueries(changes)),
									rpath,
									e),
								$elm$core$Platform$Cmd$none);
						}),
					F2(
						function (n, _v3) {
							return n;
						}),
					rpath,
					model);
			case 'ChangeTags':
				var tag = msg.a;
				var _v4 = A4(
					$author$project$Main$updateSearchesAt,
					$author$project$Main$updateMapItemAt(
						$author$project$Main$updateChangeTags(tag)),
					F2(
						function (n, _v5) {
							return n;
						}),
					rpath,
					model);
				var m_ = _v4.a;
				var c_ = _v4.b;
				return _Utils_Tuple2(m_, c_);
			case 'SelectQuery':
				var t = msg.a;
				var _v6 = A4(
					$author$project$Main$updateSearchesAt,
					nochange,
					F2(
						function (n, _v7) {
							return n;
						}),
					rpath,
					model);
				var m_ = _v6.a;
				return A2(
					$elm$core$Tuple$mapSecond,
					A2($elm$core$Basics$composeR, $author$project$Lazy$LList$toList, $elm$core$Platform$Cmd$batch),
					A2(
						$author$project$Main$modelCmdRoot,
						$author$project$Main$cmdCount,
						_Utils_update(
							m_,
							{
								searches: A2(
									$elm$core$Maybe$withDefault,
									m_.searches,
									A3(
										$author$project$Main$mapOnRPath,
										$elm$core$Basics$always(
											$author$project$DictShow$updateItem(
												$author$project$Main$justEval(
													$elm$core$Tuple$mapSecond(
														A2($author$project$Main$touchSubquery, _List_Nil, t))))),
										rpath,
										m_.searches)),
								selection: function (o) {
									return _Utils_update(
										o,
										{selected_query: t});
								}(model.selection)
							})));
			case 'DraftReplyTo':
				var id = msg.a;
				var _v8 = A4(
					$author$project$Main$updateSearchesAt,
					nochange,
					F2(
						function (n, _v9) {
							return n;
						}),
					rpath,
					model);
				var m_ = _v8.a;
				var c_ = _v8.b;
				return _Utils_Tuple2(
					m_,
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								c_,
								A2(
								$elm$core$Platform$Cmd$map,
								$author$project$Main$At(rpath),
								A2(
									$elm$core$Task$attempt,
									A2(
										$elm$core$Basics$composeR,
										$author$project$API$GotNewReplyHeader(id),
										$author$project$Main$ApiMsg($elm$core$Platform$Cmd$none)),
									A3(
										$elm$core$Task$map2,
										F2(
											function (t, h) {
												return {
													email: A2($elm$core$Maybe$map, $elm$core$Tuple$second, h),
													header: A2($elm$core$Maybe$map, $elm$core$Tuple$first, h),
													now: t
												};
											}),
										$elm$time$Time$now,
										A2(
											$elm$core$Task$onError,
											$elm$core$Basics$always(
												$elm$core$Task$succeed($elm$core$Maybe$Nothing)),
											A2(
												$elm$core$Task$map,
												$elm$core$Maybe$Just,
												$author$project$API$replyQuery(id))))))
							])));
			case 'DraftTextTyped':
				var text = msg.a;
				return A2(
					$elm$core$Tuple$mapSecond,
					$elm$core$Basics$always($elm$core$Platform$Cmd$none),
					A4(
						$author$project$Main$updateSearchesAt,
						$author$project$Main$updateMapItemAt(
							$author$project$Main$mapDraftEditor(
								A2(
									$author$project$Notmuch$setPostable,
									$author$project$Notmuch$Unposted,
									$author$project$Access$content.set(text)))),
						F2(
							function (n, _v10) {
								return n;
							}),
						rpath,
						model));
			case 'MapDraftEditor':
				var d = msg.a;
				return A4(
					$author$project$Main$updateSearchesAt,
					$author$project$Main$updateMapItemAt(
						$author$project$Main$mapDraftEditor(d)),
					F2(
						function (n, _v11) {
							return n;
						}),
					rpath,
					model);
			case 'MapSearchDisplay':
				var d = msg.a;
				return A4(
					$author$project$Main$updateSearchesAt,
					$author$project$Main$updateMapItemAt(
						$author$project$Main$mapSearchDisplay(d)),
					F2(
						function (n, _v12) {
							return n;
						}),
					rpath,
					model);
			case 'MapThreadDisplay':
				var f = msg.a;
				return A4(
					$author$project$Main$updateSearchesAt,
					F2(
						function (pa, z) {
							var mail = $author$project$DictShow$current(z);
							if ((mail.$ === 'Just') && (mail.a.b.$ === 'Thread')) {
								var _v14 = mail.a;
								var b = _v14.a;
								var _v15 = _v14.b;
								var d = _v15.a;
								var t = _v15.b;
								var d_ = f(d);
								var _v16 = A3(
									$author$project$Main$chain,
									_List_fromArray(
										[$author$project$Main$cmdSearchShow, $author$project$Main$cmdCount]),
									pa,
									$elm$core$Maybe$Just(
										_Utils_Tuple2(
											b,
											$author$project$Main$requestCount(
												$author$project$Main$requestQuery(
													A2($author$project$ElmailUrl$Thread, d_, t))))));
								var m_ = _v16.a;
								var c = _v16.b;
								return _Utils_Tuple2(
									A2(
										$author$project$DictShow$updateItem,
										$elm$core$Basics$always(m_),
										z),
									A2(
										$elm$core$Platform$Cmd$map,
										$author$project$Main$At(pa.rpath),
										c));
							} else {
								return _Utils_Tuple2(z, $elm$core$Platform$Cmd$none);
							}
						}),
					F2(
						function (n, _v17) {
							return n;
						}),
					rpath,
					model);
			case 'PostSaveDraft':
				return A4(
					$author$project$Main$updateSearchesAt,
					$author$project$Main$updateMapItemAt($author$project$Main$postSave),
					F2(
						function (n, _v18) {
							return n;
						}),
					rpath,
					model);
			case 'PostSend':
				var reload = A2(
					$elm$core$Task$attempt,
					$elm$core$Basics$always(
						$author$project$Main$QueryAt(
							$elm$core$Basics$always(
								$elm$core$Tuple$mapSecond($author$project$Main$requestQuery)))),
					$elm$core$Task$succeed(_Utils_Tuple0));
				var _v19 = A4(
					$author$project$Main$updateSearchesAt,
					F2(
						function (pa, z) {
							var _v20 = $author$project$DictShow$current(z);
							if ((_v20.$ === 'Just') && (_v20.a.b.$ === 'Draft')) {
								var _v21 = _v20.a;
								var _v22 = _v21.b;
								var v = _v22.a;
								var email = _v22.b;
								return _Utils_Tuple2(
									z,
									A2(
										$elm$core$Platform$Cmd$map,
										A2(
											$elm$core$Basics$composeR,
											$author$project$Main$ApiMsg(reload),
											$author$project$Main$At(pa.rpath)),
										A2(
											$author$project$API$sendQuery,
											$author$project$Main$aggregateSession(pa),
											A2(
												$author$project$Main$draftEmailFromDraftEditor,
												$author$project$Notmuch$postable(v),
												email))));
							} else {
								return _Utils_Tuple2(z, $elm$core$Platform$Cmd$none);
							}
						}),
					F2(
						function (n, _v23) {
							return n;
						}),
					rpath,
					model);
				var m = _v19.a;
				var c = _v19.b;
				return _Utils_Tuple2(m, c);
			case 'PostSaveNamedSearch':
				return A4(
					$author$project$Main$updateSearchesAt,
					$author$project$Main$updateMapItemAt($author$project$Main$postSave),
					F2(
						function (n, _v24) {
							return n;
						}),
					rpath,
					model);
			case 'RemoveBranch':
				var _v25 = A4(
					$author$project$Main$updateSearchesAt,
					nochange,
					F2(
						function (n, _v26) {
							return n;
						}),
					rpath,
					model);
				var m_ = _v25.a;
				var c_ = _v25.b;
				return _Utils_Tuple2(
					_Utils_update(
						m_,
						{
							searches: A2(
								$elm$core$Maybe$withDefault,
								m_.searches,
								$author$project$DictShow$delete(m_.searches))
						}),
					c_);
			case 'QueryEditorMsg':
				var qm = msg.a;
				var _v27 = A4(
					$author$project$Main$updateSearchesAt,
					$author$project$Main$updateMapItemAt(
						A3(
							$author$project$Main$updateQueryEditor,
							$author$project$Main$QueryEditorMsg,
							$author$project$Main$QueryAt(
								F2(
									function (_v28, e) {
										return A2(
											$elm$core$Tuple$mapSecond,
											A2($elm$core$Basics$composeR, $author$project$Main$requestQuery, $author$project$Main$requestCount),
											e);
									})),
							qm)),
					F2(
						function (n, _v29) {
							return n;
						}),
					rpath,
					model);
				var m = _v27.a;
				var c = _v27.b;
				if (qm.$ === 'SetLeafQuery') {
					var l = qm.a;
					return A2(
						$elm$core$Tuple$mapSecond,
						function (d) {
							return $elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[c, d]));
						},
						A3(
							$author$project$Main$updateNode,
							rpath,
							$author$project$Main$SelectQuery(
								$author$project$Query$Leaf(l)),
							m));
				} else {
					return _Utils_Tuple2(m, c);
				}
			case 'AddressMsg':
				var qm = msg.a;
				var _v31 = A4(
					$author$project$Main$updateSearchesAt,
					$author$project$Main$updateMapItemAt(
						A2($author$project$Main$updateAddressInput, $author$project$Main$AddressMsg, qm)),
					F2(
						function (n, _v32) {
							return n;
						}),
					rpath,
					model);
				var m = _v31.a;
				var c = _v31.b;
				var _v33 = function () {
					if (qm.$ === 'SelectPerson') {
						var p = qm.a;
						return A2(
							$elm$core$Tuple$mapSecond,
							function (d) {
								return $elm$core$Platform$Cmd$batch(
									_List_fromArray(
										[c, d]));
							},
							A3(
								$author$project$Main$updateNode,
								rpath,
								$author$project$Main$SelectQuery(
									$author$project$Query$Leaf(
										A2($author$project$Query$Person, $author$project$Query$Participant, p))),
								m));
					} else {
						return _Utils_Tuple2(m, c);
					}
				}();
				var m_ = _v33.a;
				var c_ = _v33.b;
				return _Utils_Tuple2(m_, c_);
			case 'DoQueryShow':
				var session = msg.a;
				var _v35 = msg.b;
				var offset = _v35.a;
				var limit = _v35.b;
				return _Utils_Tuple2(
					model,
					A2(
						$elm$core$Platform$Cmd$map,
						$author$project$Main$At(rpath),
						A2(
							$elm$core$Platform$Cmd$map,
							$author$project$Main$ApiMsg($elm$core$Platform$Cmd$none),
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A2(
										$author$project$API$searchQuery,
										session,
										_Utils_Tuple2(offset, limit))
									])))));
			case 'AddSearch':
				var op = msg.a;
				var query_ = msg.b;
				var e = function (el) {
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(
							true,
							A2(
								$author$project$ElmailUrl$Search,
								{
									grid: _Utils_Tuple2($author$project$Grid$WrappedRow, false),
									id: $author$project$Query$queryString(query_),
									matching: $author$project$Query$Request($elm$core$Maybe$Nothing),
									name: '',
									operator: op,
									queryeditor: {
										contextquery: $author$project$Query$AnyMessage,
										prefix: 'notmuchsearch',
										querytree: $author$project$QueryEditor$editor(query_)
									},
									requester: A2($pd_andy$elm_limiter$Limiter$debounce, $author$project$Main$RequesterMsg, $author$project$ElmailUrl$settings.delay),
									status: $author$project$Query$Request($elm$core$Maybe$Nothing),
									subqueries: _List_Nil,
									tagchanges: _List_Nil,
									user: $elm$core$Maybe$Nothing,
									view: $author$project$ElmailUrl$SearchHidden
								},
								A2(
									$elm$core$Maybe$map,
									$author$project$Access$tags.set(
										_List_fromArray(
											['notmuchsearch'])),
									$elm$core$Result$toMaybe(
										function (x_) {
											return A2(
												$elm$core$Result$fromMaybe,
												'no email',
												A2(
													$elm$core$Maybe$andThen,
													A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $author$project$Main$emailFromEmailType),
													x_));
										}(
											$author$project$DictShow$current(el)))))));
				};
				var _v36 = A4(
					$author$project$Main$updateSearchesAt,
					F2(
						function (_v37, z) {
							return _Utils_Tuple2(
								A2(
									$author$project$Main$insertFirst,
									$author$project$Main$singleton(
										_Utils_Tuple2(
											0,
											e(z))),
									$author$project$DictShow$root(z)),
								$elm$core$Platform$Cmd$none);
						}),
					F2(
						function (n, _v38) {
							return n;
						}),
					rpath,
					model);
				var m_ = _v36.a;
				var c_ = _v36.b;
				return _Utils_Tuple2(m_, c_);
			case 'OfflineImap':
				var status = msg.a;
				return A2(
					$elm$core$Tuple$mapFirst,
					function (m) {
						return _Utils_update(
							m,
							{loading: status});
					},
					A4(
						$author$project$Main$updateSearchesAt,
						$author$project$Main$updateMapItemAt(
							F2(
								function (pa, x) {
									return _Utils_Tuple2(
										function () {
											if ((x.$ === 'Just') && (x.a.b.$ === 'Search')) {
												var _v40 = x.a;
												var b = _v40.a;
												var _v41 = _v40.b;
												var d = _v41.a;
												var ns = _v41.b;
												return $elm$core$Maybe$Just(
													_Utils_Tuple2(
														b,
														A2(
															$author$project$ElmailUrl$Search,
															$author$project$Touch$requestMatching(
																$author$project$Touch$requestSubqueriesCounts(
																	_Utils_update(
																		d,
																		{
																			status: $author$project$Query$Request($elm$core$Maybe$Nothing)
																		}))),
															ns)));
											} else {
												return x;
											}
										}(),
										A2(
											$elm$core$Platform$Cmd$map,
											$author$project$Main$ApiMsg(
												A2(
													$elm$core$Task$attempt,
													$elm$core$Basics$always($author$project$Main$CardClicked),
													$elm$core$Task$succeed(_Utils_Tuple0))),
											$author$project$API$quickpoll(
												$author$project$Main$aggregateSession(pa))));
								})),
						F2(
							function (n, _v42) {
								return n;
							}),
						rpath,
						model));
			case 'QueryAt':
				var f = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							searches: A2(
								$elm$core$Maybe$withDefault,
								model.searches,
								A3(
									$author$project$Main$mapOnRPath,
									F2(
										function (acc, z) {
											return A2(
												$author$project$DictShow$updateItem,
												$author$project$Main$justEval(
													f(acc)),
												z);
										}),
									rpath,
									model.searches))
						}),
					$elm$core$Platform$Cmd$none);
			case 'CardClicked':
				var clickf = F2(
					function (pa, z) {
						return A2(
							$elm$core$Tuple$mapSecond,
							$elm$core$Platform$Cmd$map(
								$author$project$Main$At(pa.rpath)),
							A3(
								$author$project$Main$updateMapItem,
								F2(
									function (_v45, e__) {
										return A3(
											$author$project$Main$chain,
											_List_fromArray(
												[$author$project$Main$cmdSearchShow, $author$project$Main$cmdCount]),
											pa,
											A2(
												$elm$core$Maybe$map,
												$elm$core$Tuple$mapSecond($author$project$Main$requestCount),
												e__));
									}),
								pa,
								z));
					});
				var _v43 = A4(
					$author$project$Main$updateSearchesAt,
					clickf,
					F2(
						function (n, _v44) {
							return n;
						}),
					rpath,
					model);
				var m = _v43.a;
				var c = _v43.b;
				return _Utils_Tuple2(m, c);
			case 'RequesterMsg':
				var debounceMsg = msg.a;
				return A4(
					$author$project$Main$updateSearchesAt,
					F2(
						function (pa, z) {
							var _v46 = $author$project$DictShow$current(z);
							if ((_v46.$ === 'Just') && (_v46.a.b.$ === 'Search')) {
								var _v47 = _v46.a;
								var b = _v47.a;
								var _v48 = _v47.b;
								var d = _v48.a;
								var s = _v48.b;
								return A3(
									$elm$core$Tuple$mapBoth,
									function (requester) {
										return A2(
											$author$project$DictShow$updateItem,
											$elm$core$Basics$always(
												$elm$core$Maybe$Just(
													_Utils_Tuple2(
														b,
														A2(
															$author$project$ElmailUrl$Search,
															_Utils_update(
																d,
																{requester: requester}),
															s)))),
											z);
									},
									$elm$core$Platform$Cmd$map(
										$author$project$Main$At(pa.rpath)),
									A2($pd_andy$elm_limiter$Limiter$update, debounceMsg, d.requester));
							} else {
								return _Utils_Tuple2(z, $elm$core$Platform$Cmd$none);
							}
						}),
					F2(
						function (n, _v49) {
							return n;
						}),
					rpath,
					model);
			case 'ApiMsg':
				var c = msg.a;
				var m = msg.b;
				return A2(
					$elm$core$Tuple$mapSecond,
					function (c_) {
						return $elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									A2(
									$elm$core$Platform$Cmd$map,
									$author$project$Main$At(rpath),
									c),
									c_
								]));
					},
					A3($author$project$Main$updateAPI, m, rpath, model));
			case 'MultiMsg':
				var mss = msg.a;
				return A2(
					$elm$core$Tuple$mapSecond,
					$elm$core$Platform$Cmd$batch,
					A3(
						$elm$core$List$foldl,
						F2(
							function (ms, _v50) {
								var m = _v50.a;
								var cs = _v50.b;
								var _v51 = A3($author$project$Main$updateNode, rpath, ms, m);
								var m_ = _v51.a;
								var c_ = _v51.b;
								return _Utils_Tuple2(
									m_,
									A2($elm$core$List$cons, c_, cs));
							}),
						_Utils_Tuple2(model, _List_Nil),
						mss));
			default:
				var m = msg.a;
				return A2($author$project$Main$update, m, model);
		}
	});
var $author$project$Grid$Position = F2(
	function (a, b) {
		return {$: 'Position', a: a, b: b};
	});
var $author$project$Grid$Right = {$: 'Right'};
var $author$project$Grid$Top = {$: 'Top'};
var $mdgriffith$elm_ui$Internal$Model$AlignY = function (a) {
	return {$: 'AlignY', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Bottom = {$: 'Bottom'};
var $mdgriffith$elm_ui$Element$alignBottom = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$Bottom);
var $mdgriffith$elm_ui$Internal$Model$AlignX = function (a) {
	return {$: 'AlignX', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Right = {$: 'Right'};
var $mdgriffith$elm_ui$Element$alignRight = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$Right);
var $mdgriffith$elm_ui$Internal$Model$Top = {$: 'Top'};
var $mdgriffith$elm_ui$Element$alignTop = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$Top);
var $phosphor_icons$phosphor_elm$Phosphor$binoculars = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('104'),
								$elm$svg$Svg$Attributes$y1('92'),
								$elm$svg$Svg$Attributes$x2('152'),
								$elm$svg$Svg$Attributes$y2('92'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M229.6,154.3,185.9,55A24.1,24.1,0,0,0,152,55V168'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M104,168V55a24.1,24.1,0,0,0-33.9,0L26.4,154.3'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('64'),
								$elm$svg$Svg$Attributes$cy('168'),
								$elm$svg$Svg$Attributes$r('40'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('192'),
								$elm$svg$Svg$Attributes$cy('168'),
								$elm$svg$Svg$Attributes$r('40'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('64'),
								$elm$svg$Svg$Attributes$cy('168'),
								$elm$svg$Svg$Attributes$r('40'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('192'),
								$elm$svg$Svg$Attributes$cy('168'),
								$elm$svg$Svg$Attributes$r('40'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('104'),
								$elm$svg$Svg$Attributes$y1('92'),
								$elm$svg$Svg$Attributes$x2('152'),
								$elm$svg$Svg$Attributes$y2('92'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M229.6,154.3,185.9,55A24.1,24.1,0,0,0,152,55V168'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M104,168V55a24.1,24.1,0,0,0-33.9,0L26.4,154.3'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('64'),
								$elm$svg$Svg$Attributes$cy('168'),
								$elm$svg$Svg$Attributes$r('40'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('192'),
								$elm$svg$Svg$Attributes$cy('168'),
								$elm$svg$Svg$Attributes$r('40'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M237.2,151.9h0c0-.1-.1-.1-.1-.2a42.3,42.3,0,0,0-2.3-5.3L193.3,51.8a8.1,8.1,0,0,0-1.7-2.4,32,32,0,0,0-45.3,0A7.9,7.9,0,0,0,144,55V84H112V55a7.9,7.9,0,0,0-2.3-5.6,32,32,0,0,0-45.3,0,8.1,8.1,0,0,0-1.7,2.4L21.2,146.3a42.3,42.3,0,0,0-2.3,5.3c0,.1-.1.1-.1.2h0A48,48,0,1,0,112,167.8V100h32v67.8a48,48,0,1,0,93.2-15.9Zm-143.1,27a32,32,0,0,1-60.2-21.7l1.8-4.1A32,32,0,0,1,96,167.9h0A32.1,32.1,0,0,1,94.1,178.9Zm108.8,19.2A32,32,0,0,1,160,168h0a32,32,0,0,1,60.3-14.8l1.8,4.1A32,32,0,0,1,202.9,198.1Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('104'),
								$elm$svg$Svg$Attributes$y1('92'),
								$elm$svg$Svg$Attributes$x2('152'),
								$elm$svg$Svg$Attributes$y2('92'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M229.6,154.3,185.9,55A24.1,24.1,0,0,0,152,55V168'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M104,168V55a24.1,24.1,0,0,0-33.9,0L26.4,154.3'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('64'),
								$elm$svg$Svg$Attributes$cy('168'),
								$elm$svg$Svg$Attributes$r('40'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('192'),
								$elm$svg$Svg$Attributes$cy('168'),
								$elm$svg$Svg$Attributes$r('40'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('104'),
								$elm$svg$Svg$Attributes$y1('92'),
								$elm$svg$Svg$Attributes$x2('152'),
								$elm$svg$Svg$Attributes$y2('92'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M229.6,154.3,185.9,55A24.1,24.1,0,0,0,152,55V168'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M104,168V55a24.1,24.1,0,0,0-33.9,0L26.4,154.3'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('64'),
								$elm$svg$Svg$Attributes$cy('168'),
								$elm$svg$Svg$Attributes$r('40'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('192'),
								$elm$svg$Svg$Attributes$cy('168'),
								$elm$svg$Svg$Attributes$r('40'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('104'),
								$elm$svg$Svg$Attributes$y1('92'),
								$elm$svg$Svg$Attributes$x2('152'),
								$elm$svg$Svg$Attributes$y2('92'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M229.6,154.3,185.9,55A24.1,24.1,0,0,0,152,55V168'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M104,168V55a24.1,24.1,0,0,0-33.9,0L26.4,154.3'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('64'),
								$elm$svg$Svg$Attributes$cy('168'),
								$elm$svg$Svg$Attributes$r('40'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('192'),
								$elm$svg$Svg$Attributes$cy('168'),
								$elm$svg$Svg$Attributes$r('40'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $mdgriffith$elm_ui$Internal$Model$CenterX = {$: 'CenterX'};
var $mdgriffith$elm_ui$Element$centerX = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$CenterX);
var $mdgriffith$elm_ui$Internal$Model$CenterY = {$: 'CenterY'};
var $mdgriffith$elm_ui$Element$centerY = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$CenterY);
var $Orasund$elm_ui_widgets$Internal$ProgressIndicator$circularProgressIndicator = F2(
	function (style, maybeProgress) {
		return style.elementFunction(maybeProgress);
	});
var $Orasund$elm_ui_widgets$Widget$circularProgressIndicator = $Orasund$elm_ui_widgets$Internal$ProgressIndicator$circularProgressIndicator;
var $mdgriffith$elm_ui$Internal$Model$Colored = F3(
	function (a, b, c) {
		return {$: 'Colored', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$StyleClass = F2(
	function (a, b) {
		return {$: 'StyleClass', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$fontColor = $mdgriffith$elm_ui$Internal$Flag$flag(14);
var $mdgriffith$elm_ui$Internal$Model$formatColorClass = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return $mdgriffith$elm_ui$Internal$Model$floatClass(red) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(green) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(blue) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(alpha))))));
};
var $mdgriffith$elm_ui$Element$Font$color = function (fontColor) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(fontColor),
			'color',
			fontColor));
};
var $mdgriffith$elm_ui$Internal$Model$AsColumn = {$: 'AsColumn'};
var $mdgriffith$elm_ui$Internal$Model$asColumn = $mdgriffith$elm_ui$Internal$Model$AsColumn;
var $mdgriffith$elm_ui$Internal$Model$Attr = function (a) {
	return {$: 'Attr', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$htmlClass = function (cls) {
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		$elm$html$Html$Attributes$class(cls));
};
var $mdgriffith$elm_ui$Element$column = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentTop + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.contentLeft)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $avh4$elm_color$Color$RgbaSpace = F4(
	function (a, b, c, d) {
		return {$: 'RgbaSpace', a: a, b: b, c: c, d: d};
	});
var $avh4$elm_color$Color$scaleFrom255 = function (c) {
	return c / 255;
};
var $avh4$elm_color$Color$rgb255 = F3(
	function (r, g, b) {
		return A4(
			$avh4$elm_color$Color$RgbaSpace,
			$avh4$elm_color$Color$scaleFrom255(r),
			$avh4$elm_color$Color$scaleFrom255(g),
			$avh4$elm_color$Color$scaleFrom255(b),
			1.0);
	});
var $Orasund$elm_ui_widgets$Internal$Material$Palette$defaultPalette = {
	background: A3($avh4$elm_color$Color$rgb255, 255, 255, 255),
	error: A3($avh4$elm_color$Color$rgb255, 176, 0, 32),
	on: {
		background: A3($avh4$elm_color$Color$rgb255, 0, 0, 0),
		error: A3($avh4$elm_color$Color$rgb255, 255, 255, 255),
		primary: A3($avh4$elm_color$Color$rgb255, 255, 255, 255),
		secondary: A3($avh4$elm_color$Color$rgb255, 0, 0, 0),
		surface: A3($avh4$elm_color$Color$rgb255, 0, 0, 0)
	},
	primary: A3($avh4$elm_color$Color$rgb255, 98, 0, 238),
	secondary: A3($avh4$elm_color$Color$rgb255, 3, 218, 198),
	surface: A3($avh4$elm_color$Color$rgb255, 255, 255, 255)
};
var $Orasund$elm_ui_widgets$Widget$Material$defaultPalette = $Orasund$elm_ui_widgets$Internal$Material$Palette$defaultPalette;
var $mdgriffith$elm_ui$Internal$Model$FontFamily = F2(
	function (a, b) {
		return {$: 'FontFamily', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$fontFamily = $mdgriffith$elm_ui$Internal$Flag$flag(5);
var $elm$core$String$words = _String_words;
var $mdgriffith$elm_ui$Internal$Model$renderFontClassName = F2(
	function (font, current) {
		return _Utils_ap(
			current,
			function () {
				switch (font.$) {
					case 'Serif':
						return 'serif';
					case 'SansSerif':
						return 'sans-serif';
					case 'Monospace':
						return 'monospace';
					case 'Typeface':
						var name = font.a;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					case 'ImportFont':
						var name = font.a;
						var url = font.b;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					default:
						var name = font.a.name;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
				}
			}());
	});
var $mdgriffith$elm_ui$Element$Font$family = function (families) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontFamily,
		A2(
			$mdgriffith$elm_ui$Internal$Model$FontFamily,
			A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'ff-', families),
			families));
};
var $author$project$Style$fontsize = {huge: 20, large: 16, normal: 14, one: 4, small: 12, tiny: 9};
var $author$project$Style$five = $author$project$Style$fontsize.normal;
var $mdgriffith$elm_ui$Internal$Model$Rgba = F4(
	function (a, b, c, d) {
		return {$: 'Rgba', a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Element$rgb255 = F3(
	function (red, green, blue) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, red / 255, green / 255, blue / 255, 1);
	});
var $Orasund$elm_ui_framework$Framework$Color$grey = A3($mdgriffith$elm_ui$Element$rgb255, 122, 122, 122);
var $mdgriffith$elm_ui$Internal$Model$PaddingStyle = F5(
	function (a, b, c, d, e) {
		return {$: 'PaddingStyle', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Flag$padding = $mdgriffith$elm_ui$Internal$Flag$flag(2);
var $mdgriffith$elm_ui$Internal$Model$paddingName = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left)))))));
	});
var $mdgriffith$elm_ui$Element$paddingEach = function (_v0) {
	var top = _v0.top;
	var right = _v0.right;
	var bottom = _v0.bottom;
	var left = _v0.left;
	if (_Utils_eq(top, right) && (_Utils_eq(top, bottom) && _Utils_eq(top, left))) {
		var topFloat = top;
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				'p-' + $elm$core$String$fromInt(top),
				topFloat,
				topFloat,
				topFloat,
				topFloat));
	} else {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				A4($mdgriffith$elm_ui$Internal$Model$paddingName, top, right, bottom, left),
				top,
				right,
				bottom,
				left));
	}
};
var $author$project$Style$padTopBottom = F2(
	function (top, bottom) {
		return $mdgriffith$elm_ui$Element$paddingEach(
			{bottom: bottom, left: 0, right: 0, top: top});
	});
var $mdgriffith$elm_ui$Internal$Model$FontSize = function (a) {
	return {$: 'FontSize', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$fontSize = $mdgriffith$elm_ui$Internal$Flag$flag(4);
var $mdgriffith$elm_ui$Element$Font$size = function (i) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontSize,
		$mdgriffith$elm_ui$Internal$Model$FontSize(i));
};
var $author$project$Style$h3 = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Font$size($author$project$Style$fontsize.large),
		A2($author$project$Style$padTopBottom, $author$project$Style$five, $author$project$Style$five)
	]);
var $mdgriffith$elm_ui$Internal$Model$Above = {$: 'Above'};
var $mdgriffith$elm_ui$Internal$Model$Nearby = F2(
	function (a, b) {
		return {$: 'Nearby', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$NoAttribute = {$: 'NoAttribute'};
var $mdgriffith$elm_ui$Element$createNearby = F2(
	function (loc, element) {
		if (element.$ === 'Empty') {
			return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
		} else {
			return A2($mdgriffith$elm_ui$Internal$Model$Nearby, loc, element);
		}
	});
var $mdgriffith$elm_ui$Element$above = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$Above, element);
};
var $mdgriffith$elm_ui$Internal$Model$Left = {$: 'Left'};
var $mdgriffith$elm_ui$Element$alignLeft = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$Left);
var $mdgriffith$elm_ui$Internal$Model$Below = {$: 'Below'};
var $mdgriffith$elm_ui$Element$below = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$Below, element);
};
var $mdgriffith$elm_ui$Element$htmlAttribute = $mdgriffith$elm_ui$Internal$Model$Attr;
var $mdgriffith$elm_ui$Internal$Model$InFront = {$: 'InFront'};
var $mdgriffith$elm_ui$Element$inFront = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$InFront, element);
};
var $mdgriffith$elm_ui$Internal$Model$OnLeft = {$: 'OnLeft'};
var $mdgriffith$elm_ui$Element$onLeft = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$OnLeft, element);
};
var $author$project$Grid$zindex = function (z) {
	return $mdgriffith$elm_ui$Element$htmlAttribute(
		A2($elm$html$Html$Attributes$style, 'z-index', z));
};
var $author$project$Grid$hanger = function (pos) {
	var translate = F2(
		function (x, y) {
			return $mdgriffith$elm_ui$Element$htmlAttribute(
				A2(
					$elm$html$Html$Attributes$style,
					'transform',
					'translate(' + ($elm$core$String$fromInt(x) + ('%, ' + ($elm$core$String$fromInt(y) + '%)')))));
		});
	switch (pos.a.$) {
		case 'Left':
			switch (pos.b.$) {
				case 'Bottom':
					var _v1 = pos.a;
					var _v2 = pos.b;
					return {
						inner: _List_fromArray(
							[$mdgriffith$elm_ui$Element$alignLeft, $mdgriffith$elm_ui$Element$alignBottom]),
						outer: _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$alignLeft,
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(0))
							]),
						positioner: $mdgriffith$elm_ui$Element$below
					};
				case 'CenterY':
					var _v3 = pos.a;
					var _v4 = pos.b;
					return {
						inner: _List_fromArray(
							[
								A2(translate, -50, -50)
							]),
						outer: _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$alignLeft,
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(0))
							]),
						positioner: $mdgriffith$elm_ui$Element$onLeft
					};
				default:
					var _v7 = pos.a;
					return {
						inner: _List_fromArray(
							[$mdgriffith$elm_ui$Element$alignLeft, $mdgriffith$elm_ui$Element$alignTop]),
						outer: _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$alignLeft,
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(0))
							]),
						positioner: $mdgriffith$elm_ui$Element$above
					};
			}
		case 'Right':
			switch (pos.b.$) {
				case 'Bottom':
					var _v5 = pos.a;
					var _v6 = pos.b;
					return {
						inner: _List_fromArray(
							[$mdgriffith$elm_ui$Element$alignRight, $mdgriffith$elm_ui$Element$alignBottom]),
						outer: _List_fromArray(
							[$mdgriffith$elm_ui$Element$alignRight]),
						positioner: $mdgriffith$elm_ui$Element$below
					};
				case 'CenterY':
					var _v8 = pos.a;
					var _v9 = pos.b;
					return {
						inner: _List_fromArray(
							[
								A2(translate, 50, -50)
							]),
						outer: _List_Nil,
						positioner: $mdgriffith$elm_ui$Element$inFront
					};
				default:
					var _v10 = pos.a;
					return {
						inner: _List_fromArray(
							[$mdgriffith$elm_ui$Element$alignRight, $mdgriffith$elm_ui$Element$alignTop]),
						outer: _List_fromArray(
							[$mdgriffith$elm_ui$Element$alignRight]),
						positioner: $mdgriffith$elm_ui$Element$above
					};
			}
		default:
			switch (pos.b.$) {
				case 'Top':
					var _v11 = pos.a;
					var _v12 = pos.b;
					return {
						inner: _List_fromArray(
							[
								A2(translate, 50, 50),
								$author$project$Grid$zindex('10')
							]),
						outer: _List_Nil,
						positioner: $mdgriffith$elm_ui$Element$above
					};
				case 'Bottom':
					var _v13 = pos.a;
					var _v14 = pos.b;
					return {
						inner: _List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						outer: _List_Nil,
						positioner: $mdgriffith$elm_ui$Element$below
					};
				default:
					var _v15 = pos.a;
					var _v16 = pos.b;
					return {
						inner: _List_fromArray(
							[
								A2(translate, 0, -50),
								$author$project$Grid$zindex('10')
							]),
						outer: _List_Nil,
						positioner: $mdgriffith$elm_ui$Element$inFront
					};
			}
	}
};
var $mdgriffith$elm_ui$Internal$Model$Empty = {$: 'Empty'};
var $mdgriffith$elm_ui$Element$none = $mdgriffith$elm_ui$Internal$Model$Empty;
var $author$project$Grid$hanging = F3(
	function (attrs, pos, x) {
		var attrs_ = _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(0))
			]);
		var _v0 = $author$project$Grid$hanger(pos);
		var inner = _v0.inner;
		var outer = _v0.outer;
		var positioner = _v0.positioner;
		return A2(
			$mdgriffith$elm_ui$Element$el,
			A2(
				$elm$core$List$cons,
				positioner(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_Utils_ap(inner, attrs),
						x)),
				_Utils_ap(attrs_, outer)),
			$mdgriffith$elm_ui$Element$none);
	});
var $elm$html$Html$Attributes$alt = $elm$html$Html$Attributes$stringProperty('alt');
var $elm$html$Html$Attributes$src = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'src',
		_VirtualDom_noJavaScriptOrHtmlUri(url));
};
var $mdgriffith$elm_ui$Element$image = F2(
	function (attrs, _v0) {
		var src = _v0.src;
		var description = _v0.description;
		var imageAttributes = A2(
			$elm$core$List$filter,
			function (a) {
				switch (a.$) {
					case 'Width':
						return true;
					case 'Height':
						return true;
					default:
						return false;
				}
			},
			attrs);
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.imageContainer),
				attrs),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[
						A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asEl,
						$mdgriffith$elm_ui$Internal$Model$NodeName('img'),
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Internal$Model$Attr(
									$elm$html$Html$Attributes$src(src)),
									$mdgriffith$elm_ui$Internal$Model$Attr(
									$elm$html$Html$Attributes$alt(description))
								]),
							imageAttributes),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil))
					])));
	});
var $mdgriffith$elm_ui$Internal$Model$OnlyDynamic = F2(
	function (a, b) {
		return {$: 'OnlyDynamic', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic = F2(
	function (a, b) {
		return {$: 'StaticRootAndDynamic', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$AllowHover = {$: 'AllowHover'};
var $mdgriffith$elm_ui$Internal$Model$Layout = {$: 'Layout'};
var $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle = {
	backgroundColor: $elm$core$Maybe$Nothing,
	borderColor: $elm$core$Maybe$Nothing,
	shadow: $elm$core$Maybe$Just(
		{
			blur: 0,
			color: A4($mdgriffith$elm_ui$Internal$Model$Rgba, 155 / 255, 203 / 255, 1, 1),
			offset: _Utils_Tuple2(0, 0),
			size: 3
		})
};
var $mdgriffith$elm_ui$Internal$Model$optionsToRecord = function (options) {
	var combine = F2(
		function (opt, record) {
			switch (opt.$) {
				case 'HoverOption':
					var hoverable = opt.a;
					var _v4 = record.hover;
					if (_v4.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								hover: $elm$core$Maybe$Just(hoverable)
							});
					} else {
						return record;
					}
				case 'FocusStyleOption':
					var focusStyle = opt.a;
					var _v5 = record.focus;
					if (_v5.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								focus: $elm$core$Maybe$Just(focusStyle)
							});
					} else {
						return record;
					}
				default:
					var renderMode = opt.a;
					var _v6 = record.mode;
					if (_v6.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								mode: $elm$core$Maybe$Just(renderMode)
							});
					} else {
						return record;
					}
			}
		});
	var andFinally = function (record) {
		return {
			focus: function () {
				var _v0 = record.focus;
				if (_v0.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle;
				} else {
					var focusable = _v0.a;
					return focusable;
				}
			}(),
			hover: function () {
				var _v1 = record.hover;
				if (_v1.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$AllowHover;
				} else {
					var hoverable = _v1.a;
					return hoverable;
				}
			}(),
			mode: function () {
				var _v2 = record.mode;
				if (_v2.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$Layout;
				} else {
					var actualMode = _v2.a;
					return actualMode;
				}
			}()
		};
	};
	return andFinally(
		A3(
			$elm$core$List$foldr,
			combine,
			{focus: $elm$core$Maybe$Nothing, hover: $elm$core$Maybe$Nothing, mode: $elm$core$Maybe$Nothing},
			options));
};
var $mdgriffith$elm_ui$Internal$Model$toHtml = F2(
	function (mode, el) {
		switch (el.$) {
			case 'Unstyled':
				var html = el.a;
				return html($mdgriffith$elm_ui$Internal$Model$asEl);
			case 'Styled':
				var styles = el.a.styles;
				var html = el.a.html;
				return A2(
					html,
					mode(styles),
					$mdgriffith$elm_ui$Internal$Model$asEl);
			case 'Text':
				var text = el.a;
				return $mdgriffith$elm_ui$Internal$Model$textElement(text);
			default:
				return $mdgriffith$elm_ui$Internal$Model$textElement('');
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderRoot = F3(
	function (optionList, attributes, child) {
		var options = $mdgriffith$elm_ui$Internal$Model$optionsToRecord(optionList);
		var embedStyle = function () {
			var _v0 = options.mode;
			if (_v0.$ === 'NoStaticStyleSheet') {
				return $mdgriffith$elm_ui$Internal$Model$OnlyDynamic(options);
			} else {
				return $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic(options);
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Internal$Model$toHtml,
			embedStyle,
			A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				attributes,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[child]))));
	});
var $mdgriffith$elm_ui$Internal$Model$SansSerif = {$: 'SansSerif'};
var $mdgriffith$elm_ui$Internal$Model$Typeface = function (a) {
	return {$: 'Typeface', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$bgColor = $mdgriffith$elm_ui$Internal$Flag$flag(8);
var $mdgriffith$elm_ui$Internal$Model$rootStyle = function () {
	var families = _List_fromArray(
		[
			$mdgriffith$elm_ui$Internal$Model$Typeface('Open Sans'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Helvetica'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Verdana'),
			$mdgriffith$elm_ui$Internal$Model$SansSerif
		]);
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$bgColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0)),
				'background-color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1)),
				'color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontSize,
			$mdgriffith$elm_ui$Internal$Model$FontSize(20)),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontFamily,
			A2(
				$mdgriffith$elm_ui$Internal$Model$FontFamily,
				A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'font-', families),
				families))
		]);
}();
var $mdgriffith$elm_ui$Element$layoutWith = F3(
	function (_v0, attrs, child) {
		var options = _v0.options;
		return A3(
			$mdgriffith$elm_ui$Internal$Model$renderRoot,
			options,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass(
					A2(
						$elm$core$String$join,
						' ',
						_List_fromArray(
							[$mdgriffith$elm_ui$Internal$Style$classes.root, $mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single]))),
				_Utils_ap($mdgriffith$elm_ui$Internal$Model$rootStyle, attrs)),
			child);
	});
var $mdgriffith$elm_ui$Element$layout = $mdgriffith$elm_ui$Element$layoutWith(
	{options: _List_Nil});
var $elm$html$Html$Attributes$href = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'href',
		_VirtualDom_noJavaScriptUri(url));
};
var $elm$html$Html$Attributes$rel = _VirtualDom_attribute('rel');
var $mdgriffith$elm_ui$Element$link = F2(
	function (attrs, _v0) {
		var url = _v0.url;
		var label = _v0.label;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.link)))),
								attrs))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $mdgriffith$elm_ui$Element$padding = function (x) {
	var f = x;
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$padding,
		A5(
			$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
			'p-' + $elm$core$String$fromInt(x),
			f,
			f,
			f,
			f));
};
var $mdgriffith$elm_ui$Internal$Model$Describe = function (a) {
	return {$: 'Describe', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Paragraph = {$: 'Paragraph'};
var $mdgriffith$elm_ui$Internal$Model$SpacingStyle = F3(
	function (a, b, c) {
		return {$: 'SpacingStyle', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Flag$spacing = $mdgriffith$elm_ui$Internal$Flag$flag(3);
var $mdgriffith$elm_ui$Internal$Model$spacingName = F2(
	function (x, y) {
		return 'spacing-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y)));
	});
var $mdgriffith$elm_ui$Element$spacing = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$spacing,
		A3(
			$mdgriffith$elm_ui$Internal$Model$SpacingStyle,
			A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, x),
			x,
			x));
};
var $mdgriffith$elm_ui$Element$paragraph = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asParagraph,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Paragraph),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$spacing(5),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $elm$core$Basics$clamp = F3(
	function (low, high, number) {
		return (_Utils_cmp(number, low) < 0) ? low : ((_Utils_cmp(number, high) > 0) ? high : number);
	});
var $elm$svg$Svg$g = $elm$svg$Svg$trustedNode('g');
var $elm$svg$Svg$Attributes$strokeDasharray = _VirtualDom_attribute('stroke-dasharray');
var $elm$svg$Svg$Attributes$strokeDashoffset = _VirtualDom_attribute('stroke-dashoffset');
var $elm$svg$Svg$Attributes$transform = _VirtualDom_attribute('transform');
var $Orasund$elm_ui_widgets$Internal$Material$ProgressIndicator$determinateCircularIcon = F3(
	function (color, attribs, progress) {
		var strokeDashoffset = function () {
			var clampedProgress = A3($elm$core$Basics$clamp, 0, 1, progress);
			return $elm$core$Basics$round(188 - (188 * clampedProgress));
		}();
		return A2(
			$mdgriffith$elm_ui$Element$el,
			attribs,
			$mdgriffith$elm_ui$Element$html(
				A2(
					$elm$svg$Svg$svg,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$height('48px'),
							$elm$svg$Svg$Attributes$width('48px'),
							$elm$svg$Svg$Attributes$viewBox('0 0 66 66'),
							$elm$svg$Svg$Attributes$xmlSpace('http://www.w3.org/2000/svg')
						]),
					_List_fromArray(
						[
							A2(
							$elm$svg$Svg$g,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$elm$svg$Svg$circle,
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$fill('none'),
											$elm$svg$Svg$Attributes$stroke(
											$avh4$elm_color$Color$toCssString(color)),
											$elm$svg$Svg$Attributes$strokeWidth('5'),
											$elm$svg$Svg$Attributes$strokeLinecap('butt'),
											$elm$svg$Svg$Attributes$cx('33'),
											$elm$svg$Svg$Attributes$cy('33'),
											$elm$svg$Svg$Attributes$r('30'),
											$elm$svg$Svg$Attributes$strokeDasharray('188 188'),
											$elm$svg$Svg$Attributes$strokeDashoffset(
											$elm$core$String$fromInt(strokeDashoffset)),
											$elm$svg$Svg$Attributes$transform('rotate(-90 33 33)')
										]),
									_List_Nil)
								]))
						]))));
	});
var $elm$svg$Svg$animate = $elm$svg$Svg$trustedNode('animate');
var $elm$svg$Svg$animateTransform = $elm$svg$Svg$trustedNode('animateTransform');
var $elm$svg$Svg$Attributes$attributeName = _VirtualDom_attribute('attributeName');
var $elm$svg$Svg$Attributes$begin = _VirtualDom_attribute('begin');
var $elm$svg$Svg$Attributes$dur = _VirtualDom_attribute('dur');
var $elm$svg$Svg$Attributes$repeatCount = _VirtualDom_attribute('repeatCount');
var $elm$svg$Svg$Attributes$type_ = _VirtualDom_attribute('type');
var $elm$svg$Svg$Attributes$values = function (value) {
	return A2(
		_VirtualDom_attribute,
		'values',
		_VirtualDom_noJavaScriptUri(value));
};
var $Orasund$elm_ui_widgets$Internal$Material$ProgressIndicator$indeterminateCircularIcon = F2(
	function (color, attribs) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			attribs,
			$mdgriffith$elm_ui$Element$html(
				A2(
					$elm$svg$Svg$svg,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$height('48px'),
							$elm$svg$Svg$Attributes$width('48px'),
							$elm$svg$Svg$Attributes$viewBox('0 0 66 66'),
							$elm$svg$Svg$Attributes$xmlSpace('http://www.w3.org/2000/svg')
						]),
					_List_fromArray(
						[
							A2(
							$elm$svg$Svg$g,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$elm$svg$Svg$animateTransform,
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$attributeName('transform'),
											$elm$svg$Svg$Attributes$type_('rotate'),
											$elm$svg$Svg$Attributes$values('0 33 33;270 33 33'),
											$elm$svg$Svg$Attributes$begin('0s'),
											$elm$svg$Svg$Attributes$dur('1.4s'),
											$elm$svg$Svg$Attributes$fill('freeze'),
											$elm$svg$Svg$Attributes$repeatCount('indefinite')
										]),
									_List_Nil),
									A2(
									$elm$svg$Svg$circle,
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$fill('none'),
											$elm$svg$Svg$Attributes$stroke(
											$avh4$elm_color$Color$toCssString(color)),
											$elm$svg$Svg$Attributes$strokeWidth('5'),
											$elm$svg$Svg$Attributes$strokeLinecap('square'),
											$elm$svg$Svg$Attributes$cx('33'),
											$elm$svg$Svg$Attributes$cy('33'),
											$elm$svg$Svg$Attributes$r('30'),
											$elm$svg$Svg$Attributes$strokeDasharray('187'),
											$elm$svg$Svg$Attributes$strokeDashoffset('610')
										]),
									_List_fromArray(
										[
											A2(
											$elm$svg$Svg$animateTransform,
											_List_fromArray(
												[
													$elm$svg$Svg$Attributes$attributeName('transform'),
													$elm$svg$Svg$Attributes$type_('rotate'),
													$elm$svg$Svg$Attributes$values('0 33 33;135 33 33;450 33 33'),
													$elm$svg$Svg$Attributes$begin('0s'),
													$elm$svg$Svg$Attributes$dur('1.4s'),
													$elm$svg$Svg$Attributes$fill('freeze'),
													$elm$svg$Svg$Attributes$repeatCount('indefinite')
												]),
											_List_Nil),
											A2(
											$elm$svg$Svg$animate,
											_List_fromArray(
												[
													$elm$svg$Svg$Attributes$attributeName('stroke-dashoffset'),
													$elm$svg$Svg$Attributes$values('187;46.75;187'),
													$elm$svg$Svg$Attributes$begin('0s'),
													$elm$svg$Svg$Attributes$dur('1.4s'),
													$elm$svg$Svg$Attributes$fill('freeze'),
													$elm$svg$Svg$Attributes$repeatCount('indefinite')
												]),
											_List_Nil)
										]))
								]))
						]))));
	});
var $Orasund$elm_ui_widgets$Internal$Material$ProgressIndicator$progressIndicator = function (palette) {
	return {
		elementFunction: function (maybeProgress) {
			if (maybeProgress.$ === 'Nothing') {
				return A2($Orasund$elm_ui_widgets$Internal$Material$ProgressIndicator$indeterminateCircularIcon, palette.primary, _List_Nil);
			} else {
				var progress = maybeProgress.a;
				return A3($Orasund$elm_ui_widgets$Internal$Material$ProgressIndicator$determinateCircularIcon, palette.primary, _List_Nil, progress);
			}
		}
	};
};
var $Orasund$elm_ui_widgets$Widget$Material$progressIndicator = $Orasund$elm_ui_widgets$Internal$Material$ProgressIndicator$progressIndicator;
var $mdgriffith$elm_ui$Internal$Model$AsRow = {$: 'AsRow'};
var $mdgriffith$elm_ui$Internal$Model$asRow = $mdgriffith$elm_ui$Internal$Model$AsRow;
var $mdgriffith$elm_ui$Element$row = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asRow,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Element$Font$sansSerif = $mdgriffith$elm_ui$Internal$Model$SansSerif;
var $author$project$Style$ten = $author$project$Style$fontsize.huge;
var $mdgriffith$elm_ui$Internal$Model$Text = function (a) {
	return {$: 'Text', a: a};
};
var $mdgriffith$elm_ui$Element$text = function (content) {
	return $mdgriffith$elm_ui$Internal$Model$Text(content);
};
var $mdgriffith$elm_ui$Internal$Model$AsTextColumn = {$: 'AsTextColumn'};
var $mdgriffith$elm_ui$Internal$Model$asTextColumn = $mdgriffith$elm_ui$Internal$Model$AsTextColumn;
var $mdgriffith$elm_ui$Internal$Model$Max = F2(
	function (a, b) {
		return {$: 'Max', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$maximum = F2(
	function (i, l) {
		return A2($mdgriffith$elm_ui$Internal$Model$Max, i, l);
	});
var $mdgriffith$elm_ui$Internal$Model$Min = F2(
	function (a, b) {
		return {$: 'Min', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$minimum = F2(
	function (i, l) {
		return A2($mdgriffith$elm_ui$Internal$Model$Min, i, l);
	});
var $mdgriffith$elm_ui$Element$textColumn = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asTextColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width(
					A2(
						$mdgriffith$elm_ui$Element$maximum,
						750,
						A2($mdgriffith$elm_ui$Element$minimum, 500, $mdgriffith$elm_ui$Element$fill))),
				attrs),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $author$project$Style$two = $author$project$Style$fontsize.tiny;
var $mdgriffith$elm_ui$Element$Font$typeface = $mdgriffith$elm_ui$Internal$Model$Typeface;
var $author$project$Main$DoQueryShow = F2(
	function (a, b) {
		return {$: 'DoQueryShow', a: a, b: b};
	});
var $author$project$Access$body = {
	get: function ($) {
		return $.body;
	},
	set: F2(
		function (value, h) {
			return _Utils_update(
				h,
				{body: value});
		})
};
var $avh4$elm_color$Color$toRgba = function (_v0) {
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	var a = _v0.d;
	return {alpha: a, blue: b, green: g, red: r};
};
var $noahzgordon$elm_color_extra$Color$Accessibility$luminance = function (cl) {
	var f = function (intensity) {
		return (intensity <= 0.03928) ? (intensity / 12.92) : A2($elm$core$Basics$pow, (intensity + 0.055) / 1.055, 2.4);
	};
	var _v0 = function (a) {
		return _Utils_Tuple3(
			f(a.red),
			f(a.green),
			f(a.blue));
	}(
		$avh4$elm_color$Color$toRgba(cl));
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	return ((0.2126 * r) + (0.7152 * g)) + (0.0722 * b);
};
var $Orasund$elm_ui_widgets$Widget$Material$Color$accessibleTextColor = function (color) {
	var l = 1 + ($avh4$elm_color$Color$toRgba(color).alpha * ($noahzgordon$elm_color_extra$Color$Accessibility$luminance(color) - 1));
	var ratioBlack = 1.05 / (l + 0.05);
	var ratioWhite = (l + 0.05) / 0.05;
	return (_Utils_cmp(ratioBlack, ratioWhite) < 0) ? A3($avh4$elm_color$Color$rgb255, 0, 0, 0) : A3($avh4$elm_color$Color$rgb255, 255, 255, 255);
};
var $mdgriffith$elm_ui$Element$Background$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$bgColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'background-color',
			clr));
};
var $mdgriffith$elm_ui$Internal$Flag$borderColor = $mdgriffith$elm_ui$Internal$Flag$flag(28);
var $mdgriffith$elm_ui$Element$Border$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'border-color',
			clr));
};
var $mdgriffith$elm_ui$Element$fromRgb = function (clr) {
	return A4($mdgriffith$elm_ui$Internal$Model$Rgba, clr.red, clr.green, clr.blue, clr.alpha);
};
var $Orasund$elm_ui_widgets$Widget$Material$Color$fromColor = A2($elm$core$Basics$composeR, $avh4$elm_color$Color$toRgba, $mdgriffith$elm_ui$Element$fromRgb);
var $mdgriffith$elm_ui$Internal$Model$Hover = {$: 'Hover'};
var $mdgriffith$elm_ui$Internal$Model$PseudoSelector = F2(
	function (a, b) {
		return {$: 'PseudoSelector', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$hover = $mdgriffith$elm_ui$Internal$Flag$flag(33);
var $mdgriffith$elm_ui$Internal$Model$TransformComponent = F2(
	function (a, b) {
		return {$: 'TransformComponent', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$map = F2(
	function (fn, el) {
		switch (el.$) {
			case 'Styled':
				var styled = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: F2(
							function (add, context) {
								return A2(
									$elm$virtual_dom$VirtualDom$map,
									fn,
									A2(styled.html, add, context));
							}),
						styles: styled.styles
					});
			case 'Unstyled':
				var html = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A2(
						$elm$core$Basics$composeL,
						$elm$virtual_dom$VirtualDom$map(fn),
						html));
			case 'Text':
				var str = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Text(str);
			default:
				return $mdgriffith$elm_ui$Internal$Model$Empty;
		}
	});
var $elm$virtual_dom$VirtualDom$mapAttribute = _VirtualDom_mapAttribute;
var $mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle = F2(
	function (fn, attr) {
		switch (attr.$) {
			case 'NoAttribute':
				return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
			case 'Describe':
				var description = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Describe(description);
			case 'AlignX':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignX(x);
			case 'AlignY':
				var y = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignY(y);
			case 'Width':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Width(x);
			case 'Height':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Height(x);
			case 'Class':
				var x = attr.a;
				var y = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Class, x, y);
			case 'StyleClass':
				var flag = attr.a;
				var style = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, flag, style);
			case 'Nearby':
				var location = attr.a;
				var elem = attr.b;
				return A2(
					$mdgriffith$elm_ui$Internal$Model$Nearby,
					location,
					A2($mdgriffith$elm_ui$Internal$Model$map, fn, elem));
			case 'Attr':
				var htmlAttr = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Attr(
					A2($elm$virtual_dom$VirtualDom$mapAttribute, fn, htmlAttr));
			default:
				var fl = attr.a;
				var trans = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$TransformComponent, fl, trans);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$removeNever = function (style) {
	return A2($mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle, $elm$core$Basics$never, style);
};
var $mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper = F2(
	function (attr, _v0) {
		var styles = _v0.a;
		var trans = _v0.b;
		var _v1 = $mdgriffith$elm_ui$Internal$Model$removeNever(attr);
		switch (_v1.$) {
			case 'StyleClass':
				var style = _v1.b;
				return _Utils_Tuple2(
					A2($elm$core$List$cons, style, styles),
					trans);
			case 'TransformComponent':
				var flag = _v1.a;
				var component = _v1.b;
				return _Utils_Tuple2(
					styles,
					A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, trans, component));
			default:
				return _Utils_Tuple2(styles, trans);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$unwrapDecorations = function (attrs) {
	var _v0 = A3(
		$elm$core$List$foldl,
		$mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper,
		_Utils_Tuple2(_List_Nil, $mdgriffith$elm_ui$Internal$Model$Untransformed),
		attrs);
	var styles = _v0.a;
	var transform = _v0.b;
	return A2(
		$elm$core$List$cons,
		$mdgriffith$elm_ui$Internal$Model$Transform(transform),
		styles);
};
var $mdgriffith$elm_ui$Element$mouseOver = function (decs) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$hover,
		A2(
			$mdgriffith$elm_ui$Internal$Model$PseudoSelector,
			$mdgriffith$elm_ui$Internal$Model$Hover,
			$mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
};
var $mdgriffith$elm_ui$Element$paddingXY = F2(
	function (x, y) {
		if (_Utils_eq(x, y)) {
			var f = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + $elm$core$String$fromInt(x),
					f,
					f,
					f,
					f));
		} else {
			var yFloat = y;
			var xFloat = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
					yFloat,
					xFloat,
					yFloat,
					xFloat));
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$borderRound = $mdgriffith$elm_ui$Internal$Flag$flag(17);
var $mdgriffith$elm_ui$Element$Border$roundEach = function (_v0) {
	var topLeft = _v0.topLeft;
	var topRight = _v0.topRight;
	var bottomLeft = _v0.bottomLeft;
	var bottomRight = _v0.bottomRight;
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderRound,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'br-' + ($elm$core$String$fromInt(topLeft) + ('-' + ($elm$core$String$fromInt(topRight) + ($elm$core$String$fromInt(bottomLeft) + ('-' + $elm$core$String$fromInt(bottomRight)))))),
			'border-radius',
			$elm$core$String$fromInt(topLeft) + ('px ' + ($elm$core$String$fromInt(topRight) + ('px ' + ($elm$core$String$fromInt(bottomRight) + ('px ' + ($elm$core$String$fromInt(bottomLeft) + 'px'))))))));
};
var $mdgriffith$elm_ui$Element$Border$rounded = function (radius) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderRound,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'br-' + $elm$core$String$fromInt(radius),
			'border-radius',
			$elm$core$String$fromInt(radius) + 'px'));
};
var $avh4$elm_color$Color$fromRgba = function (components) {
	return A4($avh4$elm_color$Color$RgbaSpace, components.red, components.green, components.blue, components.alpha);
};
var $Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity = function (opacity) {
	return A2(
		$elm$core$Basics$composeR,
		$avh4$elm_color$Color$toRgba,
		A2(
			$elm$core$Basics$composeR,
			function (color) {
				return _Utils_update(
					color,
					{alpha: color.alpha * opacity});
			},
			$avh4$elm_color$Color$fromRgba));
};
var $mdgriffith$elm_ui$Internal$Model$boxShadowClass = function (shadow) {
	return $elm$core$String$concat(
		_List_fromArray(
			[
				shadow.inset ? 'box-inset' : 'box-',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.offset.a) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.offset.b) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.blur) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.size) + 'px',
				$mdgriffith$elm_ui$Internal$Model$formatColorClass(shadow.color)
			]));
};
var $mdgriffith$elm_ui$Internal$Flag$shadows = $mdgriffith$elm_ui$Internal$Flag$flag(19);
var $mdgriffith$elm_ui$Element$Border$shadow = function (almostShade) {
	var shade = {blur: almostShade.blur, color: almostShade.color, inset: false, offset: almostShade.offset, size: almostShade.size};
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$shadows,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			$mdgriffith$elm_ui$Internal$Model$boxShadowClass(shade),
			'box-shadow',
			$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(shade)));
};
var $mdgriffith$elm_ui$Element$rgba255 = F4(
	function (red, green, blue, a) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, red / 255, green / 255, blue / 255, a);
	});
var $Orasund$elm_ui_widgets$Widget$Material$Color$shadow = function (_float) {
	return {
		blur: _float,
		color: A4($mdgriffith$elm_ui$Element$rgba255, 0, 0, 0, 0.2),
		offset: _Utils_Tuple2(0, _float),
		size: 0
	};
};
var $mdgriffith$elm_ui$Internal$Model$BorderWidth = F5(
	function (a, b, c, d, e) {
		return {$: 'BorderWidth', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Element$Border$width = function (v) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + $elm$core$String$fromInt(v),
			v,
			v,
			v,
			v));
};
var $Orasund$elm_ui_widgets$Internal$Material$List$cardColumn = function (palette) {
	return {
		content: {
			element: _List_fromArray(
				[
					A2($mdgriffith$elm_ui$Element$paddingXY, 16, 12),
					$mdgriffith$elm_ui$Element$Background$color(
					$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(palette.surface)),
					$mdgriffith$elm_ui$Element$Font$color(
					$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
						$Orasund$elm_ui_widgets$Widget$Material$Color$accessibleTextColor(palette.surface))),
					$mdgriffith$elm_ui$Element$Border$color(
					$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
						A2($Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity, 0.14, palette.on.surface))),
					$mdgriffith$elm_ui$Element$width(
					A2($mdgriffith$elm_ui$Element$minimum, 344, $mdgriffith$elm_ui$Element$fill))
				]),
			ifFirst: _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Border$roundEach(
					{bottomLeft: 0, bottomRight: 0, topLeft: 4, topRight: 4})
				]),
			ifLast: _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Border$roundEach(
					{bottomLeft: 4, bottomRight: 4, topLeft: 0, topRight: 0})
				]),
			ifSingleton: _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Border$rounded(4),
					$mdgriffith$elm_ui$Element$Border$width(1)
				]),
			otherwise: _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Border$rounded(0)
				])
		},
		elementColumn: _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$mouseOver(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Border$shadow(
						$Orasund$elm_ui_widgets$Widget$Material$Color$shadow(4))
					])),
				$mdgriffith$elm_ui$Element$alignTop,
				$mdgriffith$elm_ui$Element$Border$rounded(4),
				$mdgriffith$elm_ui$Element$Border$width(1),
				$mdgriffith$elm_ui$Element$Border$color(
				$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
					A2($Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity, 0.14, palette.on.surface)))
			])
	};
};
var $Orasund$elm_ui_widgets$Internal$Material$List$cardAttributes = function (palette) {
	var style = $Orasund$elm_ui_widgets$Internal$Material$List$cardColumn(palette);
	return _Utils_ap(style.elementColumn, style.content.element);
};
var $Orasund$elm_ui_widgets$Widget$Material$cardAttributes = $Orasund$elm_ui_widgets$Internal$Material$List$cardAttributes;
var $author$project$Access$background = {
	get: function ($) {
		return $.background;
	},
	set: F2(
		function (value, h) {
			return _Utils_update(
				h,
				{background: value});
		})
};
var $Orasund$elm_ui_widgets$Widget$Material$Color$buttonPressedOpacity = 0.32;
var $author$project$Access$primary = {
	get: function ($) {
		return $.primary;
	},
	set: F2(
		function (value, h) {
			return _Utils_update(
				h,
				{primary: value});
		})
};
var $avh4$elm_color$Color$rgba = F4(
	function (r, g, b, a) {
		return A4($avh4$elm_color$Color$RgbaSpace, r, g, b, a);
	});
var $author$project$Access$secondary = {
	get: function ($) {
		return $.secondary;
	},
	set: F2(
		function (value, h) {
			return _Utils_update(
				h,
				{secondary: value});
		})
};
var $author$project$Style$palette = function () {
	var yellow = A3($avh4$elm_color$Color$rgb255, 255, 255, 175);
	var red = A4($avh4$elm_color$Color$rgba, 1.0, 0.0, 0.0, 0.05);
	var green = A3($avh4$elm_color$Color$rgb255, 53, 132, 84);
	var blue = A3($avh4$elm_color$Color$rgb255, 32, 116, 170);
	var base = $Orasund$elm_ui_widgets$Widget$Material$defaultPalette;
	return {
		action: _Utils_update(
			base,
			{primary: red}),
		base: base,
		count: _Utils_update(
			base,
			{
				on: A2(
					$author$project$Access$primary.set,
					A2($Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity, $Orasund$elm_ui_widgets$Widget$Material$Color$buttonPressedOpacity, yellow),
					base.on),
				primary: A3($avh4$elm_color$Color$rgb255, 0, 0, 0)
			}),
		_default: _Utils_update(
			base,
			{
				background: A3($avh4$elm_color$Color$rgb255, 250, 250, 250),
				primary: A3($avh4$elm_color$Color$rgb255, 90, 70, 0),
				surface: A3($avh4$elm_color$Color$rgb255, 255, 255, 240)
			}),
		email: _Utils_update(
			base,
			{
				background: base.background,
				surface: A3($avh4$elm_color$Color$rgb255, 250, 255, 250)
			}),
		person: _Utils_update(
			base,
			{
				on: A2(
					$author$project$Access$secondary.set,
					A3($avh4$elm_color$Color$rgb255, 244, 255, 217),
					A2(
						$author$project$Access$primary.set,
						A3($avh4$elm_color$Color$rgb255, 244, 255, 217),
						base.on)),
				primary: green,
				secondary: green
			}),
		search: _Utils_update(
			base,
			{
				background: A3($avh4$elm_color$Color$rgb255, 18, 48, 18),
				on: A2(
					$author$project$Access$background.set,
					A3($avh4$elm_color$Color$rgb255, 252, 252, 255),
					base.on),
				surface: A3($avh4$elm_color$Color$rgb255, 250, 250, 255)
			}),
		tag: _Utils_update(
			base,
			{
				on: A2(
					$author$project$Access$primary.set,
					A3($avh4$elm_color$Color$rgb255, 0, 0, 0),
					base.on),
				primary: blue,
				secondary: red
			})
	};
}();
var $author$project$Style$cardAttributes = function (p) {
	return _Utils_ap(
		$Orasund$elm_ui_widgets$Widget$Material$cardAttributes(p),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(0),
				$mdgriffith$elm_ui$Element$Background$color(
				$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor($author$project$Style$palette._default.background)),
				$mdgriffith$elm_ui$Element$Border$rounded($author$project$Style$five),
				$mdgriffith$elm_ui$Element$Border$width(0)
			]));
};
var $author$project$Style$fontsizeE = function (f) {
	return $mdgriffith$elm_ui$Element$Font$size(f);
};
var $elm$core$Basics$cos = _Basics_cos;
var $noahzgordon$elm_color_extra$Color$Convert$labToXyz = function (_v0) {
	var l = _v0.l;
	var a = _v0.a;
	var b = _v0.b;
	var y = (l + 16) / 116;
	var c = function (ch) {
		var ch_ = (ch * ch) * ch;
		return (ch_ > 8.856e-3) ? ch_ : ((ch - (16 / 116)) / 7.787);
	};
	return {
		x: c(y + (a / 500)) * 95.047,
		y: c(y) * 100,
		z: c(y - (b / 200)) * 108.883
	};
};
var $avh4$elm_color$Color$rgb = F3(
	function (r, g, b) {
		return A4($avh4$elm_color$Color$RgbaSpace, r, g, b, 1.0);
	});
var $noahzgordon$elm_color_extra$Color$Convert$xyzToColor = function (_v0) {
	var x = _v0.x;
	var y = _v0.y;
	var z = _v0.z;
	var z_ = z / 100;
	var y_ = y / 100;
	var x_ = x / 100;
	var r = ((x_ * 3.2404542) + (y_ * (-1.5371385))) + (z_ * (-0.4986));
	var g = ((x_ * (-0.969266)) + (y_ * 1.8760108)) + (z_ * 4.1556e-2);
	var c = function (ch) {
		var ch_ = (ch > 3.1308e-3) ? ((1.055 * A2($elm$core$Basics$pow, ch, 1 / 2.4)) - 5.5e-2) : (12.92 * ch);
		return A3($elm$core$Basics$clamp, 0, 1, ch_);
	};
	var b = ((x_ * 5.56434e-2) + (y_ * (-0.2040259))) + (z_ * 1.0572252);
	return A3(
		$avh4$elm_color$Color$rgb,
		c(r),
		c(g),
		c(b));
};
var $noahzgordon$elm_color_extra$Color$Convert$labToColor = A2($elm$core$Basics$composeR, $noahzgordon$elm_color_extra$Color$Convert$labToXyz, $noahzgordon$elm_color_extra$Color$Convert$xyzToColor);
var $elm$core$Basics$sin = _Basics_sin;
var $Orasund$elm_ui_widgets$Widget$Material$Color$fromCIELCH = A2(
	$elm$core$Basics$composeR,
	function (_v0) {
		var l = _v0.l;
		var c = _v0.c;
		var h = _v0.h;
		return {
			a: c * $elm$core$Basics$cos(h),
			b: c * $elm$core$Basics$sin(h),
			l: l
		};
	},
	$noahzgordon$elm_color_extra$Color$Convert$labToColor);
var $elm$core$Basics$atan2 = _Basics_atan2;
var $noahzgordon$elm_color_extra$Color$Convert$colorToXyz = function (cl) {
	var c = function (ch) {
		var ch_ = (ch > 4.045e-2) ? A2($elm$core$Basics$pow, (ch + 5.5e-2) / 1.055, 2.4) : (ch / 12.92);
		return ch_ * 100;
	};
	var _v0 = $avh4$elm_color$Color$toRgba(cl);
	var red = _v0.red;
	var green = _v0.green;
	var blue = _v0.blue;
	var b = c(blue);
	var g = c(green);
	var r = c(red);
	return {x: ((r * 0.4124) + (g * 0.3576)) + (b * 0.1805), y: ((r * 0.2126) + (g * 0.7152)) + (b * 7.22e-2), z: ((r * 1.93e-2) + (g * 0.1192)) + (b * 0.9505)};
};
var $noahzgordon$elm_color_extra$Color$Convert$xyzToLab = function (_v0) {
	var x = _v0.x;
	var y = _v0.y;
	var z = _v0.z;
	var c = function (ch) {
		return (ch > 8.856e-3) ? A2($elm$core$Basics$pow, ch, 1 / 3) : ((7.787 * ch) + (16 / 116));
	};
	var x_ = c(x / 95.047);
	var y_ = c(y / 100);
	var z_ = c(z / 108.883);
	return {a: 500 * (x_ - y_), b: 200 * (y_ - z_), l: (116 * y_) - 16};
};
var $noahzgordon$elm_color_extra$Color$Convert$colorToLab = A2($elm$core$Basics$composeR, $noahzgordon$elm_color_extra$Color$Convert$colorToXyz, $noahzgordon$elm_color_extra$Color$Convert$xyzToLab);
var $elm$core$Basics$sqrt = _Basics_sqrt;
var $Orasund$elm_ui_widgets$Widget$Material$Color$toCIELCH = A2(
	$elm$core$Basics$composeR,
	$noahzgordon$elm_color_extra$Color$Convert$colorToLab,
	function (_v0) {
		var l = _v0.l;
		var a = _v0.a;
		var b = _v0.b;
		return {
			c: $elm$core$Basics$sqrt((a * a) + (b * b)),
			h: A2($elm$core$Basics$atan2, b, a),
			l: l
		};
	});
var $Orasund$elm_ui_widgets$Widget$Material$Color$withShade = F3(
	function (c2, amount, c1) {
		var fun = F2(
			function (a, b) {
				return {c: ((a.c * (1 - amount)) + (b.c * amount)) / 1, h: ((a.h * (1 - amount)) + (b.h * amount)) / 1, l: ((a.l * (1 - amount)) + (b.l * amount)) / 1};
			});
		var alpha = $avh4$elm_color$Color$toRgba(c1).alpha;
		return $avh4$elm_color$Color$fromRgba(
			function (color) {
				return _Utils_update(
					color,
					{alpha: alpha});
			}(
				$avh4$elm_color$Color$toRgba(
					$Orasund$elm_ui_widgets$Widget$Material$Color$fromCIELCH(
						A2(
							fun,
							$Orasund$elm_ui_widgets$Widget$Material$Color$toCIELCH(c1),
							$Orasund$elm_ui_widgets$Widget$Material$Color$toCIELCH(c2))))));
	});
var $Orasund$elm_ui_widgets$Internal$Material$Palette$gray = function (palette) {
	return A3($Orasund$elm_ui_widgets$Widget$Material$Color$withShade, palette.on.surface, 0.5, palette.surface);
};
var $Orasund$elm_ui_widgets$Widget$Material$gray = $Orasund$elm_ui_widgets$Internal$Material$Palette$gray;
var $author$project$Style$htmlStyle = F2(
	function (name, val) {
		return $mdgriffith$elm_ui$Element$htmlAttribute(
			A2($elm$html$Html$Attributes$style, name, val));
	});
var $mdgriffith$elm_ui$Element$spacingXY = F2(
	function (x, y) {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$spacing,
			A3(
				$mdgriffith$elm_ui$Internal$Model$SpacingStyle,
				A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, y),
				x,
				y));
	});
var $author$project$Plaintext$wordWrap = $mdgriffith$elm_ui$Element$htmlAttribute(
	A2($elm$html$Html$Attributes$style, 'word-break', 'break-word'));
var $author$project$Style$defaultEmailStyle = {
	body: _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
			$mdgriffith$elm_ui$Element$paddingEach(
			{bottom: $author$project$Style$five, left: $author$project$Style$five, right: $author$project$Style$five, top: 0}),
			$mdgriffith$elm_ui$Element$Border$roundEach(
			{bottomLeft: 0, bottomRight: $author$project$Style$five, topLeft: 0, topRight: 0})
		]),
	elementColumn: _Utils_ap(
		$author$project$Style$cardAttributes($author$project$Style$palette._default),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(0),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$Border$roundEach(
				{bottomLeft: 0, bottomRight: $author$project$Style$five, topLeft: 0, topRight: 0}),
				$author$project$Style$fontsizeE($author$project$Style$fontsize.normal),
				$mdgriffith$elm_ui$Element$padding(0)
			])),
	header: _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
			$mdgriffith$elm_ui$Element$spacing(0)
		]),
	headerRow: _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
			A2($mdgriffith$elm_ui$Element$paddingXY, $author$project$Style$two, 0)
		]),
	persons: _List_fromArray(
		[
			A2($mdgriffith$elm_ui$Element$spacingXY, $author$project$Style$two, 0),
			$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
			$mdgriffith$elm_ui$Element$Font$color(
			$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor($author$project$Style$palette.person.primary)),
			A2($author$project$Style$htmlStyle, 'justify-content', 'space-between')
		]),
	subject: _List_fromArray(
		[
			$author$project$Style$fontsizeE($author$project$Style$fontsize.large),
			$mdgriffith$elm_ui$Element$Font$color(
			$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor($author$project$Style$palette._default.on.background)),
			$author$project$Plaintext$wordWrap,
			$mdgriffith$elm_ui$Element$paddingEach(
			{bottom: $author$project$Style$two, left: $author$project$Style$five, right: $author$project$Style$five, top: $author$project$Style$two})
		]),
	tags: _List_fromArray(
		[
			A2($mdgriffith$elm_ui$Element$spacingXY, 0, 0),
			$mdgriffith$elm_ui$Element$alignRight,
			A2($mdgriffith$elm_ui$Element$paddingXY, $author$project$Style$five, 0)
		]),
	time: _List_fromArray(
		[
			$author$project$Style$fontsizeE($author$project$Style$fontsize.normal),
			$mdgriffith$elm_ui$Element$Font$color(
			$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
				$Orasund$elm_ui_widgets$Widget$Material$gray($author$project$Style$palette._default))),
			$mdgriffith$elm_ui$Element$alignRight
		])
};
var $author$project$Style$defaultCardGridStyle = $elm$core$Basics$always($author$project$Style$defaultEmailStyle);
var $author$project$Access$elementColumn = {
	get: function ($) {
		return $.elementColumn;
	},
	set: F2(
		function (value, h) {
			return _Utils_update(
				h,
				{elementColumn: value});
		})
};
var $author$project$Style$listPrepend = F2(
	function (a, b) {
		return _Utils_ap(b, a);
	});
var $author$project$Access$persons = {
	get: function ($) {
		return $.persons;
	},
	set: F2(
		function (value, h) {
			return _Utils_update(
				h,
				{persons: value});
		})
};
var $author$project$Style$withStateAttributes = F3(
	function (p, _v0, attrs) {
		var selection = _v0.selection;
		var flagged = _v0.flagged;
		return A3(
			$author$project$Access$mapField,
			$author$project$Access$elementColumn,
			$elm$core$List$cons(
				$mdgriffith$elm_ui$Element$Background$color(
					$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
						selection ? A3($Orasund$elm_ui_widgets$Widget$Material$Color$withShade, p.secondary, 0.15, p.surface) : (flagged ? A3($Orasund$elm_ui_widgets$Widget$Material$Color$withShade, p.secondary, 0.25, p.background) : p.background)))),
			attrs);
	});
var $author$project$Style$styleCardState = F2(
	function (p, f) {
		return F2(
			function (cf, state) {
				return f(
					A3(
						$author$project$Style$withStateAttributes,
						p,
						state,
						cf(state)));
			});
	});
var $author$project$Access$time = {
	get: function ($) {
		return $.time;
	},
	set: F2(
		function (value, h) {
			return _Utils_update(
				h,
				{time: value});
		})
};
var $author$project$Style$branches = {
	draft: A3(
		$author$project$Style$styleCardState,
		$author$project$Style$palette.email,
		A2(
			$elm$core$Basics$composeR,
			A2(
				$author$project$Access$mapField,
				$author$project$Access$elementColumn,
				$author$project$Style$listPrepend(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$padding(0)
						]))),
			A2(
				$elm$core$Basics$composeR,
				A2(
					$author$project$Access$mapField,
					$author$project$Access$persons,
					$author$project$Style$listPrepend(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$paddingEach(
								{bottom: 0, left: 0, right: 0, top: 0})
							]))),
				A2(
					$elm$core$Basics$composeR,
					A2(
						$author$project$Access$mapField,
						$author$project$Access$time,
						$author$project$Style$listPrepend(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$paddingEach(
									{bottom: 0, left: $author$project$Style$two, right: $author$project$Style$two, top: 0})
								]))),
					A2(
						$elm$core$Basics$composeR,
						A2(
							$author$project$Access$mapField,
							$author$project$Access$subject,
							$author$project$Style$listPrepend(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$color(
										$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor($author$project$Style$palette._default.primary))
									]))),
						A2(
							$author$project$Access$mapField,
							$author$project$Access$body,
							$author$project$Style$listPrepend(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$color(
										$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor($author$project$Style$palette._default.primary))
									]))))))),
		$author$project$Style$defaultCardGridStyle),
	email: A3(
		$author$project$Style$styleCardState,
		$author$project$Style$palette.email,
		A2(
			$elm$core$Basics$composeR,
			A2(
				$author$project$Access$mapField,
				$author$project$Access$body,
				$author$project$Style$listPrepend(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]))),
			A2(
				$elm$core$Basics$composeR,
				A2(
					$author$project$Access$mapField,
					$author$project$Access$elementColumn,
					$author$project$Style$listPrepend(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]))),
				A2(
					$author$project$Access$mapField,
					$author$project$Access$time,
					$author$project$Style$listPrepend(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$paddingEach(
								{bottom: 0, left: $author$project$Style$two, right: $author$project$Style$two, top: 0})
							]))))),
		$author$project$Style$defaultCardGridStyle),
	hidden: $author$project$Style$defaultCardGridStyle,
	notmuch: $author$project$Style$defaultCardGridStyle,
	search: A3(
		$author$project$Style$styleCardState,
		$author$project$Style$palette.search,
		A2(
			$author$project$Access$mapField,
			$author$project$Access$elementColumn,
			$author$project$Style$listPrepend(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Border$rounded(0),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$padding(0)
					]))),
		$author$project$Style$defaultCardGridStyle),
	thread: A3(
		$author$project$Style$styleCardState,
		$author$project$Style$palette.search,
		A2(
			$elm$core$Basics$composeR,
			A2(
				$author$project$Access$mapField,
				$author$project$Access$elementColumn,
				$author$project$Style$listPrepend(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Border$rounded(0),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							A2($mdgriffith$elm_ui$Element$paddingXY, 0, $author$project$Style$two)
						]))),
			A2(
				$author$project$Access$mapField,
				$author$project$Access$persons,
				$author$project$Style$listPrepend(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignLeft,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
							$mdgriffith$elm_ui$Element$paddingEach(
							{bottom: 0, left: $author$project$Style$five, right: $author$project$Style$five, top: 0})
						])))),
		$author$project$Style$defaultCardGridStyle)
};
var $mdgriffith$elm_ui$Internal$Model$Button = {$: 'Button'};
var $elm$json$Json$Encode$bool = _Json_wrap;
var $elm$html$Html$Attributes$boolProperty = F2(
	function (key, bool) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$bool(bool));
	});
var $elm$html$Html$Attributes$disabled = $elm$html$Html$Attributes$boolProperty('disabled');
var $mdgriffith$elm_ui$Element$Input$hasFocusStyle = function (attr) {
	if (((attr.$ === 'StyleClass') && (attr.b.$ === 'PseudoSelector')) && (attr.b.a.$ === 'Focus')) {
		var _v1 = attr.b;
		var _v2 = _v1.a;
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Element$Input$focusDefault = function (attrs) {
	return A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, attrs) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass('focusable');
};
var $elm$virtual_dom$VirtualDom$Normal = function (a) {
	return {$: 'Normal', a: a};
};
var $elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
var $elm$html$Html$Events$on = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var $elm$html$Html$Events$onClick = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'click',
		$elm$json$Json$Decode$succeed(msg));
};
var $mdgriffith$elm_ui$Element$Events$onClick = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onClick);
var $mdgriffith$elm_ui$Element$Input$enter = 'Enter';
var $elm$json$Json$Decode$fail = _Json_fail;
var $elm$virtual_dom$VirtualDom$MayPreventDefault = function (a) {
	return {$: 'MayPreventDefault', a: a};
};
var $elm$html$Html$Events$preventDefaultOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayPreventDefault(decoder));
	});
var $mdgriffith$elm_ui$Element$Input$onKey = F2(
	function (desiredCode, msg) {
		var decode = function (code) {
			return _Utils_eq(code, desiredCode) ? $elm$json$Json$Decode$succeed(msg) : $elm$json$Json$Decode$fail('Not the enter key');
		};
		var isKey = A2(
			$elm$json$Json$Decode$andThen,
			decode,
			A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string));
		return $mdgriffith$elm_ui$Internal$Model$Attr(
			A2(
				$elm$html$Html$Events$preventDefaultOn,
				'keyup',
				A2(
					$elm$json$Json$Decode$map,
					function (fired) {
						return _Utils_Tuple2(fired, true);
					},
					isKey)));
	});
var $mdgriffith$elm_ui$Element$Input$onEnter = function (msg) {
	return A2($mdgriffith$elm_ui$Element$Input$onKey, $mdgriffith$elm_ui$Element$Input$enter, msg);
};
var $mdgriffith$elm_ui$Internal$Flag$cursor = $mdgriffith$elm_ui$Internal$Flag$flag(21);
var $mdgriffith$elm_ui$Element$pointer = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.cursorPointer);
var $elm$html$Html$Attributes$tabindex = function (n) {
	return A2(
		_VirtualDom_attribute,
		'tabIndex',
		$elm$core$String$fromInt(n));
};
var $mdgriffith$elm_ui$Element$Input$button = F2(
	function (attrs, _v0) {
		var onPress = _v0.onPress;
		var label = _v0.label;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.seButton + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.noTextSelection)))))),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$pointer,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$Input$focusDefault(attrs),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Button),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Internal$Model$Attr(
											$elm$html$Html$Attributes$tabindex(0)),
										function () {
											if (onPress.$ === 'Nothing') {
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Internal$Model$Attr(
														$elm$html$Html$Attributes$disabled(true)),
													attrs);
											} else {
												var msg = onPress.a;
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Element$Events$onClick(msg),
													A2(
														$elm$core$List$cons,
														$mdgriffith$elm_ui$Element$Input$onEnter(msg),
														attrs));
											}
										}()))))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $mdgriffith$elm_ui$Internal$Model$Label = function (a) {
	return {$: 'Label', a: a};
};
var $mdgriffith$elm_ui$Element$Region$description = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Describe, $mdgriffith$elm_ui$Internal$Model$Label);
var $Orasund$elm_ui_widgets$Internal$Button$button = F2(
	function (style, _v0) {
		var onPress = _v0.onPress;
		var text = _v0.text;
		var icon = _v0.icon;
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_Utils_ap(
				style.elementButton,
				_Utils_ap(
					_Utils_eq(onPress, $elm$core$Maybe$Nothing) ? style.ifDisabled : style.otherwise,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Region$description(text)
						]))),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$row,
					style.content.elementRow,
					_List_fromArray(
						[
							icon(
							_Utils_eq(onPress, $elm$core$Maybe$Nothing) ? style.content.content.icon.ifDisabled : style.content.content.icon.otherwise),
							A2(
							$mdgriffith$elm_ui$Element$el,
							style.content.content.text.contentText,
							$mdgriffith$elm_ui$Element$text(text))
						])),
				onPress: onPress
			});
	});
var $Orasund$elm_ui_widgets$Widget$button = function () {
	var fun = $Orasund$elm_ui_widgets$Internal$Button$button;
	return fun;
}();
var $author$project$Symbol$dictGet = F2(
	function (d, k) {
		return A2($elm$core$Dict$get, k, d);
	});
var $author$project$Main$fetchN = 10;
var $mdgriffith$elm_ui$Element$map = $mdgriffith$elm_ui$Internal$Model$map;
var $elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {
	return {$: 'MayStopPropagation', a: a};
};
var $elm$html$Html$Events$stopPropagationOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
	});
var $author$project$Style$onClickStopPropagation = function (msg) {
	return $mdgriffith$elm_ui$Element$htmlAttribute(
		A2(
			$elm$html$Html$Events$stopPropagationOn,
			'click',
			$elm$json$Json$Decode$succeed(
				_Utils_Tuple2(msg, true))));
};
var $author$project$Tags$Abbreviated = {$: 'Abbreviated'};
var $author$project$Tags$Full = {$: 'Full'};
var $author$project$Tags$any = F2(
	function (l, x) {
		return A2(
			$elm$core$List$any,
			$elm$core$Basics$eq(x),
			l);
	});
var $author$project$Main$isSelection = F2(
	function (s, e) {
		return _Utils_eq(
			A2($elm$core$Maybe$andThen, $author$project$Main$idStringMaybe, e),
			s.id);
	});
var $author$project$Query$maybeTag = function (x) {
	if ((x.$ === 'Leaf') && (x.a.$ === 'Tag')) {
		var t = x.a.a;
		return $elm$core$Maybe$Just(t);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Tags$Pinned = {$: 'Pinned'};
var $author$project$Tags$Selected = {$: 'Selected'};
var $author$project$Tags$Unselected = {$: 'Unselected'};
var $author$project$Tags$stateTagTap = function (x) {
	return A2(
		$elm$core$List$any,
		$elm$core$Basics$eq('todo'),
		x) ? (A2(
		$elm$core$List$all,
		$elm$core$Basics$neq('archive'),
		x) ? (A2(
		$elm$core$List$any,
		$elm$core$Basics$eq('done'),
		x) ? _Utils_Tuple2(
		$author$project$Tags$Pinned,
		_List_fromArray(
			[
				$author$project$ListChange$UpAdd('archive'),
				$author$project$ListChange$Remove('done')
			])) : _Utils_Tuple2(
		$author$project$Tags$Pinned,
		_List_fromArray(
			[
				$author$project$ListChange$UpAdd('done')
			]))) : _Utils_Tuple2($author$project$Tags$Pinned, _List_Nil)) : (A2(
		$elm$core$List$any,
		$elm$core$Basics$eq('flagged'),
		x) ? _Utils_Tuple2(
		$author$project$Tags$Pinned,
		_List_fromArray(
			[
				$author$project$ListChange$Remove('flagged')
			])) : (A2(
		$elm$core$List$any,
		$elm$core$Basics$eq('new'),
		x) ? _Utils_Tuple2(
		$author$project$Tags$Pinned,
		_List_fromArray(
			[
				$author$project$ListChange$Remove('flagged')
			])) : (A2(
		$elm$core$List$any,
		$elm$core$Basics$eq('inbox'),
		x) ? _Utils_Tuple2(
		$author$project$Tags$Selected,
		_List_fromArray(
			[
				$author$project$ListChange$UpAdd('flagged')
			])) : _Utils_Tuple2(
		$author$project$Tags$Unselected,
		_List_fromArray(
			[
				$author$project$ListChange$UpAdd('flagged')
			])))));
};
var $author$project$Tags$Hidden_ = {$: 'Hidden_'};
var $author$project$Tags$visibilityTagTap = function (x) {
	return A2(
		$elm$core$List$any,
		$elm$core$Basics$eq('deleted'),
		x) ? _Utils_Tuple2(
		$author$project$Tags$Hidden_,
		_List_fromArray(
			[
				$author$project$ListChange$Remove('deleted')
			])) : (A2(
		$elm$core$List$any,
		$elm$core$Basics$eq('new'),
		x) ? _Utils_Tuple2(
		$author$project$Tags$Full,
		_List_fromArray(
			[
				$author$project$ListChange$Remove('new')
			])) : (A2(
		$elm$core$List$any,
		$elm$core$Basics$eq('draft'),
		x) ? (A2(
		$elm$core$List$any,
		$elm$core$Basics$eq('unread'),
		x) ? _Utils_Tuple2(
		$author$project$Tags$Full,
		_List_fromArray(
			[
				$author$project$ListChange$Remove('unread'),
				$author$project$ListChange$UpAdd('delete')
			])) : _Utils_Tuple2(
		$author$project$Tags$Abbreviated,
		_List_fromArray(
			[
				$author$project$ListChange$UpAdd('unread')
			]))) : (A2(
		$elm$core$List$any,
		$elm$core$Basics$eq('unread'),
		x) ? (A2(
		$elm$core$List$any,
		$elm$core$Basics$eq('inbox'),
		x) ? _Utils_Tuple2(
		$author$project$Tags$Full,
		_List_fromArray(
			[
				$author$project$ListChange$Remove('inbox'),
				$author$project$ListChange$Remove('unread')
			])) : (A2(
		$elm$core$List$any,
		$elm$core$Basics$eq('delete'),
		x) ? _Utils_Tuple2(
		$author$project$Tags$Full,
		_List_fromArray(
			[
				$author$project$ListChange$Remove('unread'),
				$author$project$ListChange$Remove('delete')
			])) : _Utils_Tuple2(
		$author$project$Tags$Full,
		_List_fromArray(
			[
				$author$project$ListChange$UpAdd('delete'),
				$author$project$ListChange$Remove('unread'),
				$author$project$ListChange$UpAdd('inbox')
			])))) : (A2(
		$elm$core$List$any,
		$elm$core$Basics$eq('inbox'),
		x) ? _Utils_Tuple2(
		$author$project$Tags$Abbreviated,
		_List_fromArray(
			[
				$author$project$ListChange$Remove('inbox'),
				$author$project$ListChange$UpAdd('unread'),
				$author$project$ListChange$UpAdd('delete')
			])) : _Utils_Tuple2(
		$author$project$Tags$Abbreviated,
		_List_fromArray(
			[
				$author$project$ListChange$UpAdd('unread'),
				$author$project$ListChange$UpAdd('delete')
			]))))));
};
var $author$project$Main$stateTagsFromEmailType = F2(
	function (sel, _v0) {
		var match = _v0.a;
		var x = _v0.b;
		var tags = function () {
			switch (x.$) {
				case 'Email':
					var e = x.b;
					return e.tags;
				case 'Draft':
					var d = x.a;
					return $author$project$Notmuch$postable(d).tags;
				case 'Search':
					var e = x.b;
					return A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						A2(
							$elm$core$Maybe$map,
							function ($) {
								return $.tags;
							},
							e));
				case 'Thread':
					var t = x.b;
					return $author$project$Query$queryable(t).tags;
				default:
					return _List_Nil;
			}
		}();
		var selection = A2(
			$author$project$Main$isSelection,
			sel,
			$elm$core$Maybe$Just(x));
		var flagged = A2($author$project$Tags$any, tags, 'flagged');
		var f = function (t) {
			return _Utils_Tuple2(
				$author$project$Tags$stateTagTap(t),
				$author$project$Tags$visibilityTagTap(t));
		};
		var _v1 = f(tags);
		var _v2 = _v1.a;
		var sc = _v2.b;
		var _v3 = _v1.b;
		var v = _v3.a;
		var vc = _v3.b;
		return {
			flagged: flagged,
			highlight: _List_Nil,
			match: match,
			prefericon: false,
			selected: A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$author$project$Query$maybeTag(sel.selected_query)
					])),
			selected_query: sel.selected_query,
			selection: selection,
			state_changes: sc,
			tag_input: selection ? $elm$core$Maybe$Just(sel.tag_input) : $elm$core$Maybe$Nothing,
			tags: tags,
			visibility: (selection || flagged) ? $author$project$Tags$Full : (match ? $author$project$Tags$Abbreviated : v),
			visibility_changes: vc
		};
	});
var $mdgriffith$elm_ui$Internal$Flag$letterSpacing = $mdgriffith$elm_ui$Internal$Flag$flag(16);
var $mdgriffith$elm_ui$Element$Font$letterSpacing = function (offset) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$letterSpacing,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'ls-' + $mdgriffith$elm_ui$Internal$Model$floatClass(offset),
			'letter-spacing',
			$elm$core$String$fromFloat(offset) + 'px'));
};
var $mdgriffith$elm_ui$Internal$Flag$fontWeight = $mdgriffith$elm_ui$Internal$Flag$flag(13);
var $mdgriffith$elm_ui$Element$Font$semiBold = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.textSemiBold);
var $Orasund$elm_ui_widgets$Widget$Material$Typography$button = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$htmlAttribute(
		A2($elm$html$Html$Attributes$style, 'text-transform', 'uppercase')),
		$mdgriffith$elm_ui$Element$Font$size(14),
		$mdgriffith$elm_ui$Element$Font$semiBold,
		$mdgriffith$elm_ui$Element$Font$letterSpacing(1.25)
	]);
var $Orasund$elm_ui_widgets$Internal$Material$Button$baseButton = function (palette) {
	return {
		content: {
			content: {
				icon: {
					ifActive: {
						color: $Orasund$elm_ui_widgets$Internal$Material$Palette$gray(palette),
						size: 18
					},
					ifDisabled: {
						color: $Orasund$elm_ui_widgets$Internal$Material$Palette$gray(palette),
						size: 18
					},
					otherwise: {
						color: $Orasund$elm_ui_widgets$Internal$Material$Palette$gray(palette),
						size: 18
					}
				},
				text: {
					contentText: _List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX])
				}
			},
			elementRow: _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(8),
					$mdgriffith$elm_ui$Element$width(
					A2($mdgriffith$elm_ui$Element$minimum, 32, $mdgriffith$elm_ui$Element$shrink)),
					$mdgriffith$elm_ui$Element$centerY
				])
		},
		elementButton: _Utils_ap(
			$Orasund$elm_ui_widgets$Widget$Material$Typography$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(36)),
					A2($mdgriffith$elm_ui$Element$paddingXY, 8, 8),
					$mdgriffith$elm_ui$Element$Border$rounded(4)
				])),
		ifActive: _List_Nil,
		ifDisabled: _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$htmlAttribute(
				A2($elm$html$Html$Attributes$style, 'cursor', 'not-allowed'))
			]),
		otherwise: _List_Nil
	};
};
var $Orasund$elm_ui_widgets$Widget$Material$Color$buttonFocusOpacity = 0.24;
var $Orasund$elm_ui_widgets$Widget$Material$Color$buttonHoverOpacity = 0.08;
var $mdgriffith$elm_ui$Internal$Model$Focus = {$: 'Focus'};
var $mdgriffith$elm_ui$Internal$Flag$focus = $mdgriffith$elm_ui$Internal$Flag$flag(31);
var $mdgriffith$elm_ui$Element$focused = function (decs) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$focus,
		A2(
			$mdgriffith$elm_ui$Internal$Model$PseudoSelector,
			$mdgriffith$elm_ui$Internal$Model$Focus,
			$mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
};
var $mdgriffith$elm_ui$Internal$Model$Active = {$: 'Active'};
var $mdgriffith$elm_ui$Internal$Flag$active = $mdgriffith$elm_ui$Internal$Flag$flag(32);
var $mdgriffith$elm_ui$Element$mouseDown = function (decs) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$active,
		A2(
			$mdgriffith$elm_ui$Internal$Model$PseudoSelector,
			$mdgriffith$elm_ui$Internal$Model$Active,
			$mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
};
var $Orasund$elm_ui_widgets$Internal$Material$Button$textButton = function (palette) {
	return {
		content: {
			content: {
				icon: {
					ifActive: {color: palette.primary, size: 18},
					ifDisabled: {
						color: $Orasund$elm_ui_widgets$Internal$Material$Palette$gray(palette),
						size: 18
					},
					otherwise: {color: palette.primary, size: 18}
				},
				text: {
					contentText: function (b) {
						return b.content.content.text.contentText;
					}(
						$Orasund$elm_ui_widgets$Internal$Material$Button$baseButton(palette))
				}
			},
			elementRow: function (b) {
				return b.content.elementRow;
			}(
				$Orasund$elm_ui_widgets$Internal$Material$Button$baseButton(palette))
		},
		elementButton: _Utils_ap(
			$Orasund$elm_ui_widgets$Internal$Material$Button$baseButton(palette).elementButton,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(palette.primary)),
					$mdgriffith$elm_ui$Element$mouseDown(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(
							$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
								A2($Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity, $Orasund$elm_ui_widgets$Widget$Material$Color$buttonPressedOpacity, palette.primary)))
						])),
					$mdgriffith$elm_ui$Element$focused(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(
							$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
								A2($Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity, $Orasund$elm_ui_widgets$Widget$Material$Color$buttonFocusOpacity, palette.primary)))
						])),
					$mdgriffith$elm_ui$Element$mouseOver(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(
							$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
								A2($Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity, $Orasund$elm_ui_widgets$Widget$Material$Color$buttonHoverOpacity, palette.primary)))
						]))
				])),
		ifActive: _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color(
				$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
					A2($Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity, $Orasund$elm_ui_widgets$Widget$Material$Color$buttonHoverOpacity, palette.primary)))
			]),
		ifDisabled: _Utils_ap(
			$Orasund$elm_ui_widgets$Internal$Material$Button$baseButton(palette).ifDisabled,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
						$Orasund$elm_ui_widgets$Internal$Material$Palette$gray(palette))),
					$mdgriffith$elm_ui$Element$mouseDown(_List_Nil),
					$mdgriffith$elm_ui$Element$mouseOver(_List_Nil),
					$mdgriffith$elm_ui$Element$focused(_List_Nil)
				])),
		otherwise: _List_Nil
	};
};
var $Orasund$elm_ui_widgets$Widget$Material$textButton = $Orasund$elm_ui_widgets$Internal$Material$Button$textButton;
var $author$project$Style$textButton = $Orasund$elm_ui_widgets$Widget$Material$textButton($author$project$Style$palette._default);
var $author$project$Main$DraftReplyTo = function (a) {
	return {$: 'DraftReplyTo', a: a};
};
var $author$project$Main$DraftTextTyped = function (a) {
	return {$: 'DraftTextTyped', a: a};
};
var $phosphor_icons$phosphor_elm$Phosphor$Fill = {$: 'Fill'};
var $author$project$Main$Global = function (a) {
	return {$: 'Global', a: a};
};
var $author$project$Main$MapDraftEditor = function (a) {
	return {$: 'MapDraftEditor', a: a};
};
var $author$project$Main$Noop = {$: 'Noop'};
var $author$project$Main$PostSaveDraft = {$: 'PostSaveDraft'};
var $author$project$Main$PostSend = {$: 'PostSend'};
var $author$project$Main$SearchCol = function (a) {
	return {$: 'SearchCol', a: a};
};
var $phosphor_icons$phosphor_elm$Phosphor$Bold = {$: 'Bold'};
var $phosphor_icons$phosphor_elm$Phosphor$check = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('216 72 104 184 48 128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('216 72 104 184 48 128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M104,192a8.5,8.5,0,0,1-5.7-2.3l-56-56a8.1,8.1,0,0,1,11.4-11.4L104,172.7,210.3,66.3a8.1,8.1,0,0,1,11.4,11.4l-112,112A8.5,8.5,0,0,1,104,192Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('216 72 104 184 48 128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('216 72 104 184 48 128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('216 72 104 184 48 128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $avh4$elm_color$Color$darkGray = A4($avh4$elm_color$Color$RgbaSpace, 186 / 255, 189 / 255, 182 / 255, 1.0);
var $author$project$Style$iconstyle = {
	_default: {color: $author$project$Style$palette._default.on.background, size: $author$project$Style$fontsize.normal},
	large: {color: $author$project$Style$palette._default.on.background, size: $author$project$Style$fontsize.huge},
	person: {color: $author$project$Style$palette.person.primary, size: $author$project$Style$fontsize.small},
	query: {color: $author$project$Style$palette._default.primary, size: $author$project$Style$fontsize.small},
	queryable: {color: $avh4$elm_color$Color$darkGray, size: $author$project$Style$fontsize.small},
	tag: {color: $author$project$Style$palette.tag.primary, size: $author$project$Style$fontsize.normal}
};
var $author$project$ProgressIndicator$indeterminateCircularIcon = F2(
	function (_v0, attribs) {
		var size = _v0.size;
		var color = _v0.color;
		return A2(
			$mdgriffith$elm_ui$Element$el,
			attribs,
			$mdgriffith$elm_ui$Element$html(
				A2(
					$elm$svg$Svg$svg,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$height(
							$elm$core$String$fromInt(size) + 'px'),
							$elm$svg$Svg$Attributes$width(
							$elm$core$String$fromInt(size) + 'px'),
							$elm$svg$Svg$Attributes$viewBox('0 0 66 66'),
							$elm$svg$Svg$Attributes$xmlSpace('http://www.w3.org/2000/svg')
						]),
					_List_fromArray(
						[
							A2(
							$elm$svg$Svg$g,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$elm$svg$Svg$animateTransform,
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$attributeName('transform'),
											$elm$svg$Svg$Attributes$type_('rotate'),
											$elm$svg$Svg$Attributes$values('0 33 33;270 33 33'),
											$elm$svg$Svg$Attributes$begin('0s'),
											$elm$svg$Svg$Attributes$dur('1.4s'),
											$elm$svg$Svg$Attributes$fill('freeze'),
											$elm$svg$Svg$Attributes$repeatCount('indefinite')
										]),
									_List_Nil),
									A2(
									$elm$svg$Svg$circle,
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$fill('none'),
											$elm$svg$Svg$Attributes$stroke(
											$avh4$elm_color$Color$toCssString(color)),
											$elm$svg$Svg$Attributes$strokeWidth('5'),
											$elm$svg$Svg$Attributes$strokeLinecap('square'),
											$elm$svg$Svg$Attributes$cx('33'),
											$elm$svg$Svg$Attributes$cy('33'),
											$elm$svg$Svg$Attributes$r('30'),
											$elm$svg$Svg$Attributes$strokeDasharray('187'),
											$elm$svg$Svg$Attributes$strokeDashoffset('610')
										]),
									_List_fromArray(
										[
											A2(
											$elm$svg$Svg$animateTransform,
											_List_fromArray(
												[
													$elm$svg$Svg$Attributes$attributeName('transform'),
													$elm$svg$Svg$Attributes$type_('rotate'),
													$elm$svg$Svg$Attributes$values('0 33 33;135 33 33;450 33 33'),
													$elm$svg$Svg$Attributes$begin('0s'),
													$elm$svg$Svg$Attributes$dur('1.4s'),
													$elm$svg$Svg$Attributes$fill('freeze'),
													$elm$svg$Svg$Attributes$repeatCount('indefinite')
												]),
											_List_Nil),
											A2(
											$elm$svg$Svg$animate,
											_List_fromArray(
												[
													$elm$svg$Svg$Attributes$attributeName('stroke-dashoffset'),
													$elm$svg$Svg$Attributes$values('187;46.75;187'),
													$elm$svg$Svg$Attributes$begin('0s'),
													$elm$svg$Svg$Attributes$dur('1.4s'),
													$elm$svg$Svg$Attributes$fill('freeze'),
													$elm$svg$Svg$Attributes$repeatCount('indefinite')
												]),
											_List_Nil)
										]))
								]))
						]))));
	});
var $phosphor_icons$phosphor_elm$Phosphor$link = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M132.5,61.3l9.6-9.7a44.1,44.1,0,0,1,62.3,62.3l-30.3,30.2a43.9,43.9,0,0,1-62.2,0'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M123.5,194.7l-9.6,9.7a44.1,44.1,0,0,1-62.3-62.3l30.3-30.2a43.9,43.9,0,0,1,62.2,0'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M122.3,71.4l19.8-19.8a44.1,44.1,0,0,1,62.3,62.3l-28.3,28.2a43.9,43.9,0,0,1-62.2,0'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M133.7,184.6l-19.8,19.8a44.1,44.1,0,0,1-62.3-62.3l28.3-28.2a43.9,43.9,0,0,1,62.2,0'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M210,46a51.8,51.8,0,0,0-73.5,0L116.7,65.8A8,8,0,0,0,128,77.1l19.8-19.8a36.1,36.1,0,0,1,50.9,0,35.9,35.9,0,0,1,0,50.9l-28.3,28.3a36.1,36.1,0,0,1-50.9,0,8,8,0,1,0-11.3,11.3,52,52,0,0,0,73.5,0L210,119.5A51.8,51.8,0,0,0,210,46Z')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M128,178.9l-19.8,19.8a36,36,0,0,1-50.9-50.9l28.3-28.3a36.1,36.1,0,0,1,50.9,0,8,8,0,0,0,11.3-11.3,52,52,0,0,0-73.5,0L46,136.5A52,52,0,1,0,119.5,210l19.8-19.8A8,8,0,0,0,128,178.9Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M122.3,71.4l19.8-19.8a44.1,44.1,0,0,1,62.3,62.3l-28.3,28.2a43.9,43.9,0,0,1-62.2,0'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M133.7,184.6l-19.8,19.8a44.1,44.1,0,0,1-62.3-62.3l28.3-28.2a43.9,43.9,0,0,1,62.2,0'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M122.3,71.4l19.8-19.8a44.1,44.1,0,0,1,62.3,62.3l-28.3,28.2a43.9,43.9,0,0,1-62.2,0'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M133.7,184.6l-19.8,19.8a44.1,44.1,0,0,1-62.3-62.3l28.3-28.2a43.9,43.9,0,0,1,62.2,0'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M122.3,71.4l19.8-19.8a44.1,44.1,0,0,1,62.3,62.3l-28.3,28.2a43.9,43.9,0,0,1-62.2,0'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M133.7,184.6l-19.8,19.8a44.1,44.1,0,0,1-62.3-62.3l28.3-28.2a43.9,43.9,0,0,1,62.2,0'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $author$project$Style$annotatePostable = F2(
	function (state, attrs) {
		var position = function (x) {
			return $mdgriffith$elm_ui$Element$inFront(
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$alignLeft, $mdgriffith$elm_ui$Element$alignBottom]),
					x));
		};
		switch (state.$) {
			case 'Confirmed':
				return _Utils_ap(
					attrs,
					_List_fromArray(
						[
							position(
							A3($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$check, $phosphor_icons$phosphor_elm$Phosphor$Bold, $author$project$Style$iconstyle._default))
						]));
			case 'Post':
				return _Utils_ap(
					attrs,
					_List_fromArray(
						[
							position(
							A3($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$link, $phosphor_icons$phosphor_elm$Phosphor$Bold, $author$project$Style$iconstyle._default))
						]));
			case 'Posted':
				return _Utils_ap(
					attrs,
					_List_fromArray(
						[
							position(
							A2($author$project$ProgressIndicator$indeterminateCircularIcon, $author$project$Style$iconstyle._default, _List_Nil))
						]));
			default:
				return attrs;
		}
	});
var $author$project$Annotate$iconAnnotate = F4(
	function (resize, position, icon, b) {
		return function (s) {
			var _v0 = resize(s);
			var s_ = _v0.a;
			var attrs = _v0.b;
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						position(
						A2(
							$mdgriffith$elm_ui$Element$el,
							attrs,
							icon(s_)))
					]),
				b(s));
		};
	});
var $elm$core$String$toUpper = _String_toUpper;
var $author$project$Person$abbrevString_ = F2(
	function (split, x) {
		var names = A2(
			$elm$core$List$map,
			A2($elm$core$String$slice, 0, 1),
			A2(
				$elm$core$List$filter,
				function (n) {
					return !$elm$core$String$isEmpty(n);
				},
				A2($elm$core$String$split, split, x)));
		var _v0 = _Utils_Tuple3(
			$elm$core$List$length(names),
			$elm$core$List$head(names),
			$elm$core$List$head(
				$elm$core$List$reverse(names)));
		if ((_v0.b.$ === 'Just') && (_v0.c.$ === 'Just')) {
			if (_v0.a === 1) {
				return $elm$core$Maybe$Nothing;
			} else {
				var n = _v0.b.a;
				var m = _v0.c.a;
				return $elm$core$Maybe$Just(
					$elm$core$String$toUpper(
						_Utils_ap(n, m)));
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Person$stringFromPerson = function (e) {
	return A2(
		$elm$core$Maybe$withDefault,
		A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function (m) {
					return m.local + ('@' + m.domain);
				},
				$elm$core$List$head(e.mailbox))),
		e.name);
};
var $author$project$Person$abbrevString = function (p) {
	return A2(
		$elm$core$Maybe$withDefault,
		function () {
			var name = $author$project$Person$stringFromPerson(p);
			return A2(
				$elm$core$Maybe$withDefault,
				A2(
					$elm$core$Maybe$withDefault,
					A2(
						$elm$core$Maybe$withDefault,
						$elm$core$String$toUpper(
							A3($elm$core$String$slice, 0, 1, name)),
						A2($author$project$Person$abbrevString_, '.', name)),
					A2($author$project$Person$abbrevString_, '@', name)),
				A2($author$project$Person$abbrevString_, ' ', name));
		}(),
		p.abbrev);
};
var $author$project$Annotate$circleIcon = F5(
	function (rounded, attr, fg_, bg_, i) {
		var cols = function (col) {
			var _v1 = _Utils_Tuple2(fg_, bg_);
			if (_v1.a.$ === 'Just') {
				if (_v1.b.$ === 'Just') {
					var fg__ = _v1.a.a;
					var bg__ = _v1.b.a;
					return _Utils_Tuple2(fg__, bg__);
				} else {
					var fg__ = _v1.a.a;
					var _v2 = _v1.b;
					return _Utils_Tuple2(fg__, col);
				}
			} else {
				if (_v1.b.$ === 'Just') {
					var _v3 = _v1.a;
					var bg__ = _v1.b.a;
					return _Utils_Tuple2(col, bg__);
				} else {
					var _v4 = _v1.a;
					var _v5 = _v1.b;
					return _Utils_Tuple2(
						$Orasund$elm_ui_widgets$Widget$Material$Color$accessibleTextColor(col),
						col);
				}
			}
		};
		var attrs = function (sc) {
			return function (_v0) {
				var fg = _v0.a;
				var bg = _v0.b;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color(
								$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(bg)),
								$mdgriffith$elm_ui$Element$Font$color(
								$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(fg)),
								$mdgriffith$elm_ui$Element$Border$rounded(rounded),
								$mdgriffith$elm_ui$Element$padding(0),
								$mdgriffith$elm_ui$Element$width(
								A2($mdgriffith$elm_ui$Element$minimum, sc.size, $mdgriffith$elm_ui$Element$shrink)),
								$mdgriffith$elm_ui$Element$height(
								A2($mdgriffith$elm_ui$Element$minimum, sc.size, $mdgriffith$elm_ui$Element$shrink))
							]),
						attr),
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						i(
							_Utils_update(
								sc,
								{color: fg}))));
			}(
				cols(sc.color));
		};
		return attrs;
	});
var $author$project$Symbol$elementIcon = F2(
	function (attr, s) {
		return function (sc) {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_Utils_ap(
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerY, $mdgriffith$elm_ui$Element$centerX]),
					attr(sc)),
				s);
		};
	});
var $author$project$Annotate$iconPad = F2(
	function (f, i) {
		return function (_v0) {
			var size = _v0.size;
			var color = _v0.color;
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$padding(f)
					]),
				i(
					{color: color, size: size - (2 * f)}));
		};
	});
var $author$project$Annotate$iconResize = F2(
	function (f, i) {
		return function (_v0) {
			var size = _v0.size;
			var color = _v0.color;
			return i(
				{
					color: color,
					size: f(size)
				});
		};
	});
var $author$project$Symbol$withFontColorSize = F3(
	function (factor, attr, l) {
		return _Utils_ap(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(l.color)),
					$mdgriffith$elm_ui$Element$Font$size(
					$elm$core$Basics$round(l.size * factor))
				]),
			attr);
	});
var $author$project$StyleQuery$iconFromPerson = F2(
	function (state, p) {
		return (state ? A4(
			$author$project$Annotate$circleIcon,
			$author$project$Style$five,
			_List_Nil,
			$elm$core$Maybe$Just($author$project$Style$palette.person.on.primary),
			$elm$core$Maybe$Just($author$project$Style$palette.person.primary)) : A4(
			$author$project$Annotate$circleIcon,
			$author$project$Style$five,
			_List_Nil,
			$elm$core$Maybe$Just($author$project$Style$palette.person.primary),
			$elm$core$Maybe$Just($author$project$Style$palette.person.on.primary)))(
			A2(
				$author$project$Annotate$iconResize,
				$elm$core$Basics$add(6),
				A2(
					$author$project$Annotate$iconPad,
					4,
					A2(
						$author$project$Symbol$elementIcon,
						A2($author$project$Symbol$withFontColorSize, 1.0, _List_Nil),
						$mdgriffith$elm_ui$Element$text(
							$author$project$Person$abbrevString(p))))));
	});
var $mdgriffith$elm_ui$Internal$Model$MoveX = function (a) {
	return {$: 'MoveX', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$moveX = $mdgriffith$elm_ui$Internal$Flag$flag(25);
var $mdgriffith$elm_ui$Element$moveLeft = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveX,
		$mdgriffith$elm_ui$Internal$Model$MoveX(-x));
};
var $author$project$Annotate$left = F2(
	function (factor, s) {
		return _Utils_Tuple2(
			s,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$moveLeft(factor * s.size),
					$mdgriffith$elm_ui$Element$alignLeft,
					$mdgriffith$elm_ui$Element$centerY
				]));
	});
var $author$project$StyleQuery$positionstyle = {leftskip: 0.75, small: 0.7, smaller: 0.8, smallest: 0.5, topskip: 0.0};
var $author$project$Annotate$resizer = F2(
	function (x, siz) {
		var rs = A3(
			$elm$core$List$foldl,
			F2(
				function (r, _v0) {
					var siz_ = _v0.a;
					var attr = _v0.b;
					return A2(
						$elm$core$Tuple$mapSecond,
						function (a) {
							return _Utils_ap(a, attr);
						},
						r(siz_));
				}),
			_Utils_Tuple2(siz, _List_Nil),
			x);
		return rs;
	});
var $author$project$Annotate$scale = F2(
	function (resize, o) {
		return _Utils_Tuple2(
			_Utils_update(
				o,
				{
					size: $elm$core$Basics$round(resize * o.size)
				}),
			_List_Nil);
	});
var $mdgriffith$elm_ui$Internal$Model$MoveY = function (a) {
	return {$: 'MoveY', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$moveY = $mdgriffith$elm_ui$Internal$Flag$flag(26);
var $mdgriffith$elm_ui$Element$moveUp = function (y) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveY,
		$mdgriffith$elm_ui$Internal$Model$MoveY(-y));
};
var $author$project$Annotate$top = F2(
	function (resize, s) {
		return _Utils_Tuple2(
			s,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$moveUp(resize * s.size),
					$mdgriffith$elm_ui$Element$alignTop
				]));
	});
var $author$project$StyleQuery$positionRole = $author$project$Annotate$resizer(
	_List_fromArray(
		[
			$author$project$Annotate$top($author$project$StyleQuery$positionstyle.topskip),
			$author$project$Annotate$left($author$project$StyleQuery$positionstyle.leftskip),
			$author$project$Annotate$scale($author$project$StyleQuery$positionstyle.smallest)
		]));
var $author$project$StyleQuery$buttonFromPerson = F4(
	function (action, state, role, p) {
		return {
			icon: A3(
				$elm$core$Basics$apR,
				A2(
					$elm$core$Maybe$map,
					A2($author$project$Annotate$iconAnnotate, $author$project$StyleQuery$positionRole, $mdgriffith$elm_ui$Element$inFront),
					role),
				$elm$core$Maybe$withDefault($elm$core$Basics$identity),
				A2($author$project$StyleQuery$iconFromPerson, state, p)),
			onPress: action,
			text: $author$project$Person$stringFromPerson(p)
		};
	});
var $phosphor_icons$phosphor_elm$Phosphor$chatTeardropText = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M132,216H47.7a7.6,7.6,0,0,1-7.7-7.7V124a92,92,0,0,1,92-92h0a92,92,0,0,1,92,92h0A92,92,0,0,1,132,216Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('100'),
								$elm$svg$Svg$Attributes$y1('108'),
								$elm$svg$Svg$Attributes$x2('160'),
								$elm$svg$Svg$Attributes$y2('108'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('100'),
								$elm$svg$Svg$Attributes$y1('148'),
								$elm$svg$Svg$Attributes$x2('160'),
								$elm$svg$Svg$Attributes$y2('148'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M132,216H47.7a7.6,7.6,0,0,1-7.7-7.7V124a92,92,0,0,1,92-92h0a92,92,0,0,1,92,92h0A92,92,0,0,1,132,216Z'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M132,216H47.7a7.6,7.6,0,0,1-7.7-7.7V124a92,92,0,0,1,92-92h0a92,92,0,0,1,92,92h0A92,92,0,0,1,132,216Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('100'),
								$elm$svg$Svg$Attributes$y1('112'),
								$elm$svg$Svg$Attributes$x2('160'),
								$elm$svg$Svg$Attributes$y2('112'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('100'),
								$elm$svg$Svg$Attributes$y1('144'),
								$elm$svg$Svg$Attributes$x2('160'),
								$elm$svg$Svg$Attributes$y2('144'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M132,24A100.2,100.2,0,0,0,32,124v84.3A15.7,15.7,0,0,0,47.7,224H132a100,100,0,0,0,0-200Zm28,128H100a8,8,0,0,1,0-16h60a8,8,0,0,1,0,16Zm0-32H100a8,8,0,0,1,0-16h60a8,8,0,0,1,0,16Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M132,216H47.7a7.6,7.6,0,0,1-7.7-7.7V124a92,92,0,0,1,92-92h0a92,92,0,0,1,92,92h0A92,92,0,0,1,132,216Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('100'),
								$elm$svg$Svg$Attributes$y1('112'),
								$elm$svg$Svg$Attributes$x2('160'),
								$elm$svg$Svg$Attributes$y2('112'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('100'),
								$elm$svg$Svg$Attributes$y1('144'),
								$elm$svg$Svg$Attributes$x2('160'),
								$elm$svg$Svg$Attributes$y2('144'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M132,216H47.7a7.6,7.6,0,0,1-7.7-7.7V124a92,92,0,0,1,92-92h0a92,92,0,0,1,92,92h0A92,92,0,0,1,132,216Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('100'),
								$elm$svg$Svg$Attributes$y1('112'),
								$elm$svg$Svg$Attributes$x2('160'),
								$elm$svg$Svg$Attributes$y2('112'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('100'),
								$elm$svg$Svg$Attributes$y1('144'),
								$elm$svg$Svg$Attributes$x2('160'),
								$elm$svg$Svg$Attributes$y2('144'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M132,216H47.7a7.6,7.6,0,0,1-7.7-7.7V124a92,92,0,0,1,92-92h0a92,92,0,0,1,92,92h0A92,92,0,0,1,132,216Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('100'),
								$elm$svg$Svg$Attributes$y1('112'),
								$elm$svg$Svg$Attributes$x2('160'),
								$elm$svg$Svg$Attributes$y2('112'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('100'),
								$elm$svg$Svg$Attributes$y1('144'),
								$elm$svg$Svg$Attributes$x2('160'),
								$elm$svg$Svg$Attributes$y2('144'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $mdgriffith$elm_ui$Element$Keyed$column = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentTop + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.contentLeft)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Keyed(children));
	});
var $Orasund$elm_ui_widgets$Widget$Material$Color$buttonDisabledOpacity = 0.38;
var $Orasund$elm_ui_widgets$Internal$Material$Button$containedButton = function (palette) {
	return {
		content: {
			content: {
				icon: {
					ifActive: {
						color: $Orasund$elm_ui_widgets$Widget$Material$Color$accessibleTextColor(palette.primary),
						size: 18
					},
					ifDisabled: {
						color: $Orasund$elm_ui_widgets$Internal$Material$Palette$gray(palette),
						size: 18
					},
					otherwise: {
						color: $Orasund$elm_ui_widgets$Widget$Material$Color$accessibleTextColor(palette.primary),
						size: 18
					}
				},
				text: {
					contentText: function (b) {
						return b.content.content.text.contentText;
					}(
						$Orasund$elm_ui_widgets$Internal$Material$Button$baseButton(palette))
				}
			},
			elementRow: _Utils_ap(
				$Orasund$elm_ui_widgets$Internal$Material$Button$baseButton(palette).content.elementRow,
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Element$paddingXY, 8, 0)
					]))
		},
		elementButton: _Utils_ap(
			$Orasund$elm_ui_widgets$Internal$Material$Button$baseButton(palette).elementButton,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Border$shadow(
					$Orasund$elm_ui_widgets$Widget$Material$Color$shadow(2)),
					$mdgriffith$elm_ui$Element$mouseDown(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(
							$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
								A3($Orasund$elm_ui_widgets$Widget$Material$Color$withShade, palette.on.primary, $Orasund$elm_ui_widgets$Widget$Material$Color$buttonPressedOpacity, palette.primary))),
							$mdgriffith$elm_ui$Element$Border$shadow(
							$Orasund$elm_ui_widgets$Widget$Material$Color$shadow(12))
						])),
					$mdgriffith$elm_ui$Element$focused(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(
							$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
								A3($Orasund$elm_ui_widgets$Widget$Material$Color$withShade, palette.on.primary, $Orasund$elm_ui_widgets$Widget$Material$Color$buttonFocusOpacity, palette.primary))),
							$mdgriffith$elm_ui$Element$Border$shadow(
							$Orasund$elm_ui_widgets$Widget$Material$Color$shadow(6))
						])),
					$mdgriffith$elm_ui$Element$mouseOver(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(
							$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
								A3($Orasund$elm_ui_widgets$Widget$Material$Color$withShade, palette.on.primary, $Orasund$elm_ui_widgets$Widget$Material$Color$buttonHoverOpacity, palette.primary))),
							$mdgriffith$elm_ui$Element$Border$shadow(
							$Orasund$elm_ui_widgets$Widget$Material$Color$shadow(6))
						]))
				])),
		ifActive: _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color(
				$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
					A3($Orasund$elm_ui_widgets$Widget$Material$Color$withShade, palette.on.primary, $Orasund$elm_ui_widgets$Widget$Material$Color$buttonHoverOpacity, palette.primary))),
				$mdgriffith$elm_ui$Element$Font$color(
				$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
					$Orasund$elm_ui_widgets$Widget$Material$Color$accessibleTextColor(palette.primary)))
			]),
		ifDisabled: _Utils_ap(
			$Orasund$elm_ui_widgets$Internal$Material$Button$baseButton(palette).ifDisabled,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color(
					$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
						A2(
							$Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity,
							$Orasund$elm_ui_widgets$Widget$Material$Color$buttonDisabledOpacity,
							$Orasund$elm_ui_widgets$Internal$Material$Palette$gray(palette)))),
					$mdgriffith$elm_ui$Element$Font$color(
					$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
						$Orasund$elm_ui_widgets$Internal$Material$Palette$gray(palette))),
					$mdgriffith$elm_ui$Element$Border$shadow(
					$Orasund$elm_ui_widgets$Widget$Material$Color$shadow(0)),
					$mdgriffith$elm_ui$Element$mouseDown(_List_Nil),
					$mdgriffith$elm_ui$Element$mouseOver(_List_Nil),
					$mdgriffith$elm_ui$Element$focused(_List_Nil)
				])),
		otherwise: _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color(
				$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(palette.primary)),
				$mdgriffith$elm_ui$Element$Font$color(
				$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
					$Orasund$elm_ui_widgets$Widget$Material$Color$accessibleTextColor(palette.primary)))
			])
	};
};
var $Orasund$elm_ui_widgets$Widget$Material$containedButton = $Orasund$elm_ui_widgets$Internal$Material$Button$containedButton;
var $author$project$Style$one = 1;
var $author$project$Access$size = {
	get: function ($) {
		return $.size;
	},
	set: F2(
		function (value, h) {
			return _Utils_update(
				h,
				{size: value});
		})
};
var $author$project$Style$denseButtonStyle = F2(
	function (padd, baseButton) {
		return {
			content: {
				content: {
					icon: function () {
						var b = baseButton.content.content.icon;
						return {
							ifActive: A2($author$project$Access$size.set, $author$project$Style$fontsize.normal, b.ifActive),
							ifDisabled: A2($author$project$Access$size.set, $author$project$Style$fontsize.normal, b.ifDisabled),
							otherwise: A2($author$project$Access$size.set, $author$project$Style$fontsize.normal, b.otherwise)
						};
					}(),
					text: {
						contentText: _Utils_ap(
							baseButton.content.content.text.contentText,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$centerX,
									A2($mdgriffith$elm_ui$Element$paddingXY, $author$project$Style$one * (padd + 1), 0),
									$mdgriffith$elm_ui$Element$htmlAttribute(
									A2($elm$html$Html$Attributes$style, 'letter-spacing', '0px'))
								]))
					}
				},
				elementRow: _Utils_ap(
					baseButton.content.elementRow,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(0),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							A2($mdgriffith$elm_ui$Element$paddingXY, $author$project$Style$one * padd, 0),
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$centerX
						]))
			},
			elementButton: _Utils_ap(
				baseButton.elementButton,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$padding($author$project$Style$one * (padd + 1)),
						$mdgriffith$elm_ui$Element$Border$rounded($author$project$Style$ten),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
						$mdgriffith$elm_ui$Element$Font$size($author$project$Style$fontsize.normal),
						$mdgriffith$elm_ui$Element$htmlAttribute(
						A2($elm$html$Html$Attributes$style, 'text-transform', 'none')),
						$mdgriffith$elm_ui$Element$htmlAttribute(
						A2($elm$html$Html$Attributes$style, 'font-weight', '100'))
					])),
			ifActive: baseButton.ifActive,
			ifDisabled: baseButton.ifDisabled,
			otherwise: baseButton.otherwise
		};
	});
var $author$project$Style$denseContainedButton = F2(
	function (padd, p) {
		return A2(
			$author$project$Style$denseButtonStyle,
			padd,
			$Orasund$elm_ui_widgets$Widget$Material$containedButton(p));
	});
var $author$project$Access$elementButton = {
	get: function ($) {
		return $.elementButton;
	},
	set: F2(
		function (value, h) {
			return _Utils_update(
				h,
				{elementButton: value});
		})
};
var $Orasund$elm_ui_widgets$Internal$Material$Button$iconButton = function (palette) {
	return {
		content: {
			content: {
				icon: {
					ifActive: {color: palette.primary, size: 18},
					ifDisabled: {
						color: $Orasund$elm_ui_widgets$Internal$Material$Palette$gray(palette),
						size: 18
					},
					otherwise: {color: palette.primary, size: 18}
				},
				text: {
					contentText: _List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX])
				}
			},
			elementRow: _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(8),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$centerX
				])
		},
		elementButton: _Utils_ap(
			$Orasund$elm_ui_widgets$Internal$Material$Button$baseButton(palette).elementButton,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(48)),
					$mdgriffith$elm_ui$Element$width(
					A2($mdgriffith$elm_ui$Element$minimum, 48, $mdgriffith$elm_ui$Element$shrink)),
					$mdgriffith$elm_ui$Element$Border$rounded(24),
					$mdgriffith$elm_ui$Element$mouseDown(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(
							$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
								A2($Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity, $Orasund$elm_ui_widgets$Widget$Material$Color$buttonPressedOpacity, palette.surface)))
						])),
					$mdgriffith$elm_ui$Element$focused(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(
							$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
								A2($Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity, $Orasund$elm_ui_widgets$Widget$Material$Color$buttonFocusOpacity, palette.surface)))
						])),
					$mdgriffith$elm_ui$Element$mouseOver(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(
							$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
								A2($Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity, $Orasund$elm_ui_widgets$Widget$Material$Color$buttonHoverOpacity, palette.surface)))
						]))
				])),
		ifActive: _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color(
				$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
					A2($Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity, $Orasund$elm_ui_widgets$Widget$Material$Color$buttonHoverOpacity, palette.surface)))
			]),
		ifDisabled: _Utils_ap(
			$Orasund$elm_ui_widgets$Internal$Material$Button$baseButton(palette).ifDisabled,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
						$Orasund$elm_ui_widgets$Internal$Material$Palette$gray(palette))),
					$mdgriffith$elm_ui$Element$mouseDown(_List_Nil),
					$mdgriffith$elm_ui$Element$mouseOver(_List_Nil),
					$mdgriffith$elm_ui$Element$focused(_List_Nil)
				])),
		otherwise: _List_Nil
	};
};
var $Orasund$elm_ui_widgets$Widget$Material$iconButton = $Orasund$elm_ui_widgets$Internal$Material$Button$iconButton;
var $author$project$Style$denseIconButton = F2(
	function (padd, p) {
		return A2(
			$author$project$Style$denseButtonStyle,
			padd,
			A3(
				$author$project$Access$mapField,
				$author$project$Access$elementButton,
				$author$project$Style$listPrepend(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$mouseDown(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Background$color(
									$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
										A2($Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity, $Orasund$elm_ui_widgets$Widget$Material$Color$buttonPressedOpacity, p.primary)))
								])),
							$mdgriffith$elm_ui$Element$focused(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Background$color(
									$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
										A2($Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity, $Orasund$elm_ui_widgets$Widget$Material$Color$buttonFocusOpacity, p.primary)))
								])),
							$mdgriffith$elm_ui$Element$mouseOver(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Background$color(
									$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
										A2($Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity, $Orasund$elm_ui_widgets$Widget$Material$Color$buttonHoverOpacity, p.primary)))
								]))
						])),
				$Orasund$elm_ui_widgets$Widget$Material$iconButton(p)));
	});
var $phosphor_icons$phosphor_elm$Phosphor$floppyDisk = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M216,91.3V208a8,8,0,0,1-8,8H48a8,8,0,0,1-8-8V48a8,8,0,0,1,8-8H164.7a7.9,7.9,0,0,1,5.6,2.3l43.4,43.4A7.9,7.9,0,0,1,216,91.3Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M80,216V152a8,8,0,0,1,8-8h80a8,8,0,0,1,8,8v64'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('152'),
								$elm$svg$Svg$Attributes$y1('80'),
								$elm$svg$Svg$Attributes$x2('96'),
								$elm$svg$Svg$Attributes$y2('80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M80,216V152a8,8,0,0,1,8-8h80a8,8,0,0,1,8,8v64h32a8,8,0,0,0,8-8V91.3a7.9,7.9,0,0,0-2.3-5.6L170.3,42.3a7.9,7.9,0,0,0-5.6-2.3H48a8,8,0,0,0-8,8V208a8,8,0,0,0,8,8Z'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M216,91.3V208a8,8,0,0,1-8,8H48a8,8,0,0,1-8-8V48a8,8,0,0,1,8-8H164.7a7.9,7.9,0,0,1,5.6,2.3l43.4,43.4A7.9,7.9,0,0,1,216,91.3Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M80,216V152a8,8,0,0,1,8-8h80a8,8,0,0,1,8,8v64'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('152'),
								$elm$svg$Svg$Attributes$y1('72'),
								$elm$svg$Svg$Attributes$x2('96'),
								$elm$svg$Svg$Attributes$y2('72'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M219.3,80,176,36.7A15.9,15.9,0,0,0,164.7,32H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V91.3A15.9,15.9,0,0,0,219.3,80ZM208,91.3V208H184V152a16,16,0,0,0-16-16H88a16,16,0,0,0-16,16v56H48V48H164.7L208,91.3ZM160,72a8,8,0,0,1-8,8H96a8,8,0,0,1,0-16h56A8,8,0,0,1,160,72Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M216,91.3V208a8,8,0,0,1-8,8H48a8,8,0,0,1-8-8V48a8,8,0,0,1,8-8H164.7a7.9,7.9,0,0,1,5.6,2.3l43.4,43.4A7.9,7.9,0,0,1,216,91.3Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M80,216V152a8,8,0,0,1,8-8h80a8,8,0,0,1,8,8v64'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('152'),
								$elm$svg$Svg$Attributes$y1('72'),
								$elm$svg$Svg$Attributes$x2('96'),
								$elm$svg$Svg$Attributes$y2('72'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M216,91.3V208a8,8,0,0,1-8,8H48a8,8,0,0,1-8-8V48a8,8,0,0,1,8-8H164.7a7.9,7.9,0,0,1,5.6,2.3l43.4,43.4A7.9,7.9,0,0,1,216,91.3Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M80,216V152a8,8,0,0,1,8-8h80a8,8,0,0,1,8,8v64'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('152'),
								$elm$svg$Svg$Attributes$y1('72'),
								$elm$svg$Svg$Attributes$x2('96'),
								$elm$svg$Svg$Attributes$y2('72'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M216,91.3V208a8,8,0,0,1-8,8H48a8,8,0,0,1-8-8V48a8,8,0,0,1,8-8H164.7a7.9,7.9,0,0,1,5.6,2.3l43.4,43.4A7.9,7.9,0,0,1,216,91.3Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M80,216V152a8,8,0,0,1,8-8h80a8,8,0,0,1,8,8v64'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('152'),
								$elm$svg$Svg$Attributes$y1('72'),
								$elm$svg$Svg$Attributes$x2('96'),
								$elm$svg$Svg$Attributes$y2('72'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $Orasund$elm_ui_widgets$Internal$Button$iconButton = F2(
	function (style, _v0) {
		var onPress = _v0.onPress;
		var text = _v0.text;
		var icon = _v0.icon;
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_Utils_ap(
				style.elementButton,
				_Utils_ap(
					_Utils_eq(onPress, $elm$core$Maybe$Nothing) ? style.ifDisabled : style.otherwise,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Region$description(text)
						]))),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$el,
					style.content.elementRow,
					icon(
						_Utils_eq(onPress, $elm$core$Maybe$Nothing) ? style.content.content.icon.ifDisabled : style.content.content.icon.otherwise)),
				onPress: onPress
			});
	});
var $Orasund$elm_ui_widgets$Widget$iconButton = function () {
	var fun = $Orasund$elm_ui_widgets$Internal$Button$iconButton;
	return fun;
}();
var $mdgriffith$elm_ui$Element$Font$bold = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.bold);
var $mdgriffith$elm_ui$Internal$Flag$fontAlignment = $mdgriffith$elm_ui$Internal$Flag$flag(12);
var $mdgriffith$elm_ui$Element$Font$center = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontAlignment, $mdgriffith$elm_ui$Internal$Style$classes.textCenter);
var $Orasund$elm_ui_widgets$Internal$Material$Palette$lightGray = function (palette) {
	return A3($Orasund$elm_ui_widgets$Widget$Material$Color$withShade, palette.on.surface, 0.14, palette.surface);
};
var $Orasund$elm_ui_widgets$Widget$Material$lightGray = $Orasund$elm_ui_widgets$Internal$Material$Palette$lightGray;
var $author$project$StyleQuery$iconFromParticipant = F2(
	function (sel, dir) {
		var incaret = function (x) {
			return A2(
				$author$project$Symbol$elementIcon,
				sel ? A2(
					$author$project$Symbol$withFontColorSize,
					0.8,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Element$paddingXY, 2, 1),
							$mdgriffith$elm_ui$Element$Border$rounded(2),
							$mdgriffith$elm_ui$Element$Font$color(
							$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor($author$project$Style$palette.person.on.primary)),
							$mdgriffith$elm_ui$Element$Background$color(
							$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor($author$project$Style$palette.person.primary)),
							$mdgriffith$elm_ui$Element$Border$color(
							$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor($author$project$Style$palette.person.on.primary)),
							$mdgriffith$elm_ui$Element$Border$width(0),
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Border$rounded(2)
						])) : A2(
					$author$project$Symbol$withFontColorSize,
					0.8,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Element$paddingXY, 2, 1),
							$mdgriffith$elm_ui$Element$Font$color(
							$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor($author$project$Style$palette.person.primary)),
							$mdgriffith$elm_ui$Element$Border$color(
							$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
								$Orasund$elm_ui_widgets$Widget$Material$lightGray($author$project$Style$palette.person))),
							$mdgriffith$elm_ui$Element$Border$width(0),
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$Border$rounded($author$project$Style$two)
						])),
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					$mdgriffith$elm_ui$Element$text(x)));
		};
		switch (dir.$) {
			case 'To':
				return incaret('to');
			case 'Cc':
				return incaret('cc');
			case 'From':
				return $elm$core$Basics$always($mdgriffith$elm_ui$Element$none);
			default:
				return incaret('bcc');
		}
	});
var $elm$html$Html$Attributes$id = $elm$html$Html$Attributes$stringProperty('id');
var $author$project$Grid$idAttribute = function (id) {
	return $mdgriffith$elm_ui$Element$htmlAttribute(
		$elm$html$Html$Attributes$id(id));
};
var $mdgriffith$elm_ui$Element$Input$Above = {$: 'Above'};
var $mdgriffith$elm_ui$Element$Input$Label = F3(
	function (a, b, c) {
		return {$: 'Label', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Element$Input$labelAbove = $mdgriffith$elm_ui$Element$Input$Label($mdgriffith$elm_ui$Element$Input$Above);
var $mdgriffith$elm_ui$Element$Input$HiddenLabel = function (a) {
	return {$: 'HiddenLabel', a: a};
};
var $mdgriffith$elm_ui$Element$Input$labelHidden = $mdgriffith$elm_ui$Element$Input$HiddenLabel;
var $author$project$Style$denseTextButton = F2(
	function (padd, p) {
		return A2(
			$author$project$Style$denseButtonStyle,
			padd,
			$Orasund$elm_ui_widgets$Widget$Material$textButton(p));
	});
var $author$project$Style$materialDenseButton = F2(
	function (prefericon, p) {
		return prefericon ? $author$project$Style$denseIconButton(p) : $author$project$Style$denseTextButton(p);
	});
var $author$project$StyleQuery$materialStateButton = F4(
	function (selection, unsel, pad, p) {
		return selection ? A2($author$project$Style$denseContainedButton, pad, p) : A2(unsel, pad, p);
	});
var $author$project$Query$maybePerson = function (x) {
	if ((x.$ === 'Leaf') && (x.a.$ === 'Person')) {
		var _v1 = x.a;
		var t = _v1.b;
		return $elm$core$Maybe$Just(t);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Element$Input$TextArea = {$: 'TextArea'};
var $mdgriffith$elm_ui$Internal$Model$LivePolite = {$: 'LivePolite'};
var $mdgriffith$elm_ui$Element$Region$announce = $mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$LivePolite);
var $mdgriffith$elm_ui$Element$Input$applyLabel = F3(
	function (attrs, label, input) {
		if (label.$ === 'HiddenLabel') {
			var labelText = label.a;
			return A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asColumn,
				$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
				attrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[input])));
		} else {
			var position = label.a;
			var labelAttrs = label.b;
			var labelChild = label.c;
			var labelElement = A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				labelAttrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[labelChild])));
			switch (position.$) {
				case 'Above':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
				case 'Below':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				case 'OnRight':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				default:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
			}
		}
	});
var $elm$html$Html$Attributes$attribute = $elm$virtual_dom$VirtualDom$attribute;
var $mdgriffith$elm_ui$Element$Input$autofill = A2(
	$elm$core$Basics$composeL,
	$mdgriffith$elm_ui$Internal$Model$Attr,
	$elm$html$Html$Attributes$attribute('autocomplete'));
var $mdgriffith$elm_ui$Internal$Model$Behind = {$: 'Behind'};
var $mdgriffith$elm_ui$Element$behindContent = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$Behind, element);
};
var $mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding = function (attrs) {
	var gatherSpacing = F2(
		function (attr, found) {
			if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
				var _v2 = attr.b;
				var x = _v2.b;
				var y = _v2.c;
				if (found.$ === 'Nothing') {
					return $elm$core$Maybe$Just(y);
				} else {
					return found;
				}
			} else {
				return found;
			}
		});
	var _v0 = A3($elm$core$List$foldr, gatherSpacing, $elm$core$Maybe$Nothing, attrs);
	if (_v0.$ === 'Nothing') {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	} else {
		var vSpace = _v0.a;
		return $mdgriffith$elm_ui$Element$moveUp(
			$elm$core$Basics$floor(vSpace / 2));
	}
};
var $mdgriffith$elm_ui$Element$clip = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.clip);
var $mdgriffith$elm_ui$Element$rgb = F3(
	function (r, g, b) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, r, g, b, 1);
	});
var $mdgriffith$elm_ui$Element$Input$darkGrey = A3($mdgriffith$elm_ui$Element$rgb, 186 / 255, 189 / 255, 182 / 255);
var $mdgriffith$elm_ui$Element$Input$defaultTextPadding = A2($mdgriffith$elm_ui$Element$paddingXY, 12, 12);
var $mdgriffith$elm_ui$Element$Input$white = A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1);
var $mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Input$defaultTextPadding,
		$mdgriffith$elm_ui$Element$Border$rounded(3),
		$mdgriffith$elm_ui$Element$Border$color($mdgriffith$elm_ui$Element$Input$darkGrey),
		$mdgriffith$elm_ui$Element$Background$color($mdgriffith$elm_ui$Element$Input$white),
		$mdgriffith$elm_ui$Element$Border$width(1),
		$mdgriffith$elm_ui$Element$spacing(5),
		$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
		$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink)
	]);
var $mdgriffith$elm_ui$Element$Input$getHeight = function (attr) {
	if (attr.$ === 'Height') {
		var h = attr.a;
		return $elm$core$Maybe$Just(h);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute = function (label) {
	if (label.$ === 'HiddenLabel') {
		var textLabel = label.a;
		return $mdgriffith$elm_ui$Internal$Model$Describe(
			$mdgriffith$elm_ui$Internal$Model$Label(textLabel));
	} else {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	}
};
var $mdgriffith$elm_ui$Element$Input$isConstrained = function (len) {
	isConstrained:
	while (true) {
		switch (len.$) {
			case 'Content':
				return false;
			case 'Px':
				return true;
			case 'Fill':
				return true;
			case 'Min':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isConstrained;
			default:
				var l = len.b;
				return true;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isHiddenLabel = function (label) {
	if (label.$ === 'HiddenLabel') {
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Element$Input$isStacked = function (label) {
	if (label.$ === 'Label') {
		var loc = label.a;
		switch (loc.$) {
			case 'OnRight':
				return false;
			case 'OnLeft':
				return false;
			case 'Above':
				return true;
			default:
				return true;
		}
	} else {
		return true;
	}
};
var $mdgriffith$elm_ui$Element$Input$negateBox = function (box) {
	return {bottom: -box.bottom, left: -box.left, right: -box.right, top: -box.top};
};
var $elm$html$Html$Events$alwaysStop = function (x) {
	return _Utils_Tuple2(x, true);
};
var $elm$html$Html$Events$targetValue = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'value']),
	$elm$json$Json$Decode$string);
var $elm$html$Html$Events$onInput = function (tagger) {
	return A2(
		$elm$html$Html$Events$stopPropagationOn,
		'input',
		A2(
			$elm$json$Json$Decode$map,
			$elm$html$Html$Events$alwaysStop,
			A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$targetValue)));
};
var $mdgriffith$elm_ui$Element$Input$isFill = function (len) {
	isFill:
	while (true) {
		switch (len.$) {
			case 'Fill':
				return true;
			case 'Content':
				return false;
			case 'Px':
				return false;
			case 'Min':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isPixel = function (len) {
	isPixel:
	while (true) {
		switch (len.$) {
			case 'Content':
				return false;
			case 'Px':
				return true;
			case 'Fill':
				return false;
			case 'Min':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
		}
	}
};
var $mdgriffith$elm_ui$Internal$Model$paddingNameFloat = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(top) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(right) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(bottom) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(left)))))));
	});
var $mdgriffith$elm_ui$Element$Input$redistributeOver = F4(
	function (isMultiline, stacked, attr, els) {
		switch (attr.$) {
			case 'Nearby':
				return _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					});
			case 'Width':
				var width = attr.a;
				return $mdgriffith$elm_ui$Element$Input$isFill(width) ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent),
						input: A2($elm$core$List$cons, attr, els.input),
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : (stacked ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent)
					}) : _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					}));
			case 'Height':
				var height = attr.a;
				return (!stacked) ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent),
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : ($mdgriffith$elm_ui$Element$Input$isFill(height) ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent),
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : ($mdgriffith$elm_ui$Element$Input$isPixel(height) ? _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					})));
			case 'AlignX':
				return _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent)
					});
			case 'AlignY':
				return _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent)
					});
			case 'StyleClass':
				switch (attr.b.$) {
					case 'SpacingStyle':
						var _v1 = attr.b;
						return _Utils_update(
							els,
							{
								fullParent: A2($elm$core$List$cons, attr, els.fullParent),
								input: A2($elm$core$List$cons, attr, els.input),
								parent: A2($elm$core$List$cons, attr, els.parent),
								wrapper: A2($elm$core$List$cons, attr, els.wrapper)
							});
					case 'PaddingStyle':
						var cls = attr.a;
						var _v2 = attr.b;
						var pad = _v2.a;
						var t = _v2.b;
						var r = _v2.c;
						var b = _v2.d;
						var l = _v2.e;
						if (isMultiline) {
							return _Utils_update(
								els,
								{
									cover: A2($elm$core$List$cons, attr, els.cover),
									parent: A2($elm$core$List$cons, attr, els.parent)
								});
						} else {
							var newTop = t - A2($elm$core$Basics$min, t, b);
							var newLineHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'line-height',
									'calc(1.0em + ' + ($elm$core$String$fromFloat(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							var newHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'height',
									'calc(1.0em + ' + ($elm$core$String$fromFloat(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							var newBottom = b - A2($elm$core$Basics$min, t, b);
							var reducedVerticalPadding = A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$padding,
								A5(
									$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
									A4($mdgriffith$elm_ui$Internal$Model$paddingNameFloat, newTop, r, newBottom, l),
									newTop,
									r,
									newBottom,
									l));
							return _Utils_update(
								els,
								{
									cover: A2($elm$core$List$cons, attr, els.cover),
									input: A2(
										$elm$core$List$cons,
										newHeight,
										A2($elm$core$List$cons, newLineHeight, els.input)),
									parent: A2($elm$core$List$cons, reducedVerticalPadding, els.parent)
								});
						}
					case 'BorderWidth':
						var _v3 = attr.b;
						return _Utils_update(
							els,
							{
								cover: A2($elm$core$List$cons, attr, els.cover),
								parent: A2($elm$core$List$cons, attr, els.parent)
							});
					case 'Transform':
						return _Utils_update(
							els,
							{
								cover: A2($elm$core$List$cons, attr, els.cover),
								parent: A2($elm$core$List$cons, attr, els.parent)
							});
					case 'FontSize':
						return _Utils_update(
							els,
							{
								fullParent: A2($elm$core$List$cons, attr, els.fullParent)
							});
					case 'FontFamily':
						var _v4 = attr.b;
						return _Utils_update(
							els,
							{
								fullParent: A2($elm$core$List$cons, attr, els.fullParent)
							});
					default:
						var flag = attr.a;
						var cls = attr.b;
						return _Utils_update(
							els,
							{
								parent: A2($elm$core$List$cons, attr, els.parent)
							});
				}
			case 'NoAttribute':
				return els;
			case 'Attr':
				var a = attr.a;
				return _Utils_update(
					els,
					{
						input: A2($elm$core$List$cons, attr, els.input)
					});
			case 'Describe':
				return _Utils_update(
					els,
					{
						input: A2($elm$core$List$cons, attr, els.input)
					});
			case 'Class':
				return _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					});
			default:
				return _Utils_update(
					els,
					{
						input: A2($elm$core$List$cons, attr, els.input)
					});
		}
	});
var $mdgriffith$elm_ui$Element$Input$redistribute = F3(
	function (isMultiline, stacked, attrs) {
		return function (redist) {
			return {
				cover: $elm$core$List$reverse(redist.cover),
				fullParent: $elm$core$List$reverse(redist.fullParent),
				input: $elm$core$List$reverse(redist.input),
				parent: $elm$core$List$reverse(redist.parent),
				wrapper: $elm$core$List$reverse(redist.wrapper)
			};
		}(
			A3(
				$elm$core$List$foldl,
				A2($mdgriffith$elm_ui$Element$Input$redistributeOver, isMultiline, stacked),
				{cover: _List_Nil, fullParent: _List_Nil, input: _List_Nil, parent: _List_Nil, wrapper: _List_Nil},
				attrs));
	});
var $mdgriffith$elm_ui$Element$Input$renderBox = function (_v0) {
	var top = _v0.top;
	var right = _v0.right;
	var bottom = _v0.bottom;
	var left = _v0.left;
	return $elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px'))))));
};
var $mdgriffith$elm_ui$Internal$Model$Transparency = F2(
	function (a, b) {
		return {$: 'Transparency', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$transparency = $mdgriffith$elm_ui$Internal$Flag$flag(0);
var $mdgriffith$elm_ui$Element$alpha = function (o) {
	var transparency = function (x) {
		return 1 - x;
	}(
		A2(
			$elm$core$Basics$min,
			1.0,
			A2($elm$core$Basics$max, 0.0, o)));
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2(
			$mdgriffith$elm_ui$Internal$Model$Transparency,
			'transparency-' + $mdgriffith$elm_ui$Internal$Model$floatClass(transparency),
			transparency));
};
var $mdgriffith$elm_ui$Element$Input$charcoal = A3($mdgriffith$elm_ui$Element$rgb, 136 / 255, 138 / 255, 133 / 255);
var $mdgriffith$elm_ui$Element$rgba = $mdgriffith$elm_ui$Internal$Model$Rgba;
var $mdgriffith$elm_ui$Element$Input$renderPlaceholder = F3(
	function (_v0, forPlaceholder, on) {
		var placeholderAttrs = _v0.a;
		var placeholderEl = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_Utils_ap(
				forPlaceholder,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($mdgriffith$elm_ui$Element$Input$charcoal),
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.noTextSelection + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.passPointerEvents)),
							$mdgriffith$elm_ui$Element$clip,
							$mdgriffith$elm_ui$Element$Border$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$Background$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$alpha(
							on ? 1 : 0)
						]),
					placeholderAttrs)),
			placeholderEl);
	});
var $mdgriffith$elm_ui$Element$scrollbarY = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.scrollbarsY);
var $elm$html$Html$span = _VirtualDom_node('span');
var $elm$html$Html$Attributes$spellcheck = $elm$html$Html$Attributes$boolProperty('spellcheck');
var $mdgriffith$elm_ui$Element$Input$spellcheck = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$spellcheck);
var $elm$html$Html$Attributes$type_ = $elm$html$Html$Attributes$stringProperty('type');
var $elm$html$Html$Attributes$value = $elm$html$Html$Attributes$stringProperty('value');
var $mdgriffith$elm_ui$Element$Input$value = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$value);
var $mdgriffith$elm_ui$Element$Input$textHelper = F3(
	function (textInput, attrs, textOptions) {
		var withDefaults = _Utils_ap($mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle, attrs);
		var redistributed = A3(
			$mdgriffith$elm_ui$Element$Input$redistribute,
			_Utils_eq(textInput.type_, $mdgriffith$elm_ui$Element$Input$TextArea),
			$mdgriffith$elm_ui$Element$Input$isStacked(textOptions.label),
			withDefaults);
		var onlySpacing = function (attr) {
			if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
				var _v9 = attr.b;
				return true;
			} else {
				return false;
			}
		};
		var heightConstrained = function () {
			var _v7 = textInput.type_;
			if (_v7.$ === 'TextInputNode') {
				var inputType = _v7.a;
				return false;
			} else {
				return A2(
					$elm$core$Maybe$withDefault,
					false,
					A2(
						$elm$core$Maybe$map,
						$mdgriffith$elm_ui$Element$Input$isConstrained,
						$elm$core$List$head(
							$elm$core$List$reverse(
								A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Element$Input$getHeight, withDefaults)))));
			}
		}();
		var getPadding = function (attr) {
			if ((attr.$ === 'StyleClass') && (attr.b.$ === 'PaddingStyle')) {
				var cls = attr.a;
				var _v6 = attr.b;
				var pad = _v6.a;
				var t = _v6.b;
				var r = _v6.c;
				var b = _v6.d;
				var l = _v6.e;
				return $elm$core$Maybe$Just(
					{
						bottom: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(b - 3)),
						left: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(l - 3)),
						right: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(r - 3)),
						top: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(t - 3))
					});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		};
		var parentPadding = A2(
			$elm$core$Maybe$withDefault,
			{bottom: 0, left: 0, right: 0, top: 0},
			$elm$core$List$head(
				$elm$core$List$reverse(
					A2($elm$core$List$filterMap, getPadding, withDefaults))));
		var inputElement = A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			function () {
				var _v3 = textInput.type_;
				if (_v3.$ === 'TextInputNode') {
					var inputType = _v3.a;
					return $mdgriffith$elm_ui$Internal$Model$NodeName('input');
				} else {
					return $mdgriffith$elm_ui$Internal$Model$NodeName('textarea');
				}
			}(),
			_Utils_ap(
				function () {
					var _v4 = textInput.type_;
					if (_v4.$ === 'TextInputNode') {
						var inputType = _v4.a;
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$type_(inputType)),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputText)
							]);
					} else {
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$clip,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputMultiline),
								$mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding(withDefaults),
								$mdgriffith$elm_ui$Element$paddingEach(parentPadding),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2(
									$elm$html$Html$Attributes$style,
									'margin',
									$mdgriffith$elm_ui$Element$Input$renderBox(
										$mdgriffith$elm_ui$Element$Input$negateBox(parentPadding)))),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$style, 'box-sizing', 'content-box'))
							]);
					}
				}(),
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Input$value(textOptions.text),
							$mdgriffith$elm_ui$Internal$Model$Attr(
							$elm$html$Html$Events$onInput(textOptions.onChange)),
							$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(textOptions.label),
							$mdgriffith$elm_ui$Element$Input$spellcheck(textInput.spellchecked),
							A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Internal$Model$NoAttribute,
							A2($elm$core$Maybe$map, $mdgriffith$elm_ui$Element$Input$autofill, textInput.autofill))
						]),
					redistributed.input)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil));
		var wrappedInput = function () {
			var _v0 = textInput.type_;
			if (_v0.$ === 'TextArea') {
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					_Utils_ap(
						(heightConstrained ? $elm$core$List$cons($mdgriffith$elm_ui$Element$scrollbarY) : $elm$core$Basics$identity)(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin),
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineWrapper)
								])),
						redistributed.parent),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[
								A4(
								$mdgriffith$elm_ui$Internal$Model$element,
								$mdgriffith$elm_ui$Internal$Model$asParagraph,
								$mdgriffith$elm_ui$Internal$Model$div,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Element$inFront(inputElement),
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineParent),
												redistributed.wrapper)))),
								$mdgriffith$elm_ui$Internal$Model$Unkeyed(
									function () {
										if (textOptions.text === '') {
											var _v1 = textOptions.placeholder;
											if (_v1.$ === 'Nothing') {
												return _List_fromArray(
													[
														$mdgriffith$elm_ui$Element$text('\u00A0')
													]);
											} else {
												var place = _v1.a;
												return _List_fromArray(
													[
														A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, _List_Nil, textOptions.text === '')
													]);
											}
										} else {
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Internal$Model$unstyled(
													A2(
														$elm$html$Html$span,
														_List_fromArray(
															[
																$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineFiller)
															]),
														_List_fromArray(
															[
																$elm$html$Html$text(textOptions.text + '\u00A0')
															])))
												]);
										}
									}()))
							])));
			} else {
				var inputType = _v0.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						A2(
							$elm$core$List$cons,
							A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin),
							$elm$core$List$concat(
								_List_fromArray(
									[
										redistributed.parent,
										function () {
										var _v2 = textOptions.placeholder;
										if (_v2.$ === 'Nothing') {
											return _List_Nil;
										} else {
											var place = _v2.a;
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Element$behindContent(
													A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, redistributed.cover, textOptions.text === ''))
												]);
										}
									}()
									])))),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[inputElement])));
			}
		}();
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			A2(
				$elm$core$List$cons,
				A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.cursorText),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$Input$isHiddenLabel(textOptions.label) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Element$spacing(5),
					A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$Region$announce, redistributed.fullParent))),
			textOptions.label,
			wrappedInput);
	});
var $mdgriffith$elm_ui$Element$Input$multiline = F2(
	function (attrs, multi) {
		return A3(
			$mdgriffith$elm_ui$Element$Input$textHelper,
			{autofill: $elm$core$Maybe$Nothing, spellchecked: multi.spellcheck, type_: $mdgriffith$elm_ui$Element$Input$TextArea},
			attrs,
			{label: multi.label, onChange: multi.onChange, placeholder: multi.placeholder, text: multi.text});
	});
var $author$project$Style$pad = {dense: 4, denser: 2, densest: 1, person: 2, tag: 2, wide: 6};
var $phosphor_icons$phosphor_elm$Phosphor$paperPlaneTilt = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M210.3,35.9,23.9,88.4a8,8,0,0,0-1.2,15l85.6,40.5a7.8,7.8,0,0,1,3.8,3.8l40.5,85.6a8,8,0,0,0,15-1.2L220.1,45.7A7.9,7.9,0,0,0,210.3,35.9Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('110.9'),
								$elm$svg$Svg$Attributes$y1('145.1'),
								$elm$svg$Svg$Attributes$x2('156.1'),
								$elm$svg$Svg$Attributes$y2('99.9'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M210.3,35.9,23.9,88.4a8,8,0,0,0-1.2,15l85.6,40.5a7.8,7.8,0,0,1,3.8,3.8l40.5,85.6a8,8,0,0,0,15-1.2L220.1,45.7A7.9,7.9,0,0,0,210.3,35.9Z'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M210.3,35.9,23.9,88.4a8,8,0,0,0-1.2,15l85.6,40.5a7.8,7.8,0,0,1,3.8,3.8l40.5,85.6a8,8,0,0,0,15-1.2L220.1,45.7A7.9,7.9,0,0,0,210.3,35.9Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('110.9'),
								$elm$svg$Svg$Attributes$y1('145.1'),
								$elm$svg$Svg$Attributes$x2('156.1'),
								$elm$svg$Svg$Attributes$y2('99.9'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M227.7,48.3,175.3,234.2a15.9,15.9,0,0,1-14.1,11.6h-1.4a16,16,0,0,1-14.4-9.1l-35.7-75.4a4.1,4.1,0,0,1,.8-4.6l51.3-51.3a8,8,0,1,0-11.3-11.3L99.2,145.5a4.1,4.1,0,0,1-4.6.8l-75-35.5a16.6,16.6,0,0,1-9.5-15.6A15.9,15.9,0,0,1,21.8,80.7L208.1,28.2a16,16,0,0,1,17.7,6.5A16.7,16.7,0,0,1,227.7,48.3Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M210.3,35.9,23.9,88.4a8,8,0,0,0-1.2,15l85.6,40.5a7.8,7.8,0,0,1,3.8,3.8l40.5,85.6a8,8,0,0,0,15-1.2L220.1,45.7A7.9,7.9,0,0,0,210.3,35.9Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('110.9'),
								$elm$svg$Svg$Attributes$y1('145.1'),
								$elm$svg$Svg$Attributes$x2('156.1'),
								$elm$svg$Svg$Attributes$y2('99.9'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M210.3,35.9,23.9,88.4a8,8,0,0,0-1.2,15l85.6,40.5a7.8,7.8,0,0,1,3.8,3.8l40.5,85.6a8,8,0,0,0,15-1.2L220.1,45.7A7.9,7.9,0,0,0,210.3,35.9Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('110.9'),
								$elm$svg$Svg$Attributes$y1('145.1'),
								$elm$svg$Svg$Attributes$x2('156.1'),
								$elm$svg$Svg$Attributes$y2('99.9'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M210.3,35.9,23.9,88.4a8,8,0,0,0-1.2,15l85.6,40.5a7.8,7.8,0,0,1,3.8,3.8l40.5,85.6a8,8,0,0,0,15-1.2L220.1,45.7A7.9,7.9,0,0,0,210.3,35.9Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('110.9'),
								$elm$svg$Svg$Attributes$y1('145.1'),
								$elm$svg$Svg$Attributes$x2('156.1'),
								$elm$svg$Svg$Attributes$y2('99.9'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $phosphor_icons$phosphor_elm$Phosphor$pencilLine = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M96,216H48a8,8,0,0,1-8-8V163.3a7.9,7.9,0,0,1,2.3-5.6l120-120a8,8,0,0,1,11.4,0l44.6,44.6a8,8,0,0,1,0,11.4Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('136'),
								$elm$svg$Svg$Attributes$y1('64'),
								$elm$svg$Svg$Attributes$x2('192'),
								$elm$svg$Svg$Attributes$y2('120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('44'),
								$elm$svg$Svg$Attributes$y1('156'),
								$elm$svg$Svg$Attributes$x2('104'),
								$elm$svg$Svg$Attributes$y2('216'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('216'),
								$elm$svg$Svg$Attributes$y1('216'),
								$elm$svg$Svg$Attributes$x2('96'),
								$elm$svg$Svg$Attributes$y2('216'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('164'),
								$elm$svg$Svg$Attributes$y1('92'),
								$elm$svg$Svg$Attributes$x2('72'),
								$elm$svg$Svg$Attributes$y2('184'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M192,120,136,64l26.3-26.3a8,8,0,0,1,11.4,0l44.6,44.6a8,8,0,0,1,0,11.4Z'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M96,216H48a8,8,0,0,1-8-8V163.3a7.9,7.9,0,0,1,2.3-5.6l120-120a8,8,0,0,1,11.4,0l44.6,44.6a8,8,0,0,1,0,11.4Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('136'),
								$elm$svg$Svg$Attributes$y1('64'),
								$elm$svg$Svg$Attributes$x2('192'),
								$elm$svg$Svg$Attributes$y2('120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('216 216 96 216 40.5 160.5'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('164'),
								$elm$svg$Svg$Attributes$y1('92'),
								$elm$svg$Svg$Attributes$x2('68'),
								$elm$svg$Svg$Attributes$y2('188'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M224,76.7,179.3,32a15.9,15.9,0,0,0-22.6,0L36.7,152a15.4,15.4,0,0,0-3.6,5.5l-.2.5a16,16,0,0,0-.9,5.3V208a16,16,0,0,0,16,16H216a8,8,0,0,0,0-16H115.3L224,99.3A16.1,16.1,0,0,0,224,76.7Zm-80-9.4L160.7,84,68,176.7,51.3,160ZM48,208V179.3L76.7,208Zm48-3.3L79.3,188,172,95.3,188.7,112Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M96,216H48a8,8,0,0,1-8-8V163.3a7.9,7.9,0,0,1,2.3-5.6l120-120a8,8,0,0,1,11.4,0l44.6,44.6a8,8,0,0,1,0,11.4Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('136'),
								$elm$svg$Svg$Attributes$y1('64'),
								$elm$svg$Svg$Attributes$x2('192'),
								$elm$svg$Svg$Attributes$y2('120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('216 216 96 216 40.5 160.5'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('164'),
								$elm$svg$Svg$Attributes$y1('92'),
								$elm$svg$Svg$Attributes$x2('68'),
								$elm$svg$Svg$Attributes$y2('188'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M96,216H48a8,8,0,0,1-8-8V163.3a7.9,7.9,0,0,1,2.3-5.6l120-120a8,8,0,0,1,11.4,0l44.6,44.6a8,8,0,0,1,0,11.4Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('136'),
								$elm$svg$Svg$Attributes$y1('64'),
								$elm$svg$Svg$Attributes$x2('192'),
								$elm$svg$Svg$Attributes$y2('120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('216 216 96 216 40.5 160.5'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('164'),
								$elm$svg$Svg$Attributes$y1('92'),
								$elm$svg$Svg$Attributes$x2('68'),
								$elm$svg$Svg$Attributes$y2('188'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M96,216H48a8,8,0,0,1-8-8V163.3a7.9,7.9,0,0,1,2.3-5.6l120-120a8,8,0,0,1,11.4,0l44.6,44.6a8,8,0,0,1,0,11.4Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('136'),
								$elm$svg$Svg$Attributes$y1('64'),
								$elm$svg$Svg$Attributes$x2('192'),
								$elm$svg$Svg$Attributes$y2('120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('216 216 96 216 40.5 160.5'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('164'),
								$elm$svg$Svg$Attributes$y1('92'),
								$elm$svg$Svg$Attributes$x2('68'),
								$elm$svg$Svg$Attributes$y2('188'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $mdgriffith$elm_ui$Element$Input$Placeholder = F2(
	function (a, b) {
		return {$: 'Placeholder', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$Input$placeholder = $mdgriffith$elm_ui$Element$Input$Placeholder;
var $author$project$Style$styleButton = F2(
	function (a, d) {
		return _Utils_update(
			d,
			{
				elementButton: _Utils_ap(d.elementButton, a)
			});
	});
var $author$project$Main$ChangeTags = function (a) {
	return {$: 'ChangeTags', a: a};
};
var $author$project$Main$MultiMsg = function (a) {
	return {$: 'MultiMsg', a: a};
};
var $author$project$Main$TagTyped = function (a) {
	return {$: 'TagTyped', a: a};
};
var $author$project$Annotate$annotate = F6(
	function (resize, position, attrs, icon, stly, e) {
		var _v0 = resize(stly);
		var s = _v0.a;
		var a = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$el,
			A2(
				$elm$core$List$cons,
				position(
					A2(
						$mdgriffith$elm_ui$Element$el,
						a,
						icon(s))),
				attrs),
			e);
	});
var $mdgriffith$elm_ui$Element$moveRight = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveX,
		$mdgriffith$elm_ui$Internal$Model$MoveX(x));
};
var $author$project$Annotate$right = F2(
	function (factor, s) {
		return _Utils_Tuple2(
			s,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$moveRight(factor * s.size),
					$mdgriffith$elm_ui$Element$alignRight,
					$mdgriffith$elm_ui$Element$centerY
				]));
	});
var $author$project$StyleQuery$positionAction = $author$project$Annotate$resizer(
	_List_fromArray(
		[
			$author$project$Annotate$top($author$project$StyleQuery$positionstyle.topskip),
			$author$project$Annotate$right(0),
			$author$project$Annotate$scale($author$project$StyleQuery$positionstyle.smaller)
		]));
var $author$project$StyleQuery$denseButtonStyleAnnoted = F7(
	function (pad, palette, prefericon, bstyle, styl, ann_, forcetext) {
		var ann = A2(
			$elm$core$Maybe$withDefault,
			$elm$core$Basics$always($elm$core$Basics$identity),
			A2(
				$elm$core$Maybe$map,
				A3($author$project$Annotate$annotate, $author$project$StyleQuery$positionAction, $mdgriffith$elm_ui$Element$inFront, styl),
				ann_));
		return ((!forcetext) && prefericon) ? function (b) {
			var sb = A3(bstyle, $author$project$Style$denseIconButton, pad, palette);
			return A2(
				ann,
				sb.content.content.icon.ifActive,
				A2($Orasund$elm_ui_widgets$Widget$iconButton, sb, b));
		} : function (b) {
			var sb = A3(bstyle, $author$project$Style$denseTextButton, pad, palette);
			return A2(
				ann,
				sb.content.content.icon.ifActive,
				A2($Orasund$elm_ui_widgets$Widget$button, sb, b));
		};
	});
var $phosphor_icons$phosphor_elm$Phosphor$hash = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('43.6'),
								$elm$svg$Svg$Attributes$y1('96'),
								$elm$svg$Svg$Attributes$x2('224'),
								$elm$svg$Svg$Attributes$y2('96'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('176'),
								$elm$svg$Svg$Attributes$y1('40'),
								$elm$svg$Svg$Attributes$x2('144'),
								$elm$svg$Svg$Attributes$y2('216'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('112'),
								$elm$svg$Svg$Attributes$y1('40'),
								$elm$svg$Svg$Attributes$x2('80'),
								$elm$svg$Svg$Attributes$y2('216'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('32'),
								$elm$svg$Svg$Attributes$y1('160'),
								$elm$svg$Svg$Attributes$x2('212.4'),
								$elm$svg$Svg$Attributes$y2('160'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('43.6'),
								$elm$svg$Svg$Attributes$y1('96'),
								$elm$svg$Svg$Attributes$x2('224'),
								$elm$svg$Svg$Attributes$y2('96'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('176'),
								$elm$svg$Svg$Attributes$y1('40'),
								$elm$svg$Svg$Attributes$x2('144'),
								$elm$svg$Svg$Attributes$y2('216'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('112'),
								$elm$svg$Svg$Attributes$y1('40'),
								$elm$svg$Svg$Attributes$x2('80'),
								$elm$svg$Svg$Attributes$y2('216'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('32'),
								$elm$svg$Svg$Attributes$y1('160'),
								$elm$svg$Svg$Attributes$x2('212.4'),
								$elm$svg$Svg$Attributes$y2('160'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M224,88H175.4l8.5-46.6a8,8,0,0,0-15.8-2.8l-9,49.4H111.4l8.5-46.6a8,8,0,1,0-15.8-2.8L95.1,88H43.6a8,8,0,1,0,0,16H92.2l-8.7,48H32a8,8,0,0,0,0,16H80.6l-8.5,46.6a8,8,0,0,0,6.5,9.3H80a8,8,0,0,0,7.9-6.6l9-49.4h47.7l-8.5,46.6a8,8,0,0,0,6.5,9.3H144a8,8,0,0,0,7.9-6.6l9-49.4h51.5a8,8,0,0,0,0-16H163.8l8.7-48H224a8,8,0,0,0,0-16Zm-76.5,64H99.8l8.7-48h47.7Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('43.6'),
								$elm$svg$Svg$Attributes$y1('96'),
								$elm$svg$Svg$Attributes$x2('224'),
								$elm$svg$Svg$Attributes$y2('96'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('176'),
								$elm$svg$Svg$Attributes$y1('40'),
								$elm$svg$Svg$Attributes$x2('144'),
								$elm$svg$Svg$Attributes$y2('216'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('112'),
								$elm$svg$Svg$Attributes$y1('40'),
								$elm$svg$Svg$Attributes$x2('80'),
								$elm$svg$Svg$Attributes$y2('216'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('32'),
								$elm$svg$Svg$Attributes$y1('160'),
								$elm$svg$Svg$Attributes$x2('212.4'),
								$elm$svg$Svg$Attributes$y2('160'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('43.6'),
								$elm$svg$Svg$Attributes$y1('96'),
								$elm$svg$Svg$Attributes$x2('224'),
								$elm$svg$Svg$Attributes$y2('96'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('176'),
								$elm$svg$Svg$Attributes$y1('40'),
								$elm$svg$Svg$Attributes$x2('144'),
								$elm$svg$Svg$Attributes$y2('216'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('112'),
								$elm$svg$Svg$Attributes$y1('40'),
								$elm$svg$Svg$Attributes$x2('80'),
								$elm$svg$Svg$Attributes$y2('216'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('32'),
								$elm$svg$Svg$Attributes$y1('160'),
								$elm$svg$Svg$Attributes$x2('212.4'),
								$elm$svg$Svg$Attributes$y2('160'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('43.6'),
								$elm$svg$Svg$Attributes$y1('96'),
								$elm$svg$Svg$Attributes$x2('224'),
								$elm$svg$Svg$Attributes$y2('96'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('176'),
								$elm$svg$Svg$Attributes$y1('40'),
								$elm$svg$Svg$Attributes$x2('144'),
								$elm$svg$Svg$Attributes$y2('216'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('112'),
								$elm$svg$Svg$Attributes$y1('40'),
								$elm$svg$Svg$Attributes$x2('80'),
								$elm$svg$Svg$Attributes$y2('216'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('32'),
								$elm$svg$Svg$Attributes$y1('160'),
								$elm$svg$Svg$Attributes$x2('212.4'),
								$elm$svg$Svg$Attributes$y2('160'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $author$project$Symbol$icon = function (s) {
	switch (s.$) {
		case 'Unicode':
			var l = s.a;
			return function (sc) {
				return A2(
					$mdgriffith$elm_ui$Element$el,
					A3(
						$author$project$Symbol$withWidthHeight,
						1.0,
						A2($author$project$Symbol$withFontColorSize, 1.0, _List_Nil),
						sc),
					$mdgriffith$elm_ui$Element$text(l));
			};
		case 'Image':
			var l = s.a;
			return function (_v1) {
				var size = _v1.size;
				return A2(
					$mdgriffith$elm_ui$Element$image,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(size)),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(size))
						]),
					l);
			};
		default:
			var p = s.a;
			return p;
	}
};
var $author$project$Symbol$iconFromTag = F2(
	function (symbols, tag) {
		return A2(
			$elm$core$Maybe$map,
			$author$project$Symbol$icon,
			symbols(tag));
	});
var $avh4$elm_color$Color$gray = A4($avh4$elm_color$Color$RgbaSpace, 211 / 255, 215 / 255, 207 / 255, 1.0);
var $mdgriffith$elm_ui$Element$Border$widthXY = F2(
	function (x, y) {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$borderWidth,
			A5(
				$mdgriffith$elm_ui$Internal$Model$BorderWidth,
				'b-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
				y,
				x,
				y,
				x));
	});
var $mdgriffith$elm_ui$Element$Border$widthEach = function (_v0) {
	var bottom = _v0.bottom;
	var top = _v0.top;
	var left = _v0.left;
	var right = _v0.right;
	return (_Utils_eq(top, bottom) && _Utils_eq(left, right)) ? (_Utils_eq(top, right) ? $mdgriffith$elm_ui$Element$Border$width(top) : A2($mdgriffith$elm_ui$Element$Border$widthXY, left, top)) : A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left))))))),
			top,
			right,
			bottom,
			left));
};
var $author$project$Style$writingStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Border$widthEach(
		{bottom: 1, left: 0, right: 0, top: 0}),
		$mdgriffith$elm_ui$Element$padding($author$project$Style$one),
		$mdgriffith$elm_ui$Element$Border$color(
		$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
			A3($Orasund$elm_ui_widgets$Widget$Material$Color$withShade, $avh4$elm_color$Color$gray, 0.5, $author$project$Style$palette._default.background))),
		A2($author$project$Style$htmlStyle, 'line-height', 'normal')
	]);
var $author$project$Style$inputTextStyle = _Utils_ap(_List_Nil, $author$project$Style$writingStyle);
var $mdgriffith$elm_ui$Element$Input$OnLeft = {$: 'OnLeft'};
var $mdgriffith$elm_ui$Element$Input$labelLeft = $mdgriffith$elm_ui$Element$Input$Label($mdgriffith$elm_ui$Element$Input$OnLeft);
var $author$project$QueryEditor$inputTagText = F6(
	function (o, iconclick, change, attrs, selection, value) {
		var fc = $mdgriffith$elm_ui$Element$Font$color(
			$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
				A3($Orasund$elm_ui_widgets$Widget$Material$Color$withShade, $author$project$Style$palette.tag.primary, 0.2, $author$project$Style$palette.tag.background)));
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink)
				]),
			_List_fromArray(
				[
					A8(
					$author$project$StyleQuery$denseButtonStyleAnnoted,
					$author$project$Style$pad.densest,
					$author$project$Style$palette.tag,
					true,
					$author$project$StyleQuery$materialStateButton(
						_Utils_eq(
							selection,
							$elm$core$Maybe$Just(value))),
					_List_Nil,
					$elm$core$Maybe$Nothing,
					false,
					{
						icon: A2(
							$elm$core$Maybe$withDefault,
							A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$hash, $phosphor_icons$phosphor_elm$Phosphor$Thin),
							A2($author$project$Symbol$iconFromTag, o, value)),
						onPress: iconclick(value),
						text: value
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$multiline,
					_Utils_ap(
						$author$project$Style$inputTextStyle,
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$color(
									$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor($author$project$Style$palette.tag.primary)),
									$mdgriffith$elm_ui$Element$width(
									A2($mdgriffith$elm_ui$Element$minimum, $author$project$Style$fontsize.normal * 2, $mdgriffith$elm_ui$Element$shrink)),
									$mdgriffith$elm_ui$Element$htmlAttribute(
									A2($elm$html$Html$Attributes$style, 'width', 'fit-content'))
								]),
							attrs)),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[fc]),
							$mdgriffith$elm_ui$Element$none),
						onChange: change,
						placeholder: $elm$core$Maybe$Just(
							A2(
								$mdgriffith$elm_ui$Element$Input$placeholder,
								_List_Nil,
								A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$alignLeft, fc]),
									$mdgriffith$elm_ui$Element$text('# tag')))),
						spellcheck: false,
						text: value
					})
				]));
	});
var $author$project$Style$onEnter = function (msg) {
	return $mdgriffith$elm_ui$Element$htmlAttribute(
		A2(
			$elm$html$Html$Events$on,
			'keyup',
			A2(
				$elm$json$Json$Decode$andThen,
				function (key) {
					return (key === 'Enter') ? $elm$json$Json$Decode$succeed(msg) : $elm$json$Json$Decode$fail('Not the enter key');
				},
				A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string))));
};
var $elm$core$String$replace = F3(
	function (before, after, string) {
		return A2(
			$elm$core$String$join,
			after,
			A2($elm$core$String$split, before, string));
	});
var $author$project$StyleQuery$buttonElementFromTag = F4(
	function (symbols, butt, action, tag) {
		var _v0 = symbols(tag);
		if (_v0.$ === 'Just') {
			var s = _v0.a;
			return A2(
				butt,
				false,
				function () {
					switch (s.$) {
						case 'Unicode':
							var l = s.a;
							return {
								icon: A2(
									$author$project$Symbol$elementIcon,
									A2($author$project$Symbol$withFontColorSize, 1.0, _List_Nil),
									$mdgriffith$elm_ui$Element$text(l)),
								onPress: action,
								text: tag
							};
						case 'Image':
							var l = s.a;
							return {
								icon: function (_v2) {
									var size = _v2.size;
									return A2(
										$mdgriffith$elm_ui$Element$image,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$height(
												$mdgriffith$elm_ui$Element$px(size)),
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(size))
											]),
										l);
								},
								onPress: action,
								text: tag
							};
						default:
							var p = s.a;
							return {icon: p, onPress: action, text: tag};
					}
				}());
		} else {
			return A2(
				butt,
				true,
				{
					icon: A2(
						$author$project$Annotate$iconResize,
						function (_v3) {
							return $author$project$Style$fontsize.small;
						},
						A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$hash, $phosphor_icons$phosphor_elm$Phosphor$Thin)),
					onPress: action,
					text: tag
				});
		}
	});
var $phosphor_icons$phosphor_elm$Phosphor$minus = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('216'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('216'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M216,136H40a8,8,0,0,1,0-16H216a8,8,0,0,1,0,16Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('216'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('216'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('216'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $phosphor_icons$phosphor_elm$Phosphor$plus = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('216'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('128'),
								$elm$svg$Svg$Attributes$y1('40'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('216'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('216'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('128'),
								$elm$svg$Svg$Attributes$y1('40'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('216'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M216,120H136V40a8,8,0,0,0-16,0v80H40a8,8,0,0,0,0,16h80v80a8,8,0,0,0,16,0V136h80a8,8,0,0,0,0-16Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('216'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('128'),
								$elm$svg$Svg$Attributes$y1('40'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('216'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('216'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('128'),
								$elm$svg$Svg$Attributes$y1('40'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('216'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('128'),
								$elm$svg$Svg$Attributes$x2('216'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('128'),
								$elm$svg$Svg$Attributes$y1('40'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('216'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $author$project$StyleQuery$listChangeAnnotation = function (match) {
	return match ? A5(
		$author$project$Annotate$circleIcon,
		$author$project$Style$five,
		_List_Nil,
		$elm$core$Maybe$Just($author$project$Style$palette.tag.on.secondary),
		$elm$core$Maybe$Just($author$project$Style$palette.tag.secondary),
		A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$minus, $phosphor_icons$phosphor_elm$Phosphor$Fill)) : A5(
		$author$project$Annotate$circleIcon,
		$author$project$Style$five,
		_List_Nil,
		$elm$core$Maybe$Just($author$project$Style$palette.tag.on.secondary),
		$elm$core$Maybe$Just($author$project$Style$palette.tag.secondary),
		A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$plus, $phosphor_icons$phosphor_elm$Phosphor$Fill));
};
var $author$project$Grid$Bottom = {$: 'Bottom'};
var $author$project$Grid$CenterX = {$: 'CenterX'};
var $author$project$Style$semiTransparent = function (alpha) {
	return _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$alpha(alpha),
			$mdgriffith$elm_ui$Element$mouseOver(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alpha(1.0)
				]))
		]);
};
var $mdgriffith$elm_ui$Element$moveDown = function (y) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveY,
		$mdgriffith$elm_ui$Internal$Model$MoveY(y));
};
var $author$project$StyleQuery$viewlogic = F2(
	function (symbolf, l) {
		return A2(
			$elm$core$Maybe$withDefault,
			A2(
				$author$project$Symbol$elementIcon,
				A2($author$project$Symbol$withFontColorSize, 1.0, _List_Nil),
				function () {
					switch (l) {
						case 'not':
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$moveLeft(2.5),
										$mdgriffith$elm_ui$Element$moveDown(1.5)
									]),
								$mdgriffith$elm_ui$Element$text('¬'));
						case 'and':
							return $mdgriffith$elm_ui$Element$text('∧');
						case 'or':
							return $mdgriffith$elm_ui$Element$text('∨');
						case 'but':
							return $mdgriffith$elm_ui$Element$text('∧¬');
						default:
							return $mdgriffith$elm_ui$Element$text(l);
					}
				}()),
			A2(
				$elm$core$Maybe$map,
				function (icon) {
					return function (sc) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							$author$project$Style$semiTransparent(0.5),
							icon(sc));
					};
				},
				A2($author$project$Symbol$iconFromTag, symbolf, l)));
	});
var $author$project$StyleQuery$notAnnotation = function (symbolf) {
	var _v0 = $author$project$Grid$hanger(
		A2($author$project$Grid$Position, $author$project$Grid$CenterX, $author$project$Grid$Bottom));
	var inner = _v0.inner;
	var outer = _v0.outer;
	var positioner = _v0.positioner;
	return A2(
		$elm$core$List$cons,
		positioner(
			A2(
				$mdgriffith$elm_ui$Element$el,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$moveUp($author$project$Style$fontsize.tiny),
					inner),
				A3($author$project$StyleQuery$viewlogic, symbolf, 'not', $author$project$Style$iconstyle.query))),
		_Utils_ap(
			$author$project$Style$semiTransparent(0.35),
			outer));
};
var $author$project$StyleQuery$listChangeAnnotate = F3(
	function (viewf, symbolf, tc) {
		if (tc.$ === 'Remove') {
			var t = tc.a;
			return A3(
				viewf,
				_List_Nil,
				$elm$core$Maybe$Just(
					$author$project$StyleQuery$listChangeAnnotation(true)),
				t);
		} else {
			var t = tc.a;
			return A3(
				viewf,
				$author$project$StyleQuery$notAnnotation(symbolf),
				$elm$core$Maybe$Just(
					$author$project$StyleQuery$listChangeAnnotation(false)),
				t);
		}
	});
var $Orasund$elm_ui_widgets$Internal$Material$Button$outlinedButton = function (palette) {
	return {
		content: {
			content: {
				icon: {
					ifActive: {color: palette.primary, size: 18},
					ifDisabled: {
						color: $Orasund$elm_ui_widgets$Internal$Material$Palette$gray(palette),
						size: 18
					},
					otherwise: {color: palette.primary, size: 18}
				},
				text: {
					contentText: $Orasund$elm_ui_widgets$Internal$Material$Button$baseButton(palette).content.content.text.contentText
				}
			},
			elementRow: _Utils_ap(
				$Orasund$elm_ui_widgets$Internal$Material$Button$baseButton(palette).content.elementRow,
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Element$paddingXY, 8, 0)
					]))
		},
		elementButton: _Utils_ap(
			$Orasund$elm_ui_widgets$Internal$Material$Button$baseButton(palette).elementButton,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Border$width(1),
					$mdgriffith$elm_ui$Element$Font$color(
					$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(palette.primary)),
					$mdgriffith$elm_ui$Element$Border$color(
					$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
						A3(
							$Orasund$elm_ui_widgets$Widget$Material$Color$withShade,
							palette.primary,
							$Orasund$elm_ui_widgets$Widget$Material$Color$buttonHoverOpacity,
							A2($Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity, 0.14, palette.on.surface)))),
					$mdgriffith$elm_ui$Element$mouseDown(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(
							$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
								A2($Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity, $Orasund$elm_ui_widgets$Widget$Material$Color$buttonPressedOpacity, palette.primary)))
						])),
					$mdgriffith$elm_ui$Element$focused(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(
							$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
								A2($Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity, $Orasund$elm_ui_widgets$Widget$Material$Color$buttonFocusOpacity, palette.primary)))
						])),
					$mdgriffith$elm_ui$Element$mouseOver(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(
							$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
								A2($Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity, $Orasund$elm_ui_widgets$Widget$Material$Color$buttonHoverOpacity, palette.primary)))
						]))
				])),
		ifActive: _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color(
				$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
					A2($Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity, $Orasund$elm_ui_widgets$Widget$Material$Color$buttonHoverOpacity, palette.primary)))
			]),
		ifDisabled: _Utils_ap(
			$Orasund$elm_ui_widgets$Internal$Material$Button$baseButton(palette).ifDisabled,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
						$Orasund$elm_ui_widgets$Internal$Material$Palette$gray(palette))),
					$mdgriffith$elm_ui$Element$mouseDown(_List_Nil),
					$mdgriffith$elm_ui$Element$mouseOver(_List_Nil),
					$mdgriffith$elm_ui$Element$focused(_List_Nil)
				])),
		otherwise: _List_Nil
	};
};
var $Orasund$elm_ui_widgets$Widget$Material$outlinedButton = $Orasund$elm_ui_widgets$Internal$Material$Button$outlinedButton;
var $author$project$Style$denseOutlinedButton = F2(
	function (padd, p) {
		return A2(
			$author$project$Style$denseButtonStyle,
			padd,
			$Orasund$elm_ui_widgets$Widget$Material$outlinedButton(p));
	});
var $author$project$StyleQuery$outlineButtonStyleAnnoted = F7(
	function (pad, palette, prefericon, bstyle, styl, ann_, forcetext) {
		var annf = F2(
			function (sb, e) {
				return A2(
					$elm$core$Maybe$withDefault,
					e,
					A2(
						$elm$core$Maybe$map,
						function (a) {
							return A6($author$project$Annotate$annotate, $author$project$StyleQuery$positionAction, $mdgriffith$elm_ui$Element$inFront, styl, a, sb.content.content.icon.ifActive, e);
						},
						ann_));
			});
		return ((!forcetext) && prefericon) ? function (b) {
			var sb = A3(bstyle, $author$project$Style$denseOutlinedButton, pad, palette);
			return A2(
				annf,
				sb,
				A2($Orasund$elm_ui_widgets$Widget$iconButton, sb, b));
		} : function (b) {
			var sb = A3(bstyle, $author$project$Style$denseOutlinedButton, pad, palette);
			return A2(
				annf,
				sb,
				A2($Orasund$elm_ui_widgets$Widget$button, sb, b));
		};
	});
var $author$project$StyleQuery$tagChangeButton = F5(
	function (prefericon, symbolf, change, selected, tc) {
		var viewf = F3(
			function (styl, ann, tag) {
				return A4(
					$author$project$StyleQuery$buttonElementFromTag,
					symbolf,
					A6(
						$author$project$StyleQuery$outlineButtonStyleAnnoted,
						$author$project$Style$pad.tag,
						$author$project$Style$palette.tag,
						prefericon,
						$author$project$StyleQuery$materialStateButton(
							A2(
								$elm$core$List$any,
								$elm$core$Basics$eq(tag),
								selected)),
						styl,
						ann),
					change(tc),
					tag);
			});
		return A3($author$project$StyleQuery$listChangeAnnotate, viewf, symbolf, tc);
	});
var $author$project$StyleQuery$viewTags = F5(
	function (prefericon, symbolf, selmsg, changemsg, _v0) {
		var tags = _v0.tags;
		var highlight = _v0.highlight;
		var selected = _v0.selected;
		var selectedRemove = function (t) {
			return _Utils_Tuple2(
				t,
				A5(
					$author$project$StyleQuery$tagChangeButton,
					prefericon,
					symbolf,
					function (tc) {
						return changemsg(tc);
					},
					selected,
					$author$project$ListChange$Remove(t)));
		};
		var listmember = F2(
			function (a, l) {
				return A2(
					$elm$core$List$any,
					$elm$core$Basics$eq(a),
					l);
			});
		var infob = function (t) {
			return _Utils_Tuple2(
				t,
				A4(
					$author$project$StyleQuery$buttonElementFromTag,
					symbolf,
					A6(
						$author$project$StyleQuery$denseButtonStyleAnnoted,
						$author$project$Style$pad.tag,
						$author$project$Style$palette.tag,
						prefericon,
						$author$project$StyleQuery$materialStateButton(
							A2(
								$elm$core$List$any,
								$elm$core$Basics$eq(t),
								selected)),
						_List_Nil,
						$elm$core$Maybe$Nothing),
					selmsg(t),
					t));
		};
		var highlightAdd = function (t) {
			return _Utils_Tuple2(
				t,
				A5(
					$author$project$StyleQuery$tagChangeButton,
					prefericon,
					symbolf,
					function (tc) {
						return changemsg(tc);
					},
					selected,
					$author$project$ListChange$UpAdd(t)));
		};
		var appendNonTags = F2(
			function (x, acc) {
				return _Utils_ap(
					acc,
					A2(
						$elm$core$List$filter,
						function (st) {
							return !A2(
								listmember,
								st,
								_Utils_ap(acc, tags));
						},
						x));
			});
		var right = A2(appendNonTags, selected, highlight);
		return _Utils_Tuple2(
			A2(
				$elm$core$List$map,
				function (t) {
					return A2(listmember, t, tags) ? selectedRemove(t) : highlightAdd(t);
				},
				right),
			A2(
				$elm$core$List$map,
				function (t) {
					return A2(
						listmember,
						t,
						_Utils_ap(selected, highlight)) ? selectedRemove(t) : infob(t);
				},
				A2(
					$elm$core$List$filter,
					function (t) {
						return A2(
							$elm$core$List$all,
							$elm$core$Basics$neq(t),
							right);
					},
					tags)));
	});
var $mdgriffith$elm_ui$Internal$Model$Padding = F5(
	function (a, b, c, d, e) {
		return {$: 'Padding', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Model$Spaced = F3(
	function (a, b, c) {
		return {$: 'Spaced', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$extractSpacingAndPadding = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (attr, _v0) {
				var pad = _v0.a;
				var spacing = _v0.b;
				return _Utils_Tuple2(
					function () {
						if (pad.$ === 'Just') {
							var x = pad.a;
							return pad;
						} else {
							if ((attr.$ === 'StyleClass') && (attr.b.$ === 'PaddingStyle')) {
								var _v3 = attr.b;
								var name = _v3.a;
								var t = _v3.b;
								var r = _v3.c;
								var b = _v3.d;
								var l = _v3.e;
								return $elm$core$Maybe$Just(
									A5($mdgriffith$elm_ui$Internal$Model$Padding, name, t, r, b, l));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}(),
					function () {
						if (spacing.$ === 'Just') {
							var x = spacing.a;
							return spacing;
						} else {
							if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
								var _v6 = attr.b;
								var name = _v6.a;
								var x = _v6.b;
								var y = _v6.c;
								return $elm$core$Maybe$Just(
									A3($mdgriffith$elm_ui$Internal$Model$Spaced, name, x, y));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}());
			}),
		_Utils_Tuple2($elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing),
		attrs);
};
var $mdgriffith$elm_ui$Element$wrappedRow = F2(
	function (attrs, children) {
		var _v0 = $mdgriffith$elm_ui$Internal$Model$extractSpacingAndPadding(attrs);
		var padded = _v0.a;
		var spaced = _v0.b;
		if (spaced.$ === 'Nothing') {
			return A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asRow,
				$mdgriffith$elm_ui$Internal$Model$div,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							attrs))),
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
		} else {
			var _v2 = spaced.a;
			var spaceName = _v2.a;
			var x = _v2.b;
			var y = _v2.c;
			var newPadding = function () {
				if (padded.$ === 'Just') {
					var _v5 = padded.a;
					var name = _v5.a;
					var t = _v5.b;
					var r = _v5.c;
					var b = _v5.d;
					var l = _v5.e;
					if ((_Utils_cmp(r, x / 2) > -1) && (_Utils_cmp(b, y / 2) > -1)) {
						var newTop = t - (y / 2);
						var newRight = r - (x / 2);
						var newLeft = l - (x / 2);
						var newBottom = b - (y / 2);
						return $elm$core$Maybe$Just(
							A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$padding,
								A5(
									$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
									A4($mdgriffith$elm_ui$Internal$Model$paddingNameFloat, newTop, newRight, newBottom, newLeft),
									newTop,
									newRight,
									newBottom,
									newLeft)));
					} else {
						return $elm$core$Maybe$Nothing;
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}();
			if (newPadding.$ === 'Just') {
				var pad = newPadding.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asRow,
					$mdgriffith$elm_ui$Internal$Model$div,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
								_Utils_ap(
									attrs,
									_List_fromArray(
										[pad]))))),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
			} else {
				var halfY = -(y / 2);
				var halfX = -(x / 2);
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					attrs,
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[
								A4(
								$mdgriffith$elm_ui$Internal$Model$element,
								$mdgriffith$elm_ui$Internal$Model$asRow,
								$mdgriffith$elm_ui$Internal$Model$div,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Internal$Model$Attr(
											A2(
												$elm$html$Html$Attributes$style,
												'margin',
												$elm$core$String$fromFloat(halfY) + ('px' + (' ' + ($elm$core$String$fromFloat(halfX) + 'px'))))),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Internal$Model$Attr(
												A2(
													$elm$html$Html$Attributes$style,
													'width',
													'calc(100% + ' + ($elm$core$String$fromInt(x) + 'px)'))),
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Internal$Model$Attr(
													A2(
														$elm$html$Html$Attributes$style,
														'height',
														'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))),
												A2(
													$elm$core$List$cons,
													A2(
														$mdgriffith$elm_ui$Internal$Model$StyleClass,
														$mdgriffith$elm_ui$Internal$Flag$spacing,
														A3($mdgriffith$elm_ui$Internal$Model$SpacingStyle, spaceName, x, y)),
													_List_Nil))))),
								$mdgriffith$elm_ui$Internal$Model$Unkeyed(children))
							])));
			}
		}
	});
var $author$project$Main$timeTagRow = F6(
	function (prefericon, td, _v0, attrs, time_, tagchips) {
		var tag_input = A2(
			$elm$core$Maybe$withDefault,
			$mdgriffith$elm_ui$Element$none,
			A2(
				$elm$core$Maybe$map,
				function (tag_) {
					return A6(
						$author$project$QueryEditor$inputTagText,
						td,
						function (t) {
							return $elm$core$Maybe$Just(
								$author$project$Main$SelectQuery(
									$author$project$Query$Leaf(
										$author$project$Query$Tag(t))));
						},
						A2($elm$core$Basics$composeR, $author$project$Main$TagTyped, $author$project$Main$Global),
						_List_fromArray(
							[
								function () {
								var tag = $elm$core$String$trim(
									A3($elm$core$String$replace, '\n', ' ', tag_));
								return $author$project$Style$onEnter(
									$author$project$Main$MultiMsg(
										_List_fromArray(
											[
												$author$project$Main$Global(
												$author$project$Main$TagTyped('')),
												$author$project$Main$SelectQuery(
												$author$project$Query$Leaf(
													$author$project$Query$Tag(tag))),
												$author$project$Main$ChangeTags(
												_List_fromArray(
													[
														$author$project$ListChange$UpAdd(tag)
													]))
											])));
							}()
							]),
						A2(
							$elm$core$List$any,
							$elm$core$Basics$eq(tag_),
							tagchips.selected) ? $elm$core$Maybe$Just(tag_) : $elm$core$Maybe$Nothing,
						tag_);
				},
				tagchips.tag_input));
		var _v1 = A5(
			$author$project$StyleQuery$viewTags,
			prefericon,
			td,
			function (t) {
				return $elm$core$Maybe$Just(
					$author$project$Main$SelectQuery(
						$author$project$Query$tag(t)));
			},
			function (tc) {
				return $elm$core$Maybe$Just(
					$author$project$Main$ChangeTags(
						_List_fromArray(
							[tc])));
			},
			tagchips);
		var left = _v1.a;
		var right = _v1.b;
		return A2(
			$mdgriffith$elm_ui$Element$wrappedRow,
			_Utils_ap(attrs.headerRow, attrs.tags),
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$second,
				_Utils_ap(
					time_,
					_Utils_ap(
						left,
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								'__divider',
								A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
										]),
									$mdgriffith$elm_ui$Element$none)),
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2('__input', tag_input),
								right))))));
	});
var $author$project$Main$verbose = true;
var $author$project$AddressInput$MapEditor = F2(
	function (a, b) {
		return {$: 'MapEditor', a: a, b: b};
	});
var $phosphor_icons$phosphor_elm$Phosphor$download = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('128'),
								$elm$svg$Svg$Attributes$y1('24'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('80 80 128 128 176 80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M184.6,128H224a8,8,0,0,1,8,8v64a8,8,0,0,1-8,8H32a8,8,0,0,1-8-8V136a8,8,0,0,1,8-8H71.4'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('188'),
								$elm$svg$Svg$Attributes$cy('168'),
								$elm$svg$Svg$Attributes$r('16')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$rect,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x('24'),
								$elm$svg$Svg$Attributes$y('128'),
								$elm$svg$Svg$Attributes$width('208'),
								$elm$svg$Svg$Attributes$height('80'),
								$elm$svg$Svg$Attributes$rx('8'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M176,128h48a8,8,0,0,1,8,8v64a8,8,0,0,1-8,8H32a8,8,0,0,1-8-8V136a8,8,0,0,1,8-8H80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('128'),
								$elm$svg$Svg$Attributes$y1('24'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('80 80 128 128 176 80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('188'),
								$elm$svg$Svg$Attributes$cy('168'),
								$elm$svg$Svg$Attributes$r('12')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M74.3,85.7A8.1,8.1,0,0,1,85.7,74.3L120,108.7V24a8,8,0,0,1,16,0v84.7l34.3-34.4a8.1,8.1,0,0,1,11.4,11.4l-48,48a8.2,8.2,0,0,1-11.4,0ZM240,136v64a16,16,0,0,1-16,16H32a16,16,0,0,1-16-16V136a16,16,0,0,1,16-16H84.4a3.6,3.6,0,0,1,2.8,1.2L111,145a24.1,24.1,0,0,0,34,0l23.8-23.8a3.6,3.6,0,0,1,2.8-1.2H224A16,16,0,0,1,240,136Zm-40,32a12,12,0,1,0-12,12A12,12,0,0,0,200,168Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M176,128h48a8,8,0,0,1,8,8v64a8,8,0,0,1-8,8H32a8,8,0,0,1-8-8V136a8,8,0,0,1,8-8H80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('128'),
								$elm$svg$Svg$Attributes$y1('24'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('80 80 128 128 176 80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('188'),
								$elm$svg$Svg$Attributes$cy('168'),
								$elm$svg$Svg$Attributes$r('10')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M176,128h48a8,8,0,0,1,8,8v64a8,8,0,0,1-8,8H32a8,8,0,0,1-8-8V136a8,8,0,0,1,8-8H80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('128'),
								$elm$svg$Svg$Attributes$y1('24'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('80 80 128 128 176 80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('188'),
								$elm$svg$Svg$Attributes$cy('168'),
								$elm$svg$Svg$Attributes$r('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M176,128h48a8,8,0,0,1,8,8v64a8,8,0,0,1-8,8H32a8,8,0,0,1-8-8V136a8,8,0,0,1,8-8H80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('128'),
								$elm$svg$Svg$Attributes$y1('24'),
								$elm$svg$Svg$Attributes$x2('128'),
								$elm$svg$Svg$Attributes$y2('128'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('80 80 128 128 176 80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('188'),
								$elm$svg$Svg$Attributes$cy('168'),
								$elm$svg$Svg$Attributes$r('12')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $author$project$Style$annotateQueryable = F3(
	function (ifpresent, state, attrs) {
		var position = function (x) {
			return $mdgriffith$elm_ui$Element$inFront(
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$alignLeft, $mdgriffith$elm_ui$Element$alignBottom]),
					x));
		};
		var phosphor = F2(
			function (icon, weight) {
				return A3(
					$author$project$Style$elmPhosphor,
					icon,
					weight,
					{color: $avh4$elm_color$Color$darkGray, size: $author$project$Style$fontsize.small});
			});
		switch (state.$) {
			case 'Request':
				return _Utils_ap(
					attrs,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Border$color(
							$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor($author$project$Style$palette._default.primary)),
							$mdgriffith$elm_ui$Element$Border$width(0),
							$mdgriffith$elm_ui$Element$Border$rounded($author$project$Style$ten),
							position(
							A2(phosphor, $phosphor_icons$phosphor_elm$Phosphor$download, $phosphor_icons$phosphor_elm$Phosphor$Bold))
						]));
			case 'Requested':
				return _Utils_ap(
					attrs,
					_List_fromArray(
						[
							position(
							A2($author$project$ProgressIndicator$indeterminateCircularIcon, $author$project$Style$iconstyle._default, _List_Nil))
						]));
			default:
				if (ifpresent.$ === 'Nothing') {
					return attrs;
				} else {
					var x = ifpresent.a;
					return A2(
						$elm$core$List$cons,
						position(x),
						attrs);
				}
		}
	});
var $phosphor_icons$phosphor_elm$Phosphor$caretDown = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('208 96 128 176 48 96'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polygon,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('208 96 128 176 48 96 208 96'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polygon,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('208 96 128 176 48 96 208 96'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M215.4,92.9A8,8,0,0,0,208,88H48a8,8,0,0,0-7.4,4.9,8.4,8.4,0,0,0,1.7,8.8l80,80a8.2,8.2,0,0,0,11.4,0l80-80A8.4,8.4,0,0,0,215.4,92.9Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('208 96 128 176 48 96'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('208 96 128 176 48 96'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('208 96 128 176 48 96'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $phosphor_icons$phosphor_elm$Phosphor$caretUp = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('48 160 128 80 208 160'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polygon,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('48 160 128 80 208 160 48 160'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polygon,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('48 160 128 80 208 160 48 160'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M213.7,154.3l-80-80a8.1,8.1,0,0,0-11.4,0l-80,80a8.4,8.4,0,0,0-1.7,8.8A8,8,0,0,0,48,168H208a8,8,0,0,0,7.4-4.9A8.4,8.4,0,0,0,213.7,154.3Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('48 160 128 80 208 160'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('48 160 128 80 208 160'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('48 160 128 80 208 160'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $mdgriffith$elm_ui$Element$clipY = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.clipY);
var $author$project$AddressInput$SelectPerson = function (a) {
	return {$: 'SelectPerson', a: a};
};
var $author$project$Access$chips = {
	get: function ($) {
		return $.chips;
	},
	set: F2(
		function (value, h) {
			return _Utils_update(
				h,
				{chips: value});
		})
};
var $author$project$Annotate$circleBehindContent = F2(
	function (bg, size) {
		return $mdgriffith$elm_ui$Element$behindContent(
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Border$rounded(
						$elm$core$Basics$round(1 + (size / 2))),
						$mdgriffith$elm_ui$Element$padding(0),
						$mdgriffith$elm_ui$Element$Background$color(bg),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
					]),
				$mdgriffith$elm_ui$Element$none));
	});
var $author$project$Annotate$circle = F4(
	function (invert, col, sc, attr) {
		return _Utils_ap(
			function () {
				if (invert.$ === 'Selected') {
					return _List_fromArray(
						[
							A2(
							$author$project$Annotate$circleBehindContent,
							$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(col),
							sc.size),
							$mdgriffith$elm_ui$Element$Font$color(
							$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
								$Orasund$elm_ui_widgets$Widget$Material$Color$accessibleTextColor(col))),
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$width(
							A2($mdgriffith$elm_ui$Element$minimum, sc.size, $mdgriffith$elm_ui$Element$shrink)),
							$mdgriffith$elm_ui$Element$height(
							A2($mdgriffith$elm_ui$Element$minimum, sc.size, $mdgriffith$elm_ui$Element$shrink))
						]);
				} else {
					return _List_fromArray(
						[
							A2(
							$author$project$Annotate$circleBehindContent,
							$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(col),
							sc.size),
							$mdgriffith$elm_ui$Element$Font$color(
							$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(sc.color)),
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$width(
							A2($mdgriffith$elm_ui$Element$minimum, sc.size, $mdgriffith$elm_ui$Element$shrink)),
							$mdgriffith$elm_ui$Element$height(
							A2($mdgriffith$elm_ui$Element$minimum, sc.size, $mdgriffith$elm_ui$Element$shrink))
						]);
				}
			}(),
			attr);
	});
var $author$project$StyleQuery$iconFromCount = F2(
	function (bg, x) {
		return function (sc) {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				A3(
					$author$project$Style$annotateQueryable,
					$elm$core$Maybe$Nothing,
					x,
					A3(
						$elm$core$Basics$apR,
						A2(
							$elm$core$Maybe$map,
							function (bg_) {
								return A3($author$project$Annotate$circle, $author$project$Tags$Selected, bg_, sc);
							},
							bg),
						$elm$core$Maybe$withDefault($elm$core$Basics$identity),
						A3(
							$author$project$Symbol$withFontColorSize,
							1.0,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerY, $mdgriffith$elm_ui$Element$centerX]),
							sc))),
				A2(
					$mdgriffith$elm_ui$Element$el,
					A3(
						$author$project$Symbol$withFontColorSize,
						1.0,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$padding(3 * $author$project$Style$one)
							]),
						_Utils_update(
							sc,
							{size: sc.size - (3 * $author$project$Style$one)})),
					A2(
						$elm$core$Maybe$withDefault,
						$mdgriffith$elm_ui$Element$text('?'),
						A2(
							$elm$core$Maybe$map,
							A2($elm$core$Basics$composeR, $elm$core$String$fromInt, $mdgriffith$elm_ui$Element$text),
							$author$project$Query$queryable(x)))));
		};
	});
var $author$project$Access$justIfNotEmpty = function (a) {
	if (!a.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		return $elm$core$Maybe$Just(a);
	}
};
var $author$project$Style$mailboxStyle = _List_fromArray(
	[
		$author$project$Style$fontsizeE($author$project$Style$fontsize.small),
		$mdgriffith$elm_ui$Element$Font$color(
		$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
			$Orasund$elm_ui_widgets$Widget$Material$gray($author$project$Style$palette._default))),
		$mdgriffith$elm_ui$Element$alignTop
	]);
var $author$project$Person$match = F2(
	function (sp, qp) {
		return A2(
			$elm$core$List$any,
			function (m) {
				return A2(
					$elm$core$List$any,
					$elm$core$Basics$eq(m),
					qp.mailbox);
			},
			sp.mailbox);
	});
var $author$project$Person$stringFromEmail = function (m) {
	return m.local + ('@' + m.domain);
};
var $author$project$Style$textInputInline = F2(
	function (attr, input) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$multiline,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$padding($author$project$Style$two),
				_Utils_ap(
					$author$project$Style$writingStyle,
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						attr))),
			input);
	});
var $author$project$Style$button = function (prefericon) {
	return prefericon ? $Orasund$elm_ui_widgets$Widget$iconButton : $Orasund$elm_ui_widgets$Widget$button;
};
var $author$project$AddressInput$viewPersonSelected = F6(
	function (prefericon, role, msgf, ann, statef, p) {
		var state = statef(p);
		var styl = A4(
			$author$project$StyleQuery$materialStateButton,
			state,
			$author$project$Style$materialDenseButton(prefericon),
			0,
			$author$project$Style$palette.person);
		var annbr = function (x) {
			return A5($author$project$Annotate$annotate, $author$project$StyleQuery$positionAction, $mdgriffith$elm_ui$Element$inFront, _List_Nil, x, styl.content.content.icon.ifActive);
		};
		return function () {
			var _v0 = _Utils_Tuple2(ann, state);
			if (_v0.a.$ === 'Just') {
				if (_v0.b) {
					var a = _v0.a.a;
					return annbr(
						A5(
							$author$project$Annotate$circleIcon,
							$author$project$Style$five,
							_List_Nil,
							$elm$core$Maybe$Just($author$project$Style$palette.person.on.primary),
							$elm$core$Maybe$Just($author$project$Style$palette.person.primary),
							a));
				} else {
					var a = _v0.a.a;
					return annbr(a);
				}
			} else {
				return $elm$core$Basics$identity;
			}
		}()(
			A3(
				$author$project$Style$button,
				prefericon,
				styl,
				A4(
					$author$project$StyleQuery$buttonFromPerson,
					msgf(p),
					state,
					role,
					p)));
	});
var $author$project$AddressInput$emailSelection = F5(
	function (defa, viewa, label, selection, edit) {
		var self = A2(
			$elm$core$Maybe$withDefault,
			$elm$core$Basics$always(false),
			A2($elm$core$Maybe$map, $author$project$Person$match, selection));
		var selected = function (p_) {
			return A2(
				$elm$core$Maybe$withDefault,
				false,
				A2(
					$elm$core$Maybe$map,
					$author$project$Person$match(p_),
					selection));
		};
		var removePerson = function (p) {
			return A2(
				$author$project$Access$mapField,
				$author$project$Access$chips,
				A2(
					$author$project$ListChange$listChange,
					$author$project$Access$justIfKeep(
						F2(
							function (a, b) {
								return _Utils_eq(a.person, b.person);
							})),
					_List_fromArray(
						[
							$author$project$ListChange$Remove(p)
						])));
		};
		var listchf = $author$project$Access$justIfReplace(
			F2(
				function (x, y) {
					return A2($author$project$Person$match, x.person, y.person);
				}));
		var inputs_ = _Utils_ap(
			$author$project$Style$inputTextStyle,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding($author$project$Style$one),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2($author$project$Style$htmlStyle, 'text-align', 'end')
				]));
		var dirfor = function (p) {
			return A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.dir;
				},
				$elm$core$List$head(
					A2(
						$elm$core$List$filter,
						function (pc) {
							return A2($author$project$Person$match, pc.person, p);
						},
						edit.chips)));
		};
		var viewAButton = F2(
			function (pc, a) {
				var issel = _Utils_eq(
					$elm$core$Maybe$Just(a),
					dirfor(pc.person));
				return A2(
					$Orasund$elm_ui_widgets$Widget$iconButton,
					A3($author$project$Style$materialDenseButton, false, $author$project$Style$pad.denser, $author$project$Style$palette.person),
					{
						icon: A2(viewa, issel, a),
						onPress: $elm$core$Maybe$Just(
							A2(
								$author$project$AddressInput$MapEditor,
								true,
								function (ai) {
									return _Utils_update(
										ai,
										{
											chips: A3(
												$author$project$ListChange$change,
												listchf,
												issel ? $author$project$ListChange$Remove(
													{dir: a, person: pc.person}) : $author$project$ListChange$UpAdd(
													{dir: a, person: pc.person}),
												ai.chips)
										});
								})),
						text: 'set'
					});
			});
		var viewAuthorCounts = function (pcs) {
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color(
						$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor($author$project$Style$palette.person.surface)),
						$mdgriffith$elm_ui$Element$padding($author$project$Style$five),
						$mdgriffith$elm_ui$Element$spacing($author$project$Style$two),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				A2(
					$elm$core$List$map,
					function (pc) {
						return A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							_Utils_ap(
								A2(
									$elm$core$List$map,
									viewAButton(pc),
									defa),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$column,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing($author$project$Style$one),
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
											]),
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$row,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$spacing($author$project$Style$two),
														$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
													]),
												_List_fromArray(
													[
														A3(
														$author$project$StyleQuery$iconFromPerson,
														A2(
															$elm$core$List$any,
															A2(
																$elm$core$Basics$composeR,
																function ($) {
																	return $.person;
																},
																selected),
															edit.chips),
														pc.person,
														$author$project$Style$iconstyle._default),
														$mdgriffith$elm_ui$Element$text(
														$author$project$Person$stringFromPerson(pc.person)),
														A3($author$project$StyleQuery$iconFromCount, $elm$core$Maybe$Nothing, pc.matching, $author$project$Style$iconstyle._default)
													])),
												A2(
												$mdgriffith$elm_ui$Element$el,
												$author$project$Style$mailboxStyle,
												$mdgriffith$elm_ui$Element$text(
													A2(
														$elm$core$Maybe$withDefault,
														'',
														A2(
															$elm$core$Maybe$map,
															$author$project$Person$stringFromEmail,
															$elm$core$List$head(pc.person.mailbox)))))
											]))
									])));
					},
					pcs));
		};
		var addPerson = F3(
			function (dir, p, ai) {
				return _Utils_update(
					ai,
					{
						chips: A2(
							$elm$core$List$cons,
							{dir: dir, person: p},
							ai.chips),
						choices: ai.choices,
						input: ''
					});
			});
		var inputs = function () {
			if (!defa.b) {
				return inputs_;
			} else {
				var fa = defa.a;
				return A2(
					$elm$core$List$cons,
					$author$project$Style$onEnter(
						A2(
							$author$project$AddressInput$MapEditor,
							false,
							A2(
								addPerson,
								fa,
								$author$project$Person$fromString(edit.input)))),
					inputs_);
			}
		}();
		return {
			chips: A2(
				$elm$core$List$map,
				function (p_) {
					return _Utils_Tuple2(
						$author$project$Person$stringFromPerson(p_.person),
						selected(p_.person) ? A6(
							$author$project$Annotate$annotate,
							$author$project$StyleQuery$positionAction,
							$mdgriffith$elm_ui$Element$inFront,
							_List_Nil,
							A5(
								$author$project$Annotate$circleIcon,
								$author$project$Style$five,
								_List_Nil,
								$elm$core$Maybe$Nothing,
								$elm$core$Maybe$Nothing,
								A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$minus, $phosphor_icons$phosphor_elm$Phosphor$Thin)),
							$author$project$Style$iconstyle.person,
							A6(
								$author$project$AddressInput$viewPersonSelected,
								true,
								$elm$core$Maybe$Just(
									A2(viewa, true, p_.dir)),
								A2(
									$elm$core$Maybe$withDefault,
									$elm$core$Basics$always($elm$core$Maybe$Nothing),
									A2(
										$elm$core$Maybe$map,
										function (defdir) {
											return function (p) {
												return $elm$core$Maybe$Just(
													A2(
														$author$project$AddressInput$MapEditor,
														false,
														removePerson(
															{dir: defdir, person: p})));
											};
										},
										$elm$core$List$head(defa))),
								$elm$core$Maybe$Nothing,
								self,
								p_.person)) : A6(
							$author$project$AddressInput$viewPersonSelected,
							true,
							$elm$core$Maybe$Just(
								A2(viewa, false, p_.dir)),
							A2($elm$core$Basics$composeR, $author$project$AddressInput$SelectPerson, $elm$core$Maybe$Just),
							$elm$core$Maybe$Nothing,
							self,
							p_.person));
				},
				edit.chips),
			choices: A2(
				$elm$core$Maybe$map,
				viewAuthorCounts,
				$author$project$Access$justIfNotEmpty(
					$author$project$Query$queryable(edit.choices))),
			searchInput: A2(
				$author$project$Style$textInputInline,
				inputs,
				{
					label: $mdgriffith$elm_ui$Element$Input$labelHidden(label),
					onChange: function (s_) {
						return A2(
							$author$project$AddressInput$MapEditor,
							true,
							function (ai) {
								return _Utils_update(
									ai,
									{
										chips: ai.chips,
										choices: ($elm$core$String$length(s_) > 1) ? $author$project$Query$Request(_List_Nil) : $author$project$Query$Present(_List_Nil),
										index: 0,
										input: s_
									});
							});
					},
					placeholder: $elm$core$Maybe$Just(
						A2(
							$mdgriffith$elm_ui$Element$Input$placeholder,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$alignRight]),
							A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$alignRight]),
								$mdgriffith$elm_ui$Element$text(label)))),
					spellcheck: false,
					text: edit.input
				})
		};
	});
var $mdgriffith$elm_ui$Element$explain = function (_v0) {
	return $mdgriffith$elm_ui$Internal$Model$htmlClass('explain');
};
var $mdgriffith$elm_ui$Element$Keyed$row = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asRow,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Keyed(children));
	});
var $elm$core$Debug$todo = _Debug_todo;
var $author$project$Grid$keyedRow = F2(
	function (a, x) {
		return A2(
			$mdgriffith$elm_ui$Element$Keyed$row,
			a,
			A2(
				$elm$core$List$map,
				function (_v0) {
					var k = _v0.a;
					var e = _v0.b;
					return (k === '') ? _Utils_Tuple2(
						k,
						A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$explain(
									_Debug_todo(
										'Grid',
										{
											start: {line: 803, column: 56},
											end: {line: 803, column: 66}
										}))
								]),
							e)) : _Utils_Tuple2(k, e);
				},
				x));
	});
var $author$project$AddressInput$viewPersonsEditor = F5(
	function (defa, viewb, label, pa, p) {
		var _v0 = A5($author$project$AddressInput$emailSelection, defa, viewb, label, pa, p);
		var choices = _v0.choices;
		var searchInput = _v0.searchInput;
		var chips = _v0.chips;
		var choices_ = p.expanded ? A2(
			$mdgriffith$elm_ui$Element$row,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$scrollbarY,
							$mdgriffith$elm_ui$Element$clipY,
							$mdgriffith$elm_ui$Element$height(
							A2($mdgriffith$elm_ui$Element$maximum, 200, $mdgriffith$elm_ui$Element$shrink))
						]),
					_List_fromArray(
						[
							A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Element$none,
							A2(
								$elm$core$Maybe$map,
								$mdgriffith$elm_ui$Element$el(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$scrollbarY
										])),
								choices))
						]))
				])) : $mdgriffith$elm_ui$Element$none;
		var toggleExpand = A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$alignTop]),
			A2(
				$Orasund$elm_ui_widgets$Widget$iconButton,
				A2($author$project$Style$denseIconButton, $author$project$Style$pad.dense, $author$project$Style$palette._default),
				{
					icon: p.expanded ? A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$caretUp, $phosphor_icons$phosphor_elm$Phosphor$Thin) : A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$caretDown, $phosphor_icons$phosphor_elm$Phosphor$Thin),
					onPress: A2(
						$elm$core$Maybe$withDefault,
						$elm$core$Maybe$Nothing,
						A2(
							$elm$core$Maybe$map,
							$elm$core$Basics$always(
								$elm$core$Maybe$Just(
									A2(
										$author$project$AddressInput$MapEditor,
										false,
										function (s_) {
											return _Utils_update(
												s_,
												{expanded: !p.expanded});
										}))),
							choices)),
					text: 'hide'
				}));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			A3(
				$author$project$Style$annotateQueryable,
				$elm$core$Maybe$Nothing,
				p.choices,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					])),
			_List_fromArray(
				[
					A2(
					$author$project$Grid$keyedRow,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					_Utils_ap(
						_List_fromArray(
							[
								_Utils_Tuple2('__input', searchInput),
								_Utils_Tuple2('__toggle', toggleExpand)
							]),
						chips)),
					choices_
				]));
	});
var $author$project$Main$viewVisibilityState = F4(
	function (vis, attrs, header, content) {
		switch (vis.$) {
			case 'Full':
				return A2(
					$mdgriffith$elm_ui$Element$column,
					attrs,
					_List_fromArray(
						[header, content]));
			case 'Abbreviated':
				return A2(
					$mdgriffith$elm_ui$Element$column,
					attrs,
					_List_fromArray(
						[header]));
			default:
				return A2(
					$mdgriffith$elm_ui$Element$column,
					attrs,
					_List_fromArray(
						[header]));
		}
	});
var $author$project$Main$viewDraft = F6(
	function (symbolf, attrs_, s, pa, d__, inreplyto) {
		var d = $author$project$Notmuch$postable(d__);
		var sendable = !$elm$core$List$isEmpty(
			A2(
				$elm$core$List$filterMap,
				$elm$core$List$head,
				A2(
					$elm$core$List$map,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.person;
						},
						function ($) {
							return $.mailbox;
						}),
					d.participants.chips)));
		var attrs = A3(
			$author$project$Access$mapField,
			$author$project$Access$elementColumn,
			$author$project$Style$annotatePostable(d__),
			attrs_);
		var buttons = {
			from: _Utils_Tuple2(
				'__from',
				A2(
					$Orasund$elm_ui_widgets$Widget$iconButton,
					A2(
						$author$project$Style$styleButton,
						_List_Nil,
						A4(
							$author$project$StyleQuery$materialStateButton,
							false,
							$author$project$Style$materialDenseButton(false),
							0,
							$author$project$Style$palette.person)),
					A4(
						$author$project$StyleQuery$buttonFromPerson,
						$elm$core$Maybe$Just(
							$author$project$Main$SelectQuery(
								$author$project$Query$Leaf(
									A2($author$project$Query$Person, $author$project$Query$Sender, d.from)))),
						false,
						$elm$core$Maybe$Nothing,
						d.from))),
			respond: _Utils_Tuple2(
				'__respond',
				s.selection ? A2(
					$Orasund$elm_ui_widgets$Widget$iconButton,
					A2($author$project$Style$denseIconButton, $author$project$Style$pad.densest, $author$project$Style$palette._default),
					{
						icon: A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$chatTeardropText, $phosphor_icons$phosphor_elm$Phosphor$Fill),
						onPress: A2(
							$elm$core$Maybe$map,
							$author$project$Main$DraftReplyTo,
							A2(
								$elm$core$Maybe$map,
								function (q) {
									return A2(
										$author$project$Access$query.set,
										q,
										$author$project$Main$aggregateSession(pa));
								},
								A2(
									$elm$core$Maybe$map,
									A2(
										$elm$core$Basics$composeR,
										function ($) {
											return $.id;
										},
										A2(
											$elm$core$Basics$composeR,
											$author$project$Query$MessageID,
											A2($elm$core$Basics$composeR, $author$project$Query$ID, $author$project$Query$Leaf))),
									inreplyto))),
						text: 'respond'
					}) : $mdgriffith$elm_ui$Element$none),
			save: _Utils_Tuple2(
				'__save',
				function () {
					if (d__.$ === 'Unposted') {
						return A2(
							$Orasund$elm_ui_widgets$Widget$iconButton,
							A2($author$project$Style$denseContainedButton, $author$project$Style$pad.densest, $author$project$Style$palette._default),
							{
								icon: A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$floppyDisk, $phosphor_icons$phosphor_elm$Phosphor$Fill),
								onPress: $elm$core$Maybe$Just($author$project$Main$PostSaveDraft),
								text: 'save'
							});
					} else {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$alignTop,
									A2($mdgriffith$elm_ui$Element$paddingXY, 0, 0)
								]),
							A3($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$pencilLine, $phosphor_icons$phosphor_elm$Phosphor$Thin, $author$project$Style$iconstyle._default));
					}
				}()),
			send: _Utils_Tuple2(
				'__send',
				(sendable && s.selection) ? A2(
					$Orasund$elm_ui_widgets$Widget$iconButton,
					A2($author$project$Style$denseIconButton, $author$project$Style$pad.densest, $author$project$Style$palette._default),
					{
						icon: A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$paperPlaneTilt, $phosphor_icons$phosphor_elm$Phosphor$Fill),
						onPress: $elm$core$Maybe$Just($author$project$Main$PostSend),
						text: 'send'
					}) : $mdgriffith$elm_ui$Element$none),
			time: _Utils_Tuple2(
				'__time',
				A2(
					$mdgriffith$elm_ui$Element$el,
					attrs.time,
					$mdgriffith$elm_ui$Element$text(d.time.date_relative))),
			to: _Utils_Tuple2(
				'_to',
				A2(
					$mdgriffith$elm_ui$Element$el,
					attrs.persons,
					A2(
						$mdgriffith$elm_ui$Element$map,
						$author$project$Main$AddressMsg,
						A5(
							$author$project$AddressInput$viewPersonsEditor,
							_List_fromArray(
								[$author$project$Query$To, $author$project$Query$Cc]),
							$author$project$StyleQuery$iconFromParticipant,
							'to',
							$author$project$Query$maybePerson(s.selected_query),
							d.participants))))
		};
		var content = A2(
			$mdgriffith$elm_ui$Element$Input$multiline,
			_Utils_ap(
				$author$project$Style$writingStyle,
				_Utils_ap(
					attrs.body,
					_List_fromArray(
						[
							$author$project$Grid$idAttribute(
							A2(
								$author$project$Main$htmlIdString,
								'-editor',
								$author$project$Main$SearchCol(pa.rpath))),
							$author$project$Style$onClickStopPropagation(
							$author$project$Main$Global($author$project$Main$Noop))
						]))),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelAbove,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					$mdgriffith$elm_ui$Element$none),
				onChange: function (t) {
					return $author$project$Main$DraftTextTyped(t);
				},
				placeholder: $elm$core$Maybe$Just(
					A2(
						$mdgriffith$elm_ui$Element$Input$placeholder,
						_List_Nil,
						$mdgriffith$elm_ui$Element$text('note, respond, ... '))),
				spellcheck: true,
				text: d.content
			});
		var header = A2(
			$mdgriffith$elm_ui$Element$Keyed$column,
			attrs.header,
			_List_fromArray(
				[
					_Utils_Tuple2(
					'__recipients',
					A2(
						$mdgriffith$elm_ui$Element$wrappedRow,
						_Utils_ap(attrs.headerRow, attrs.persons),
						A2(
							$elm$core$List$map,
							$elm$core$Tuple$second,
							_List_fromArray(
								[
									buttons.from,
									_Utils_Tuple2(
									'__delimsend',
									A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
											]),
										_List_Nil)),
									buttons.respond,
									buttons.to,
									buttons.time,
									buttons.send
								])))),
					_Utils_Tuple2(
					'__subject',
					A2(
						$mdgriffith$elm_ui$Element$row,
						_Utils_ap(attrs.headerRow, attrs.subject),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Input$multiline,
								$author$project$Style$writingStyle,
								{
									label: $mdgriffith$elm_ui$Element$Input$labelHidden('left fails'),
									onChange: function (v) {
										return $author$project$Main$MapDraftEditor(
											A2(
												$author$project$Notmuch$setPostable,
												$author$project$Notmuch$Unposted,
												$author$project$Access$subject.set(
													$elm$core$Maybe$Just(v))));
									},
									placeholder: $elm$core$Maybe$Just(
										A2(
											$mdgriffith$elm_ui$Element$Input$placeholder,
											_List_Nil,
											$mdgriffith$elm_ui$Element$text('re: ' + pa.psubject))),
									spellcheck: true,
									text: A2(
										$elm$core$Maybe$withDefault,
										'',
										$author$project$Notmuch$postable(d__).subject)
								}),
								buttons.save.b
							]))),
					_Utils_Tuple2(
					'__tags',
					A6($author$project$Main$timeTagRow, $author$project$Main$verbose, symbolf, pa, attrs, _List_Nil, s))
				]));
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 0, left: 0, right: 0, top: $author$project$Style$two}),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			A4($author$project$Main$viewVisibilityState, s.visibility, attrs.elementColumn, header, content));
	});
var $author$project$Notmuch$abbrevSubject = F2(
	function (psubject, subject) {
		return $elm$core$String$trim(
			A3(
				$elm$core$String$replace,
				'AW:',
				'',
				A3(
					$elm$core$String$replace,
					'Aw:',
					'',
					A3(
						$elm$core$String$replace,
						'RE:',
						'',
						A3(
							$elm$core$String$replace,
							'Re:',
							'',
							A3(
								$elm$core$String$replace,
								'aw:',
								'',
								A3(
									$elm$core$String$replace,
									're:',
									'',
									A3($elm$core$String$replace, psubject, '', subject))))))));
	});
var $elm$html$Html$br = _VirtualDom_node('br');
var $author$project$Style$paragraphStyle = {
	linebreak: A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		$mdgriffith$elm_ui$Element$html(
			A2($elm$html$Html$br, _List_Nil, _List_Nil))),
	paragraph: _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
			$author$project$Plaintext$wordWrap,
			A2($mdgriffith$elm_ui$Element$paddingXY, 0, $author$project$Style$five)
		]),
	quote: $Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
		$Orasund$elm_ui_widgets$Widget$Material$gray($author$project$Style$palette._default))
};
var $author$project$Tags$selectedPersonMatch = function (subq) {
	if ((subq.$ === 'Leaf') && (subq.a.$ === 'Person')) {
		var _v1 = subq.a;
		var t_ = _v1.b;
		return function (p) {
			return A2($author$project$Person$match, p, t_);
		};
	} else {
		return $elm$core$Basics$always(false);
	}
};
var $author$project$Query$From = {$: 'From'};
var $mdgriffith$elm_ui$Element$Keyed$el = F2(
	function (attrs, child) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					attrs)),
			$mdgriffith$elm_ui$Internal$Model$Keyed(
				_List_fromArray(
					[child])));
	});
var $author$project$Grid$keyedWrappedRow = F2(
	function (a, x) {
		return A2(
			$mdgriffith$elm_ui$Element$wrappedRow,
			a,
			A2(
				$elm$core$List$map,
				function (_v0) {
					var k = _v0.a;
					var e = _v0.b;
					return (k === '') ? A2(
						$mdgriffith$elm_ui$Element$Keyed$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$explain(
								_Debug_todo(
									'Grid',
									{
										start: {line: 788, column: 64},
										end: {line: 788, column: 74}
									}))
							]),
						_Utils_Tuple2(k, e)) : A2(
						$mdgriffith$elm_ui$Element$Keyed$el,
						_List_Nil,
						_Utils_Tuple2(k, e));
				},
				x));
	});
var $author$project$AddressInput$senderRow = F5(
	function (s, a, afterfrom, recipients, header) {
		var from = _Utils_Tuple2(
			'__from',
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$alignLeft]),
				A6(
					$author$project$AddressInput$viewPersonSelected,
					false,
					$elm$core$Maybe$Just(
						A2($author$project$StyleQuery$iconFromParticipant, false, $author$project$Query$From)),
					a,
					$elm$core$Maybe$Nothing,
					s,
					header.from)));
		var f = function (dir) {
			return function (p) {
				return _Utils_Tuple2(
					$author$project$Person$stringFromPerson(p),
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$alignRight]),
						A6(
							$author$project$AddressInput$viewPersonSelected,
							true,
							$elm$core$Maybe$Just(
								A2(
									$author$project$StyleQuery$iconFromParticipant,
									s(p),
									dir)),
							a,
							$elm$core$Maybe$Nothing,
							s,
							p)));
			};
		};
		return recipients ? A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$author$project$Grid$keyedRow,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					A2($elm$core$List$cons, from, afterfrom)),
					A2(
					$author$project$Grid$keyedWrappedRow,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$alignRight]),
					_Utils_ap(
						A2(
							$elm$core$List$map,
							f($author$project$Query$To),
							header.to),
						A2(
							$elm$core$List$map,
							f($author$project$Query$Cc),
							header.cc)))
				])) : A2(
			$author$project$Grid$keyedRow,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			A2($elm$core$List$cons, from, afterfrom));
	});
var $author$project$Grid$keyedColumn = F2(
	function (a, x) {
		return A2(
			$mdgriffith$elm_ui$Element$Keyed$column,
			a,
			A2(
				$elm$core$List$map,
				function (_v0) {
					var k = _v0.a;
					var e = _v0.b;
					return (k === '') ? _Utils_Tuple2(
						k,
						A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$explain(
									_Debug_todo(
										'Grid',
										{
											start: {line: 818, column: 56},
											end: {line: 818, column: 66}
										}))
								]),
							e)) : _Utils_Tuple2(k, e);
				},
				x));
	});
var $author$project$Main$subjectAuthorTagheader = F4(
	function (attrs, abbrevSubject, persons, tagrow) {
		return (abbrevSubject === '') ? A2(
			$author$project$Grid$keyedColumn,
			attrs.header,
			_List_fromArray(
				[
					_Utils_Tuple2('__persons', persons),
					_Utils_Tuple2('__tags', tagrow)
				])) : A2(
			$author$project$Grid$keyedColumn,
			attrs.header,
			_List_fromArray(
				[
					_Utils_Tuple2('__persons', persons),
					_Utils_Tuple2(
					'__subject',
					A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_Utils_ap(attrs.headerRow, attrs.subject),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text(abbrevSubject)
							]))),
					_Utils_Tuple2('__tags', tagrow)
				]));
	});
var $elm$html$Html$article = _VirtualDom_node('article');
var $elm$html$Html$a = _VirtualDom_node('a');
var $pablohirafuji$elm_markdown$Markdown$Inline$Emphasis = F2(
	function (a, b) {
		return {$: 'Emphasis', a: a, b: b};
	});
var $pablohirafuji$elm_markdown$Markdown$Inline$attributeToAttribute = function (_v0) {
	var name = _v0.a;
	var maybeValue = _v0.b;
	return A2(
		$elm$html$Html$Attributes$attribute,
		name,
		A2($elm$core$Maybe$withDefault, name, maybeValue));
};
var $pablohirafuji$elm_markdown$Markdown$Inline$attributesToHtmlAttributes = $elm$core$List$map($pablohirafuji$elm_markdown$Markdown$Inline$attributeToAttribute);
var $elm$html$Html$code = _VirtualDom_node('code');
var $elm$html$Html$em = _VirtualDom_node('em');
var $pablohirafuji$elm_markdown$Markdown$Inline$extractText = function (inlines) {
	return A3($elm$core$List$foldl, $pablohirafuji$elm_markdown$Markdown$Inline$extractTextHelp, '', inlines);
};
var $pablohirafuji$elm_markdown$Markdown$Inline$extractTextHelp = F2(
	function (inline, text) {
		switch (inline.$) {
			case 'Text':
				var str = inline.a;
				return _Utils_ap(text, str);
			case 'HardLineBreak':
				return text + ' ';
			case 'CodeInline':
				var str = inline.a;
				return _Utils_ap(text, str);
			case 'Link':
				var inlines = inline.c;
				return _Utils_ap(
					text,
					$pablohirafuji$elm_markdown$Markdown$Inline$extractText(inlines));
			case 'Image':
				var inlines = inline.c;
				return _Utils_ap(
					text,
					$pablohirafuji$elm_markdown$Markdown$Inline$extractText(inlines));
			case 'HtmlInline':
				var inlines = inline.c;
				return _Utils_ap(
					text,
					$pablohirafuji$elm_markdown$Markdown$Inline$extractText(inlines));
			case 'Emphasis':
				var inlines = inline.b;
				return _Utils_ap(
					text,
					$pablohirafuji$elm_markdown$Markdown$Inline$extractText(inlines));
			default:
				var inlines = inline.b;
				return _Utils_ap(
					text,
					$pablohirafuji$elm_markdown$Markdown$Inline$extractText(inlines));
		}
	});
var $elm$html$Html$img = _VirtualDom_node('img');
var $elm$html$Html$node = $elm$virtual_dom$VirtualDom$node;
var $elm$html$Html$strong = _VirtualDom_node('strong');
var $elm$html$Html$Attributes$title = $elm$html$Html$Attributes$stringProperty('title');
var $pablohirafuji$elm_markdown$Markdown$Inline$defaultHtml = F2(
	function (customTransformer, inline) {
		var transformer = A2(
			$elm$core$Maybe$withDefault,
			$pablohirafuji$elm_markdown$Markdown$Inline$defaultHtml($elm$core$Maybe$Nothing),
			customTransformer);
		switch (inline.$) {
			case 'Text':
				var str = inline.a;
				return $elm$html$Html$text(str);
			case 'HardLineBreak':
				return A2($elm$html$Html$br, _List_Nil, _List_Nil);
			case 'CodeInline':
				var codeStr = inline.a;
				return A2(
					$elm$html$Html$code,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(codeStr)
						]));
			case 'Link':
				var url = inline.a;
				var maybeTitle = inline.b;
				var inlines = inline.c;
				if (maybeTitle.$ === 'Just') {
					var title_ = maybeTitle.a;
					return A2(
						$elm$html$Html$a,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$href(url),
								$elm$html$Html$Attributes$title(title_)
							]),
						A2($elm$core$List$map, transformer, inlines));
				} else {
					return A2(
						$elm$html$Html$a,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$href(url)
							]),
						A2($elm$core$List$map, transformer, inlines));
				}
			case 'Image':
				var url = inline.a;
				var maybeTitle = inline.b;
				var inlines = inline.c;
				if (maybeTitle.$ === 'Just') {
					var title_ = maybeTitle.a;
					return A2(
						$elm$html$Html$img,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$alt(
								$pablohirafuji$elm_markdown$Markdown$Inline$extractText(inlines)),
								$elm$html$Html$Attributes$src(url),
								$elm$html$Html$Attributes$title(title_)
							]),
						_List_Nil);
				} else {
					return A2(
						$elm$html$Html$img,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$alt(
								$pablohirafuji$elm_markdown$Markdown$Inline$extractText(inlines)),
								$elm$html$Html$Attributes$src(url)
							]),
						_List_Nil);
				}
			case 'HtmlInline':
				var tag = inline.a;
				var attrs = inline.b;
				var inlines = inline.c;
				return A3(
					$elm$html$Html$node,
					tag,
					$pablohirafuji$elm_markdown$Markdown$Inline$attributesToHtmlAttributes(attrs),
					A2($elm$core$List$map, transformer, inlines));
			case 'Emphasis':
				var length = inline.a;
				var inlines = inline.b;
				switch (length) {
					case 1:
						return A2(
							$elm$html$Html$em,
							_List_Nil,
							A2($elm$core$List$map, transformer, inlines));
					case 2:
						return A2(
							$elm$html$Html$strong,
							_List_Nil,
							A2($elm$core$List$map, transformer, inlines));
					default:
						return ((length - 2) > 0) ? A2(
							$elm$html$Html$strong,
							_List_Nil,
							function (a) {
								return A2($elm$core$List$cons, a, _List_Nil);
							}(
								transformer(
									A2($pablohirafuji$elm_markdown$Markdown$Inline$Emphasis, length - 2, inlines)))) : A2(
							$elm$html$Html$em,
							_List_Nil,
							A2($elm$core$List$map, transformer, inlines));
				}
			default:
				var inlines = inline.b;
				return $elm$html$Html$text('');
		}
	});
var $elm$html$Html$figcaption = _VirtualDom_node('figcaption');
var $elm$html$Html$figure = _VirtualDom_node('figure');
var $elm$html$Html$Attributes$target = $elm$html$Html$Attributes$stringProperty('target');
var $author$project$Plaintext$customHtmlInline = function (inline) {
	switch (inline.$) {
		case 'Image':
			var url = inline.a;
			var maybeTitle = inline.b;
			var inlines = inline.c;
			return A2(
				$elm$html$Html$figure,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$elm$html$Html$img,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$alt(
								$pablohirafuji$elm_markdown$Markdown$Inline$extractText(inlines)),
								$elm$html$Html$Attributes$src(url),
								$elm$html$Html$Attributes$title(
								A2($elm$core$Maybe$withDefault, '', maybeTitle))
							]),
						_List_Nil),
						A2(
						$elm$html$Html$figcaption,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text(
								$pablohirafuji$elm_markdown$Markdown$Inline$extractText(inlines))
							]))
					]));
		case 'Link':
			var url = inline.a;
			var maybeTitle = inline.b;
			var inlines = inline.c;
			return A2($elm$core$String$startsWith, 'http://elm-lang.org', url) ? A2(
				$elm$html$Html$a,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$href(url),
						$elm$html$Html$Attributes$title(
						A2($elm$core$Maybe$withDefault, '', maybeTitle))
					]),
				A2($elm$core$List$map, $author$project$Plaintext$customHtmlInline, inlines)) : A2(
				$elm$html$Html$a,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$href(url),
						$elm$html$Html$Attributes$title(
						A2($elm$core$Maybe$withDefault, '', maybeTitle)),
						$elm$html$Html$Attributes$target('_blank'),
						$elm$html$Html$Attributes$rel('noopener noreferrer')
					]),
				A2($elm$core$List$map, $author$project$Plaintext$customHtmlInline, inlines));
		default:
			return A2(
				$pablohirafuji$elm_markdown$Markdown$Inline$defaultHtml,
				$elm$core$Maybe$Just($author$project$Plaintext$customHtmlInline),
				inline);
	}
};
var $elm$html$Html$blockquote = _VirtualDom_node('blockquote');
var $elm$html$Html$h1 = _VirtualDom_node('h1');
var $elm$html$Html$h2 = _VirtualDom_node('h2');
var $elm$html$Html$h3 = _VirtualDom_node('h3');
var $elm$html$Html$h4 = _VirtualDom_node('h4');
var $elm$html$Html$h5 = _VirtualDom_node('h5');
var $elm$html$Html$h6 = _VirtualDom_node('h6');
var $elm$html$Html$hr = _VirtualDom_node('hr');
var $elm$html$Html$li = _VirtualDom_node('li');
var $elm$html$Html$ol = _VirtualDom_node('ol');
var $elm$html$Html$pre = _VirtualDom_node('pre');
var $elm$html$Html$Attributes$start = function (n) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'start',
		$elm$core$String$fromInt(n));
};
var $pablohirafuji$elm_markdown$Markdown$Inline$toHtml = $pablohirafuji$elm_markdown$Markdown$Inline$defaultHtml($elm$core$Maybe$Nothing);
var $elm$html$Html$ul = _VirtualDom_node('ul');
var $pablohirafuji$elm_markdown$Markdown$Block$defaultHtml = F3(
	function (customHtml, customInlineHtml, block) {
		var inlineToHtml = A2($elm$core$Maybe$withDefault, $pablohirafuji$elm_markdown$Markdown$Inline$toHtml, customInlineHtml);
		var blockToHtml = A2(
			$elm$core$Maybe$withDefault,
			A2($pablohirafuji$elm_markdown$Markdown$Block$defaultHtml, $elm$core$Maybe$Nothing, customInlineHtml),
			customHtml);
		switch (block.$) {
			case 'BlankLine':
				return _List_Nil;
			case 'Heading':
				var level = block.b;
				var inlines = block.c;
				var hElement = function () {
					switch (level) {
						case 1:
							return $elm$html$Html$h1(_List_Nil);
						case 2:
							return $elm$html$Html$h2(_List_Nil);
						case 3:
							return $elm$html$Html$h3(_List_Nil);
						case 4:
							return $elm$html$Html$h4(_List_Nil);
						case 5:
							return $elm$html$Html$h5(_List_Nil);
						default:
							return $elm$html$Html$h6(_List_Nil);
					}
				}();
				return _List_fromArray(
					[
						hElement(
						A2($elm$core$List$map, inlineToHtml, inlines))
					]);
			case 'ThematicBreak':
				return _List_fromArray(
					[
						A2($elm$html$Html$hr, _List_Nil, _List_Nil)
					]);
			case 'Paragraph':
				var inlines = block.b;
				return _List_fromArray(
					[
						A2(
						$elm$html$Html$p,
						_List_Nil,
						A2($elm$core$List$map, inlineToHtml, inlines))
					]);
			case 'CodeBlock':
				if (block.a.$ === 'Fenced') {
					var _v2 = block.a;
					var model = _v2.b;
					var codeStr = block.b;
					var basicView = function (attrs) {
						return _List_fromArray(
							[
								A2(
								$elm$html$Html$pre,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$elm$html$Html$code,
										attrs,
										_List_fromArray(
											[
												$elm$html$Html$text(codeStr)
											]))
									]))
							]);
					};
					var _v3 = model.language;
					if (_v3.$ === 'Just') {
						var language = _v3.a;
						return basicView(
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('language-' + language)
								]));
					} else {
						return basicView(_List_Nil);
					}
				} else {
					var _v4 = block.a;
					var codeStr = block.b;
					return _List_fromArray(
						[
							A2(
							$elm$html$Html$pre,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$elm$html$Html$code,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text(codeStr)
										]))
								]))
						]);
				}
			case 'BlockQuote':
				var blocks = block.a;
				return function (a) {
					return A2($elm$core$List$cons, a, _List_Nil);
				}(
					A2(
						$elm$html$Html$blockquote,
						_List_Nil,
						$elm$core$List$concat(
							A2($elm$core$List$map, blockToHtml, blocks))));
			case 'List':
				var model = block.a;
				var items = block.b;
				return function (a) {
					return A2($elm$core$List$cons, a, _List_Nil);
				}(
					function () {
						var _v5 = model.type_;
						if (_v5.$ === 'Ordered') {
							var startInt = _v5.a;
							return (startInt === 1) ? $elm$html$Html$ol(_List_Nil) : $elm$html$Html$ol(
								_List_fromArray(
									[
										$elm$html$Html$Attributes$start(startInt)
									]));
						} else {
							return $elm$html$Html$ul(_List_Nil);
						}
					}()(
						A2(
							$elm$core$List$map,
							A2(
								$elm$core$Basics$composeR,
								$elm$core$List$map(blockToHtml),
								A2(
									$elm$core$Basics$composeR,
									$elm$core$List$concat,
									$elm$html$Html$li(_List_Nil))),
							items)));
			case 'PlainInlines':
				var inlines = block.a;
				return A2($elm$core$List$map, inlineToHtml, inlines);
			default:
				var customBlock = block.a;
				var blocks = block.b;
				return function (a) {
					return A2($elm$core$List$cons, a, _List_Nil);
				}(
					A2(
						$elm$html$Html$div,
						_List_Nil,
						A2(
							$elm$core$List$cons,
							$elm$html$Html$text('Unhandled custom block.'),
							$elm$core$List$concat(
								A2($elm$core$List$map, blockToHtml, blocks)))));
		}
	});
var $elm$html$Html$details = _VirtualDom_node('details');
var $author$project$Plaintext$flip = F3(
	function (f, a, b) {
		return A2(f, b, a);
	});
var $author$project$Plaintext$customHtmlBlock = function (block) {
	if (block.$ === 'BlockQuote') {
		var blocks = block.a;
		return A3(
			$author$project$Plaintext$flip,
			$elm$core$List$cons,
			_List_Nil,
			A2(
				$elm$html$Html$details,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'border-left-width', '1px'),
						A2($elm$html$Html$Attributes$style, 'padding-left', '1em'),
						A2($elm$html$Html$Attributes$style, 'border-left-style', 'solid')
					]),
				$elm$core$List$concat(
					A2($elm$core$List$map, $author$project$Plaintext$customHtmlBlock, blocks))));
	} else {
		return A3(
			$pablohirafuji$elm_markdown$Markdown$Block$defaultHtml,
			$elm$core$Maybe$Just($author$project$Plaintext$customHtmlBlock),
			$elm$core$Maybe$Just($author$project$Plaintext$customHtmlInline),
			block);
	}
};
var $pablohirafuji$elm_markdown$Markdown$Block$BlockQuote = function (a) {
	return {$: 'BlockQuote', a: a};
};
var $pablohirafuji$elm_markdown$Markdown$Block$List = F2(
	function (a, b) {
		return {$: 'List', a: a, b: b};
	});
var $pablohirafuji$elm_markdown$Markdown$Block$Paragraph = F2(
	function (a, b) {
		return {$: 'Paragraph', a: a, b: b};
	});
var $elm$core$String$right = F2(
	function (n, string) {
		return (n < 1) ? '' : A3(
			$elm$core$String$slice,
			-n,
			$elm$core$String$length(string),
			string);
	});
var $pablohirafuji$elm_markdown$Markdown$Block$formatParagraphLine = function (rawParagraph) {
	return (A2($elm$core$String$right, 2, rawParagraph) === '  ') ? ($elm$core$String$trim(rawParagraph) + '  ') : $elm$core$String$trim(rawParagraph);
};
var $pablohirafuji$elm_markdown$Markdown$Block$addToParagraph = F2(
	function (paragraph, rawLine) {
		return A2(
			$pablohirafuji$elm_markdown$Markdown$Block$Paragraph,
			paragraph + ('\n' + $pablohirafuji$elm_markdown$Markdown$Block$formatParagraphLine(rawLine)),
			_List_Nil);
	});
var $elm$regex$Regex$Match = F4(
	function (match, index, number, submatches) {
		return {index: index, match: match, number: number, submatches: submatches};
	});
var $elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
var $elm$regex$Regex$fromString = function (string) {
	return A2(
		$elm$regex$Regex$fromStringWith,
		{caseInsensitive: false, multiline: false},
		string);
};
var $elm$regex$Regex$never = _Regex_never;
var $pablohirafuji$elm_markdown$Markdown$Block$blockQuoteLineRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^ {0,3}(?:>[ ]?)(.*)$'));
var $pablohirafuji$elm_markdown$Markdown$Block$blankLineRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^\\s*$'));
var $elm$regex$Regex$contains = _Regex_contains;
var $pablohirafuji$elm_markdown$Markdown$Block$calcListIndentLength = function (_v0) {
	var listBlock = _v0.a;
	var indentSpace = _v0.b;
	var rawLine = _v0.c;
	var indentSpaceLength = $elm$core$String$length(indentSpace);
	var isIndentedCode = indentSpaceLength >= 4;
	var updtRawLine = isIndentedCode ? _Utils_ap(indentSpace, rawLine) : rawLine;
	var indentLength = (isIndentedCode || A2($elm$regex$Regex$contains, $pablohirafuji$elm_markdown$Markdown$Block$blankLineRegex, rawLine)) ? (listBlock.indentLength - indentSpaceLength) : listBlock.indentLength;
	return _Utils_Tuple2(
		_Utils_update(
			listBlock,
			{indentLength: indentLength}),
		updtRawLine);
};
var $pablohirafuji$elm_markdown$Markdown$Block$atxHeadingLineRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^ {0,3}(#{1,6})' + ('(?:[ \\t]+[ \\t#]+$|[ \\t]+|$)' + '(.*?)(?:\\s+[ \\t#]*)?$')));
var $pablohirafuji$elm_markdown$Markdown$Block$Heading = F3(
	function (a, b, c) {
		return {$: 'Heading', a: a, b: b, c: c};
	});
var $pablohirafuji$elm_markdown$Markdown$Block$extractATXHeadingRM = function (match) {
	var _v0 = match.submatches;
	if ((_v0.b && (_v0.a.$ === 'Just')) && _v0.b.b) {
		var lvl = _v0.a.a;
		var _v1 = _v0.b;
		var maybeHeading = _v1.a;
		return $elm$core$Maybe$Just(
			A3(
				$pablohirafuji$elm_markdown$Markdown$Block$Heading,
				A2($elm$core$Maybe$withDefault, '', maybeHeading),
				$elm$core$String$length(lvl),
				_List_Nil));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$regex$Regex$findAtMost = _Regex_findAtMost;
var $pablohirafuji$elm_markdown$Markdown$Block$checkATXHeadingLine = function (_v0) {
	var rawLine = _v0.a;
	var ast = _v0.b;
	return A2(
		$elm$core$Result$fromMaybe,
		_Utils_Tuple2(rawLine, ast),
		A2(
			$elm$core$Maybe$map,
			function (a) {
				return A2($elm$core$List$cons, a, ast);
			},
			A2(
				$elm$core$Maybe$andThen,
				$pablohirafuji$elm_markdown$Markdown$Block$extractATXHeadingRM,
				$elm$core$List$head(
					A3($elm$regex$Regex$findAtMost, 1, $pablohirafuji$elm_markdown$Markdown$Block$atxHeadingLineRegex, rawLine)))));
};
var $pablohirafuji$elm_markdown$Markdown$Block$BlankLine = function (a) {
	return {$: 'BlankLine', a: a};
};
var $pablohirafuji$elm_markdown$Markdown$Block$CodeBlock = F2(
	function (a, b) {
		return {$: 'CodeBlock', a: a, b: b};
	});
var $pablohirafuji$elm_markdown$Markdown$Block$Fenced = F2(
	function (a, b) {
		return {$: 'Fenced', a: a, b: b};
	});
var $pablohirafuji$elm_markdown$Markdown$Block$addBlankLineToListBlock = F2(
	function (match, asts) {
		if (!asts.b) {
			return _List_fromArray(
				[
					_List_fromArray(
					[
						$pablohirafuji$elm_markdown$Markdown$Block$BlankLine(match.match)
					])
				]);
		} else {
			var ast = asts.a;
			var astsTail = asts.b;
			return A2(
				$elm$core$List$cons,
				A2($pablohirafuji$elm_markdown$Markdown$Block$parseBlankLine, ast, match),
				astsTail);
		}
	});
var $pablohirafuji$elm_markdown$Markdown$Block$parseBlankLine = F2(
	function (ast, match) {
		_v0$2:
		while (true) {
			if (ast.b) {
				switch (ast.a.$) {
					case 'CodeBlock':
						if ((ast.a.a.$ === 'Fenced') && ast.a.a.a) {
							var _v1 = ast.a;
							var _v2 = _v1.a;
							var fence = _v2.b;
							var code = _v1.b;
							var astTail = ast.b;
							return function (a) {
								return A2($elm$core$List$cons, a, astTail);
							}(
								A2(
									$pablohirafuji$elm_markdown$Markdown$Block$CodeBlock,
									A2($pablohirafuji$elm_markdown$Markdown$Block$Fenced, true, fence),
									code + '\n'));
						} else {
							break _v0$2;
						}
					case 'List':
						var _v3 = ast.a;
						var model = _v3.a;
						var items = _v3.b;
						var astTail = ast.b;
						return A2(
							$elm$core$List$cons,
							A2(
								$pablohirafuji$elm_markdown$Markdown$Block$List,
								model,
								A2($pablohirafuji$elm_markdown$Markdown$Block$addBlankLineToListBlock, match, items)),
							astTail);
					default:
						break _v0$2;
				}
			} else {
				break _v0$2;
			}
		}
		return A2(
			$elm$core$List$cons,
			$pablohirafuji$elm_markdown$Markdown$Block$BlankLine(match.match),
			ast);
	});
var $pablohirafuji$elm_markdown$Markdown$Block$checkBlankLine = function (_v0) {
	var rawLine = _v0.a;
	var ast = _v0.b;
	return A2(
		$elm$core$Result$fromMaybe,
		_Utils_Tuple2(rawLine, ast),
		A2(
			$elm$core$Maybe$map,
			$pablohirafuji$elm_markdown$Markdown$Block$parseBlankLine(ast),
			$elm$core$List$head(
				A3($elm$regex$Regex$findAtMost, 1, $pablohirafuji$elm_markdown$Markdown$Block$blankLineRegex, rawLine))));
};
var $pablohirafuji$elm_markdown$Markdown$Block$indentedCodeLineRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^(?: {4,4}| {0,3}\\t)(.*)$'));
var $pablohirafuji$elm_markdown$Markdown$Block$Indented = {$: 'Indented'};
var $pablohirafuji$elm_markdown$Markdown$Block$blocksAfterBlankLines = F2(
	function (ast, blankLines) {
		blocksAfterBlankLines:
		while (true) {
			if (ast.b && (ast.a.$ === 'BlankLine')) {
				var blankStr = ast.a.a;
				var astTail = ast.b;
				var $temp$ast = astTail,
					$temp$blankLines = A2($elm$core$List$cons, blankStr, blankLines);
				ast = $temp$ast;
				blankLines = $temp$blankLines;
				continue blocksAfterBlankLines;
			} else {
				return _Utils_Tuple2(ast, blankLines);
			}
		}
	});
var $pablohirafuji$elm_markdown$Markdown$Block$maybeContinueParagraph = F2(
	function (rawLine, ast) {
		_v0$3:
		while (true) {
			if (ast.b) {
				switch (ast.a.$) {
					case 'Paragraph':
						var _v1 = ast.a;
						var paragraph = _v1.a;
						var astTail = ast.b;
						return $elm$core$Maybe$Just(
							A2(
								$elm$core$List$cons,
								A2($pablohirafuji$elm_markdown$Markdown$Block$addToParagraph, paragraph, rawLine),
								astTail));
					case 'BlockQuote':
						var bqAST = ast.a.a;
						var astTail = ast.b;
						return A2(
							$elm$core$Maybe$map,
							function (updtBqAST) {
								return A2(
									$elm$core$List$cons,
									$pablohirafuji$elm_markdown$Markdown$Block$BlockQuote(updtBqAST),
									astTail);
							},
							A2($pablohirafuji$elm_markdown$Markdown$Block$maybeContinueParagraph, rawLine, bqAST));
					case 'List':
						var _v2 = ast.a;
						var model = _v2.a;
						var items = _v2.b;
						var astTail = ast.b;
						if (items.b) {
							var itemAST = items.a;
							var itemASTTail = items.b;
							return A2(
								$elm$core$Maybe$map,
								A2(
									$elm$core$Basics$composeR,
									function (a) {
										return A2($elm$core$List$cons, a, itemASTTail);
									},
									A2(
										$elm$core$Basics$composeR,
										$pablohirafuji$elm_markdown$Markdown$Block$List(model),
										function (a) {
											return A2($elm$core$List$cons, a, astTail);
										})),
								A2($pablohirafuji$elm_markdown$Markdown$Block$maybeContinueParagraph, rawLine, itemAST));
						} else {
							return $elm$core$Maybe$Nothing;
						}
					default:
						break _v0$3;
				}
			} else {
				break _v0$3;
			}
		}
		return $elm$core$Maybe$Nothing;
	});
var $elm$regex$Regex$replace = _Regex_replaceAtMost(_Regex_infinity);
var $elm$regex$Regex$replaceAtMost = _Regex_replaceAtMost;
var $pablohirafuji$elm_markdown$Markdown$Helpers$tabRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('\\t'));
var $pablohirafuji$elm_markdown$Markdown$Helpers$indentLine = function (indentLength_) {
	return A2(
		$elm$core$Basics$composeR,
		A2(
			$elm$regex$Regex$replace,
			$pablohirafuji$elm_markdown$Markdown$Helpers$tabRegex,
			function (_v0) {
				return '    ';
			}),
		A3(
			$elm$regex$Regex$replaceAtMost,
			1,
			A2(
				$elm$core$Maybe$withDefault,
				$elm$regex$Regex$never,
				$elm$regex$Regex$fromString(
					'^ {0,' + ($elm$core$String$fromInt(indentLength_) + '}'))),
			function (_v1) {
				return '';
			}));
};
var $pablohirafuji$elm_markdown$Markdown$Block$resumeIndentedCodeBlock = F2(
	function (codeLine, _v0) {
		var remainBlocks = _v0.a;
		var blankLines = _v0.b;
		if ((remainBlocks.b && (remainBlocks.a.$ === 'CodeBlock')) && (remainBlocks.a.a.$ === 'Indented')) {
			var _v2 = remainBlocks.a;
			var _v3 = _v2.a;
			var codeStr = _v2.b;
			var remainBlocksTail = remainBlocks.b;
			return $elm$core$Maybe$Just(
				function (a) {
					return A2($elm$core$List$cons, a, remainBlocksTail);
				}(
					A2(
						$pablohirafuji$elm_markdown$Markdown$Block$CodeBlock,
						$pablohirafuji$elm_markdown$Markdown$Block$Indented,
						function (a) {
							return a + (codeLine + '\n');
						}(
							_Utils_ap(
								codeStr,
								$elm$core$String$concat(
									A2(
										$elm$core$List$map,
										function (bl) {
											return A2($pablohirafuji$elm_markdown$Markdown$Helpers$indentLine, 4, bl) + '\n';
										},
										blankLines)))))));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $pablohirafuji$elm_markdown$Markdown$Block$parseIndentedCodeLine = F2(
	function (ast, codeLine) {
		_v0$2:
		while (true) {
			if (ast.b) {
				switch (ast.a.$) {
					case 'CodeBlock':
						if (ast.a.a.$ === 'Indented') {
							var _v1 = ast.a;
							var _v2 = _v1.a;
							var codeStr = _v1.b;
							var astTail = ast.b;
							return function (a) {
								return A2($elm$core$List$cons, a, astTail);
							}(
								A2($pablohirafuji$elm_markdown$Markdown$Block$CodeBlock, $pablohirafuji$elm_markdown$Markdown$Block$Indented, codeStr + (codeLine + '\n')));
						} else {
							break _v0$2;
						}
					case 'BlankLine':
						var blankStr = ast.a.a;
						var astTail = ast.b;
						return A2(
							$elm$core$Maybe$withDefault,
							function (a) {
								return A2($elm$core$List$cons, a, ast);
							}(
								A2($pablohirafuji$elm_markdown$Markdown$Block$CodeBlock, $pablohirafuji$elm_markdown$Markdown$Block$Indented, codeLine + '\n')),
							A2(
								$pablohirafuji$elm_markdown$Markdown$Block$resumeIndentedCodeBlock,
								codeLine,
								A2(
									$pablohirafuji$elm_markdown$Markdown$Block$blocksAfterBlankLines,
									astTail,
									_List_fromArray(
										[blankStr]))));
					default:
						break _v0$2;
				}
			} else {
				break _v0$2;
			}
		}
		return A2(
			$elm$core$Maybe$withDefault,
			function (a) {
				return A2($elm$core$List$cons, a, ast);
			}(
				A2($pablohirafuji$elm_markdown$Markdown$Block$CodeBlock, $pablohirafuji$elm_markdown$Markdown$Block$Indented, codeLine + '\n')),
			A2($pablohirafuji$elm_markdown$Markdown$Block$maybeContinueParagraph, codeLine, ast));
	});
var $pablohirafuji$elm_markdown$Markdown$Block$checkIndentedCode = function (_v0) {
	var rawLine = _v0.a;
	var ast = _v0.b;
	return A2(
		$elm$core$Result$fromMaybe,
		_Utils_Tuple2(rawLine, ast),
		A2(
			$elm$core$Maybe$map,
			$pablohirafuji$elm_markdown$Markdown$Block$parseIndentedCodeLine(ast),
			A2(
				$elm$core$Maybe$withDefault,
				$elm$core$Maybe$Nothing,
				A2(
					$elm$core$Maybe$withDefault,
					$elm$core$Maybe$Nothing,
					A2(
						$elm$core$Maybe$map,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.submatches;
							},
							$elm$core$List$head),
						$elm$core$List$head(
							A3($elm$regex$Regex$findAtMost, 1, $pablohirafuji$elm_markdown$Markdown$Block$indentedCodeLineRegex, rawLine)))))));
};
var $pablohirafuji$elm_markdown$Markdown$Entity$decimalRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('&#([0-9]{1,8});'));
var $elm$core$Basics$modBy = _Basics_modBy;
var $pablohirafuji$elm_markdown$Markdown$Entity$isBadEndUnicode = function (_int) {
	var remain_ = A2($elm$core$Basics$modBy, 16, _int);
	var remain = A2($elm$core$Basics$modBy, 131070, _int);
	return (_int >= 131070) && ((((0 <= remain) && (remain <= 15)) || ((65536 <= remain) && (remain <= 65551))) && ((remain_ === 14) || (remain_ === 15)));
};
var $pablohirafuji$elm_markdown$Markdown$Entity$isValidUnicode = function (_int) {
	return (_int === 9) || ((_int === 10) || ((_int === 13) || ((_int === 133) || (((32 <= _int) && (_int <= 126)) || (((160 <= _int) && (_int <= 55295)) || (((57344 <= _int) && (_int <= 64975)) || (((65008 <= _int) && (_int <= 65533)) || ((65536 <= _int) && (_int <= 1114109)))))))));
};
var $pablohirafuji$elm_markdown$Markdown$Entity$validUnicode = function (_int) {
	return ($pablohirafuji$elm_markdown$Markdown$Entity$isValidUnicode(_int) && (!$pablohirafuji$elm_markdown$Markdown$Entity$isBadEndUnicode(_int))) ? $elm$core$String$fromChar(
		$elm$core$Char$fromCode(_int)) : $elm$core$String$fromChar(
		$elm$core$Char$fromCode(65533));
};
var $pablohirafuji$elm_markdown$Markdown$Entity$replaceDecimal = function (match) {
	return A2(
		$elm$core$Maybe$withDefault,
		match.match,
		A2(
			$elm$core$Maybe$map,
			$pablohirafuji$elm_markdown$Markdown$Entity$validUnicode,
			A2(
				$elm$core$Maybe$andThen,
				$elm$core$String$toInt,
				A2(
					$elm$core$Maybe$withDefault,
					$elm$core$Maybe$Nothing,
					$elm$core$List$head(match.submatches)))));
};
var $pablohirafuji$elm_markdown$Markdown$Entity$replaceDecimals = A2($elm$regex$Regex$replace, $pablohirafuji$elm_markdown$Markdown$Entity$decimalRegex, $pablohirafuji$elm_markdown$Markdown$Entity$replaceDecimal);
var $pablohirafuji$elm_markdown$Markdown$Entity$entitiesRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('&([0-9a-zA-Z]+);'));
var $pablohirafuji$elm_markdown$Markdown$Entity$entities = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('quot', 34),
			_Utils_Tuple2('amp', 38),
			_Utils_Tuple2('apos', 39),
			_Utils_Tuple2('lt', 60),
			_Utils_Tuple2('gt', 62),
			_Utils_Tuple2('nbsp', 160),
			_Utils_Tuple2('iexcl', 161),
			_Utils_Tuple2('cent', 162),
			_Utils_Tuple2('pound', 163),
			_Utils_Tuple2('curren', 164),
			_Utils_Tuple2('yen', 165),
			_Utils_Tuple2('brvbar', 166),
			_Utils_Tuple2('sect', 167),
			_Utils_Tuple2('uml', 168),
			_Utils_Tuple2('copy', 169),
			_Utils_Tuple2('ordf', 170),
			_Utils_Tuple2('laquo', 171),
			_Utils_Tuple2('not', 172),
			_Utils_Tuple2('shy', 173),
			_Utils_Tuple2('reg', 174),
			_Utils_Tuple2('macr', 175),
			_Utils_Tuple2('deg', 176),
			_Utils_Tuple2('plusmn', 177),
			_Utils_Tuple2('sup2', 178),
			_Utils_Tuple2('sup3', 179),
			_Utils_Tuple2('acute', 180),
			_Utils_Tuple2('micro', 181),
			_Utils_Tuple2('para', 182),
			_Utils_Tuple2('middot', 183),
			_Utils_Tuple2('cedil', 184),
			_Utils_Tuple2('sup1', 185),
			_Utils_Tuple2('ordm', 186),
			_Utils_Tuple2('raquo', 187),
			_Utils_Tuple2('frac14', 188),
			_Utils_Tuple2('frac12', 189),
			_Utils_Tuple2('frac34', 190),
			_Utils_Tuple2('iquest', 191),
			_Utils_Tuple2('Agrave', 192),
			_Utils_Tuple2('Aacute', 193),
			_Utils_Tuple2('Acirc', 194),
			_Utils_Tuple2('Atilde', 195),
			_Utils_Tuple2('Auml', 196),
			_Utils_Tuple2('Aring', 197),
			_Utils_Tuple2('AElig', 198),
			_Utils_Tuple2('Ccedil', 199),
			_Utils_Tuple2('Egrave', 200),
			_Utils_Tuple2('Eacute', 201),
			_Utils_Tuple2('Ecirc', 202),
			_Utils_Tuple2('Euml', 203),
			_Utils_Tuple2('Igrave', 204),
			_Utils_Tuple2('Iacute', 205),
			_Utils_Tuple2('Icirc', 206),
			_Utils_Tuple2('Iuml', 207),
			_Utils_Tuple2('ETH', 208),
			_Utils_Tuple2('Ntilde', 209),
			_Utils_Tuple2('Ograve', 210),
			_Utils_Tuple2('Oacute', 211),
			_Utils_Tuple2('Ocirc', 212),
			_Utils_Tuple2('Otilde', 213),
			_Utils_Tuple2('Ouml', 214),
			_Utils_Tuple2('times', 215),
			_Utils_Tuple2('Oslash', 216),
			_Utils_Tuple2('Ugrave', 217),
			_Utils_Tuple2('Uacute', 218),
			_Utils_Tuple2('Ucirc', 219),
			_Utils_Tuple2('Uuml', 220),
			_Utils_Tuple2('Yacute', 221),
			_Utils_Tuple2('THORN', 222),
			_Utils_Tuple2('szlig', 223),
			_Utils_Tuple2('agrave', 224),
			_Utils_Tuple2('aacute', 225),
			_Utils_Tuple2('acirc', 226),
			_Utils_Tuple2('atilde', 227),
			_Utils_Tuple2('auml', 228),
			_Utils_Tuple2('aring', 229),
			_Utils_Tuple2('aelig', 230),
			_Utils_Tuple2('ccedil', 231),
			_Utils_Tuple2('egrave', 232),
			_Utils_Tuple2('eacute', 233),
			_Utils_Tuple2('ecirc', 234),
			_Utils_Tuple2('euml', 235),
			_Utils_Tuple2('igrave', 236),
			_Utils_Tuple2('iacute', 237),
			_Utils_Tuple2('icirc', 238),
			_Utils_Tuple2('iuml', 239),
			_Utils_Tuple2('eth', 240),
			_Utils_Tuple2('ntilde', 241),
			_Utils_Tuple2('ograve', 242),
			_Utils_Tuple2('oacute', 243),
			_Utils_Tuple2('ocirc', 244),
			_Utils_Tuple2('otilde', 245),
			_Utils_Tuple2('ouml', 246),
			_Utils_Tuple2('divide', 247),
			_Utils_Tuple2('oslash', 248),
			_Utils_Tuple2('ugrave', 249),
			_Utils_Tuple2('uacute', 250),
			_Utils_Tuple2('ucirc', 251),
			_Utils_Tuple2('uuml', 252),
			_Utils_Tuple2('yacute', 253),
			_Utils_Tuple2('thorn', 254),
			_Utils_Tuple2('yuml', 255),
			_Utils_Tuple2('OElig', 338),
			_Utils_Tuple2('oelig', 339),
			_Utils_Tuple2('Scaron', 352),
			_Utils_Tuple2('scaron', 353),
			_Utils_Tuple2('Yuml', 376),
			_Utils_Tuple2('fnof', 402),
			_Utils_Tuple2('circ', 710),
			_Utils_Tuple2('tilde', 732),
			_Utils_Tuple2('Alpha', 913),
			_Utils_Tuple2('Beta', 914),
			_Utils_Tuple2('Gamma', 915),
			_Utils_Tuple2('Delta', 916),
			_Utils_Tuple2('Epsilon', 917),
			_Utils_Tuple2('Zeta', 918),
			_Utils_Tuple2('Eta', 919),
			_Utils_Tuple2('Theta', 920),
			_Utils_Tuple2('Iota', 921),
			_Utils_Tuple2('Kappa', 922),
			_Utils_Tuple2('Lambda', 923),
			_Utils_Tuple2('Mu', 924),
			_Utils_Tuple2('Nu', 925),
			_Utils_Tuple2('Xi', 926),
			_Utils_Tuple2('Omicron', 927),
			_Utils_Tuple2('Pi', 928),
			_Utils_Tuple2('Rho', 929),
			_Utils_Tuple2('Sigma', 931),
			_Utils_Tuple2('Tau', 932),
			_Utils_Tuple2('Upsilon', 933),
			_Utils_Tuple2('Phi', 934),
			_Utils_Tuple2('Chi', 935),
			_Utils_Tuple2('Psi', 936),
			_Utils_Tuple2('Omega', 937),
			_Utils_Tuple2('alpha', 945),
			_Utils_Tuple2('beta', 946),
			_Utils_Tuple2('gamma', 947),
			_Utils_Tuple2('delta', 948),
			_Utils_Tuple2('epsilon', 949),
			_Utils_Tuple2('zeta', 950),
			_Utils_Tuple2('eta', 951),
			_Utils_Tuple2('theta', 952),
			_Utils_Tuple2('iota', 953),
			_Utils_Tuple2('kappa', 954),
			_Utils_Tuple2('lambda', 955),
			_Utils_Tuple2('mu', 956),
			_Utils_Tuple2('nu', 957),
			_Utils_Tuple2('xi', 958),
			_Utils_Tuple2('omicron', 959),
			_Utils_Tuple2('pi', 960),
			_Utils_Tuple2('rho', 961),
			_Utils_Tuple2('sigmaf', 962),
			_Utils_Tuple2('sigma', 963),
			_Utils_Tuple2('tau', 964),
			_Utils_Tuple2('upsilon', 965),
			_Utils_Tuple2('phi', 966),
			_Utils_Tuple2('chi', 967),
			_Utils_Tuple2('psi', 968),
			_Utils_Tuple2('omega', 969),
			_Utils_Tuple2('thetasym', 977),
			_Utils_Tuple2('upsih', 978),
			_Utils_Tuple2('piv', 982),
			_Utils_Tuple2('ensp', 8194),
			_Utils_Tuple2('emsp', 8195),
			_Utils_Tuple2('thinsp', 8201),
			_Utils_Tuple2('zwnj', 8204),
			_Utils_Tuple2('zwj', 8205),
			_Utils_Tuple2('lrm', 8206),
			_Utils_Tuple2('rlm', 8207),
			_Utils_Tuple2('ndash', 8211),
			_Utils_Tuple2('mdash', 8212),
			_Utils_Tuple2('lsquo', 8216),
			_Utils_Tuple2('rsquo', 8217),
			_Utils_Tuple2('sbquo', 8218),
			_Utils_Tuple2('ldquo', 8220),
			_Utils_Tuple2('rdquo', 8221),
			_Utils_Tuple2('bdquo', 8222),
			_Utils_Tuple2('dagger', 8224),
			_Utils_Tuple2('Dagger', 8225),
			_Utils_Tuple2('bull', 8226),
			_Utils_Tuple2('hellip', 8230),
			_Utils_Tuple2('permil', 8240),
			_Utils_Tuple2('prime', 8242),
			_Utils_Tuple2('Prime', 8243),
			_Utils_Tuple2('lsaquo', 8249),
			_Utils_Tuple2('rsaquo', 8250),
			_Utils_Tuple2('oline', 8254),
			_Utils_Tuple2('frasl', 8260),
			_Utils_Tuple2('euro', 8364),
			_Utils_Tuple2('image', 8465),
			_Utils_Tuple2('weierp', 8472),
			_Utils_Tuple2('real', 8476),
			_Utils_Tuple2('trade', 8482),
			_Utils_Tuple2('alefsym', 8501),
			_Utils_Tuple2('larr', 8592),
			_Utils_Tuple2('uarr', 8593),
			_Utils_Tuple2('rarr', 8594),
			_Utils_Tuple2('darr', 8595),
			_Utils_Tuple2('harr', 8596),
			_Utils_Tuple2('crarr', 8629),
			_Utils_Tuple2('lArr', 8656),
			_Utils_Tuple2('uArr', 8657),
			_Utils_Tuple2('rArr', 8658),
			_Utils_Tuple2('dArr', 8659),
			_Utils_Tuple2('hArr', 8660),
			_Utils_Tuple2('forall', 8704),
			_Utils_Tuple2('part', 8706),
			_Utils_Tuple2('exist', 8707),
			_Utils_Tuple2('empty', 8709),
			_Utils_Tuple2('nabla', 8711),
			_Utils_Tuple2('isin', 8712),
			_Utils_Tuple2('notin', 8713),
			_Utils_Tuple2('ni', 8715),
			_Utils_Tuple2('prod', 8719),
			_Utils_Tuple2('sum', 8721),
			_Utils_Tuple2('minus', 8722),
			_Utils_Tuple2('lowast', 8727),
			_Utils_Tuple2('radic', 8730),
			_Utils_Tuple2('prop', 8733),
			_Utils_Tuple2('infin', 8734),
			_Utils_Tuple2('ang', 8736),
			_Utils_Tuple2('and', 8743),
			_Utils_Tuple2('or', 8744),
			_Utils_Tuple2('cap', 8745),
			_Utils_Tuple2('cup', 8746),
			_Utils_Tuple2('int', 8747),
			_Utils_Tuple2('there4', 8756),
			_Utils_Tuple2('sim', 8764),
			_Utils_Tuple2('cong', 8773),
			_Utils_Tuple2('asymp', 8776),
			_Utils_Tuple2('ne', 8800),
			_Utils_Tuple2('equiv', 8801),
			_Utils_Tuple2('le', 8804),
			_Utils_Tuple2('ge', 8805),
			_Utils_Tuple2('sub', 8834),
			_Utils_Tuple2('sup', 8835),
			_Utils_Tuple2('nsub', 8836),
			_Utils_Tuple2('sube', 8838),
			_Utils_Tuple2('supe', 8839),
			_Utils_Tuple2('oplus', 8853),
			_Utils_Tuple2('otimes', 8855),
			_Utils_Tuple2('perp', 8869),
			_Utils_Tuple2('sdot', 8901),
			_Utils_Tuple2('lceil', 8968),
			_Utils_Tuple2('rceil', 8969),
			_Utils_Tuple2('lfloor', 8970),
			_Utils_Tuple2('rfloor', 8971),
			_Utils_Tuple2('lang', 9001),
			_Utils_Tuple2('rang', 9002),
			_Utils_Tuple2('loz', 9674),
			_Utils_Tuple2('spades', 9824),
			_Utils_Tuple2('clubs', 9827),
			_Utils_Tuple2('hearts', 9829),
			_Utils_Tuple2('diams', 9830)
		]));
var $pablohirafuji$elm_markdown$Markdown$Entity$replaceEntity = function (match) {
	return A2(
		$elm$core$Maybe$withDefault,
		match.match,
		A2(
			$elm$core$Maybe$map,
			A2($elm$core$Basics$composeR, $elm$core$Char$fromCode, $elm$core$String$fromChar),
			A2(
				$elm$core$Maybe$andThen,
				function (a) {
					return A2($elm$core$Dict$get, a, $pablohirafuji$elm_markdown$Markdown$Entity$entities);
				},
				A2(
					$elm$core$Maybe$withDefault,
					$elm$core$Maybe$Nothing,
					$elm$core$List$head(match.submatches)))));
};
var $pablohirafuji$elm_markdown$Markdown$Entity$replaceEntities = A2($elm$regex$Regex$replace, $pablohirafuji$elm_markdown$Markdown$Entity$entitiesRegex, $pablohirafuji$elm_markdown$Markdown$Entity$replaceEntity);
var $pablohirafuji$elm_markdown$Markdown$Helpers$escapableRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\+)([!\"#$%&\\\'()*+,./:;<=>?@[\\\\\\]^_`{|}~-])'));
var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var $elm$core$String$repeatHelp = F3(
	function (n, chunk, result) {
		return (n <= 0) ? result : A3(
			$elm$core$String$repeatHelp,
			n >> 1,
			_Utils_ap(chunk, chunk),
			(!(n & 1)) ? result : _Utils_ap(result, chunk));
	});
var $elm$core$String$repeat = F2(
	function (n, chunk) {
		return A3($elm$core$String$repeatHelp, n, chunk, '');
	});
var $pablohirafuji$elm_markdown$Markdown$Helpers$replaceEscapable = A2(
	$elm$regex$Regex$replace,
	$pablohirafuji$elm_markdown$Markdown$Helpers$escapableRegex,
	function (regexMatch) {
		var _v0 = regexMatch.submatches;
		if (((_v0.b && (_v0.a.$ === 'Just')) && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
			var backslashes = _v0.a.a;
			var _v1 = _v0.b;
			var escapedStr = _v1.a.a;
			return _Utils_ap(
				A2(
					$elm$core$String$repeat,
					($elm$core$String$length(backslashes) / 2) | 0,
					'\\'),
				escapedStr);
		} else {
			return regexMatch.match;
		}
	});
var $pablohirafuji$elm_markdown$Markdown$Entity$hexadecimalRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('&#[Xx]([0-9a-fA-F]{1,8});'));
var $pablohirafuji$elm_markdown$Markdown$Entity$hexToInt = A2(
	$elm$core$Basics$composeR,
	$elm$core$String$toLower,
	A2(
		$elm$core$Basics$composeR,
		$elm$core$String$toList,
		A2(
			$elm$core$List$foldl,
			F2(
				function (hexDigit, _int) {
					return ((_int * 16) + A2(
						$elm$core$Basics$modBy,
						39,
						$elm$core$Char$toCode(hexDigit))) - 9;
				}),
			0)));
var $pablohirafuji$elm_markdown$Markdown$Entity$replaceHexadecimal = function (match) {
	return A2(
		$elm$core$Maybe$withDefault,
		match.match,
		A2(
			$elm$core$Maybe$map,
			A2($elm$core$Basics$composeR, $pablohirafuji$elm_markdown$Markdown$Entity$hexToInt, $pablohirafuji$elm_markdown$Markdown$Entity$validUnicode),
			A2(
				$elm$core$Maybe$withDefault,
				$elm$core$Maybe$Nothing,
				$elm$core$List$head(match.submatches))));
};
var $pablohirafuji$elm_markdown$Markdown$Entity$replaceHexadecimals = A2($elm$regex$Regex$replace, $pablohirafuji$elm_markdown$Markdown$Entity$hexadecimalRegex, $pablohirafuji$elm_markdown$Markdown$Entity$replaceHexadecimal);
var $pablohirafuji$elm_markdown$Markdown$Helpers$formatStr = function (str) {
	return $pablohirafuji$elm_markdown$Markdown$Entity$replaceHexadecimals(
		$pablohirafuji$elm_markdown$Markdown$Entity$replaceDecimals(
			$pablohirafuji$elm_markdown$Markdown$Entity$replaceEntities(
				$pablohirafuji$elm_markdown$Markdown$Helpers$replaceEscapable(str))));
};
var $pablohirafuji$elm_markdown$Markdown$Block$extractOpenCodeFenceRM = function (match) {
	var _v0 = match.submatches;
	if (((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) && _v0.b.b.b) {
		var maybeIndent = _v0.a;
		var _v1 = _v0.b;
		var fence = _v1.a.a;
		var _v2 = _v1.b;
		var maybeLanguage = _v2.a;
		return $elm$core$Maybe$Just(
			A2(
				$pablohirafuji$elm_markdown$Markdown$Block$Fenced,
				true,
				{
					fenceChar: A2($elm$core$String$left, 1, fence),
					fenceLength: $elm$core$String$length(fence),
					indentLength: A2(
						$elm$core$Maybe$withDefault,
						0,
						A2($elm$core$Maybe$map, $elm$core$String$length, maybeIndent)),
					language: A2(
						$elm$core$Maybe$map,
						$pablohirafuji$elm_markdown$Markdown$Helpers$formatStr,
						A2(
							$elm$core$Maybe$andThen,
							function (lang) {
								return (lang === '') ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(lang);
							},
							$elm$core$List$head(
								A2(
									$elm$core$Maybe$withDefault,
									_List_Nil,
									A2($elm$core$Maybe$map, $elm$core$String$words, maybeLanguage)))))
				}));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $pablohirafuji$elm_markdown$Markdown$Block$openCodeFenceLineRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^( {0,3})(`{3,}(?!.*`)|~{3,}(?!.*~))(.*)$'));
var $pablohirafuji$elm_markdown$Markdown$Block$checkOpenCodeFenceLine = function (_v0) {
	var rawLine = _v0.a;
	var ast = _v0.b;
	return A2(
		$elm$core$Result$fromMaybe,
		_Utils_Tuple2(rawLine, ast),
		A2(
			$elm$core$Maybe$map,
			function (a) {
				return A2($elm$core$List$cons, a, ast);
			},
			A2(
				$elm$core$Maybe$map,
				function (f) {
					return A2($pablohirafuji$elm_markdown$Markdown$Block$CodeBlock, f, '');
				},
				A2(
					$elm$core$Maybe$andThen,
					$pablohirafuji$elm_markdown$Markdown$Block$extractOpenCodeFenceRM,
					$elm$core$List$head(
						A3($elm$regex$Regex$findAtMost, 1, $pablohirafuji$elm_markdown$Markdown$Block$openCodeFenceLineRegex, rawLine))))));
};
var $pablohirafuji$elm_markdown$Markdown$Block$Ordered = function (a) {
	return {$: 'Ordered', a: a};
};
var $pablohirafuji$elm_markdown$Markdown$Block$Unordered = {$: 'Unordered'};
var $pablohirafuji$elm_markdown$Markdown$Block$extractOrderedListRM = function (match) {
	var _v0 = match.submatches;
	if (((((((_v0.b && (_v0.a.$ === 'Just')) && _v0.b.b) && (_v0.b.a.$ === 'Just')) && _v0.b.b.b) && (_v0.b.b.a.$ === 'Just')) && _v0.b.b.b.b) && _v0.b.b.b.b.b) {
		var indentString = _v0.a.a;
		var _v1 = _v0.b;
		var start = _v1.a.a;
		var _v2 = _v1.b;
		var delimiter = _v2.a.a;
		var _v3 = _v2.b;
		var maybeIndentSpace = _v3.a;
		var _v4 = _v3.b;
		var maybeRawLine = _v4.a;
		return $elm$core$Maybe$Just(
			_Utils_Tuple3(
				{
					delimiter: delimiter,
					indentLength: $elm$core$String$length(indentString) + 1,
					isLoose: false,
					type_: A2(
						$elm$core$Maybe$withDefault,
						$pablohirafuji$elm_markdown$Markdown$Block$Unordered,
						A2(
							$elm$core$Maybe$map,
							$pablohirafuji$elm_markdown$Markdown$Block$Ordered,
							$elm$core$String$toInt(start)))
				},
				A2($elm$core$Maybe$withDefault, '', maybeIndentSpace),
				A2($elm$core$Maybe$withDefault, '', maybeRawLine)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $pablohirafuji$elm_markdown$Markdown$Block$orderedListLineRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^( *(\\d{1,9})([.)])( {0,4}))(?:[ \\t](.*))?$'));
var $pablohirafuji$elm_markdown$Markdown$Block$checkOrderedListLine = function (rawLine) {
	return A2(
		$elm$core$Result$fromMaybe,
		rawLine,
		A2(
			$elm$core$Maybe$andThen,
			$pablohirafuji$elm_markdown$Markdown$Block$extractOrderedListRM,
			$elm$core$List$head(
				A3($elm$regex$Regex$findAtMost, 1, $pablohirafuji$elm_markdown$Markdown$Block$orderedListLineRegex, rawLine))));
};
var $pablohirafuji$elm_markdown$Markdown$Block$extractSetextHeadingRM = function (match) {
	var _v0 = match.submatches;
	if (_v0.b && (_v0.a.$ === 'Just')) {
		var delimiter = _v0.a.a;
		return A2($elm$core$String$startsWith, '=', delimiter) ? $elm$core$Maybe$Just(
			_Utils_Tuple2(1, delimiter)) : $elm$core$Maybe$Just(
			_Utils_Tuple2(2, delimiter));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $pablohirafuji$elm_markdown$Markdown$Block$parseSetextHeadingLine = F3(
	function (rawLine, ast, _v0) {
		var lvl = _v0.a;
		var delimiter = _v0.b;
		if (ast.b && (ast.a.$ === 'Paragraph')) {
			var _v2 = ast.a;
			var rawText = _v2.a;
			var astTail = ast.b;
			return $elm$core$Maybe$Just(
				A2(
					$elm$core$List$cons,
					A3($pablohirafuji$elm_markdown$Markdown$Block$Heading, rawText, lvl, _List_Nil),
					astTail));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $pablohirafuji$elm_markdown$Markdown$Block$setextHeadingLineRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^ {0,3}(=+|-+)[ \\t]*$'));
var $pablohirafuji$elm_markdown$Markdown$Block$checkSetextHeadingLine = function (_v0) {
	var rawLine = _v0.a;
	var ast = _v0.b;
	return A2(
		$elm$core$Result$fromMaybe,
		_Utils_Tuple2(rawLine, ast),
		A2(
			$elm$core$Maybe$andThen,
			A2($pablohirafuji$elm_markdown$Markdown$Block$parseSetextHeadingLine, rawLine, ast),
			A2(
				$elm$core$Maybe$andThen,
				$pablohirafuji$elm_markdown$Markdown$Block$extractSetextHeadingRM,
				$elm$core$List$head(
					A3($elm$regex$Regex$findAtMost, 1, $pablohirafuji$elm_markdown$Markdown$Block$setextHeadingLineRegex, rawLine)))));
};
var $pablohirafuji$elm_markdown$Markdown$Block$ThematicBreak = {$: 'ThematicBreak'};
var $pablohirafuji$elm_markdown$Markdown$Block$thematicBreakLineRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^ {0,3}(?:' + ('(?:\\*[ \\t]*){3,}' + ('|(?:_[ \\t]*){3,}' + '|(?:-[ \\t]*){3,})[ \\t]*$'))));
var $pablohirafuji$elm_markdown$Markdown$Block$checkThematicBreakLine = function (_v0) {
	var rawLine = _v0.a;
	var ast = _v0.b;
	return A2(
		$elm$core$Result$fromMaybe,
		_Utils_Tuple2(rawLine, ast),
		A2(
			$elm$core$Maybe$map,
			function (_v1) {
				return A2($elm$core$List$cons, $pablohirafuji$elm_markdown$Markdown$Block$ThematicBreak, ast);
			},
			$elm$core$List$head(
				A3($elm$regex$Regex$findAtMost, 1, $pablohirafuji$elm_markdown$Markdown$Block$thematicBreakLineRegex, rawLine))));
};
var $pablohirafuji$elm_markdown$Markdown$Block$extractUnorderedListRM = function (match) {
	var _v0 = match.submatches;
	if ((((((_v0.b && (_v0.a.$ === 'Just')) && _v0.b.b) && (_v0.b.a.$ === 'Just')) && _v0.b.b.b) && _v0.b.b.b.b) && (!_v0.b.b.b.b.b)) {
		var indentString = _v0.a.a;
		var _v1 = _v0.b;
		var delimiter = _v1.a.a;
		var _v2 = _v1.b;
		var maybeIndentSpace = _v2.a;
		var _v3 = _v2.b;
		var maybeRawLine = _v3.a;
		return $elm$core$Maybe$Just(
			_Utils_Tuple3(
				{
					delimiter: delimiter,
					indentLength: $elm$core$String$length(indentString) + 1,
					isLoose: false,
					type_: $pablohirafuji$elm_markdown$Markdown$Block$Unordered
				},
				A2($elm$core$Maybe$withDefault, '', maybeIndentSpace),
				A2($elm$core$Maybe$withDefault, '', maybeRawLine)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $pablohirafuji$elm_markdown$Markdown$Block$unorderedListLineRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^( *([\\*\\-\\+])( {0,4}))(?:[ \\t](.*))?$'));
var $pablohirafuji$elm_markdown$Markdown$Block$checkUnorderedListLine = function (rawLine) {
	return A2(
		$elm$core$Result$fromMaybe,
		rawLine,
		A2(
			$elm$core$Maybe$andThen,
			$pablohirafuji$elm_markdown$Markdown$Block$extractUnorderedListRM,
			$elm$core$List$head(
				A3($elm$regex$Regex$findAtMost, 1, $pablohirafuji$elm_markdown$Markdown$Block$unorderedListLineRegex, rawLine))));
};
var $pablohirafuji$elm_markdown$Markdown$Block$closeCodeFenceLineRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^ {0,3}(`{3,}|~{3,})\\s*$'));
var $pablohirafuji$elm_markdown$Markdown$Block$isCloseFenceLineHelp = F2(
	function (fence, match) {
		var _v0 = match.submatches;
		if (_v0.b && (_v0.a.$ === 'Just')) {
			var fenceStr = _v0.a.a;
			return (_Utils_cmp(
				$elm$core$String$length(fenceStr),
				fence.fenceLength) > -1) && _Utils_eq(
				A2($elm$core$String$left, 1, fenceStr),
				fence.fenceChar);
		} else {
			return false;
		}
	});
var $pablohirafuji$elm_markdown$Markdown$Block$isCloseFenceLine = function (fence) {
	return A2(
		$elm$core$Basics$composeR,
		A2($elm$regex$Regex$findAtMost, 1, $pablohirafuji$elm_markdown$Markdown$Block$closeCodeFenceLineRegex),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$List$head,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$Maybe$map(
					$pablohirafuji$elm_markdown$Markdown$Block$isCloseFenceLineHelp(fence)),
				$elm$core$Maybe$withDefault(false))));
};
var $pablohirafuji$elm_markdown$Markdown$Block$continueOrCloseCodeFence = F3(
	function (fence, previousCode, rawLine) {
		return A2($pablohirafuji$elm_markdown$Markdown$Block$isCloseFenceLine, fence, rawLine) ? A2(
			$pablohirafuji$elm_markdown$Markdown$Block$CodeBlock,
			A2($pablohirafuji$elm_markdown$Markdown$Block$Fenced, false, fence),
			previousCode) : A2(
			$pablohirafuji$elm_markdown$Markdown$Block$CodeBlock,
			A2($pablohirafuji$elm_markdown$Markdown$Block$Fenced, true, fence),
			previousCode + (A2($pablohirafuji$elm_markdown$Markdown$Helpers$indentLine, fence.indentLength, rawLine) + '\n'));
	});
var $pablohirafuji$elm_markdown$Markdown$Helpers$ifError = F2(
	function (_function, result) {
		if (result.$ === 'Ok') {
			return result;
		} else {
			var err = result.a;
			return _function(err);
		}
	});
var $pablohirafuji$elm_markdown$Markdown$Helpers$initSpacesRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^ +'));
var $pablohirafuji$elm_markdown$Markdown$Helpers$indentLength = A2(
	$elm$core$Basics$composeR,
	A2(
		$elm$regex$Regex$replace,
		$pablohirafuji$elm_markdown$Markdown$Helpers$tabRegex,
		function (_v0) {
			return '    ';
		}),
	A2(
		$elm$core$Basics$composeR,
		A2($elm$regex$Regex$findAtMost, 1, $pablohirafuji$elm_markdown$Markdown$Helpers$initSpacesRegex),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$List$head,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$Maybe$map(
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.match;
						},
						$elm$core$String$length)),
				$elm$core$Maybe$withDefault(0)))));
var $pablohirafuji$elm_markdown$Markdown$Block$isBlankLineLast = function (items) {
	isBlankLineLast:
	while (true) {
		if (!items.b) {
			return false;
		} else {
			var item = items.a;
			var itemsTail = items.b;
			_v1$3:
			while (true) {
				if (item.b) {
					switch (item.a.$) {
						case 'BlankLine':
							if (!item.b.b) {
								return false;
							} else {
								return true;
							}
						case 'List':
							var _v2 = item.a;
							var items_ = _v2.b;
							var $temp$items = items_;
							items = $temp$items;
							continue isBlankLineLast;
						default:
							break _v1$3;
					}
				} else {
					break _v1$3;
				}
			}
			return false;
		}
	}
};
var $pablohirafuji$elm_markdown$Markdown$Block$parseTextLine = F2(
	function (rawLine, ast) {
		return A2(
			$elm$core$Maybe$withDefault,
			A2(
				$elm$core$List$cons,
				A2(
					$pablohirafuji$elm_markdown$Markdown$Block$Paragraph,
					$pablohirafuji$elm_markdown$Markdown$Block$formatParagraphLine(rawLine),
					_List_Nil),
				ast),
			A2($pablohirafuji$elm_markdown$Markdown$Block$maybeContinueParagraph, rawLine, ast));
	});
var $pablohirafuji$elm_markdown$Markdown$Block$checkBlockQuote = function (_v16) {
	var rawLine = _v16.a;
	var ast = _v16.b;
	return A2(
		$elm$core$Result$fromMaybe,
		_Utils_Tuple2(rawLine, ast),
		A2(
			$elm$core$Maybe$map,
			$pablohirafuji$elm_markdown$Markdown$Block$parseBlockQuoteLine(ast),
			A2(
				$elm$core$Maybe$map,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.submatches;
					},
					A2(
						$elm$core$Basics$composeR,
						$elm$core$List$head,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Maybe$withDefault($elm$core$Maybe$Nothing),
							$elm$core$Maybe$withDefault('')))),
				$elm$core$List$head(
					A3($elm$regex$Regex$findAtMost, 1, $pablohirafuji$elm_markdown$Markdown$Block$blockQuoteLineRegex, rawLine)))));
};
var $pablohirafuji$elm_markdown$Markdown$Block$checkListLine = function (_v15) {
	var rawLine = _v15.a;
	var ast = _v15.b;
	return A2(
		$elm$core$Result$mapError,
		function (e) {
			return _Utils_Tuple2(e, ast);
		},
		A2(
			$elm$core$Result$map,
			A2($pablohirafuji$elm_markdown$Markdown$Block$parseListLine, rawLine, ast),
			A2(
				$elm$core$Result$map,
				$pablohirafuji$elm_markdown$Markdown$Block$calcListIndentLength,
				A2(
					$pablohirafuji$elm_markdown$Markdown$Helpers$ifError,
					$pablohirafuji$elm_markdown$Markdown$Block$checkUnorderedListLine,
					$pablohirafuji$elm_markdown$Markdown$Block$checkOrderedListLine(rawLine)))));
};
var $pablohirafuji$elm_markdown$Markdown$Block$incorporateLine = F2(
	function (rawLine, ast) {
		_v11$2:
		while (true) {
			if (ast.b) {
				switch (ast.a.$) {
					case 'CodeBlock':
						if ((ast.a.a.$ === 'Fenced') && ast.a.a.a) {
							var _v12 = ast.a;
							var _v13 = _v12.a;
							var fence = _v13.b;
							var code = _v12.b;
							var astTail = ast.b;
							return function (a) {
								return A2($elm$core$List$cons, a, astTail);
							}(
								A3($pablohirafuji$elm_markdown$Markdown$Block$continueOrCloseCodeFence, fence, code, rawLine));
						} else {
							break _v11$2;
						}
					case 'List':
						var _v14 = ast.a;
						var model = _v14.a;
						var items = _v14.b;
						var astTail = ast.b;
						return (_Utils_cmp(
							$pablohirafuji$elm_markdown$Markdown$Helpers$indentLength(rawLine),
							model.indentLength) > -1) ? A5($pablohirafuji$elm_markdown$Markdown$Block$parseIndentedListLine, rawLine, model, items, ast, astTail) : A2(
							$elm$core$Result$withDefault,
							A2($pablohirafuji$elm_markdown$Markdown$Block$parseTextLine, rawLine, ast),
							A2(
								$pablohirafuji$elm_markdown$Markdown$Helpers$ifError,
								$pablohirafuji$elm_markdown$Markdown$Block$checkBlockQuote,
								A2(
									$pablohirafuji$elm_markdown$Markdown$Helpers$ifError,
									$pablohirafuji$elm_markdown$Markdown$Block$checkATXHeadingLine,
									A2(
										$pablohirafuji$elm_markdown$Markdown$Helpers$ifError,
										$pablohirafuji$elm_markdown$Markdown$Block$checkSetextHeadingLine,
										A2(
											$pablohirafuji$elm_markdown$Markdown$Helpers$ifError,
											$pablohirafuji$elm_markdown$Markdown$Block$checkOpenCodeFenceLine,
											A2(
												$pablohirafuji$elm_markdown$Markdown$Helpers$ifError,
												$pablohirafuji$elm_markdown$Markdown$Block$checkIndentedCode,
												A2(
													$pablohirafuji$elm_markdown$Markdown$Helpers$ifError,
													$pablohirafuji$elm_markdown$Markdown$Block$checkBlankLine,
													A2(
														$pablohirafuji$elm_markdown$Markdown$Helpers$ifError,
														$pablohirafuji$elm_markdown$Markdown$Block$checkListLine,
														$pablohirafuji$elm_markdown$Markdown$Block$checkThematicBreakLine(
															_Utils_Tuple2(rawLine, ast))))))))));
					default:
						break _v11$2;
				}
			} else {
				break _v11$2;
			}
		}
		return A2($pablohirafuji$elm_markdown$Markdown$Block$parseRawLine, rawLine, ast);
	});
var $pablohirafuji$elm_markdown$Markdown$Block$parseBlockQuoteLine = F2(
	function (ast, rawLine) {
		if (ast.b && (ast.a.$ === 'BlockQuote')) {
			var bqAST = ast.a.a;
			var astTail = ast.b;
			return function (a) {
				return A2($elm$core$List$cons, a, astTail);
			}(
				$pablohirafuji$elm_markdown$Markdown$Block$BlockQuote(
					A2($pablohirafuji$elm_markdown$Markdown$Block$incorporateLine, rawLine, bqAST)));
		} else {
			return function (a) {
				return A2($elm$core$List$cons, a, ast);
			}(
				$pablohirafuji$elm_markdown$Markdown$Block$BlockQuote(
					A2($pablohirafuji$elm_markdown$Markdown$Block$incorporateLine, rawLine, _List_Nil)));
		}
	});
var $pablohirafuji$elm_markdown$Markdown$Block$parseIndentedListLine = F5(
	function (rawLine, model, items, ast, astTail) {
		if (!items.b) {
			return function (a) {
				return A2($elm$core$List$cons, a, astTail);
			}(
				A2(
					$pablohirafuji$elm_markdown$Markdown$Block$List,
					model,
					function (a) {
						return A2($elm$core$List$cons, a, _List_Nil);
					}(
						function (a) {
							return A2($pablohirafuji$elm_markdown$Markdown$Block$incorporateLine, a, _List_Nil);
						}(
							A2($pablohirafuji$elm_markdown$Markdown$Helpers$indentLine, model.indentLength, rawLine)))));
		} else {
			var item = items.a;
			var itemsTail = items.b;
			var indentedRawLine = A2($pablohirafuji$elm_markdown$Markdown$Helpers$indentLine, model.indentLength, rawLine);
			var updateList = function (model_) {
				return function (a) {
					return A2($elm$core$List$cons, a, astTail);
				}(
					A2(
						$pablohirafuji$elm_markdown$Markdown$Block$List,
						model_,
						function (a) {
							return A2($elm$core$List$cons, a, itemsTail);
						}(
							A2($pablohirafuji$elm_markdown$Markdown$Block$incorporateLine, indentedRawLine, item))));
			};
			_v7$3:
			while (true) {
				if (item.b) {
					switch (item.a.$) {
						case 'BlankLine':
							if (!item.b.b) {
								return updateList(model);
							} else {
								var itemTail = item.b;
								return A2(
									$elm$core$List$all,
									function (block) {
										if (block.$ === 'BlankLine') {
											return true;
										} else {
											return false;
										}
									},
									itemTail) ? A2($pablohirafuji$elm_markdown$Markdown$Block$parseRawLine, rawLine, ast) : updateList(
									_Utils_update(
										model,
										{isLoose: true}));
							}
						case 'List':
							var _v9 = item.a;
							var model_ = _v9.a;
							var items_ = _v9.b;
							var itemTail = item.b;
							return (_Utils_cmp(
								$pablohirafuji$elm_markdown$Markdown$Helpers$indentLength(indentedRawLine),
								model_.indentLength) > -1) ? updateList(model) : ($pablohirafuji$elm_markdown$Markdown$Block$isBlankLineLast(items_) ? updateList(
								_Utils_update(
									model,
									{isLoose: true})) : updateList(model));
						default:
							break _v7$3;
					}
				} else {
					break _v7$3;
				}
			}
			return updateList(model);
		}
	});
var $pablohirafuji$elm_markdown$Markdown$Block$parseListLine = F3(
	function (rawLine, ast, _v0) {
		var listBlock = _v0.a;
		var listRawLine = _v0.b;
		var parsedRawLine = A2($pablohirafuji$elm_markdown$Markdown$Block$incorporateLine, listRawLine, _List_Nil);
		var newList = A2(
			$elm$core$List$cons,
			A2(
				$pablohirafuji$elm_markdown$Markdown$Block$List,
				listBlock,
				_List_fromArray(
					[parsedRawLine])),
			ast);
		_v1$2:
		while (true) {
			if (ast.b) {
				switch (ast.a.$) {
					case 'List':
						var _v2 = ast.a;
						var model = _v2.a;
						var items = _v2.b;
						var astTail = ast.b;
						return _Utils_eq(listBlock.delimiter, model.delimiter) ? function (a) {
							return A2($elm$core$List$cons, a, astTail);
						}(
							A2(
								$pablohirafuji$elm_markdown$Markdown$Block$List,
								_Utils_update(
									model,
									{
										indentLength: listBlock.indentLength,
										isLoose: model.isLoose || $pablohirafuji$elm_markdown$Markdown$Block$isBlankLineLast(items)
									}),
								A2($elm$core$List$cons, parsedRawLine, items))) : newList;
					case 'Paragraph':
						var _v3 = ast.a;
						var rawText = _v3.a;
						var inlines = _v3.b;
						var astTail = ast.b;
						if ((parsedRawLine.b && (parsedRawLine.a.$ === 'BlankLine')) && (!parsedRawLine.b.b)) {
							return A2(
								$elm$core$List$cons,
								A2($pablohirafuji$elm_markdown$Markdown$Block$addToParagraph, rawText, rawLine),
								astTail);
						} else {
							var _v5 = listBlock.type_;
							if (_v5.$ === 'Ordered') {
								if (_v5.a === 1) {
									return newList;
								} else {
									var _int = _v5.a;
									return A2(
										$elm$core$List$cons,
										A2($pablohirafuji$elm_markdown$Markdown$Block$addToParagraph, rawText, rawLine),
										astTail);
								}
							} else {
								return newList;
							}
						}
					default:
						break _v1$2;
				}
			} else {
				break _v1$2;
			}
		}
		return newList;
	});
var $pablohirafuji$elm_markdown$Markdown$Block$parseRawLine = F2(
	function (rawLine, ast) {
		return A2(
			$elm$core$Result$withDefault,
			A2($pablohirafuji$elm_markdown$Markdown$Block$parseTextLine, rawLine, ast),
			A2(
				$pablohirafuji$elm_markdown$Markdown$Helpers$ifError,
				$pablohirafuji$elm_markdown$Markdown$Block$checkListLine,
				A2(
					$pablohirafuji$elm_markdown$Markdown$Helpers$ifError,
					$pablohirafuji$elm_markdown$Markdown$Block$checkThematicBreakLine,
					A2(
						$pablohirafuji$elm_markdown$Markdown$Helpers$ifError,
						$pablohirafuji$elm_markdown$Markdown$Block$checkBlockQuote,
						A2(
							$pablohirafuji$elm_markdown$Markdown$Helpers$ifError,
							$pablohirafuji$elm_markdown$Markdown$Block$checkATXHeadingLine,
							A2(
								$pablohirafuji$elm_markdown$Markdown$Helpers$ifError,
								$pablohirafuji$elm_markdown$Markdown$Block$checkSetextHeadingLine,
								A2(
									$pablohirafuji$elm_markdown$Markdown$Helpers$ifError,
									$pablohirafuji$elm_markdown$Markdown$Block$checkOpenCodeFenceLine,
									A2(
										$pablohirafuji$elm_markdown$Markdown$Helpers$ifError,
										$pablohirafuji$elm_markdown$Markdown$Block$checkIndentedCode,
										$pablohirafuji$elm_markdown$Markdown$Block$checkBlankLine(
											_Utils_Tuple2(rawLine, ast))))))))));
	});
var $pablohirafuji$elm_markdown$Markdown$Block$incorporateLines = F2(
	function (rawLines, ast) {
		if (!rawLines.b) {
			return ast;
		} else {
			var rawLine = rawLines.a;
			var rawLinesTail = rawLines.b;
			return A2(
				$pablohirafuji$elm_markdown$Markdown$Block$incorporateLines,
				rawLinesTail,
				A2($pablohirafuji$elm_markdown$Markdown$Block$incorporateLine, rawLine, ast));
		}
	});
var $elm$core$String$lines = _String_lines;
var $pablohirafuji$elm_markdown$Markdown$Block$Custom = F2(
	function (a, b) {
		return {$: 'Custom', a: a, b: b};
	});
var $pablohirafuji$elm_markdown$Markdown$Block$PlainInlines = function (a) {
	return {$: 'PlainInlines', a: a};
};
var $pablohirafuji$elm_markdown$Markdown$Config$Sanitize = function (a) {
	return {$: 'Sanitize', a: a};
};
var $pablohirafuji$elm_markdown$Markdown$Config$defaultAllowedHtmlAttributes = _List_fromArray(
	['name', 'class']);
var $pablohirafuji$elm_markdown$Markdown$Config$defaultAllowedHtmlElements = _List_fromArray(
	['address', 'article', 'aside', 'b', 'blockquote', 'br', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'dd', 'details', 'div', 'dl', 'dt', 'figcaption', 'figure', 'footer', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'i', 'legend', 'li', 'menu', 'menuitem', 'nav', 'ol', 'optgroup', 'option', 'p', 'pre', 'section', 'strike', 'summary', 'small', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'ul']);
var $pablohirafuji$elm_markdown$Markdown$Config$defaultSanitizeOptions = {allowedHtmlAttributes: $pablohirafuji$elm_markdown$Markdown$Config$defaultAllowedHtmlAttributes, allowedHtmlElements: $pablohirafuji$elm_markdown$Markdown$Config$defaultAllowedHtmlElements};
var $pablohirafuji$elm_markdown$Markdown$Config$defaultOptions = {
	rawHtml: $pablohirafuji$elm_markdown$Markdown$Config$Sanitize($pablohirafuji$elm_markdown$Markdown$Config$defaultSanitizeOptions),
	softAsHardLineBreak: false
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$initParser = F3(
	function (options, refs, rawText) {
		return {matches: _List_Nil, options: options, rawText: rawText, refs: refs, tokens: _List_Nil};
	});
var $pablohirafuji$elm_markdown$Markdown$Inline$CodeInline = function (a) {
	return {$: 'CodeInline', a: a};
};
var $pablohirafuji$elm_markdown$Markdown$Inline$HardLineBreak = {$: 'HardLineBreak'};
var $pablohirafuji$elm_markdown$Markdown$Inline$HtmlInline = F3(
	function (a, b, c) {
		return {$: 'HtmlInline', a: a, b: b, c: c};
	});
var $pablohirafuji$elm_markdown$Markdown$Inline$Image = F3(
	function (a, b, c) {
		return {$: 'Image', a: a, b: b, c: c};
	});
var $pablohirafuji$elm_markdown$Markdown$Inline$Link = F3(
	function (a, b, c) {
		return {$: 'Link', a: a, b: b, c: c};
	});
var $pablohirafuji$elm_markdown$Markdown$Inline$Text = function (a) {
	return {$: 'Text', a: a};
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$matchToInline = function (_v0) {
	var match = _v0.a;
	var _v1 = match.type_;
	switch (_v1.$) {
		case 'NormalType':
			return $pablohirafuji$elm_markdown$Markdown$Inline$Text(match.text);
		case 'HardLineBreakType':
			return $pablohirafuji$elm_markdown$Markdown$Inline$HardLineBreak;
		case 'CodeType':
			return $pablohirafuji$elm_markdown$Markdown$Inline$CodeInline(match.text);
		case 'AutolinkType':
			var _v2 = _v1.a;
			var text = _v2.a;
			var url = _v2.b;
			return A3(
				$pablohirafuji$elm_markdown$Markdown$Inline$Link,
				url,
				$elm$core$Maybe$Nothing,
				_List_fromArray(
					[
						$pablohirafuji$elm_markdown$Markdown$Inline$Text(text)
					]));
		case 'LinkType':
			var _v3 = _v1.a;
			var url = _v3.a;
			var maybeTitle = _v3.b;
			return A3(
				$pablohirafuji$elm_markdown$Markdown$Inline$Link,
				url,
				maybeTitle,
				$pablohirafuji$elm_markdown$Markdown$InlineParser$matchesToInlines(match.matches));
		case 'ImageType':
			var _v4 = _v1.a;
			var url = _v4.a;
			var maybeTitle = _v4.b;
			return A3(
				$pablohirafuji$elm_markdown$Markdown$Inline$Image,
				url,
				maybeTitle,
				$pablohirafuji$elm_markdown$Markdown$InlineParser$matchesToInlines(match.matches));
		case 'HtmlType':
			var model = _v1.a;
			return A3(
				$pablohirafuji$elm_markdown$Markdown$Inline$HtmlInline,
				model.tag,
				model.attributes,
				$pablohirafuji$elm_markdown$Markdown$InlineParser$matchesToInlines(match.matches));
		default:
			var length = _v1.a;
			return A2(
				$pablohirafuji$elm_markdown$Markdown$Inline$Emphasis,
				length,
				$pablohirafuji$elm_markdown$Markdown$InlineParser$matchesToInlines(match.matches));
	}
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$matchesToInlines = function (matches) {
	return A2($elm$core$List$map, $pablohirafuji$elm_markdown$Markdown$InlineParser$matchToInline, matches);
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$Match = function (a) {
	return {$: 'Match', a: a};
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$prepareChildMatch = F2(
	function (parentMatch, childMatch) {
		return $pablohirafuji$elm_markdown$Markdown$InlineParser$Match(
			_Utils_update(
				childMatch,
				{end: childMatch.end - parentMatch.textStart, start: childMatch.start - parentMatch.textStart, textEnd: childMatch.textEnd - parentMatch.textStart, textStart: childMatch.textStart - parentMatch.textStart}));
	});
var $pablohirafuji$elm_markdown$Markdown$InlineParser$addChild = F2(
	function (parentMatch, childMatch) {
		return $pablohirafuji$elm_markdown$Markdown$InlineParser$Match(
			_Utils_update(
				parentMatch,
				{
					matches: A2(
						$elm$core$List$cons,
						A2($pablohirafuji$elm_markdown$Markdown$InlineParser$prepareChildMatch, parentMatch, childMatch),
						parentMatch.matches)
				}));
	});
var $pablohirafuji$elm_markdown$Markdown$InlineParser$organizeMatch = F2(
	function (_v0, matches) {
		var match = _v0.a;
		if (!matches.b) {
			return _List_fromArray(
				[
					$pablohirafuji$elm_markdown$Markdown$InlineParser$Match(match)
				]);
		} else {
			var prevMatch = matches.a.a;
			var matchesTail = matches.b;
			return (_Utils_cmp(prevMatch.end, match.start) < 1) ? A2(
				$elm$core$List$cons,
				$pablohirafuji$elm_markdown$Markdown$InlineParser$Match(match),
				matches) : (((_Utils_cmp(prevMatch.start, match.start) < 0) && (_Utils_cmp(prevMatch.end, match.end) > 0)) ? A2(
				$elm$core$List$cons,
				A2($pablohirafuji$elm_markdown$Markdown$InlineParser$addChild, prevMatch, match),
				matchesTail) : matches);
		}
	});
function $pablohirafuji$elm_markdown$Markdown$InlineParser$cyclic$organizeMatches() {
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$List$sortBy(
			function (_v0) {
				var match = _v0.a;
				return match.start;
			}),
		A2(
			$elm$core$Basics$composeR,
			A2($elm$core$List$foldl, $pablohirafuji$elm_markdown$Markdown$InlineParser$organizeMatch, _List_Nil),
			$elm$core$List$map(
				function (_v1) {
					var match = _v1.a;
					return $pablohirafuji$elm_markdown$Markdown$InlineParser$Match(
						_Utils_update(
							match,
							{
								matches: $pablohirafuji$elm_markdown$Markdown$InlineParser$cyclic$organizeMatches()(match.matches)
							}));
				})));
}
try {
	var $pablohirafuji$elm_markdown$Markdown$InlineParser$organizeMatches = $pablohirafuji$elm_markdown$Markdown$InlineParser$cyclic$organizeMatches();
	$pablohirafuji$elm_markdown$Markdown$InlineParser$cyclic$organizeMatches = function () {
		return $pablohirafuji$elm_markdown$Markdown$InlineParser$organizeMatches;
	};
} catch ($) {
	throw 'Some top-level definitions from `Markdown.InlineParser` are causing infinite recursion:\n\n  ┌─────┐\n  │    organizeMatches\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $pablohirafuji$elm_markdown$Markdown$InlineParser$organizeParserMatches = function (model) {
	return _Utils_update(
		model,
		{
			matches: $pablohirafuji$elm_markdown$Markdown$InlineParser$organizeMatches(model.matches)
		});
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$NormalType = {$: 'NormalType'};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$normalMatch = function (text) {
	return $pablohirafuji$elm_markdown$Markdown$InlineParser$Match(
		{
			end: 0,
			matches: _List_Nil,
			start: 0,
			text: $pablohirafuji$elm_markdown$Markdown$Helpers$formatStr(text),
			textEnd: 0,
			textStart: 0,
			type_: $pablohirafuji$elm_markdown$Markdown$InlineParser$NormalType
		});
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$parseTextMatch = F3(
	function (rawText, _v2, parsedMatches) {
		var matchModel = _v2.a;
		var updtMatch = $pablohirafuji$elm_markdown$Markdown$InlineParser$Match(
			_Utils_update(
				matchModel,
				{
					matches: A3($pablohirafuji$elm_markdown$Markdown$InlineParser$parseTextMatches, matchModel.text, _List_Nil, matchModel.matches)
				}));
		if (!parsedMatches.b) {
			var finalStr = A2($elm$core$String$dropLeft, matchModel.end, rawText);
			return $elm$core$String$isEmpty(finalStr) ? _List_fromArray(
				[updtMatch]) : _List_fromArray(
				[
					updtMatch,
					$pablohirafuji$elm_markdown$Markdown$InlineParser$normalMatch(finalStr)
				]);
		} else {
			var matchHead = parsedMatches.a.a;
			var matchesTail = parsedMatches.b;
			return _Utils_eq(matchHead.type_, $pablohirafuji$elm_markdown$Markdown$InlineParser$NormalType) ? A2($elm$core$List$cons, updtMatch, parsedMatches) : (_Utils_eq(matchModel.end, matchHead.start) ? A2($elm$core$List$cons, updtMatch, parsedMatches) : ((_Utils_cmp(matchModel.end, matchHead.start) < 0) ? A2(
				$elm$core$List$cons,
				updtMatch,
				A2(
					$elm$core$List$cons,
					$pablohirafuji$elm_markdown$Markdown$InlineParser$normalMatch(
						A3($elm$core$String$slice, matchModel.end, matchHead.start, rawText)),
					parsedMatches)) : parsedMatches));
		}
	});
var $pablohirafuji$elm_markdown$Markdown$InlineParser$parseTextMatches = F3(
	function (rawText, parsedMatches, matches) {
		parseTextMatches:
		while (true) {
			if (!matches.b) {
				if (!parsedMatches.b) {
					return $elm$core$String$isEmpty(rawText) ? _List_Nil : _List_fromArray(
						[
							$pablohirafuji$elm_markdown$Markdown$InlineParser$normalMatch(rawText)
						]);
				} else {
					var matchModel = parsedMatches.a.a;
					return (matchModel.start > 0) ? A2(
						$elm$core$List$cons,
						$pablohirafuji$elm_markdown$Markdown$InlineParser$normalMatch(
							A2($elm$core$String$left, matchModel.start, rawText)),
						parsedMatches) : parsedMatches;
				}
			} else {
				var match = matches.a;
				var matchesTail = matches.b;
				var $temp$rawText = rawText,
					$temp$parsedMatches = A3($pablohirafuji$elm_markdown$Markdown$InlineParser$parseTextMatch, rawText, match, parsedMatches),
					$temp$matches = matchesTail;
				rawText = $temp$rawText;
				parsedMatches = $temp$parsedMatches;
				matches = $temp$matches;
				continue parseTextMatches;
			}
		}
	});
var $pablohirafuji$elm_markdown$Markdown$InlineParser$parseText = function (model) {
	return _Utils_update(
		model,
		{
			matches: A3($pablohirafuji$elm_markdown$Markdown$InlineParser$parseTextMatches, model.rawText, _List_Nil, model.matches)
		});
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$angleBracketLTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\<)'));
var $elm$regex$Regex$find = _Regex_findAtMost(_Regex_infinity);
var $pablohirafuji$elm_markdown$Markdown$InlineParser$CharToken = function (a) {
	return {$: 'CharToken', a: a};
};
var $pablohirafuji$elm_markdown$Markdown$Helpers$isEven = function (_int) {
	return !A2($elm$core$Basics$modBy, 2, _int);
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketLToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var delimiter = _v1.a.a;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		return $pablohirafuji$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $elm$core$Maybe$Just(
			{
				index: regMatch.index + backslashesLength,
				length: 1,
				meaning: $pablohirafuji$elm_markdown$Markdown$InlineParser$CharToken(
					_Utils_chr('<'))
			}) : $elm$core$Maybe$Nothing;
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$findAngleBracketLTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$pablohirafuji$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketLToken,
		A2($elm$regex$Regex$find, $pablohirafuji$elm_markdown$Markdown$InlineParser$angleBracketLTokenRegex, str));
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$angleBracketRTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\>)'));
var $pablohirafuji$elm_markdown$Markdown$InlineParser$RightAngleBracket = function (a) {
	return {$: 'RightAngleBracket', a: a};
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketRToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		return $elm$core$Maybe$Just(
			{
				index: regMatch.index + backslashesLength,
				length: 1,
				meaning: $pablohirafuji$elm_markdown$Markdown$InlineParser$RightAngleBracket(
					!$pablohirafuji$elm_markdown$Markdown$Helpers$isEven(backslashesLength))
			});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$findAngleBracketRTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$pablohirafuji$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketRToken,
		A2($elm$regex$Regex$find, $pablohirafuji$elm_markdown$Markdown$InlineParser$angleBracketRTokenRegex, str));
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$asteriskEmphasisTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)([^*])?(\\*+)([^*])?'));
var $pablohirafuji$elm_markdown$Markdown$InlineParser$EmphasisToken = F2(
	function (a, b) {
		return {$: 'EmphasisToken', a: a, b: b};
	});
var $pablohirafuji$elm_markdown$Markdown$InlineParser$punctuationRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('[!-#%-\\*,-/:;\\?@\\[-\\]_\\{\\}]'));
var $pablohirafuji$elm_markdown$Markdown$InlineParser$containPunctuation = $elm$regex$Regex$contains($pablohirafuji$elm_markdown$Markdown$InlineParser$punctuationRegex);
var $pablohirafuji$elm_markdown$Markdown$InlineParser$spaceRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('\\s'));
var $pablohirafuji$elm_markdown$Markdown$InlineParser$containSpace = $elm$regex$Regex$contains($pablohirafuji$elm_markdown$Markdown$InlineParser$spaceRegex);
var $pablohirafuji$elm_markdown$Markdown$InlineParser$charFringeRank = function (_char) {
	var string = $elm$core$String$fromChar(_char);
	return $pablohirafuji$elm_markdown$Markdown$InlineParser$containSpace(string) ? 0 : ($pablohirafuji$elm_markdown$Markdown$InlineParser$containPunctuation(string) ? 1 : 2);
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$maybeCharFringeRank = function (maybeChar) {
	return A2(
		$elm$core$Maybe$withDefault,
		0,
		A2($elm$core$Maybe$map, $pablohirafuji$elm_markdown$Markdown$InlineParser$charFringeRank, maybeChar));
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$getFringeRank = A2(
	$elm$core$Basics$composeR,
	$elm$core$Maybe$map(
		A2(
			$elm$core$Basics$composeR,
			$elm$core$String$uncons,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$Maybe$map($elm$core$Tuple$first),
				$pablohirafuji$elm_markdown$Markdown$InlineParser$maybeCharFringeRank))),
	$elm$core$Maybe$withDefault(0));
var $pablohirafuji$elm_markdown$Markdown$InlineParser$regMatchToEmphasisToken = F3(
	function (_char, rawText, regMatch) {
		var _v0 = regMatch.submatches;
		if ((((_v0.b && _v0.b.b) && _v0.b.b.b) && (_v0.b.b.a.$ === 'Just')) && _v0.b.b.b.b) {
			var maybeBackslashes = _v0.a;
			var _v1 = _v0.b;
			var maybeLeftFringe = _v1.a;
			var _v2 = _v1.b;
			var delimiter = _v2.a.a;
			var _v3 = _v2.b;
			var maybeRightFringe = _v3.a;
			var leftFringeLength = A2(
				$elm$core$Maybe$withDefault,
				0,
				A2($elm$core$Maybe$map, $elm$core$String$length, maybeLeftFringe));
			var mLeftFringe = ((!(!regMatch.index)) && (!leftFringeLength)) ? $elm$core$Maybe$Just(
				A3($elm$core$String$slice, regMatch.index - 1, regMatch.index, rawText)) : maybeLeftFringe;
			var backslashesLength = A2(
				$elm$core$Maybe$withDefault,
				0,
				A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
			var isEscaped = ((!$pablohirafuji$elm_markdown$Markdown$Helpers$isEven(backslashesLength)) && (!leftFringeLength)) || _Utils_eq(
				mLeftFringe,
				$elm$core$Maybe$Just('\\'));
			var delimiterLength = isEscaped ? ($elm$core$String$length(delimiter) - 1) : $elm$core$String$length(delimiter);
			var fringeRank = _Utils_Tuple2(
				isEscaped ? 1 : $pablohirafuji$elm_markdown$Markdown$InlineParser$getFringeRank(mLeftFringe),
				$pablohirafuji$elm_markdown$Markdown$InlineParser$getFringeRank(maybeRightFringe));
			var index = ((regMatch.index + backslashesLength) + leftFringeLength) + (isEscaped ? 1 : 0);
			return ((delimiterLength <= 0) || (_Utils_eq(
				_char,
				_Utils_chr('_')) && _Utils_eq(
				fringeRank,
				_Utils_Tuple2(2, 2)))) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				{
					index: index,
					length: delimiterLength,
					meaning: A2($pablohirafuji$elm_markdown$Markdown$InlineParser$EmphasisToken, _char, fringeRank)
				});
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $pablohirafuji$elm_markdown$Markdown$InlineParser$findAsteriskEmphasisTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		A2(
			$pablohirafuji$elm_markdown$Markdown$InlineParser$regMatchToEmphasisToken,
			_Utils_chr('*'),
			str),
		A2($elm$regex$Regex$find, $pablohirafuji$elm_markdown$Markdown$InlineParser$asteriskEmphasisTokenRegex, str));
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$codeTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\`+)'));
var $pablohirafuji$elm_markdown$Markdown$InlineParser$CodeToken = function (a) {
	return {$: 'CodeToken', a: a};
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$regMatchToCodeToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var backtick = _v1.a.a;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		return $elm$core$Maybe$Just(
			{
				index: regMatch.index + backslashesLength,
				length: $elm$core$String$length(backtick),
				meaning: $pablohirafuji$elm_markdown$Markdown$InlineParser$CodeToken(
					!$pablohirafuji$elm_markdown$Markdown$Helpers$isEven(backslashesLength))
			});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$findCodeTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$pablohirafuji$elm_markdown$Markdown$InlineParser$regMatchToCodeToken,
		A2($elm$regex$Regex$find, $pablohirafuji$elm_markdown$Markdown$InlineParser$codeTokenRegex, str));
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$hardBreakTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(?:(\\\\+)|( {2,}))\\n'));
var $pablohirafuji$elm_markdown$Markdown$InlineParser$HardLineBreakToken = {$: 'HardLineBreakToken'};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$regMatchToHardBreakToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	_v0$2:
	while (true) {
		if (_v0.b) {
			if (_v0.a.$ === 'Just') {
				var backslashes = _v0.a.a;
				var backslashesLength = $elm$core$String$length(backslashes);
				return (!$pablohirafuji$elm_markdown$Markdown$Helpers$isEven(backslashesLength)) ? $elm$core$Maybe$Just(
					{index: (regMatch.index + backslashesLength) - 1, length: 2, meaning: $pablohirafuji$elm_markdown$Markdown$InlineParser$HardLineBreakToken}) : $elm$core$Maybe$Nothing;
			} else {
				if (_v0.b.b && (_v0.b.a.$ === 'Just')) {
					var _v1 = _v0.b;
					return $elm$core$Maybe$Just(
						{
							index: regMatch.index,
							length: $elm$core$String$length(regMatch.match),
							meaning: $pablohirafuji$elm_markdown$Markdown$InlineParser$HardLineBreakToken
						});
				} else {
					break _v0$2;
				}
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Maybe$Nothing;
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$regMatchToSoftHardBreakToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	_v0$2:
	while (true) {
		if (_v0.b) {
			if (_v0.a.$ === 'Just') {
				var backslashes = _v0.a.a;
				var backslashesLength = $elm$core$String$length(backslashes);
				return $pablohirafuji$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $elm$core$Maybe$Just(
					{index: regMatch.index + backslashesLength, length: 1, meaning: $pablohirafuji$elm_markdown$Markdown$InlineParser$HardLineBreakToken}) : $elm$core$Maybe$Just(
					{index: (regMatch.index + backslashesLength) - 1, length: 2, meaning: $pablohirafuji$elm_markdown$Markdown$InlineParser$HardLineBreakToken});
			} else {
				if (_v0.b.b) {
					var _v1 = _v0.b;
					var maybeSpaces = _v1.a;
					return $elm$core$Maybe$Just(
						{
							index: regMatch.index,
							length: $elm$core$String$length(regMatch.match),
							meaning: $pablohirafuji$elm_markdown$Markdown$InlineParser$HardLineBreakToken
						});
				} else {
					break _v0$2;
				}
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Maybe$Nothing;
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$softAsHardLineBreakTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(?:(\\\\+)|( *))\\n'));
var $pablohirafuji$elm_markdown$Markdown$InlineParser$findHardBreakTokens = F2(
	function (softAsHardLineBreak, str) {
		return softAsHardLineBreak ? A2(
			$elm$core$List$filterMap,
			$pablohirafuji$elm_markdown$Markdown$InlineParser$regMatchToSoftHardBreakToken,
			A2($elm$regex$Regex$find, $pablohirafuji$elm_markdown$Markdown$InlineParser$softAsHardLineBreakTokenRegex, str)) : A2(
			$elm$core$List$filterMap,
			$pablohirafuji$elm_markdown$Markdown$InlineParser$regMatchToHardBreakToken,
			A2($elm$regex$Regex$find, $pablohirafuji$elm_markdown$Markdown$InlineParser$hardBreakTokenRegex, str));
	});
var $pablohirafuji$elm_markdown$Markdown$InlineParser$linkImageCloseTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\])'));
var $pablohirafuji$elm_markdown$Markdown$InlineParser$regMatchToLinkImageCloseToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var delimiter = _v1.a.a;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		return $pablohirafuji$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $elm$core$Maybe$Just(
			{
				index: regMatch.index + backslashesLength,
				length: 1,
				meaning: $pablohirafuji$elm_markdown$Markdown$InlineParser$CharToken(
					_Utils_chr(']'))
			}) : $elm$core$Maybe$Nothing;
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$findLinkImageCloseTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$pablohirafuji$elm_markdown$Markdown$InlineParser$regMatchToLinkImageCloseToken,
		A2($elm$regex$Regex$find, $pablohirafuji$elm_markdown$Markdown$InlineParser$linkImageCloseTokenRegex, str));
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$linkImageOpenTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\!)?(\\[)'));
var $pablohirafuji$elm_markdown$Markdown$InlineParser$ImageOpenToken = {$: 'ImageOpenToken'};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$LinkOpenToken = function (a) {
	return {$: 'LinkOpenToken', a: a};
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$regMatchToLinkImageOpenToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if (((_v0.b && _v0.b.b) && _v0.b.b.b) && (_v0.b.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var maybeImageOpen = _v1.a;
		var _v2 = _v1.b;
		var delimiter = _v2.a.a;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		var isEscaped = !$pablohirafuji$elm_markdown$Markdown$Helpers$isEven(backslashesLength);
		var index = (regMatch.index + backslashesLength) + ((isEscaped && _Utils_eq(
			maybeImageOpen,
			$elm$core$Maybe$Just('!'))) ? 1 : 0);
		var meaning = isEscaped ? A2(
			$elm$core$Maybe$map,
			function (_v3) {
				return $pablohirafuji$elm_markdown$Markdown$InlineParser$LinkOpenToken(true);
			},
			maybeImageOpen) : $elm$core$Maybe$Just(
			A2(
				$elm$core$Maybe$withDefault,
				$pablohirafuji$elm_markdown$Markdown$InlineParser$LinkOpenToken(true),
				A2(
					$elm$core$Maybe$map,
					function (_v4) {
						return $pablohirafuji$elm_markdown$Markdown$InlineParser$ImageOpenToken;
					},
					maybeImageOpen)));
		var length = _Utils_eq(
			meaning,
			$elm$core$Maybe$Just($pablohirafuji$elm_markdown$Markdown$InlineParser$ImageOpenToken)) ? 2 : 1;
		var toModel = function (m) {
			return {index: index, length: length, meaning: m};
		};
		return A2($elm$core$Maybe$map, toModel, meaning);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$findLinkImageOpenTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$pablohirafuji$elm_markdown$Markdown$InlineParser$regMatchToLinkImageOpenToken,
		A2($elm$regex$Regex$find, $pablohirafuji$elm_markdown$Markdown$InlineParser$linkImageOpenTokenRegex, str));
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$underlineEmphasisTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)([^_])?(\\_+)([^_])?'));
var $pablohirafuji$elm_markdown$Markdown$InlineParser$findUnderlineEmphasisTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		A2(
			$pablohirafuji$elm_markdown$Markdown$InlineParser$regMatchToEmphasisToken,
			_Utils_chr('_'),
			str),
		A2($elm$regex$Regex$find, $pablohirafuji$elm_markdown$Markdown$InlineParser$underlineEmphasisTokenRegex, str));
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$tokenize = function (model) {
	return _Utils_update(
		model,
		{
			tokens: A2(
				$elm$core$List$sortBy,
				function ($) {
					return $.index;
				},
				_Utils_ap(
					$pablohirafuji$elm_markdown$Markdown$InlineParser$findAngleBracketRTokens(model.rawText),
					_Utils_ap(
						$pablohirafuji$elm_markdown$Markdown$InlineParser$findAngleBracketLTokens(model.rawText),
						_Utils_ap(
							A2($pablohirafuji$elm_markdown$Markdown$InlineParser$findHardBreakTokens, model.options.softAsHardLineBreak, model.rawText),
							_Utils_ap(
								$pablohirafuji$elm_markdown$Markdown$InlineParser$findLinkImageCloseTokens(model.rawText),
								_Utils_ap(
									$pablohirafuji$elm_markdown$Markdown$InlineParser$findLinkImageOpenTokens(model.rawText),
									_Utils_ap(
										$pablohirafuji$elm_markdown$Markdown$InlineParser$findUnderlineEmphasisTokens(model.rawText),
										_Utils_ap(
											$pablohirafuji$elm_markdown$Markdown$InlineParser$findAsteriskEmphasisTokens(model.rawText),
											$pablohirafuji$elm_markdown$Markdown$InlineParser$findCodeTokens(model.rawText)))))))))
		});
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$CodeType = {$: 'CodeType'};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$EmphasisType = function (a) {
	return {$: 'EmphasisType', a: a};
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$HtmlType = function (a) {
	return {$: 'HtmlType', a: a};
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$ImageType = function (a) {
	return {$: 'ImageType', a: a};
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$LinkType = function (a) {
	return {$: 'LinkType', a: a};
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$addMatch = F2(
	function (model, match) {
		return _Utils_update(
			model,
			{
				matches: A2($elm$core$List$cons, match, model.matches)
			});
	});
var $pablohirafuji$elm_markdown$Markdown$InlineParser$addToken = F2(
	function (model, token) {
		return _Utils_update(
			model,
			{
				tokens: A2($elm$core$List$cons, token, model.tokens)
			});
	});
var $pablohirafuji$elm_markdown$Markdown$InlineParser$applyTTM = F2(
	function (finderFunction, model) {
		return finderFunction(
			_Utils_Tuple2(
				model.tokens,
				_Utils_update(
					model,
					{tokens: _List_Nil})));
	});
var $pablohirafuji$elm_markdown$Markdown$InlineParser$AutolinkType = function (a) {
	return {$: 'AutolinkType', a: a};
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$decodeUrlRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('%(?:3B|2C|2F|3F|3A|40|26|3D|2B|24|23|25)'));
var $elm$url$Url$percentEncode = _Url_percentEncode;
var $pablohirafuji$elm_markdown$Markdown$InlineParser$encodeUrl = A2(
	$elm$core$Basics$composeR,
	$elm$url$Url$percentEncode,
	A2(
		$elm$regex$Regex$replace,
		$pablohirafuji$elm_markdown$Markdown$InlineParser$decodeUrlRegex,
		function (match) {
			return A2(
				$elm$core$Maybe$withDefault,
				match.match,
				$elm$url$Url$percentDecode(match.match));
		}));
var $pablohirafuji$elm_markdown$Markdown$InlineParser$urlRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^([A-Za-z][A-Za-z0-9.+\\-]{1,31}:[^<>\\x00-\\x20]*)$'));
var $pablohirafuji$elm_markdown$Markdown$InlineParser$autolinkToMatch = function (_v0) {
	var match = _v0.a;
	return A2($elm$regex$Regex$contains, $pablohirafuji$elm_markdown$Markdown$InlineParser$urlRegex, match.text) ? $elm$core$Result$Ok(
		$pablohirafuji$elm_markdown$Markdown$InlineParser$Match(
			_Utils_update(
				match,
				{
					type_: $pablohirafuji$elm_markdown$Markdown$InlineParser$AutolinkType(
						_Utils_Tuple2(
							match.text,
							$pablohirafuji$elm_markdown$Markdown$InlineParser$encodeUrl(match.text)))
				}))) : $elm$core$Result$Err(
		$pablohirafuji$elm_markdown$Markdown$InlineParser$Match(match));
};
var $pablohirafuji$elm_markdown$Markdown$Helpers$whiteSpaceChars = ' \\t\\f\\v\\r\\n';
var $pablohirafuji$elm_markdown$Markdown$InlineParser$hrefRegex = '(?:<([^<>' + ($pablohirafuji$elm_markdown$Markdown$Helpers$whiteSpaceChars + (']*)>|([^' + ($pablohirafuji$elm_markdown$Markdown$Helpers$whiteSpaceChars + ('\\(\\)\\\\]*(?:\\\\.[^' + ($pablohirafuji$elm_markdown$Markdown$Helpers$whiteSpaceChars + '\\(\\)\\\\]*)*))')))));
var $pablohirafuji$elm_markdown$Markdown$Helpers$titleRegex = '(?:[' + ($pablohirafuji$elm_markdown$Markdown$Helpers$whiteSpaceChars + (']+' + ('(?:\'([^\'\\\\]*(?:\\\\.[^\'\\\\]*)*)\'|' + ('\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"|' + '\\(([^\\)\\\\]*(?:\\\\.[^\\)\\\\]*)*)\\)))?'))));
var $pablohirafuji$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^\\(\\s*' + ($pablohirafuji$elm_markdown$Markdown$InlineParser$hrefRegex + ($pablohirafuji$elm_markdown$Markdown$Helpers$titleRegex + '\\s*\\)'))));
var $pablohirafuji$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle = function (_v0) {
	var rawUrl = _v0.a;
	var maybeTitle = _v0.b;
	return _Utils_Tuple2(
		$pablohirafuji$elm_markdown$Markdown$InlineParser$encodeUrl(
			$pablohirafuji$elm_markdown$Markdown$Helpers$formatStr(rawUrl)),
		A2($elm$core$Maybe$map, $pablohirafuji$elm_markdown$Markdown$Helpers$formatStr, maybeTitle));
};
var $pablohirafuji$elm_markdown$Markdown$Helpers$returnFirstJust = function (maybes) {
	var process = F2(
		function (a, maybeFound) {
			if (maybeFound.$ === 'Just') {
				var found = maybeFound.a;
				return $elm$core$Maybe$Just(found);
			} else {
				return a;
			}
		});
	return A3($elm$core$List$foldl, process, $elm$core$Maybe$Nothing, maybes);
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegexToMatch = F3(
	function (matchModel, model, regexMatch) {
		var _v0 = regexMatch.submatches;
		if ((((_v0.b && _v0.b.b) && _v0.b.b.b) && _v0.b.b.b.b) && _v0.b.b.b.b.b) {
			var maybeRawUrlAngleBrackets = _v0.a;
			var _v1 = _v0.b;
			var maybeRawUrlWithoutBrackets = _v1.a;
			var _v2 = _v1.b;
			var maybeTitleSingleQuotes = _v2.a;
			var _v3 = _v2.b;
			var maybeTitleDoubleQuotes = _v3.a;
			var _v4 = _v3.b;
			var maybeTitleParenthesis = _v4.a;
			var maybeTitle = $pablohirafuji$elm_markdown$Markdown$Helpers$returnFirstJust(
				_List_fromArray(
					[maybeTitleSingleQuotes, maybeTitleDoubleQuotes, maybeTitleParenthesis]));
			var toMatch = function (rawUrl) {
				return $pablohirafuji$elm_markdown$Markdown$InlineParser$Match(
					_Utils_update(
						matchModel,
						{
							end: matchModel.end + $elm$core$String$length(regexMatch.match),
							type_: function () {
								var _v5 = matchModel.type_;
								if (_v5.$ === 'ImageType') {
									return $pablohirafuji$elm_markdown$Markdown$InlineParser$ImageType;
								} else {
									return $pablohirafuji$elm_markdown$Markdown$InlineParser$LinkType;
								}
							}()(
								$pablohirafuji$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle(
									_Utils_Tuple2(rawUrl, maybeTitle)))
						}));
			};
			var maybeRawUrl = $pablohirafuji$elm_markdown$Markdown$Helpers$returnFirstJust(
				_List_fromArray(
					[maybeRawUrlAngleBrackets, maybeRawUrlWithoutBrackets]));
			return $elm$core$Maybe$Just(
				toMatch(
					A2($elm$core$Maybe$withDefault, '', maybeRawUrl)));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $pablohirafuji$elm_markdown$Markdown$InlineParser$checkForInlineLinkTypeOrImageType = function (_v0) {
	var remainText = _v0.a;
	var tempMatch = _v0.b.a;
	var model = _v0.c;
	return A2(
		$elm$core$Result$fromMaybe,
		_Utils_Tuple3(
			remainText,
			$pablohirafuji$elm_markdown$Markdown$InlineParser$Match(tempMatch),
			model),
		A2(
			$elm$core$Maybe$map,
			$pablohirafuji$elm_markdown$Markdown$InlineParser$addMatch(model),
			A2(
				$elm$core$Maybe$andThen,
				A2($pablohirafuji$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegexToMatch, tempMatch, model),
				$elm$core$List$head(
					A3($elm$regex$Regex$findAtMost, 1, $pablohirafuji$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegex, remainText)))));
};
var $pablohirafuji$elm_markdown$Markdown$Helpers$insideSquareBracketRegex = '[^\\[\\]\\\\]*(?:\\\\.[^\\[\\]\\\\]*)*';
var $pablohirafuji$elm_markdown$Markdown$InlineParser$refLabelRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^\\[\\s*(' + ($pablohirafuji$elm_markdown$Markdown$Helpers$insideSquareBracketRegex + ')\\s*\\]')));
var $pablohirafuji$elm_markdown$Markdown$Helpers$whitespacesRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('[' + ($pablohirafuji$elm_markdown$Markdown$Helpers$whiteSpaceChars + ']+')));
var $pablohirafuji$elm_markdown$Markdown$Helpers$cleanWhitespaces = A2(
	$elm$core$Basics$composeR,
	$elm$core$String$trim,
	A2(
		$elm$regex$Regex$replace,
		$pablohirafuji$elm_markdown$Markdown$Helpers$whitespacesRegex,
		function (_v0) {
			return ' ';
		}));
var $pablohirafuji$elm_markdown$Markdown$Helpers$prepareRefLabel = A2($elm$core$Basics$composeR, $pablohirafuji$elm_markdown$Markdown$Helpers$cleanWhitespaces, $elm$core$String$toLower);
var $pablohirafuji$elm_markdown$Markdown$InlineParser$refRegexToMatch = F3(
	function (matchModel, model, maybeRegexMatch) {
		var regexMatchLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2(
				$elm$core$Maybe$map,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.match;
					},
					$elm$core$String$length),
				maybeRegexMatch));
		var toMatch = function (urlTitle) {
			return $pablohirafuji$elm_markdown$Markdown$InlineParser$Match(
				_Utils_update(
					matchModel,
					{
						end: matchModel.end + regexMatchLength,
						type_: function () {
							var _v0 = matchModel.type_;
							if (_v0.$ === 'ImageType') {
								return $pablohirafuji$elm_markdown$Markdown$InlineParser$ImageType;
							} else {
								return $pablohirafuji$elm_markdown$Markdown$InlineParser$LinkType;
							}
						}()(
							$pablohirafuji$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle(urlTitle))
					}));
		};
		var refLabel = function (str) {
			return $elm$core$String$isEmpty(str) ? matchModel.text : str;
		}(
			A2(
				$elm$core$Maybe$withDefault,
				matchModel.text,
				A2(
					$elm$core$Maybe$withDefault,
					$elm$core$Maybe$Nothing,
					A2(
						$elm$core$Maybe$withDefault,
						$elm$core$Maybe$Nothing,
						A2(
							$elm$core$Maybe$map,
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.submatches;
								},
								$elm$core$List$head),
							maybeRegexMatch)))));
		var maybeRefItem = A2(
			$elm$core$Dict$get,
			$pablohirafuji$elm_markdown$Markdown$Helpers$prepareRefLabel(refLabel),
			model.refs);
		return A2($elm$core$Maybe$map, toMatch, maybeRefItem);
	});
var $pablohirafuji$elm_markdown$Markdown$InlineParser$checkForRefLinkTypeOrImageType = function (_v0) {
	var remainText = _v0.a;
	var tempMatch = _v0.b.a;
	var model = _v0.c;
	return A2(
		$elm$core$Result$fromMaybe,
		_Utils_Tuple3(
			remainText,
			$pablohirafuji$elm_markdown$Markdown$InlineParser$Match(tempMatch),
			model),
		A2(
			$elm$core$Maybe$map,
			$pablohirafuji$elm_markdown$Markdown$InlineParser$addMatch(model),
			A3(
				$pablohirafuji$elm_markdown$Markdown$InlineParser$refRegexToMatch,
				tempMatch,
				model,
				$elm$core$List$head(
					A3($elm$regex$Regex$findAtMost, 1, $pablohirafuji$elm_markdown$Markdown$InlineParser$refLabelRegex, remainText)))));
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$checkParsedAheadOverlapping = function (parser) {
	var _v0 = parser.matches;
	if (!_v0.b) {
		return $elm$core$Result$Err(_Utils_Tuple0);
	} else {
		var match = _v0.a.a;
		var remainMatches = _v0.b;
		var overlappingMatches = A2(
			$elm$core$List$filter,
			function (_v1) {
				var testMatch = _v1.a;
				return (_Utils_cmp(match.end, testMatch.start) > 0) && (_Utils_cmp(match.end, testMatch.end) < 0);
			},
			remainMatches);
		return ($elm$core$List$isEmpty(remainMatches) || $elm$core$List$isEmpty(overlappingMatches)) ? $elm$core$Result$Ok(parser) : $elm$core$Result$Err(_Utils_Tuple0);
	}
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$emailRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^([a-zA-Z0-9.!#$%&\'*+\\/=?^_`{|}~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?)*)$'));
var $pablohirafuji$elm_markdown$Markdown$InlineParser$emailAutolinkTypeToMatch = function (_v0) {
	var match = _v0.a;
	return A2($elm$regex$Regex$contains, $pablohirafuji$elm_markdown$Markdown$InlineParser$emailRegex, match.text) ? $elm$core$Result$Ok(
		$pablohirafuji$elm_markdown$Markdown$InlineParser$Match(
			_Utils_update(
				match,
				{
					type_: $pablohirafuji$elm_markdown$Markdown$InlineParser$AutolinkType(
						_Utils_Tuple2(
							match.text,
							'mailto:' + $pablohirafuji$elm_markdown$Markdown$InlineParser$encodeUrl(match.text)))
				}))) : $elm$core$Result$Err(
		$pablohirafuji$elm_markdown$Markdown$InlineParser$Match(match));
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$filterTokens = F2(
	function (filter, model) {
		return _Utils_update(
			model,
			{
				tokens: A2($elm$core$List$filter, filter, model.tokens)
			});
	});
var $pablohirafuji$elm_markdown$Markdown$InlineParser$findToken = F2(
	function (isToken, tokens) {
		var search = F2(
			function (token, _v2) {
				var maybeToken = _v2.a;
				var innerTokens = _v2.b;
				var remainTokens = _v2.c;
				if (maybeToken.$ === 'Nothing') {
					return isToken(token) ? _Utils_Tuple3(
						$elm$core$Maybe$Just(token),
						innerTokens,
						_List_Nil) : _Utils_Tuple3(
						$elm$core$Maybe$Nothing,
						A2($elm$core$List$cons, token, innerTokens),
						_List_Nil);
				} else {
					return _Utils_Tuple3(
						maybeToken,
						innerTokens,
						A2($elm$core$List$cons, token, remainTokens));
				}
			});
		var _return = function (_v0) {
			var maybeToken = _v0.a;
			var innerTokens = _v0.b;
			var remainTokens = _v0.c;
			return A2(
				$elm$core$Maybe$map,
				function (token) {
					return _Utils_Tuple3(
						token,
						$elm$core$List$reverse(innerTokens),
						$elm$core$List$reverse(remainTokens));
				},
				maybeToken);
		};
		return _return(
			A3(
				$elm$core$List$foldl,
				search,
				_Utils_Tuple3($elm$core$Maybe$Nothing, _List_Nil, _List_Nil),
				tokens));
	});
var $pablohirafuji$elm_markdown$Markdown$InlineParser$HtmlModel = F2(
	function (tag, attributes) {
		return {attributes: attributes, tag: tag};
	});
var $pablohirafuji$elm_markdown$Markdown$InlineParser$HtmlToken = F2(
	function (a, b) {
		return {$: 'HtmlToken', a: a, b: b};
	});
var $pablohirafuji$elm_markdown$Markdown$InlineParser$attributesFromRegex = function (regexMatch) {
	var _v0 = regexMatch.submatches;
	_v0$2:
	while (true) {
		if (_v0.b && (_v0.a.$ === 'Just')) {
			if (_v0.a.a === '') {
				return $elm$core$Maybe$Nothing;
			} else {
				if ((_v0.b.b && _v0.b.b.b) && _v0.b.b.b.b) {
					var name = _v0.a.a;
					var _v1 = _v0.b;
					var maybeDoubleQuotes = _v1.a;
					var _v2 = _v1.b;
					var maybeSingleQuotes = _v2.a;
					var _v3 = _v2.b;
					var maybeUnquoted = _v3.a;
					var maybeValue = $pablohirafuji$elm_markdown$Markdown$Helpers$returnFirstJust(
						_List_fromArray(
							[maybeDoubleQuotes, maybeSingleQuotes, maybeUnquoted]));
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(name, maybeValue));
				} else {
					break _v0$2;
				}
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Maybe$Nothing;
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$htmlAttributesRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('([a-zA-Z:_][a-zA-Z0-9\\-_.:]*)(?: ?= ?(?:\"([^\"]*)\"|\'([^\']*)\'|([^\\s\"\'=<>`]*)))?'));
var $pablohirafuji$elm_markdown$Markdown$InlineParser$applyAttributesRegex = A2(
	$elm$core$Basics$composeR,
	$elm$regex$Regex$find($pablohirafuji$elm_markdown$Markdown$InlineParser$htmlAttributesRegex),
	$elm$core$List$filterMap($pablohirafuji$elm_markdown$Markdown$InlineParser$attributesFromRegex));
var $pablohirafuji$elm_markdown$Markdown$InlineParser$htmlFromRegex = F3(
	function (model, match, regexMatch) {
		var _v0 = regexMatch.submatches;
		if ((((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) && _v0.b.b.b) && _v0.b.b.b.b) {
			var maybeClose = _v0.a;
			var _v1 = _v0.b;
			var tag = _v1.a.a;
			var _v2 = _v1.b;
			var maybeAttributes = _v2.a;
			var _v3 = _v2.b;
			var maybeSelfClosing = _v3.a;
			var updateModel = function (attrs) {
				return A2(
					$pablohirafuji$elm_markdown$Markdown$InlineParser$addToken,
					model,
					{
						index: match.start,
						length: match.end - match.start,
						meaning: A2(
							$pablohirafuji$elm_markdown$Markdown$InlineParser$HtmlToken,
							_Utils_eq(maybeClose, $elm$core$Maybe$Nothing) && _Utils_eq(maybeSelfClosing, $elm$core$Maybe$Nothing),
							A2($pablohirafuji$elm_markdown$Markdown$InlineParser$HtmlModel, tag, attrs))
					});
			};
			var filterAttributes = F2(
				function (attrs, allowed) {
					return A2(
						$elm$core$List$filter,
						function (attr) {
							return A2($elm$core$List$member, attr.a, allowed);
						},
						attrs);
				});
			var attributes = A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				A2($elm$core$Maybe$map, $pablohirafuji$elm_markdown$Markdown$InlineParser$applyAttributesRegex, maybeAttributes));
			var noAttributesInCloseTag = _Utils_eq(maybeClose, $elm$core$Maybe$Nothing) || ((!_Utils_eq(maybeClose, $elm$core$Maybe$Nothing)) && _Utils_eq(attributes, _List_Nil));
			var _v4 = model.options.rawHtml;
			switch (_v4.$) {
				case 'ParseUnsafe':
					return noAttributesInCloseTag ? $elm$core$Maybe$Just(
						updateModel(attributes)) : $elm$core$Maybe$Nothing;
				case 'Sanitize':
					var allowedHtmlElements = _v4.a.allowedHtmlElements;
					var allowedHtmlAttributes = _v4.a.allowedHtmlAttributes;
					return (A2($elm$core$List$member, tag, allowedHtmlElements) && noAttributesInCloseTag) ? $elm$core$Maybe$Just(
						updateModel(
							A2(filterAttributes, attributes, allowedHtmlAttributes))) : $elm$core$Maybe$Nothing;
				default:
					return $elm$core$Maybe$Nothing;
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $pablohirafuji$elm_markdown$Markdown$InlineParser$htmlRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^(\\/)?([a-zA-Z][a-zA-Z0-9\\-]*)(?:\\s+([^<>]*?))?(\\/)?$'));
var $pablohirafuji$elm_markdown$Markdown$InlineParser$htmlToToken = F2(
	function (model, _v0) {
		var match = _v0.a;
		var _v1 = model.options.rawHtml;
		if (_v1.$ === 'DontParse') {
			return $elm$core$Maybe$Nothing;
		} else {
			return A2(
				$elm$core$Maybe$andThen,
				A2($pablohirafuji$elm_markdown$Markdown$InlineParser$htmlFromRegex, model, match),
				$elm$core$List$head(
					A3($elm$regex$Regex$findAtMost, 1, $pablohirafuji$elm_markdown$Markdown$InlineParser$htmlRegex, match.text)));
		}
	});
var $pablohirafuji$elm_markdown$Markdown$InlineParser$isCloseToken = F2(
	function (htmlModel, token) {
		var _v0 = token.meaning;
		if ((_v0.$ === 'HtmlToken') && (!_v0.a)) {
			var htmlModel_ = _v0.b;
			return _Utils_eq(htmlModel.tag, htmlModel_.tag);
		} else {
			return false;
		}
	});
var $pablohirafuji$elm_markdown$Markdown$InlineParser$isCodeTokenPair = F2(
	function (closeToken, openToken) {
		var _v0 = openToken.meaning;
		if (_v0.$ === 'CodeToken') {
			var isEscaped = _v0.a;
			return isEscaped ? _Utils_eq(openToken.length - 1, closeToken.length) : _Utils_eq(openToken.length, closeToken.length);
		} else {
			return false;
		}
	});
var $pablohirafuji$elm_markdown$Markdown$InlineParser$isLinkTypeOrImageOpenToken = function (token) {
	var _v0 = token.meaning;
	switch (_v0.$) {
		case 'LinkOpenToken':
			return true;
		case 'ImageOpenToken':
			return true;
		default:
			return false;
	}
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$isOpenEmphasisToken = F2(
	function (closeToken, openToken) {
		var _v0 = openToken.meaning;
		if (_v0.$ === 'EmphasisToken') {
			var openChar = _v0.a;
			var _v1 = _v0.b;
			var openLR = _v1.a;
			var openRR = _v1.b;
			var _v2 = closeToken.meaning;
			if (_v2.$ === 'EmphasisToken') {
				var closeChar = _v2.a;
				var _v3 = _v2.b;
				var closeLR = _v3.a;
				var closeRR = _v3.b;
				return _Utils_eq(openChar, closeChar) ? ((_Utils_eq(openLR, openRR) || _Utils_eq(closeLR, closeRR)) ? (!(!A2($elm$core$Basics$modBy, 3, closeToken.length + openToken.length))) : true) : false;
			} else {
				return false;
			}
		} else {
			return false;
		}
	});
var $pablohirafuji$elm_markdown$Markdown$InlineParser$voidHtmlTags = _List_fromArray(
	['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr']);
var $pablohirafuji$elm_markdown$Markdown$InlineParser$isVoidTag = function (htmlModel) {
	return A2($elm$core$List$member, htmlModel.tag, $pablohirafuji$elm_markdown$Markdown$InlineParser$voidHtmlTags);
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$HardLineBreakType = {$: 'HardLineBreakType'};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$SoftLineBreakToken = {$: 'SoftLineBreakToken'};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$reverseTokens = function (model) {
	return _Utils_update(
		model,
		{
			tokens: $elm$core$List$reverse(model.tokens)
		});
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$tokenToMatch = F2(
	function (token, type_) {
		return $pablohirafuji$elm_markdown$Markdown$InlineParser$Match(
			{end: token.index + token.length, matches: _List_Nil, start: token.index, text: '', textEnd: 0, textStart: 0, type_: type_});
	});
var $pablohirafuji$elm_markdown$Markdown$InlineParser$lineBreakTTM = function (_v0) {
	lineBreakTTM:
	while (true) {
		var tokens = _v0.a;
		var model = _v0.b;
		if (!tokens.b) {
			return $pablohirafuji$elm_markdown$Markdown$InlineParser$reverseTokens(model);
		} else {
			var token = tokens.a;
			var tokensTail = tokens.b;
			if (_Utils_eq(token.meaning, $pablohirafuji$elm_markdown$Markdown$InlineParser$HardLineBreakToken) || (_Utils_eq(token.meaning, $pablohirafuji$elm_markdown$Markdown$InlineParser$SoftLineBreakToken) && model.options.softAsHardLineBreak)) {
				return $pablohirafuji$elm_markdown$Markdown$InlineParser$lineBreakTTM(
					function (b) {
						return _Utils_Tuple2(tokensTail, b);
					}(
						_Utils_update(
							model,
							{
								matches: A2(
									$elm$core$List$cons,
									A2($pablohirafuji$elm_markdown$Markdown$InlineParser$tokenToMatch, token, $pablohirafuji$elm_markdown$Markdown$InlineParser$HardLineBreakType),
									model.matches)
							})));
			} else {
				var $temp$_v0 = _Utils_Tuple2(
					tokensTail,
					A2($pablohirafuji$elm_markdown$Markdown$InlineParser$addToken, model, token));
				_v0 = $temp$_v0;
				continue lineBreakTTM;
			}
		}
	}
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$removeParsedAheadTokens = F2(
	function (tokensTail, parser) {
		var _v0 = parser.matches;
		if (!_v0.b) {
			return _Utils_Tuple2(tokensTail, parser);
		} else {
			var match = _v0.a.a;
			return _Utils_Tuple2(
				A2(
					$elm$core$List$filter,
					function (token) {
						return _Utils_cmp(token.index, match.end) > -1;
					},
					tokensTail),
				parser);
		}
	});
var $pablohirafuji$elm_markdown$Markdown$InlineParser$angleBracketsToMatch = F4(
	function (closeToken, isEscaped, model, _v24) {
		var openToken = _v24.a;
		var remainTokens = _v24.c;
		return function (result) {
			if (result.$ === 'Err') {
				var tempMatch = result.a;
				return (!isEscaped) ? A2(
					$pablohirafuji$elm_markdown$Markdown$InlineParser$htmlToToken,
					_Utils_update(
						model,
						{tokens: remainTokens}),
					tempMatch) : $elm$core$Result$toMaybe(result);
			} else {
				return $elm$core$Result$toMaybe(result);
			}
		}(
			A2(
				$elm$core$Result$map,
				function (newMatch) {
					return _Utils_update(
						model,
						{
							matches: A2($elm$core$List$cons, newMatch, model.matches),
							tokens: remainTokens
						});
				},
				A2(
					$pablohirafuji$elm_markdown$Markdown$Helpers$ifError,
					$pablohirafuji$elm_markdown$Markdown$InlineParser$emailAutolinkTypeToMatch,
					$pablohirafuji$elm_markdown$Markdown$InlineParser$autolinkToMatch(
						A6(
							$pablohirafuji$elm_markdown$Markdown$InlineParser$tokenPairToMatch,
							model,
							function (s) {
								return s;
							},
							$pablohirafuji$elm_markdown$Markdown$InlineParser$CodeType,
							openToken,
							closeToken,
							_List_Nil)))));
	});
var $pablohirafuji$elm_markdown$Markdown$InlineParser$codeAutolinkTypeHtmlTagTTM = function (_v21) {
	codeAutolinkTypeHtmlTagTTM:
	while (true) {
		var tokens = _v21.a;
		var model = _v21.b;
		if (!tokens.b) {
			return $pablohirafuji$elm_markdown$Markdown$InlineParser$reverseTokens(model);
		} else {
			var token = tokens.a;
			var tokensTail = tokens.b;
			var _v23 = token.meaning;
			switch (_v23.$) {
				case 'CodeToken':
					var isEscaped = _v23.a;
					return $pablohirafuji$elm_markdown$Markdown$InlineParser$codeAutolinkTypeHtmlTagTTM(
						function (b) {
							return _Utils_Tuple2(tokensTail, b);
						}(
							A2(
								$elm$core$Maybe$withDefault,
								A2($pablohirafuji$elm_markdown$Markdown$InlineParser$addToken, model, token),
								A2(
									$elm$core$Maybe$map,
									A2($pablohirafuji$elm_markdown$Markdown$InlineParser$codeToMatch, token, model),
									A2(
										$pablohirafuji$elm_markdown$Markdown$InlineParser$findToken,
										$pablohirafuji$elm_markdown$Markdown$InlineParser$isCodeTokenPair(token),
										model.tokens)))));
				case 'RightAngleBracket':
					var isEscaped = _v23.a;
					return $pablohirafuji$elm_markdown$Markdown$InlineParser$codeAutolinkTypeHtmlTagTTM(
						function (b) {
							return _Utils_Tuple2(tokensTail, b);
						}(
							A2(
								$pablohirafuji$elm_markdown$Markdown$InlineParser$filterTokens,
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.meaning;
									},
									$elm$core$Basics$neq(
										$pablohirafuji$elm_markdown$Markdown$InlineParser$CharToken(
											_Utils_chr('<')))),
								A2(
									$elm$core$Maybe$withDefault,
									model,
									A2(
										$elm$core$Maybe$andThen,
										A3($pablohirafuji$elm_markdown$Markdown$InlineParser$angleBracketsToMatch, token, isEscaped, model),
										A2(
											$pablohirafuji$elm_markdown$Markdown$InlineParser$findToken,
											A2(
												$elm$core$Basics$composeR,
												function ($) {
													return $.meaning;
												},
												$elm$core$Basics$eq(
													$pablohirafuji$elm_markdown$Markdown$InlineParser$CharToken(
														_Utils_chr('<')))),
											model.tokens))))));
				default:
					var $temp$_v21 = _Utils_Tuple2(
						tokensTail,
						A2($pablohirafuji$elm_markdown$Markdown$InlineParser$addToken, model, token));
					_v21 = $temp$_v21;
					continue codeAutolinkTypeHtmlTagTTM;
			}
		}
	}
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$codeToMatch = F3(
	function (closeToken, model, _v20) {
		var openToken = _v20.a;
		var remainTokens = _v20.c;
		var updtOpenToken = _Utils_eq(
			openToken.meaning,
			$pablohirafuji$elm_markdown$Markdown$InlineParser$CodeToken(true)) ? _Utils_update(
			openToken,
			{index: openToken.index + 1, length: openToken.length - 1}) : openToken;
		return _Utils_update(
			model,
			{
				matches: A2(
					$elm$core$List$cons,
					A6($pablohirafuji$elm_markdown$Markdown$InlineParser$tokenPairToMatch, model, $pablohirafuji$elm_markdown$Markdown$Helpers$cleanWhitespaces, $pablohirafuji$elm_markdown$Markdown$InlineParser$CodeType, updtOpenToken, closeToken, _List_Nil),
					model.matches),
				tokens: remainTokens
			});
	});
var $pablohirafuji$elm_markdown$Markdown$InlineParser$emphasisTTM = function (_v16) {
	emphasisTTM:
	while (true) {
		var tokens = _v16.a;
		var model = _v16.b;
		if (!tokens.b) {
			return $pablohirafuji$elm_markdown$Markdown$InlineParser$reverseTokens(model);
		} else {
			var token = tokens.a;
			var tokensTail = tokens.b;
			var _v18 = token.meaning;
			if (_v18.$ === 'EmphasisToken') {
				var _char = _v18.a;
				var _v19 = _v18.b;
				var leftRank = _v19.a;
				var rightRank = _v19.b;
				if (_Utils_eq(leftRank, rightRank)) {
					if ((!(!rightRank)) && ((!_Utils_eq(
						_char,
						_Utils_chr('_'))) || (rightRank === 1))) {
						return $pablohirafuji$elm_markdown$Markdown$InlineParser$emphasisTTM(
							A2(
								$elm$core$Maybe$withDefault,
								_Utils_Tuple2(
									tokensTail,
									A2($pablohirafuji$elm_markdown$Markdown$InlineParser$addToken, model, token)),
								A2(
									$elm$core$Maybe$map,
									A3($pablohirafuji$elm_markdown$Markdown$InlineParser$emphasisToMatch, token, tokensTail, model),
									A2(
										$pablohirafuji$elm_markdown$Markdown$InlineParser$findToken,
										$pablohirafuji$elm_markdown$Markdown$InlineParser$isOpenEmphasisToken(token),
										model.tokens))));
					} else {
						var $temp$_v16 = _Utils_Tuple2(tokensTail, model);
						_v16 = $temp$_v16;
						continue emphasisTTM;
					}
				} else {
					if (_Utils_cmp(leftRank, rightRank) < 0) {
						var $temp$_v16 = _Utils_Tuple2(
							tokensTail,
							A2($pablohirafuji$elm_markdown$Markdown$InlineParser$addToken, model, token));
						_v16 = $temp$_v16;
						continue emphasisTTM;
					} else {
						return $pablohirafuji$elm_markdown$Markdown$InlineParser$emphasisTTM(
							A2(
								$elm$core$Maybe$withDefault,
								_Utils_Tuple2(tokensTail, model),
								A2(
									$elm$core$Maybe$map,
									A3($pablohirafuji$elm_markdown$Markdown$InlineParser$emphasisToMatch, token, tokensTail, model),
									A2(
										$pablohirafuji$elm_markdown$Markdown$InlineParser$findToken,
										$pablohirafuji$elm_markdown$Markdown$InlineParser$isOpenEmphasisToken(token),
										model.tokens))));
					}
				}
			} else {
				var $temp$_v16 = _Utils_Tuple2(
					tokensTail,
					A2($pablohirafuji$elm_markdown$Markdown$InlineParser$addToken, model, token));
				_v16 = $temp$_v16;
				continue emphasisTTM;
			}
		}
	}
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$emphasisToMatch = F4(
	function (closeToken, tokensTail, model, _v15) {
		var openToken = _v15.a;
		var innerTokens = _v15.b;
		var remainTokens = _v15.c;
		var remainLength = openToken.length - closeToken.length;
		var updt = (!remainLength) ? {closeToken: closeToken, openToken: openToken, remainTokens: remainTokens, tokensTail: tokensTail} : ((remainLength > 0) ? {
			closeToken: closeToken,
			openToken: _Utils_update(
				openToken,
				{index: openToken.index + remainLength, length: closeToken.length}),
			remainTokens: A2(
				$elm$core$List$cons,
				_Utils_update(
					openToken,
					{length: remainLength}),
				remainTokens),
			tokensTail: tokensTail
		} : {
			closeToken: _Utils_update(
				closeToken,
				{length: openToken.length}),
			openToken: openToken,
			remainTokens: remainTokens,
			tokensTail: A2(
				$elm$core$List$cons,
				_Utils_update(
					closeToken,
					{index: closeToken.index + openToken.length, length: -remainLength}),
				tokensTail)
		});
		var match = A6(
			$pablohirafuji$elm_markdown$Markdown$InlineParser$tokenPairToMatch,
			model,
			function (s) {
				return s;
			},
			$pablohirafuji$elm_markdown$Markdown$InlineParser$EmphasisType(updt.openToken.length),
			updt.openToken,
			updt.closeToken,
			$elm$core$List$reverse(innerTokens));
		return _Utils_Tuple2(
			updt.tokensTail,
			_Utils_update(
				model,
				{
					matches: A2($elm$core$List$cons, match, model.matches),
					tokens: updt.remainTokens
				}));
	});
var $pablohirafuji$elm_markdown$Markdown$InlineParser$htmlElementTTM = function (_v12) {
	htmlElementTTM:
	while (true) {
		var tokens = _v12.a;
		var model = _v12.b;
		if (!tokens.b) {
			return $pablohirafuji$elm_markdown$Markdown$InlineParser$reverseTokens(model);
		} else {
			var token = tokens.a;
			var tokensTail = tokens.b;
			var _v14 = token.meaning;
			if (_v14.$ === 'HtmlToken') {
				var isOpen = _v14.a;
				var htmlModel = _v14.b;
				return ($pablohirafuji$elm_markdown$Markdown$InlineParser$isVoidTag(htmlModel) || (!isOpen)) ? $pablohirafuji$elm_markdown$Markdown$InlineParser$htmlElementTTM(
					function (b) {
						return _Utils_Tuple2(tokensTail, b);
					}(
						A2(
							$pablohirafuji$elm_markdown$Markdown$InlineParser$addMatch,
							model,
							A2(
								$pablohirafuji$elm_markdown$Markdown$InlineParser$tokenToMatch,
								token,
								$pablohirafuji$elm_markdown$Markdown$InlineParser$HtmlType(htmlModel))))) : $pablohirafuji$elm_markdown$Markdown$InlineParser$htmlElementTTM(
					A2(
						$elm$core$Maybe$withDefault,
						function (b) {
							return _Utils_Tuple2(tokensTail, b);
						}(
							A2(
								$pablohirafuji$elm_markdown$Markdown$InlineParser$addMatch,
								model,
								A2(
									$pablohirafuji$elm_markdown$Markdown$InlineParser$tokenToMatch,
									token,
									$pablohirafuji$elm_markdown$Markdown$InlineParser$HtmlType(htmlModel)))),
						A2(
							$elm$core$Maybe$map,
							A3($pablohirafuji$elm_markdown$Markdown$InlineParser$htmlElementToMatch, token, model, htmlModel),
							A2(
								$pablohirafuji$elm_markdown$Markdown$InlineParser$findToken,
								$pablohirafuji$elm_markdown$Markdown$InlineParser$isCloseToken(htmlModel),
								tokensTail))));
			} else {
				var $temp$_v12 = _Utils_Tuple2(
					tokensTail,
					A2($pablohirafuji$elm_markdown$Markdown$InlineParser$addToken, model, token));
				_v12 = $temp$_v12;
				continue htmlElementTTM;
			}
		}
	}
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$htmlElementToMatch = F4(
	function (openToken, model, htmlModel, _v11) {
		var closeToken = _v11.a;
		var innerTokens = _v11.b;
		var remainTokens = _v11.c;
		return _Utils_Tuple2(
			remainTokens,
			_Utils_update(
				model,
				{
					matches: A2(
						$elm$core$List$cons,
						A6(
							$pablohirafuji$elm_markdown$Markdown$InlineParser$tokenPairToMatch,
							model,
							function (s) {
								return s;
							},
							$pablohirafuji$elm_markdown$Markdown$InlineParser$HtmlType(htmlModel),
							openToken,
							closeToken,
							innerTokens),
						model.matches)
				}));
	});
var $pablohirafuji$elm_markdown$Markdown$InlineParser$linkImageTypeTTM = function (_v8) {
	linkImageTypeTTM:
	while (true) {
		var tokens = _v8.a;
		var model = _v8.b;
		if (!tokens.b) {
			return $pablohirafuji$elm_markdown$Markdown$InlineParser$reverseTokens(model);
		} else {
			var token = tokens.a;
			var tokensTail = tokens.b;
			var _v10 = token.meaning;
			if ((_v10.$ === 'CharToken') && (']' === _v10.a.valueOf())) {
				return $pablohirafuji$elm_markdown$Markdown$InlineParser$linkImageTypeTTM(
					A2(
						$elm$core$Maybe$withDefault,
						_Utils_Tuple2(tokensTail, model),
						A2(
							$elm$core$Maybe$andThen,
							A3($pablohirafuji$elm_markdown$Markdown$InlineParser$linkOrImageTypeToMatch, token, tokensTail, model),
							A2($pablohirafuji$elm_markdown$Markdown$InlineParser$findToken, $pablohirafuji$elm_markdown$Markdown$InlineParser$isLinkTypeOrImageOpenToken, model.tokens))));
			} else {
				var $temp$_v8 = _Utils_Tuple2(
					tokensTail,
					A2($pablohirafuji$elm_markdown$Markdown$InlineParser$addToken, model, token));
				_v8 = $temp$_v8;
				continue linkImageTypeTTM;
			}
		}
	}
};
var $pablohirafuji$elm_markdown$Markdown$InlineParser$linkOrImageTypeToMatch = F4(
	function (closeToken, tokensTail, model, _v1) {
		var openToken = _v1.a;
		var innerTokens = _v1.b;
		var remainTokens = _v1.c;
		var tempMatch = function (isLinkType) {
			return A6(
				$pablohirafuji$elm_markdown$Markdown$InlineParser$tokenPairToMatch,
				model,
				function (s) {
					return s;
				},
				isLinkType ? $pablohirafuji$elm_markdown$Markdown$InlineParser$LinkType(
					_Utils_Tuple2('', $elm$core$Maybe$Nothing)) : $pablohirafuji$elm_markdown$Markdown$InlineParser$ImageType(
					_Utils_Tuple2('', $elm$core$Maybe$Nothing)),
				openToken,
				closeToken,
				$elm$core$List$reverse(innerTokens));
		};
		var removeOpenToken = _Utils_Tuple2(
			tokensTail,
			_Utils_update(
				model,
				{
					tokens: _Utils_ap(innerTokens, remainTokens)
				}));
		var remainText = A2($elm$core$String$dropLeft, closeToken.index + 1, model.rawText);
		var linkOpenTokenToInactive = function (model_) {
			var process = function (token) {
				var _v7 = token.meaning;
				if (_v7.$ === 'LinkOpenToken') {
					return _Utils_update(
						token,
						{
							meaning: $pablohirafuji$elm_markdown$Markdown$InlineParser$LinkOpenToken(false)
						});
				} else {
					return token;
				}
			};
			return _Utils_update(
				model_,
				{
					tokens: A2($elm$core$List$map, process, model_.tokens)
				});
		};
		var args = function (isLinkType) {
			return _Utils_Tuple3(
				remainText,
				tempMatch(isLinkType),
				_Utils_update(
					model,
					{tokens: remainTokens}));
		};
		var _v2 = openToken.meaning;
		switch (_v2.$) {
			case 'ImageOpenToken':
				return $elm$core$Result$toMaybe(
					A2(
						$pablohirafuji$elm_markdown$Markdown$Helpers$ifError,
						function (_v4) {
							return $elm$core$Result$Ok(removeOpenToken);
						},
						A2(
							$elm$core$Result$map,
							$pablohirafuji$elm_markdown$Markdown$InlineParser$removeParsedAheadTokens(tokensTail),
							A2(
								$elm$core$Result$andThen,
								$pablohirafuji$elm_markdown$Markdown$InlineParser$checkParsedAheadOverlapping,
								A2(
									$elm$core$Result$mapError,
									function (_v3) {
										return _Utils_Tuple0;
									},
									A2(
										$pablohirafuji$elm_markdown$Markdown$Helpers$ifError,
										$pablohirafuji$elm_markdown$Markdown$InlineParser$checkForRefLinkTypeOrImageType,
										$pablohirafuji$elm_markdown$Markdown$InlineParser$checkForInlineLinkTypeOrImageType(
											args(false))))))));
			case 'LinkOpenToken':
				if (_v2.a) {
					return $elm$core$Result$toMaybe(
						A2(
							$pablohirafuji$elm_markdown$Markdown$Helpers$ifError,
							function (_v6) {
								return $elm$core$Result$Ok(removeOpenToken);
							},
							A2(
								$elm$core$Result$map,
								$pablohirafuji$elm_markdown$Markdown$InlineParser$removeParsedAheadTokens(tokensTail),
								A2(
									$elm$core$Result$map,
									linkOpenTokenToInactive,
									A2(
										$elm$core$Result$andThen,
										$pablohirafuji$elm_markdown$Markdown$InlineParser$checkParsedAheadOverlapping,
										A2(
											$elm$core$Result$mapError,
											function (_v5) {
												return _Utils_Tuple0;
											},
											A2(
												$pablohirafuji$elm_markdown$Markdown$Helpers$ifError,
												$pablohirafuji$elm_markdown$Markdown$InlineParser$checkForRefLinkTypeOrImageType,
												$pablohirafuji$elm_markdown$Markdown$InlineParser$checkForInlineLinkTypeOrImageType(
													args(true)))))))));
				} else {
					return $elm$core$Maybe$Just(removeOpenToken);
				}
			default:
				return $elm$core$Maybe$Nothing;
		}
	});
var $pablohirafuji$elm_markdown$Markdown$InlineParser$tokenPairToMatch = F6(
	function (model, processText, type_, openToken, closeToken, innerTokens) {
		var textStart = openToken.index + openToken.length;
		var textEnd = closeToken.index;
		var start = openToken.index;
		var end = closeToken.index + closeToken.length;
		var match = {
			end: end,
			matches: _List_Nil,
			start: start,
			text: processText(
				A3($elm$core$String$slice, textStart, textEnd, model.rawText)),
			textEnd: textEnd,
			textStart: textStart,
			type_: type_
		};
		var matches = A2(
			$elm$core$List$map,
			function (_v0) {
				var matchModel = _v0.a;
				return A2($pablohirafuji$elm_markdown$Markdown$InlineParser$prepareChildMatch, match, matchModel);
			},
			$pablohirafuji$elm_markdown$Markdown$InlineParser$cyclic$tokensToMatches()(
				_Utils_update(
					model,
					{matches: _List_Nil, tokens: innerTokens})).matches);
		return $pablohirafuji$elm_markdown$Markdown$InlineParser$Match(
			_Utils_update(
				match,
				{matches: matches}));
	});
function $pablohirafuji$elm_markdown$Markdown$InlineParser$cyclic$tokensToMatches() {
	return A2(
		$elm$core$Basics$composeR,
		$pablohirafuji$elm_markdown$Markdown$InlineParser$applyTTM($pablohirafuji$elm_markdown$Markdown$InlineParser$codeAutolinkTypeHtmlTagTTM),
		A2(
			$elm$core$Basics$composeR,
			$pablohirafuji$elm_markdown$Markdown$InlineParser$applyTTM($pablohirafuji$elm_markdown$Markdown$InlineParser$htmlElementTTM),
			A2(
				$elm$core$Basics$composeR,
				$pablohirafuji$elm_markdown$Markdown$InlineParser$applyTTM($pablohirafuji$elm_markdown$Markdown$InlineParser$linkImageTypeTTM),
				A2(
					$elm$core$Basics$composeR,
					$pablohirafuji$elm_markdown$Markdown$InlineParser$applyTTM($pablohirafuji$elm_markdown$Markdown$InlineParser$emphasisTTM),
					$pablohirafuji$elm_markdown$Markdown$InlineParser$applyTTM($pablohirafuji$elm_markdown$Markdown$InlineParser$lineBreakTTM)))));
}
try {
	var $pablohirafuji$elm_markdown$Markdown$InlineParser$tokensToMatches = $pablohirafuji$elm_markdown$Markdown$InlineParser$cyclic$tokensToMatches();
	$pablohirafuji$elm_markdown$Markdown$InlineParser$cyclic$tokensToMatches = function () {
		return $pablohirafuji$elm_markdown$Markdown$InlineParser$tokensToMatches;
	};
} catch ($) {
	throw 'Some top-level definitions from `Markdown.InlineParser` are causing infinite recursion:\n\n  ┌─────┐\n  │    angleBracketsToMatch\n  │     ↓\n  │    tokensToMatches\n  │     ↓\n  │    codeAutolinkTypeHtmlTagTTM\n  │     ↓\n  │    codeToMatch\n  │     ↓\n  │    emphasisTTM\n  │     ↓\n  │    emphasisToMatch\n  │     ↓\n  │    htmlElementTTM\n  │     ↓\n  │    htmlElementToMatch\n  │     ↓\n  │    linkImageTypeTTM\n  │     ↓\n  │    linkOrImageTypeToMatch\n  │     ↓\n  │    tokenPairToMatch\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $pablohirafuji$elm_markdown$Markdown$InlineParser$parse = F3(
	function (options, refs, rawText) {
		return $pablohirafuji$elm_markdown$Markdown$InlineParser$matchesToInlines(
			$pablohirafuji$elm_markdown$Markdown$InlineParser$parseText(
				$pablohirafuji$elm_markdown$Markdown$InlineParser$organizeParserMatches(
					$pablohirafuji$elm_markdown$Markdown$InlineParser$tokensToMatches(
						$pablohirafuji$elm_markdown$Markdown$InlineParser$tokenize(
							A3(
								$pablohirafuji$elm_markdown$Markdown$InlineParser$initParser,
								options,
								refs,
								$elm$core$String$trim(rawText)))))).matches);
	});
var $pablohirafuji$elm_markdown$Markdown$Block$parseInline = F4(
	function (maybeOptions, textAsParagraph, refs, block) {
		var options = A2($elm$core$Maybe$withDefault, $pablohirafuji$elm_markdown$Markdown$Config$defaultOptions, maybeOptions);
		switch (block.$) {
			case 'Heading':
				var rawText = block.a;
				var lvl = block.b;
				return A3(
					$pablohirafuji$elm_markdown$Markdown$Block$Heading,
					rawText,
					lvl,
					A3($pablohirafuji$elm_markdown$Markdown$InlineParser$parse, options, refs, rawText));
			case 'Paragraph':
				var rawText = block.a;
				var inlines = A3($pablohirafuji$elm_markdown$Markdown$InlineParser$parse, options, refs, rawText);
				if ((inlines.b && (inlines.a.$ === 'HtmlInline')) && (!inlines.b.b)) {
					var _v3 = inlines.a;
					return $pablohirafuji$elm_markdown$Markdown$Block$PlainInlines(inlines);
				} else {
					return textAsParagraph ? A2($pablohirafuji$elm_markdown$Markdown$Block$Paragraph, rawText, inlines) : $pablohirafuji$elm_markdown$Markdown$Block$PlainInlines(inlines);
				}
			case 'BlockQuote':
				var blocks = block.a;
				return $pablohirafuji$elm_markdown$Markdown$Block$BlockQuote(
					A3(
						$pablohirafuji$elm_markdown$Markdown$Block$parseInlines,
						maybeOptions,
						true,
						_Utils_Tuple2(refs, blocks)));
			case 'List':
				var model = block.a;
				var items = block.b;
				return A2(
					$pablohirafuji$elm_markdown$Markdown$Block$List,
					model,
					function (a) {
						return A2($elm$core$List$map, a, items);
					}(
						A2(
							$elm$core$Basics$composeL,
							A2($pablohirafuji$elm_markdown$Markdown$Block$parseInlines, maybeOptions, model.isLoose),
							function (b) {
								return _Utils_Tuple2(refs, b);
							})));
			case 'Custom':
				var customBlock = block.a;
				var blocks = block.b;
				return A2(
					$pablohirafuji$elm_markdown$Markdown$Block$Custom,
					customBlock,
					A3(
						$pablohirafuji$elm_markdown$Markdown$Block$parseInlines,
						maybeOptions,
						true,
						_Utils_Tuple2(refs, blocks)));
			default:
				return block;
		}
	});
var $pablohirafuji$elm_markdown$Markdown$Block$parseInlines = F3(
	function (maybeOptions, textAsParagraph, _v0) {
		var refs = _v0.a;
		var blocks = _v0.b;
		return A2(
			$elm$core$List$map,
			A3($pablohirafuji$elm_markdown$Markdown$Block$parseInline, maybeOptions, textAsParagraph, refs),
			blocks);
	});
var $pablohirafuji$elm_markdown$Markdown$Block$dropRefString = F2(
	function (rawText, inlineMatch) {
		var strippedText = A2($elm$core$String$dropLeft, inlineMatch.matchLength, rawText);
		return A2($elm$regex$Regex$contains, $pablohirafuji$elm_markdown$Markdown$Block$blankLineRegex, strippedText) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(strippedText);
	});
var $pablohirafuji$elm_markdown$Markdown$Block$insertLinkMatch = F2(
	function (refs, linkMatch) {
		return A2($elm$core$Dict$member, linkMatch.inside, refs) ? refs : A3(
			$elm$core$Dict$insert,
			linkMatch.inside,
			_Utils_Tuple2(linkMatch.url, linkMatch.maybeTitle),
			refs);
	});
var $pablohirafuji$elm_markdown$Markdown$Block$extractUrlTitleRegex = function (regexMatch) {
	var _v0 = regexMatch.submatches;
	if ((((((_v0.b && (_v0.a.$ === 'Just')) && _v0.b.b) && _v0.b.b.b) && _v0.b.b.b.b) && _v0.b.b.b.b.b) && _v0.b.b.b.b.b.b) {
		var rawText = _v0.a.a;
		var _v1 = _v0.b;
		var maybeRawUrlAngleBrackets = _v1.a;
		var _v2 = _v1.b;
		var maybeRawUrlWithoutBrackets = _v2.a;
		var _v3 = _v2.b;
		var maybeTitleSingleQuotes = _v3.a;
		var _v4 = _v3.b;
		var maybeTitleDoubleQuotes = _v4.a;
		var _v5 = _v4.b;
		var maybeTitleParenthesis = _v5.a;
		var toReturn = function (rawUrl) {
			return {
				inside: rawText,
				matchLength: $elm$core$String$length(regexMatch.match),
				maybeTitle: $pablohirafuji$elm_markdown$Markdown$Helpers$returnFirstJust(
					_List_fromArray(
						[maybeTitleSingleQuotes, maybeTitleDoubleQuotes, maybeTitleParenthesis])),
				url: rawUrl
			};
		};
		var maybeRawUrl = $pablohirafuji$elm_markdown$Markdown$Helpers$returnFirstJust(
			_List_fromArray(
				[maybeRawUrlAngleBrackets, maybeRawUrlWithoutBrackets]));
		return A2($elm$core$Maybe$map, toReturn, maybeRawUrl);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $pablohirafuji$elm_markdown$Markdown$Block$hrefRegex = '\\s*(?:<([^<>\\s]*)>|([^\\s]*))';
var $pablohirafuji$elm_markdown$Markdown$Block$refRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^\\s*\\[(' + ($pablohirafuji$elm_markdown$Markdown$Helpers$insideSquareBracketRegex + (')\\]:' + ($pablohirafuji$elm_markdown$Markdown$Block$hrefRegex + ($pablohirafuji$elm_markdown$Markdown$Helpers$titleRegex + '\\s*(?![^\\n])'))))));
var $pablohirafuji$elm_markdown$Markdown$Block$maybeLinkMatch = function (rawText) {
	return A2(
		$elm$core$Maybe$andThen,
		function (linkMatch) {
			return ((linkMatch.url === '') || (linkMatch.inside === '')) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(linkMatch);
		},
		A2(
			$elm$core$Maybe$map,
			function (linkMatch) {
				return _Utils_update(
					linkMatch,
					{
						inside: $pablohirafuji$elm_markdown$Markdown$Helpers$prepareRefLabel(linkMatch.inside)
					});
			},
			A2(
				$elm$core$Maybe$andThen,
				$pablohirafuji$elm_markdown$Markdown$Block$extractUrlTitleRegex,
				$elm$core$List$head(
					A3($elm$regex$Regex$findAtMost, 1, $pablohirafuji$elm_markdown$Markdown$Block$refRegex, rawText)))));
};
var $pablohirafuji$elm_markdown$Markdown$Block$parseReference = F2(
	function (refs, rawText) {
		parseReference:
		while (true) {
			var _v0 = $pablohirafuji$elm_markdown$Markdown$Block$maybeLinkMatch(rawText);
			if (_v0.$ === 'Just') {
				var linkMatch = _v0.a;
				var updtRefs = A2($pablohirafuji$elm_markdown$Markdown$Block$insertLinkMatch, refs, linkMatch);
				var maybeStrippedText = A2($pablohirafuji$elm_markdown$Markdown$Block$dropRefString, rawText, linkMatch);
				if (maybeStrippedText.$ === 'Just') {
					var strippedText = maybeStrippedText.a;
					var $temp$refs = updtRefs,
						$temp$rawText = strippedText;
					refs = $temp$refs;
					rawText = $temp$rawText;
					continue parseReference;
				} else {
					return _Utils_Tuple2(updtRefs, $elm$core$Maybe$Nothing);
				}
			} else {
				return _Utils_Tuple2(
					refs,
					$elm$core$Maybe$Just(rawText));
			}
		}
	});
var $elm$core$Dict$union = F2(
	function (t1, t2) {
		return A3($elm$core$Dict$foldl, $elm$core$Dict$insert, t2, t1);
	});
var $pablohirafuji$elm_markdown$Markdown$Block$parseReferences = function (refs) {
	return A2(
		$elm$core$List$foldl,
		$pablohirafuji$elm_markdown$Markdown$Block$parseReferencesHelp,
		_Utils_Tuple2(refs, _List_Nil));
};
var $pablohirafuji$elm_markdown$Markdown$Block$parseReferencesHelp = F2(
	function (block, _v0) {
		var refs = _v0.a;
		var parsedAST = _v0.b;
		switch (block.$) {
			case 'Paragraph':
				var rawText = block.a;
				var _v2 = A2($pablohirafuji$elm_markdown$Markdown$Block$parseReference, $elm$core$Dict$empty, rawText);
				var paragraphRefs = _v2.a;
				var maybeUpdtText = _v2.b;
				var updtRefs = A2($elm$core$Dict$union, paragraphRefs, refs);
				if (maybeUpdtText.$ === 'Just') {
					var updtText = maybeUpdtText.a;
					return _Utils_Tuple2(
						updtRefs,
						A2(
							$elm$core$List$cons,
							A2($pablohirafuji$elm_markdown$Markdown$Block$Paragraph, updtText, _List_Nil),
							parsedAST));
				} else {
					return _Utils_Tuple2(updtRefs, parsedAST);
				}
			case 'List':
				var model = block.a;
				var items = block.b;
				var _v4 = A3(
					$elm$core$List$foldl,
					F2(
						function (item, _v5) {
							var refs__ = _v5.a;
							var parsedItems = _v5.b;
							return A2(
								$elm$core$Tuple$mapSecond,
								function (a) {
									return A2($elm$core$List$cons, a, parsedItems);
								},
								A2($pablohirafuji$elm_markdown$Markdown$Block$parseReferences, refs__, item));
						}),
					_Utils_Tuple2(refs, _List_Nil),
					items);
				var updtRefs = _v4.a;
				var updtItems = _v4.b;
				return _Utils_Tuple2(
					updtRefs,
					A2(
						$elm$core$List$cons,
						A2($pablohirafuji$elm_markdown$Markdown$Block$List, model, updtItems),
						parsedAST));
			case 'BlockQuote':
				var blocks = block.a;
				return A2(
					$elm$core$Tuple$mapSecond,
					function (a) {
						return A2($elm$core$List$cons, a, parsedAST);
					},
					A2(
						$elm$core$Tuple$mapSecond,
						$pablohirafuji$elm_markdown$Markdown$Block$BlockQuote,
						A2($pablohirafuji$elm_markdown$Markdown$Block$parseReferences, refs, blocks)));
			case 'Custom':
				var customBlock = block.a;
				var blocks = block.b;
				return A2(
					$elm$core$Tuple$mapSecond,
					function (a) {
						return A2($elm$core$List$cons, a, parsedAST);
					},
					A2(
						$elm$core$Tuple$mapSecond,
						$pablohirafuji$elm_markdown$Markdown$Block$Custom(customBlock),
						A2($pablohirafuji$elm_markdown$Markdown$Block$parseReferences, refs, blocks)));
			default:
				return _Utils_Tuple2(
					refs,
					A2($elm$core$List$cons, block, parsedAST));
		}
	});
var $pablohirafuji$elm_markdown$Markdown$Block$parse = function (maybeOptions) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$String$lines,
		A2(
			$elm$core$Basics$composeR,
			function (a) {
				return A2($pablohirafuji$elm_markdown$Markdown$Block$incorporateLines, a, _List_Nil);
			},
			A2(
				$elm$core$Basics$composeR,
				$pablohirafuji$elm_markdown$Markdown$Block$parseReferences($elm$core$Dict$empty),
				A2($pablohirafuji$elm_markdown$Markdown$Block$parseInlines, maybeOptions, true))));
};
var $Orasund$elm_ui_widgets$Internal$Material$List$column = {
	content: {element: _List_Nil, ifFirst: _List_Nil, ifLast: _List_Nil, ifSingleton: _List_Nil, otherwise: _List_Nil},
	elementColumn: _List_fromArray(
		[
			A2($mdgriffith$elm_ui$Element$paddingXY, 0, 8),
			$mdgriffith$elm_ui$Element$spacing(8)
		])
};
var $Orasund$elm_ui_widgets$Widget$Material$column = $Orasund$elm_ui_widgets$Internal$Material$List$column;
var $mdgriffith$elm_ui$Element$newTabLink = F2(
	function (attrs, _v0) {
		var url = _v0.url;
		var label = _v0.label;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$Attr(
							$elm$html$Html$Attributes$target('_blank')),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.link)))),
									attrs)))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $author$project$Main$downloadLink = F2(
	function (attr, l) {
		return A2(
			$mdgriffith$elm_ui$Element$newTabLink,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$Font$color(
					$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor($author$project$Style$palette._default.secondary)),
				attr),
			l);
	});
var $Orasund$elm_ui_widgets$Internal$List$internal = F2(
	function (style, list) {
		return A2(
			$elm$core$List$indexedMap,
			F2(
				function (i, fun) {
					return fun(
						_Utils_ap(
							style.element,
							($elm$core$List$length(list) === 1) ? style.ifSingleton : ((!i) ? style.ifFirst : (_Utils_eq(
								i,
								$elm$core$List$length(list) - 1) ? style.ifLast : style.otherwise))));
				}),
			list);
	});
var $Orasund$elm_ui_widgets$Internal$List$itemList = function (style) {
	return A2(
		$elm$core$Basics$composeR,
		$Orasund$elm_ui_widgets$Internal$List$internal(style.content),
		$mdgriffith$elm_ui$Element$column(style.elementColumn));
};
var $Orasund$elm_ui_widgets$Widget$itemList = function () {
	var fun = $Orasund$elm_ui_widgets$Internal$List$itemList;
	return fun;
}();
var $Orasund$elm_ui_widgets$Internal$Item$toItem = F2(
	function (style, element) {
		return function (attr) {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_Utils_ap(attr, style.element),
				element(style.content));
		};
	});
var $Orasund$elm_ui_widgets$Internal$Item$multiLineItem = F2(
	function (s, _v0) {
		var onPress = _v0.onPress;
		var title = _v0.title;
		var text = _v0.text;
		var icon = _v0.icon;
		var content = _v0.content;
		return A2(
			$Orasund$elm_ui_widgets$Internal$Item$toItem,
			s,
			function (style) {
				return A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_Utils_ap(
						style.elementButton,
						_Utils_eq(onPress, $elm$core$Maybe$Nothing) ? style.ifDisabled : style.otherwise),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$row,
							style.content.elementRow,
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									style.content.content.icon.element,
									icon(style.content.content.icon.content)),
									A2(
									$mdgriffith$elm_ui$Element$column,
									style.content.content.description.elementColumn,
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$paragraph,
											style.content.content.description.content.title.elementText,
											$elm$core$List$singleton(
												$mdgriffith$elm_ui$Element$text(title))),
											A2(
											$mdgriffith$elm_ui$Element$paragraph,
											style.content.content.description.content.text.elementText,
											$elm$core$List$singleton(
												$mdgriffith$elm_ui$Element$text(text)))
										])),
									content(style.content.content.content)
								])),
						onPress: onPress
					});
			});
	});
var $Orasund$elm_ui_widgets$Widget$multiLineItem = function () {
	var fun = $Orasund$elm_ui_widgets$Internal$Item$multiLineItem;
	return fun;
}();
var $Orasund$elm_ui_widgets$Widget$Material$Typography$body1 = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Font$size(16),
		$mdgriffith$elm_ui$Element$Font$letterSpacing(0.5)
	]);
var $Orasund$elm_ui_widgets$Widget$Material$Typography$body2 = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Font$size(14),
		$mdgriffith$elm_ui$Element$Font$letterSpacing(0.25)
	]);
var $Orasund$elm_ui_widgets$Internal$Material$Palette$textGray = function (palette) {
	return A3($Orasund$elm_ui_widgets$Widget$Material$Color$withShade, palette.on.surface, 0.77, palette.surface);
};
var $Orasund$elm_ui_widgets$Internal$Material$Item$multiLineItem = function (palette) {
	return {
		content: {
			content: {
				content: {
					content: {
						color: $Orasund$elm_ui_widgets$Internal$Material$Palette$textGray(palette),
						size: 24
					},
					description: {
						content: {
							text: {
								elementText: _Utils_ap(
									$Orasund$elm_ui_widgets$Widget$Material$Typography$body2,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$color(
											$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
												$Orasund$elm_ui_widgets$Internal$Material$Palette$gray(palette)))
										]))
							},
							title: {elementText: $Orasund$elm_ui_widgets$Widget$Material$Typography$body1}
						},
						elementColumn: _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(4)
							])
					},
					icon: {
						content: {
							color: $Orasund$elm_ui_widgets$Internal$Material$Palette$textGray(palette),
							size: 24
						},
						element: _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(40)),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(24))
							])
					}
				},
				elementRow: _List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(16),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					])
			},
			elementButton: _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$padding(16)
				]),
			ifDisabled: _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$mouseDown(_List_Nil),
					$mdgriffith$elm_ui$Element$mouseOver(_List_Nil),
					$mdgriffith$elm_ui$Element$focused(_List_Nil),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'cursor', 'default'))
				]),
			otherwise: _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$mouseDown(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(
							$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
								A2(
									$Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity,
									$Orasund$elm_ui_widgets$Widget$Material$Color$buttonPressedOpacity,
									$Orasund$elm_ui_widgets$Internal$Material$Palette$gray(palette))))
						])),
					$mdgriffith$elm_ui$Element$focused(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(
							$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
								A2(
									$Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity,
									$Orasund$elm_ui_widgets$Widget$Material$Color$buttonFocusOpacity,
									$Orasund$elm_ui_widgets$Internal$Material$Palette$gray(palette))))
						])),
					$mdgriffith$elm_ui$Element$mouseOver(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(
							$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
								A2(
									$Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity,
									$Orasund$elm_ui_widgets$Widget$Material$Color$buttonHoverOpacity,
									$Orasund$elm_ui_widgets$Internal$Material$Palette$gray(palette))))
						]))
				])
		},
		element: _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$padding(0)
			])
	};
};
var $Orasund$elm_ui_widgets$Widget$Material$multiLineItem = $Orasund$elm_ui_widgets$Internal$Material$Item$multiLineItem;
var $elm$url$Url$Builder$QueryParameter = F2(
	function (a, b) {
		return {$: 'QueryParameter', a: a, b: b};
	});
var $elm$url$Url$Builder$string = F2(
	function (key, value) {
		return A2(
			$elm$url$Url$Builder$QueryParameter,
			$elm$url$Url$percentEncode(key),
			$elm$url$Url$percentEncode(value));
	});
var $author$project$ElmailUrl$remotePart = F3(
	function (session, id, part) {
		return A2(
			$elm$url$Url$Builder$absolute,
			_List_fromArray(
				['mimepart']),
			_List_fromArray(
				[
					A2(
					$elm$url$Url$Builder$string,
					'part',
					$elm$core$String$fromInt(part)),
					A2($elm$url$Url$Builder$string, 'q', id),
					A2(
					$elm$url$Url$Builder$string,
					'user',
					A2(
						$elm$core$Maybe$withDefault,
						'',
						A2(
							$elm$core$Maybe$map,
							function ($) {
								return $.login;
							},
							session.user)))
				]));
	});
var $author$project$Main$remotePart = F3(
	function (session, id, p) {
		var _v0 = _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$height(
				A2($mdgriffith$elm_ui$Element$maximum, 40, $mdgriffith$elm_ui$Element$shrink)),
				$mdgriffith$elm_ui$Element$width(
				A2($mdgriffith$elm_ui$Element$maximum, 40, $mdgriffith$elm_ui$Element$shrink))
			]);
		if ((p.$ === 'MimePart') && (p.b.$ === 'DownloadMime')) {
			var part = p.a;
			var d = p.b.a;
			var url = _Utils_ap(
				$author$project$API$server.host,
				A3(
					$author$project$ElmailUrl$remotePart,
					session,
					$author$project$Query$idString(id),
					part));
			return (d.mime === 'text/html') ? $elm$core$Maybe$Just(
				A2(
					$mdgriffith$elm_ui$Element$row,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							$mdgriffith$elm_ui$Element$none),
							A2(
							$author$project$Main$downloadLink,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$color(
									$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor($author$project$Style$palette._default.primary))
								]),
							{
								label: $mdgriffith$elm_ui$Element$text('html'),
								url: url
							})
						]))) : (A2($elm$core$String$startsWith, 'image', d.mime) ? $elm$core$Maybe$Just(
				A2(
					$author$project$Main$downloadLink,
					_List_Nil,
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$alignBottom,
									$mdgriffith$elm_ui$Element$alignRight,
									$mdgriffith$elm_ui$Element$padding($author$project$Style$two)
								]),
							A2(
								$mdgriffith$elm_ui$Element$image,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									]),
								{
									description: A2($elm$core$Maybe$withDefault, '', d.filename),
									src: url
								})),
						url: url
					})) : $elm$core$Maybe$Just(
				A2(
					$author$project$Main$downloadLink,
					_List_Nil,
					{
						label: A2(
							$Orasund$elm_ui_widgets$Widget$itemList,
							$Orasund$elm_ui_widgets$Widget$Material$column,
							$elm$core$List$singleton(
								A2(
									$Orasund$elm_ui_widgets$Widget$multiLineItem,
									$Orasund$elm_ui_widgets$Widget$Material$multiLineItem($author$project$Style$palette._default),
									{
										content: $elm$core$Basics$always($mdgriffith$elm_ui$Element$none),
										icon: A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$download, $phosphor_icons$phosphor_elm$Phosphor$Thin),
										onPress: $elm$core$Maybe$Nothing,
										text: d.mime,
										title: A2($elm$core$Maybe$withDefault, d.mime, d.filename)
									}))),
						url: url
					})));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $hecrj$html_parser$Html$Parser$Util$toAttribute = function (_v0) {
	var name = _v0.a;
	var value = _v0.b;
	return A2($elm$html$Html$Attributes$attribute, name, value);
};
var $hecrj$html_parser$Html$Parser$Util$toVirtualDom = function (nodes) {
	return A2($elm$core$List$map, $hecrj$html_parser$Html$Parser$Util$toVirtualDomEach, nodes);
};
var $hecrj$html_parser$Html$Parser$Util$toVirtualDomEach = function (node) {
	switch (node.$) {
		case 'Element':
			var name = node.a;
			var attrs = node.b;
			var children = node.c;
			return A3(
				$elm$html$Html$node,
				name,
				A2($elm$core$List$map, $hecrj$html_parser$Html$Parser$Util$toAttribute, attrs),
				$hecrj$html_parser$Html$Parser$Util$toVirtualDom(children));
		case 'Text':
			var s = node.a;
			return $elm$html$Html$text(s);
		default:
			return $elm$html$Html$text('');
	}
};
var $author$project$Main$viewMultiPart = F5(
	function (session, _v0, pa, id, e) {
		switch (e.$) {
			case 'MimePart':
				switch (e.b.$) {
					case 'PlainMime':
						var c = e.b.a;
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$html(
								A2(
									$elm$html$Html$article,
									_List_fromArray(
										[
											A2($elm$html$Html$Attributes$style, 'width', '100%'),
											A2($elm$html$Html$Attributes$style, 'word-wrap', 'break-word'),
											A2($elm$html$Html$Attributes$style, 'white-space', 'pre-wrap'),
											A2($elm$html$Html$Attributes$style, 'word-break', 'break-word')
										]),
									$elm$core$List$concat(
										A2(
											$elm$core$List$map,
											$author$project$Plaintext$customHtmlBlock,
											A2($pablohirafuji$elm_markdown$Markdown$Block$parse, $elm$core$Maybe$Nothing, c)))))
							]);
					case 'HtmlMime':
						var c = e.b.a;
						return _List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_Nil,
								$mdgriffith$elm_ui$Element$html(
									A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												A2($elm$html$Html$Attributes$style, 'white-space', 'normal')
											]),
										$hecrj$html_parser$Html$Parser$Util$toVirtualDom(c))))
							]);
					default:
						return _List_Nil;
				}
			case 'MultiPart':
				switch (e.b.$) {
					case 'Body':
						var _v2 = e.b;
						var l = e.c;
						return $elm$core$List$concat(
							A2(
								$elm$core$List$indexedMap,
								F2(
									function (i, p) {
										return A5(
											$author$project$Main$viewMultiPart,
											session,
											$author$project$Style$paragraphStyle,
											_Utils_update(
												pa,
												{
													rpath: A2($elm$core$List$cons, i, pa.rpath)
												}),
											id,
											p);
									}),
								l));
					case 'Alternative':
						var display = e.b.a.display;
						var parts = e.c;
						return _Utils_ap(
							A2(
								$elm$core$Maybe$withDefault,
								_List_Nil,
								A2(
									$elm$core$Maybe$map,
									function (i) {
										return A2(
											$elm$core$List$filterMap,
											A2($author$project$Main$remotePart, session, i),
											parts);
									},
									id)),
							A2(
								$elm$core$Maybe$withDefault,
								_List_Nil,
								A2(
									$elm$core$Maybe$map,
									A4(
										$author$project$Main$viewMultiPart,
										session,
										$author$project$Style$paragraphStyle,
										_Utils_update(
											pa,
											{
												rpath: A2($elm$core$List$cons, display, pa.rpath)
											}),
										id),
									A2($author$project$ListChange$listGet, display, parts))));
					default:
						var parts = e.c;
						return $elm$core$List$concat(
							A2(
								$elm$core$List$indexedMap,
								F2(
									function (i, p) {
										return A5(
											$author$project$Main$viewMultiPart,
											session,
											$author$project$Style$paragraphStyle,
											_Utils_update(
												pa,
												{
													rpath: A2($elm$core$List$cons, i, pa.rpath)
												}),
											id,
											p);
									}),
								parts));
				}
			default:
				return _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$alignRight]),
							_List_Nil))
					]);
		}
	});
var $author$project$Main$viewMultiPartDownload = F5(
	function (session, q, path, id, e) {
		if (e.$ === 'MultiPart') {
			switch (e.b.$) {
				case 'Body':
					var _v1 = e.b;
					var l = e.c;
					return $elm$core$List$concat(
						A2(
							$elm$core$List$indexedMap,
							F2(
								function (i, p) {
									return A5(
										$author$project$Main$viewMultiPartDownload,
										session,
										q,
										A2($elm$core$List$cons, i, path),
										id,
										p);
								}),
							l));
				case 'Alternative':
					var display = e.b.a.display;
					var parts = e.c;
					return A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						A2(
							$elm$core$Maybe$map,
							A4(
								$author$project$Main$viewMultiPartDownload,
								session,
								q,
								A2($elm$core$List$cons, display, path),
								id),
							A2($author$project$ListChange$listGet, display, parts)));
				default:
					var parts = e.c;
					return $elm$core$List$concat(
						A2(
							$elm$core$List$indexedMap,
							F2(
								function (i, p) {
									return A5(
										$author$project$Main$viewMultiPartDownload,
										session,
										q,
										A2($elm$core$List$cons, i, path),
										id,
										p);
								}),
							parts));
			}
		} else {
			return A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				A2(
					$elm$core$Maybe$map,
					$elm$core$List$singleton,
					A3($author$project$Main$remotePart, session, id, e)));
		}
	});
var $author$project$Style$viewQueryable = F2(
	function (vf, state) {
		return A2(
			vf,
			A3($author$project$Style$annotateQueryable, $elm$core$Maybe$Nothing, state, _List_Nil),
			$author$project$Query$queryable(state));
	});
var $author$project$Main$viewEmail = F6(
	function (symbolf, attrs, s, pa, _v0, mail) {
		var session = $author$project$Main$aggregateSession(pa);
		var persons = A5(
			$author$project$AddressInput$senderRow,
			$author$project$Tags$selectedPersonMatch(s.selected_query),
			function (p) {
				return $elm$core$Maybe$Just(
					$author$project$Main$SelectQuery(
						$author$project$Query$Leaf(
							A2($author$project$Query$Person, $author$project$Query$Participant, p))));
			},
			_List_fromArray(
				[
					_Utils_Tuple2(
					'__delim',
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						$mdgriffith$elm_ui$Element$none)),
					_Utils_Tuple2(
					'__respond',
					s.selection ? A2(
						$Orasund$elm_ui_widgets$Widget$iconButton,
						A2($author$project$Style$denseIconButton, $author$project$Style$pad.dense, $author$project$Style$palette._default),
						{
							icon: A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$chatTeardropText, $phosphor_icons$phosphor_elm$Phosphor$Fill),
							onPress: $elm$core$Maybe$Just(
								$author$project$Main$DraftReplyTo(
									A2(
										$author$project$Access$query.set,
										$author$project$Query$Leaf(
											$author$project$Query$ID(
												$author$project$Query$MessageID(mail.id))),
										$author$project$Main$aggregateSession(pa)))),
							text: 'respond'
						}) : $mdgriffith$elm_ui$Element$none),
					_Utils_Tuple2(
					'__time',
					A2(
						$mdgriffith$elm_ui$Element$el,
						attrs.time,
						$mdgriffith$elm_ui$Element$text(mail.time.date_relative)))
				]),
			s.selection,
			mail.header);
		var id = $elm$core$Maybe$Just(
			$author$project$Query$MessageID(mail.id));
		var bodyparts = A2(
			$author$project$Style$viewQueryable,
			F2(
				function (attrs_, b_) {
					return A2(
						$elm$core$Maybe$withDefault,
						A2($mdgriffith$elm_ui$Element$el, attrs_, $mdgriffith$elm_ui$Element$none),
						A2(
							$elm$core$Maybe$map,
							$mdgriffith$elm_ui$Element$textColumn(
								_Utils_ap(attrs.body, attrs_)),
							A2(
								$elm$core$Maybe$map,
								function (b) {
									return _Utils_ap(
										A5($author$project$Main$viewMultiPart, session, $author$project$Style$paragraphStyle, pa, id, b),
										A2(
											$elm$core$Maybe$withDefault,
											_List_Nil,
											A2(
												$elm$core$Maybe$map,
												function (i) {
													return A5(
														$author$project$Main$viewMultiPartDownload,
														session,
														$author$project$Main$aggregateQuery(pa),
														_List_Nil,
														i,
														b);
												},
												id)));
								},
								b_)));
				}),
			mail.content);
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 0, left: 0, right: 0, top: $author$project$Style$two}),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			A4(
				$author$project$Main$viewVisibilityState,
				s.visibility,
				attrs.elementColumn,
				A4(
					$author$project$Main$subjectAuthorTagheader,
					attrs,
					A2($author$project$Notmuch$abbrevSubject, pa.psubject, pa.subject),
					persons,
					A6($author$project$Main$timeTagRow, $author$project$Main$verbose, symbolf, pa, attrs, _List_Nil, s)),
				bodyparts));
	});
var $author$project$Main$Login = function (a) {
	return {$: 'Login', a: a};
};
var $author$project$Main$MapSearchDisplay = function (a) {
	return {$: 'MapSearchDisplay', a: a};
};
var $author$project$Main$OfflineImap = function (a) {
	return {$: 'OfflineImap', a: a};
};
var $author$project$Main$PostSaveNamedSearch = {$: 'PostSaveNamedSearch'};
var $author$project$Main$RemoveBranch = {$: 'RemoveBranch'};
var $author$project$ElmailUrl$SearchSelection = {$: 'SearchSelection'};
var $author$project$ElmailUrl$Tagger = {$: 'Tagger'};
var $author$project$ElmailUrl$User = {$: 'User'};
var $phosphor_icons$phosphor_elm$Phosphor$arrowClockwise = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('176.2 99.7 224.2 99.7 224.2 51.7'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M190.2,190.2a88,88,0,1,1,0-124.4l34,33.9'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('176.2 99.7 224.2 99.7 224.2 51.7'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M190.2,190.2a88,88,0,1,1,0-124.4l34,33.9'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M232.2,51.7v48a8,8,0,0,1-8,8h-48a8,8,0,0,1-5.7-13.6l18.4-18.4-4.3-4.3a80,80,0,1,0,0,113.2,7.9,7.9,0,0,1,11.3,0,8,8,0,0,1,0,11.3,96,96,0,1,1,0-135.8l4.3,4.3,18.3-18.3a8,8,0,0,1,8.7-1.8A8.2,8.2,0,0,1,232.2,51.7Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('176.2 99.7 224.2 99.7 224.2 51.7'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M190.2,190.2a88,88,0,1,1,0-124.4l34,33.9'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('176.2 99.7 224.2 99.7 224.2 51.7'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M190.2,190.2a88,88,0,1,1,0-124.4l34,33.9'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('176.2 99.7 224.2 99.7 224.2 51.7'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M190.2,190.2a88,88,0,1,1,0-124.4l34,33.9'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $phosphor_icons$phosphor_elm$Phosphor$dotsNine = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('60'),
								$elm$svg$Svg$Attributes$cy('60'),
								$elm$svg$Svg$Attributes$r('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('128'),
								$elm$svg$Svg$Attributes$cy('60'),
								$elm$svg$Svg$Attributes$r('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('196'),
								$elm$svg$Svg$Attributes$cy('60'),
								$elm$svg$Svg$Attributes$r('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('60'),
								$elm$svg$Svg$Attributes$cy('128'),
								$elm$svg$Svg$Attributes$r('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('128'),
								$elm$svg$Svg$Attributes$cy('128'),
								$elm$svg$Svg$Attributes$r('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('196'),
								$elm$svg$Svg$Attributes$cy('128'),
								$elm$svg$Svg$Attributes$r('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('60'),
								$elm$svg$Svg$Attributes$cy('196'),
								$elm$svg$Svg$Attributes$r('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('128'),
								$elm$svg$Svg$Attributes$cy('196'),
								$elm$svg$Svg$Attributes$r('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('196'),
								$elm$svg$Svg$Attributes$cy('196'),
								$elm$svg$Svg$Attributes$r('16')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('60'),
								$elm$svg$Svg$Attributes$cy('60'),
								$elm$svg$Svg$Attributes$r('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('128'),
								$elm$svg$Svg$Attributes$cy('60'),
								$elm$svg$Svg$Attributes$r('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('196'),
								$elm$svg$Svg$Attributes$cy('60'),
								$elm$svg$Svg$Attributes$r('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('60'),
								$elm$svg$Svg$Attributes$cy('128'),
								$elm$svg$Svg$Attributes$r('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('128'),
								$elm$svg$Svg$Attributes$cy('128'),
								$elm$svg$Svg$Attributes$r('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('196'),
								$elm$svg$Svg$Attributes$cy('128'),
								$elm$svg$Svg$Attributes$r('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('60'),
								$elm$svg$Svg$Attributes$cy('196'),
								$elm$svg$Svg$Attributes$r('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('128'),
								$elm$svg$Svg$Attributes$cy('196'),
								$elm$svg$Svg$Attributes$r('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('196'),
								$elm$svg$Svg$Attributes$cy('196'),
								$elm$svg$Svg$Attributes$r('12')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M60,48A12,12,0,1,0,72,60,12,12,0,0,0,60,48Zm68,0a12,12,0,1,0,12,12A12,12,0,0,0,128,48Zm68,24a12,12,0,1,0-12-12A12,12,0,0,0,196,72ZM60,184a12,12,0,1,0,12,12A12,12,0,0,0,60,184Zm68,0a12,12,0,1,0,12,12A12,12,0,0,0,128,184Zm68,0a12,12,0,1,0,12,12A12,12,0,0,0,196,184ZM60,116a12,12,0,1,0,12,12A12,12,0,0,0,60,116Zm68,0a12,12,0,1,0,12,12A12,12,0,0,0,128,116Zm68,0a12,12,0,1,0,12,12A12,12,0,0,0,196,116Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('60'),
								$elm$svg$Svg$Attributes$cy('60'),
								$elm$svg$Svg$Attributes$r('10')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('128'),
								$elm$svg$Svg$Attributes$cy('60'),
								$elm$svg$Svg$Attributes$r('10')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('196'),
								$elm$svg$Svg$Attributes$cy('60'),
								$elm$svg$Svg$Attributes$r('10')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('60'),
								$elm$svg$Svg$Attributes$cy('128'),
								$elm$svg$Svg$Attributes$r('10')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('128'),
								$elm$svg$Svg$Attributes$cy('128'),
								$elm$svg$Svg$Attributes$r('10')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('196'),
								$elm$svg$Svg$Attributes$cy('128'),
								$elm$svg$Svg$Attributes$r('10')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('60'),
								$elm$svg$Svg$Attributes$cy('196'),
								$elm$svg$Svg$Attributes$r('10')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('128'),
								$elm$svg$Svg$Attributes$cy('196'),
								$elm$svg$Svg$Attributes$r('10')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('196'),
								$elm$svg$Svg$Attributes$cy('196'),
								$elm$svg$Svg$Attributes$r('10')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('60'),
								$elm$svg$Svg$Attributes$cy('60'),
								$elm$svg$Svg$Attributes$r('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('128'),
								$elm$svg$Svg$Attributes$cy('60'),
								$elm$svg$Svg$Attributes$r('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('196'),
								$elm$svg$Svg$Attributes$cy('60'),
								$elm$svg$Svg$Attributes$r('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('60'),
								$elm$svg$Svg$Attributes$cy('128'),
								$elm$svg$Svg$Attributes$r('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('128'),
								$elm$svg$Svg$Attributes$cy('128'),
								$elm$svg$Svg$Attributes$r('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('196'),
								$elm$svg$Svg$Attributes$cy('128'),
								$elm$svg$Svg$Attributes$r('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('60'),
								$elm$svg$Svg$Attributes$cy('196'),
								$elm$svg$Svg$Attributes$r('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('128'),
								$elm$svg$Svg$Attributes$cy('196'),
								$elm$svg$Svg$Attributes$r('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('196'),
								$elm$svg$Svg$Attributes$cy('196'),
								$elm$svg$Svg$Attributes$r('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('60'),
								$elm$svg$Svg$Attributes$cy('60'),
								$elm$svg$Svg$Attributes$r('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('128'),
								$elm$svg$Svg$Attributes$cy('60'),
								$elm$svg$Svg$Attributes$r('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('196'),
								$elm$svg$Svg$Attributes$cy('60'),
								$elm$svg$Svg$Attributes$r('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('60'),
								$elm$svg$Svg$Attributes$cy('128'),
								$elm$svg$Svg$Attributes$r('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('128'),
								$elm$svg$Svg$Attributes$cy('128'),
								$elm$svg$Svg$Attributes$r('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('196'),
								$elm$svg$Svg$Attributes$cy('128'),
								$elm$svg$Svg$Attributes$r('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('60'),
								$elm$svg$Svg$Attributes$cy('196'),
								$elm$svg$Svg$Attributes$r('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('128'),
								$elm$svg$Svg$Attributes$cy('196'),
								$elm$svg$Svg$Attributes$r('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('196'),
								$elm$svg$Svg$Attributes$cy('196'),
								$elm$svg$Svg$Attributes$r('12')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $phosphor_icons$phosphor_elm$Phosphor$magnifyingGlass = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('116'),
								$elm$svg$Svg$Attributes$cy('116'),
								$elm$svg$Svg$Attributes$r('84'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('175.4'),
								$elm$svg$Svg$Attributes$y1('175.4'),
								$elm$svg$Svg$Attributes$x2('224'),
								$elm$svg$Svg$Attributes$y2('224'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('116'),
								$elm$svg$Svg$Attributes$cy('116'),
								$elm$svg$Svg$Attributes$r('84'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('116'),
								$elm$svg$Svg$Attributes$cy('116'),
								$elm$svg$Svg$Attributes$r('84'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('175.4'),
								$elm$svg$Svg$Attributes$y1('175.4'),
								$elm$svg$Svg$Attributes$x2('224'),
								$elm$svg$Svg$Attributes$y2('224'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M176,116a60,60,0,1,1-60-60A60,60,0,0,1,176,116Zm53.6,113.7A8,8,0,0,1,224,232a8.3,8.3,0,0,1-5.7-2.3l-43.2-43.3a92.2,92.2,0,1,1,11.3-11.3l43.2,43.2A8,8,0,0,1,229.6,229.7ZM116,192a76,76,0,1,0-76-76A76.1,76.1,0,0,0,116,192Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('116'),
								$elm$svg$Svg$Attributes$cy('116'),
								$elm$svg$Svg$Attributes$r('84'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('175.4'),
								$elm$svg$Svg$Attributes$y1('175.4'),
								$elm$svg$Svg$Attributes$x2('224'),
								$elm$svg$Svg$Attributes$y2('224'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('116'),
								$elm$svg$Svg$Attributes$cy('116'),
								$elm$svg$Svg$Attributes$r('84'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('175.4'),
								$elm$svg$Svg$Attributes$y1('175.4'),
								$elm$svg$Svg$Attributes$x2('224'),
								$elm$svg$Svg$Attributes$y2('224'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('116'),
								$elm$svg$Svg$Attributes$cy('116'),
								$elm$svg$Svg$Attributes$r('84'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('175.4'),
								$elm$svg$Svg$Attributes$y1('175.4'),
								$elm$svg$Svg$Attributes$x2('224'),
								$elm$svg$Svg$Attributes$y2('224'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $author$project$Query$maybeQueryLeaf = function (x) {
	if (x.$ === 'Leaf') {
		var l = x.a;
		return $elm$core$Maybe$Just(l);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Style$mouseFocus = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$mouseDown(
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color(
				$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
					A2(
						$Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity,
						$Orasund$elm_ui_widgets$Widget$Material$Color$buttonPressedOpacity,
						$Orasund$elm_ui_widgets$Widget$Material$gray($author$project$Style$palette._default))))
			])),
		$mdgriffith$elm_ui$Element$focused(
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color(
				$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
					A2(
						$Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity,
						$Orasund$elm_ui_widgets$Widget$Material$Color$buttonFocusOpacity,
						$Orasund$elm_ui_widgets$Widget$Material$gray($author$project$Style$palette._default))))
			])),
		$mdgriffith$elm_ui$Element$mouseOver(
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color(
				$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
					A2(
						$Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity,
						$Orasund$elm_ui_widgets$Widget$Material$Color$buttonHoverOpacity,
						$Orasund$elm_ui_widgets$Widget$Material$gray($author$project$Style$palette._default))))
			]))
	]);
var $phosphor_icons$phosphor_elm$Phosphor$pencil = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('44'),
								$elm$svg$Svg$Attributes$y1('156'),
								$elm$svg$Svg$Attributes$x2('100'),
								$elm$svg$Svg$Attributes$y2('212'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M92.7,216H48a8,8,0,0,1-8-8V163.3a7.9,7.9,0,0,1,2.3-5.6l120-120a8,8,0,0,1,11.4,0l44.6,44.6a8,8,0,0,1,0,11.4l-120,120A7.9,7.9,0,0,1,92.7,216Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('136'),
								$elm$svg$Svg$Attributes$y1('64'),
								$elm$svg$Svg$Attributes$x2('192'),
								$elm$svg$Svg$Attributes$y2('120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('164'),
								$elm$svg$Svg$Attributes$y1('92'),
								$elm$svg$Svg$Attributes$x2('72'),
								$elm$svg$Svg$Attributes$y2('184'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M192,120,136,64l26.3-26.3a8,8,0,0,1,11.4,0l44.6,44.6a8,8,0,0,1,0,11.4Z'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M92.7,216H48a8,8,0,0,1-8-8V163.3a7.9,7.9,0,0,1,2.3-5.6l120-120a8,8,0,0,1,11.4,0l44.6,44.6a8,8,0,0,1,0,11.4l-120,120A7.9,7.9,0,0,1,92.7,216Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('136'),
								$elm$svg$Svg$Attributes$y1('64'),
								$elm$svg$Svg$Attributes$x2('192'),
								$elm$svg$Svg$Attributes$y2('120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('164'),
								$elm$svg$Svg$Attributes$y1('92'),
								$elm$svg$Svg$Attributes$x2('68'),
								$elm$svg$Svg$Attributes$y2('188'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('95.5'),
								$elm$svg$Svg$Attributes$y1('215.5'),
								$elm$svg$Svg$Attributes$x2('40.5'),
								$elm$svg$Svg$Attributes$y2('160.5'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M224,76.7,179.3,32a15.9,15.9,0,0,0-22.6,0L130.3,58.3h0L36.7,152A15.9,15.9,0,0,0,32,163.3V208a16,16,0,0,0,16,16H92.7a15.9,15.9,0,0,0,11.3-4.7l120-120A16.1,16.1,0,0,0,224,76.7ZM51.3,160,144,67.3,160.7,84,68,176.7ZM48,179.3,76.7,208H48Zm48,25.4L79.3,188,172,95.3,188.7,112Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M92.7,216H48a8,8,0,0,1-8-8V163.3a7.9,7.9,0,0,1,2.3-5.6l120-120a8,8,0,0,1,11.4,0l44.6,44.6a8,8,0,0,1,0,11.4l-120,120A7.9,7.9,0,0,1,92.7,216Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('136'),
								$elm$svg$Svg$Attributes$y1('64'),
								$elm$svg$Svg$Attributes$x2('192'),
								$elm$svg$Svg$Attributes$y2('120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('164'),
								$elm$svg$Svg$Attributes$y1('92'),
								$elm$svg$Svg$Attributes$x2('68'),
								$elm$svg$Svg$Attributes$y2('188'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('95.5'),
								$elm$svg$Svg$Attributes$y1('215.5'),
								$elm$svg$Svg$Attributes$x2('40.5'),
								$elm$svg$Svg$Attributes$y2('160.5'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M92.7,216H48a8,8,0,0,1-8-8V163.3a7.9,7.9,0,0,1,2.3-5.6l120-120a8,8,0,0,1,11.4,0l44.6,44.6a8,8,0,0,1,0,11.4l-120,120A7.9,7.9,0,0,1,92.7,216Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('136'),
								$elm$svg$Svg$Attributes$y1('64'),
								$elm$svg$Svg$Attributes$x2('192'),
								$elm$svg$Svg$Attributes$y2('120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('164'),
								$elm$svg$Svg$Attributes$y1('92'),
								$elm$svg$Svg$Attributes$x2('68'),
								$elm$svg$Svg$Attributes$y2('188'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('95.5'),
								$elm$svg$Svg$Attributes$y1('215.5'),
								$elm$svg$Svg$Attributes$x2('40.5'),
								$elm$svg$Svg$Attributes$y2('160.5'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M92.7,216H48a8,8,0,0,1-8-8V163.3a7.9,7.9,0,0,1,2.3-5.6l120-120a8,8,0,0,1,11.4,0l44.6,44.6a8,8,0,0,1,0,11.4l-120,120A7.9,7.9,0,0,1,92.7,216Z'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('136'),
								$elm$svg$Svg$Attributes$y1('64'),
								$elm$svg$Svg$Attributes$x2('192'),
								$elm$svg$Svg$Attributes$y2('120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('164'),
								$elm$svg$Svg$Attributes$y1('92'),
								$elm$svg$Svg$Attributes$x2('68'),
								$elm$svg$Svg$Attributes$y2('188'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('95.5'),
								$elm$svg$Svg$Attributes$y1('215.5'),
								$elm$svg$Svg$Attributes$x2('40.5'),
								$elm$svg$Svg$Attributes$y2('160.5'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $author$project$StyleQuery$positionLeft = $author$project$Annotate$resizer(
	_List_fromArray(
		[
			$author$project$Annotate$scale($author$project$StyleQuery$positionstyle.smaller),
			$author$project$Annotate$left(0.9)
		]));
var $phosphor_icons$phosphor_elm$Phosphor$selection = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('144'),
								$elm$svg$Svg$Attributes$y1('40'),
								$elm$svg$Svg$Attributes$x2('112'),
								$elm$svg$Svg$Attributes$y2('40'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('112'),
								$elm$svg$Svg$Attributes$y1('216'),
								$elm$svg$Svg$Attributes$x2('144'),
								$elm$svg$Svg$Attributes$y2('216'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M184,40h24a8,8,0,0,1,8,8V72'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('216'),
								$elm$svg$Svg$Attributes$y1('144'),
								$elm$svg$Svg$Attributes$x2('216'),
								$elm$svg$Svg$Attributes$y2('112'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M184,216h24a8,8,0,0,0,8-8V184'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('112'),
								$elm$svg$Svg$Attributes$x2('40'),
								$elm$svg$Svg$Attributes$y2('144'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M72,216H48a8,8,0,0,1-8-8V184'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M72,40H48a8,8,0,0,0-8,8V72'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('144'),
								$elm$svg$Svg$Attributes$y1('40'),
								$elm$svg$Svg$Attributes$x2('112'),
								$elm$svg$Svg$Attributes$y2('40'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('112'),
								$elm$svg$Svg$Attributes$y1('216'),
								$elm$svg$Svg$Attributes$x2('144'),
								$elm$svg$Svg$Attributes$y2('216'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M184,40h24a8,8,0,0,1,8,8V72'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('216'),
								$elm$svg$Svg$Attributes$y1('144'),
								$elm$svg$Svg$Attributes$x2('216'),
								$elm$svg$Svg$Attributes$y2('112'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M184,216h24a8,8,0,0,0,8-8V184'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('112'),
								$elm$svg$Svg$Attributes$x2('40'),
								$elm$svg$Svg$Attributes$y2('144'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M72,216H48a8,8,0,0,1-8-8V184'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M72,40H48a8,8,0,0,0-8,8V72'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M152,40a8,8,0,0,1-8,8H112a8,8,0,0,1,0-16h32A8,8,0,0,1,152,40Zm-8,168H112a8,8,0,0,0,0,16h32a8,8,0,0,0,0-16ZM208,32H184a8,8,0,0,0,0,16h24V72a8,8,0,0,0,16,0V48A16,16,0,0,0,208,32Zm8,72a8,8,0,0,0-8,8v32a8,8,0,0,0,16,0V112A8,8,0,0,0,216,104Zm0,72a8,8,0,0,0-8,8v24H184a8,8,0,0,0,0,16h24a16,16,0,0,0,16-16V184A8,8,0,0,0,216,176ZM40,152a8,8,0,0,0,8-8V112a8,8,0,0,0-16,0v32A8,8,0,0,0,40,152Zm32,56H48V184a8,8,0,0,0-16,0v24a16,16,0,0,0,16,16H72a8,8,0,0,0,0-16ZM72,32H48A16,16,0,0,0,32,48V72a8,8,0,0,0,16,0V48H72a8,8,0,0,0,0-16Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('144'),
								$elm$svg$Svg$Attributes$y1('40'),
								$elm$svg$Svg$Attributes$x2('112'),
								$elm$svg$Svg$Attributes$y2('40'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('112'),
								$elm$svg$Svg$Attributes$y1('216'),
								$elm$svg$Svg$Attributes$x2('144'),
								$elm$svg$Svg$Attributes$y2('216'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M184,40h24a8,8,0,0,1,8,8V72'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('216'),
								$elm$svg$Svg$Attributes$y1('144'),
								$elm$svg$Svg$Attributes$x2('216'),
								$elm$svg$Svg$Attributes$y2('112'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M184,216h24a8,8,0,0,0,8-8V184'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('112'),
								$elm$svg$Svg$Attributes$x2('40'),
								$elm$svg$Svg$Attributes$y2('144'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M72,216H48a8,8,0,0,1-8-8V184'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M72,40H48a8,8,0,0,0-8,8V72'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('144'),
								$elm$svg$Svg$Attributes$y1('40'),
								$elm$svg$Svg$Attributes$x2('112'),
								$elm$svg$Svg$Attributes$y2('40'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('112'),
								$elm$svg$Svg$Attributes$y1('216'),
								$elm$svg$Svg$Attributes$x2('144'),
								$elm$svg$Svg$Attributes$y2('216'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M184,40h24a8,8,0,0,1,8,8V72'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('216'),
								$elm$svg$Svg$Attributes$y1('144'),
								$elm$svg$Svg$Attributes$x2('216'),
								$elm$svg$Svg$Attributes$y2('112'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M184,216h24a8,8,0,0,0,8-8V184'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('112'),
								$elm$svg$Svg$Attributes$x2('40'),
								$elm$svg$Svg$Attributes$y2('144'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M72,216H48a8,8,0,0,1-8-8V184'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M72,40H48a8,8,0,0,0-8,8V72'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('144'),
								$elm$svg$Svg$Attributes$y1('40'),
								$elm$svg$Svg$Attributes$x2('112'),
								$elm$svg$Svg$Attributes$y2('40'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('112'),
								$elm$svg$Svg$Attributes$y1('216'),
								$elm$svg$Svg$Attributes$x2('144'),
								$elm$svg$Svg$Attributes$y2('216'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M184,40h24a8,8,0,0,1,8,8V72'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('216'),
								$elm$svg$Svg$Attributes$y1('144'),
								$elm$svg$Svg$Attributes$x2('216'),
								$elm$svg$Svg$Attributes$y2('112'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M184,216h24a8,8,0,0,0,8-8V184'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('112'),
								$elm$svg$Svg$Attributes$x2('40'),
								$elm$svg$Svg$Attributes$y2('144'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M72,216H48a8,8,0,0,1-8-8V184'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M72,40H48a8,8,0,0,0-8,8V72'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $phosphor_icons$phosphor_elm$Phosphor$textbox = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('112'),
								$elm$svg$Svg$Attributes$y1('48'),
								$elm$svg$Svg$Attributes$x2('112'),
								$elm$svg$Svg$Attributes$y2('208'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M152,72h80a8,8,0,0,1,8,8v96a8,8,0,0,1-8,8H152'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M112,184H24a8,8,0,0,1-8-8V80a8,8,0,0,1,8-8h88'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('50'),
								$elm$svg$Svg$Attributes$y1('112'),
								$elm$svg$Svg$Attributes$x2('78'),
								$elm$svg$Svg$Attributes$y2('112'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('64'),
								$elm$svg$Svg$Attributes$y1('112'),
								$elm$svg$Svg$Attributes$x2('64'),
								$elm$svg$Svg$Attributes$y2('148'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$rect,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x('16'),
								$elm$svg$Svg$Attributes$y('72'),
								$elm$svg$Svg$Attributes$width('224'),
								$elm$svg$Svg$Attributes$height('112'),
								$elm$svg$Svg$Attributes$rx('8'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('112'),
								$elm$svg$Svg$Attributes$y1('48'),
								$elm$svg$Svg$Attributes$x2('112'),
								$elm$svg$Svg$Attributes$y2('208'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M144,72h88a8,8,0,0,1,8,8v96a8,8,0,0,1-8,8H144'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M112,184H24a8,8,0,0,1-8-8V80a8,8,0,0,1,8-8h88'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('50'),
								$elm$svg$Svg$Attributes$y1('112'),
								$elm$svg$Svg$Attributes$x2('78'),
								$elm$svg$Svg$Attributes$y2('112'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('64'),
								$elm$svg$Svg$Attributes$y1('112'),
								$elm$svg$Svg$Attributes$x2('64'),
								$elm$svg$Svg$Attributes$y2('148'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M248,80v96a16,16,0,0,1-16,16H144a8,8,0,0,1-8-8V72a8,8,0,0,1,8-8h88A16,16,0,0,1,248,80ZM120,48V208a8,8,0,0,1-16,0V192H24A16,16,0,0,1,8,176V80A16,16,0,0,1,24,64h80V48a8,8,0,0,1,16,0ZM86,112a8,8,0,0,0-8-8H50a8,8,0,0,0,0,16h6v28a8,8,0,0,0,16,0V120h6A8,8,0,0,0,86,112Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('112'),
								$elm$svg$Svg$Attributes$y1('48'),
								$elm$svg$Svg$Attributes$x2('112'),
								$elm$svg$Svg$Attributes$y2('208'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M144,72h88a8,8,0,0,1,8,8v96a8,8,0,0,1-8,8H144'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M112,184H24a8,8,0,0,1-8-8V80a8,8,0,0,1,8-8h88'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('50'),
								$elm$svg$Svg$Attributes$y1('112'),
								$elm$svg$Svg$Attributes$x2('78'),
								$elm$svg$Svg$Attributes$y2('112'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('64'),
								$elm$svg$Svg$Attributes$y1('112'),
								$elm$svg$Svg$Attributes$x2('64'),
								$elm$svg$Svg$Attributes$y2('148'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('112'),
								$elm$svg$Svg$Attributes$y1('48'),
								$elm$svg$Svg$Attributes$x2('112'),
								$elm$svg$Svg$Attributes$y2('208'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M144,72h88a8,8,0,0,1,8,8v96a8,8,0,0,1-8,8H144'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M112,184H24a8,8,0,0,1-8-8V80a8,8,0,0,1,8-8h88'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('50'),
								$elm$svg$Svg$Attributes$y1('112'),
								$elm$svg$Svg$Attributes$x2('78'),
								$elm$svg$Svg$Attributes$y2('112'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('64'),
								$elm$svg$Svg$Attributes$y1('112'),
								$elm$svg$Svg$Attributes$x2('64'),
								$elm$svg$Svg$Attributes$y2('148'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('112'),
								$elm$svg$Svg$Attributes$y1('48'),
								$elm$svg$Svg$Attributes$x2('112'),
								$elm$svg$Svg$Attributes$y2('208'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M144,72h88a8,8,0,0,1,8,8v96a8,8,0,0,1-8,8H144'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M112,184H24a8,8,0,0,1-8-8V80a8,8,0,0,1,8-8h88'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('50'),
								$elm$svg$Svg$Attributes$y1('112'),
								$elm$svg$Svg$Attributes$x2('78'),
								$elm$svg$Svg$Attributes$y2('112'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('64'),
								$elm$svg$Svg$Attributes$y1('112'),
								$elm$svg$Svg$Attributes$x2('64'),
								$elm$svg$Svg$Attributes$y2('148'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $author$project$Access$view = {
	get: function ($) {
		return $.view;
	},
	set: F2(
		function (value, h) {
			return _Utils_update(
				h,
				{view: value});
		})
};
var $phosphor_icons$phosphor_elm$Phosphor$linuxLogo = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('104'),
								$elm$svg$Svg$Attributes$cy('112'),
								$elm$svg$Svg$Attributes$r('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('152'),
								$elm$svg$Svg$Attributes$cy('112'),
								$elm$svg$Svg$Attributes$r('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('156 152 128 164 100 152'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M101.5,212a47.9,47.9,0,0,1,53,0'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M36.2,212S60,160,60,104a68,68,0,0,1,136,0c0,56,23.8,108,23.8,108'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M169.6,216a48.1,48.1,0,0,0-83.2,0H32S64,160,64,96a64,64,0,0,1,128,0c0,64,32,120,32,120Z'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,216S64,160,64,96a64,64,0,0,1,128,0c0,64,32,120,32,120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('100'),
								$elm$svg$Svg$Attributes$cy('108'),
								$elm$svg$Svg$Attributes$r('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('156'),
								$elm$svg$Svg$Attributes$cy('108'),
								$elm$svg$Svg$Attributes$r('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('160 144 128 160 96 144'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M86.4,216a48.1,48.1,0,0,1,83.2,0'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M161.2,217.7a4,4,0,0,1-3.3,6.3H98.1a4,4,0,0,1-3.3-6.3,40,40,0,0,1,66.4,0Zm68.6,3.8a8.2,8.2,0,0,1-6,2.5H184.6a4.1,4.1,0,0,1-3.8-2.7,56,56,0,0,0-105.6,0,4.1,4.1,0,0,1-3.8,2.7H32.2a8,8,0,0,1-6-2.5,7.9,7.9,0,0,1-1.1-9.5c.3-.5,30.9-55,30.9-116a72.1,72.1,0,0,1,72.5-72c39.6.3,71.4,32.9,71.5,72.5.2,60.8,30.6,115,30.9,115.5A7.9,7.9,0,0,1,229.8,221.5ZM88,108a12,12,0,1,0,12-12A12,12,0,0,0,88,108Zm79.2,32.4a8.2,8.2,0,0,0-10.8-3.6L128,151.1,99.6,136.8a8,8,0,1,0-7.2,14.4l32,16a8.5,8.5,0,0,0,7.2,0l32-16A8.2,8.2,0,0,0,167.2,140.4ZM168,108a12,12,0,1,0-12,12A12,12,0,0,0,168,108Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,216S64,160,64,96a64,64,0,0,1,128,0c0,64,32,120,32,120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('100'),
								$elm$svg$Svg$Attributes$cy('108'),
								$elm$svg$Svg$Attributes$r('10')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('156'),
								$elm$svg$Svg$Attributes$cy('108'),
								$elm$svg$Svg$Attributes$r('10')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('160 144 128 160 96 144'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M86.4,216a48.1,48.1,0,0,1,83.2,0'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,216S64,160,64,96a64,64,0,0,1,128,0c0,64,32,120,32,120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('100'),
								$elm$svg$Svg$Attributes$cy('108'),
								$elm$svg$Svg$Attributes$r('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('156'),
								$elm$svg$Svg$Attributes$cy('108'),
								$elm$svg$Svg$Attributes$r('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('160 144 128 160 96 144'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M86.4,216a48.1,48.1,0,0,1,83.2,0'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M32,216S64,160,64,96a64,64,0,0,1,128,0c0,64,32,120,32,120'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('100'),
								$elm$svg$Svg$Attributes$cy('108'),
								$elm$svg$Svg$Attributes$r('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('156'),
								$elm$svg$Svg$Attributes$cy('108'),
								$elm$svg$Svg$Attributes$r('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polyline,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('160 144 128 160 96 144'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M86.4,216a48.1,48.1,0,0,1,83.2,0'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $author$project$Symbol$map = F2(
	function (f, i) {
		switch (i.$) {
			case 'IconSymbol':
				var i_ = i.a;
				return $author$project$Symbol$IconSymbol(
					function (is) {
						return A2(
							$mdgriffith$elm_ui$Element$map,
							f,
							i_(is));
					});
			case 'Unicode':
				var u = i.a;
				return $author$project$Symbol$Unicode(u);
			default:
				var i_ = i.a;
				return $author$project$Symbol$Image(i_);
		}
	});
var $author$project$Main$viewLogin = F3(
	function (prefericon, msg, user) {
		var userButton = function (u) {
			return {
				icon: $author$project$Symbol$icon(
					A2(
						$author$project$Symbol$map,
						$elm$core$Basics$always(
							$author$project$Main$Global($author$project$Main$Noop)),
						u.avatar)),
				onPress: msg(
					$elm$core$Maybe$Just(u)),
				text: u.login
			};
		};
		var root = {
			icon: A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$linuxLogo, $phosphor_icons$phosphor_elm$Phosphor$Thin),
			onPress: msg($elm$core$Maybe$Nothing),
			text: 'SYSTEM'
		};
		var btn = prefericon ? $Orasund$elm_ui_widgets$Widget$iconButton(
			A2($author$project$Style$denseIconButton, $author$project$Style$pad.densest, $author$project$Style$palette._default)) : $Orasund$elm_ui_widgets$Widget$button(
			A2($author$project$Style$denseTextButton, $author$project$Style$pad.densest, $author$project$Style$palette._default));
		return btn(
			A2(
				$elm$core$Maybe$withDefault,
				root,
				A2($elm$core$Maybe$map, userButton, user)));
	});
var $author$project$Grid$Center = {$: 'Center'};
var $author$project$Grid$Inside = {$: 'Inside'};
var $author$project$Grid$Intersperse = {$: 'Intersperse'};
var $author$project$Grid$Wire = function (a) {
	return {$: 'Wire', a: a};
};
var $author$project$QueryEditor$defaultLayout = function (n) {
	var defaultWireStyle = $author$project$Grid$Wire(
		{
			border_width: 1,
			color: $Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
				A3(
					$Orasund$elm_ui_widgets$Widget$Material$Color$withShade,
					$author$project$Style$palette._default.primary,
					$Orasund$elm_ui_widgets$Widget$Material$Color$buttonHoverOpacity,
					A2($Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity, 0.14, $author$project$Style$palette._default.on.surface))),
			elementContainer: _List_fromArray(
				[$mdgriffith$elm_ui$Element$alignTop]),
			tick_length: $author$project$Style$fontsize.one,
			tick_position: $author$project$Grid$Center,
			tick_width: 1
		});
	if (n.$ === 'Operator') {
		var op = n.a;
		var _v1 = op.op;
		switch (_v1.$) {
			case 'Not':
				return {
					cardChildrenStyle: _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					childrenContainer: $elm$core$Maybe$Just(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							])),
					layout: _Utils_Tuple2($author$project$Grid$Row, true),
					position: $author$project$Grid$WireOverlay,
					wire_children: _Utils_Tuple2(false, false),
					wirestyle: $author$project$Tree$branchColumn
				};
			case 'And':
				return {
					cardChildrenStyle: _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					childrenContainer: $elm$core$Maybe$Just(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							])),
					layout: _Utils_Tuple2($author$project$Grid$WrappedRow, true),
					position: $author$project$Grid$Intersperse,
					wire_children: _Utils_Tuple2(false, false),
					wirestyle: defaultWireStyle
				};
			default:
				return {
					cardChildrenStyle: _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					childrenContainer: $elm$core$Maybe$Just(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							])),
					layout: _Utils_Tuple2($author$project$Grid$WrappedRow, true),
					position: $author$project$Grid$Intersperse,
					wire_children: _Utils_Tuple2(false, false),
					wirestyle: defaultWireStyle
				};
		}
	} else {
		return {
			cardChildrenStyle: _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			childrenContainer: $elm$core$Maybe$Just(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					])),
			layout: _Utils_Tuple2($author$project$Grid$Row, true),
			position: $author$project$Grid$Inside,
			wire_children: _Utils_Tuple2(false, false),
			wirestyle: $author$project$Tree$branchColumn
		};
	}
};
var $author$project$QueryEditor$operatorAcc = F2(
	function (_v0, o) {
		var i = _v0.a;
		var q_ = _v0.b;
		if (q_.$ === 'Operator') {
			var op = q_.a;
			return {
				operators: A2(
					$elm$core$List$cons,
					$elm$core$Maybe$Just(op.op),
					o.operators),
				rpath: A2($elm$core$List$cons, i, o.rpath),
				subqueries: op.subqueries
			};
		} else {
			return _Utils_update(
				o,
				{
					operators: A2($elm$core$List$cons, $elm$core$Maybe$Nothing, o.operators),
					rpath: A2($elm$core$List$cons, i, o.rpath),
					subqueries: o.subqueries
				});
		}
	});
var $author$project$QueryEditor$rootAgg = {
	operators: _List_Nil,
	rpath: _List_Nil,
	subqueries: A2(
		$elm$core$List$map,
		$author$project$Query$Tag,
		_List_fromArray(
			['flagged', 'unread', 'inbox', 'spam']))
};
var $author$project$Tree$treeAggregate = F3(
	function (g, siblings, acc) {
		return {aggregate: acc, children: g, fontsize: 16.0, parent: g, scale: 1.0, siblings: siblings};
	});
var $author$project$QueryEditor$MapEditor = function (a) {
	return {$: 'MapEditor', a: a};
};
var $author$project$ListChange$consIf = F3(
	function (b, h, l) {
		return b ? A2($elm$core$List$cons, h, l) : l;
	});
var $author$project$Lazy$Tree$children = A2(
	$elm$core$Basics$composeL,
	A2(
		$elm$core$Basics$composeL,
		$elm$core$List$map($author$project$Lazy$Tree$item),
		$author$project$Lazy$LList$toList),
	$author$project$Lazy$Tree$descendants);
var $author$project$Lazy$Tree$Zipper$children = A2($elm$core$Basics$composeL, $author$project$Lazy$Tree$children, $author$project$Lazy$Tree$Zipper$getTree);
var $author$project$QueryEditor$deleteSingletonOperators = function (x) {
	var _v0 = $author$project$Show$current(x);
	if (_v0.$ === 'Operator') {
		var _v1 = $author$project$Lazy$Tree$Zipper$children(x);
		if (_v1.b && (!_v1.b.b)) {
			var newtree = A2(
				$elm$core$Maybe$map,
				$author$project$Lazy$Tree$Zipper$getTree,
				A2(
					$author$project$Lazy$Tree$Zipper$open,
					$elm$core$Basics$always(true),
					x));
			return A2(
				$elm$core$Maybe$withDefault,
				x,
				A2(
					$elm$core$Maybe$map,
					function (t) {
						return A2($author$project$Show$setTree, t, x);
					},
					newtree));
		} else {
			return x;
		}
	} else {
		return x;
	}
};
var $author$project$Lazy$LList$isEmpty = A2($elm$core$Basics$composeL, $elm$core$List$isEmpty, $author$project$Lazy$LList$toList);
var $author$project$QueryEditor$deleteEmptyOperators = function (x) {
	var md = A2(
		$elm$core$Maybe$withDefault,
		x,
		A2(
			$elm$core$Maybe$map,
			$author$project$QueryEditor$deleteSingletonOperators,
			A2(
				$elm$core$Maybe$map,
				$author$project$QueryEditor$deleteEmptyOperators,
				$author$project$Lazy$Tree$Zipper$delete(x))));
	var _v0 = $author$project$Show$current(x);
	if (_v0.$ === 'Operator') {
		return $author$project$Lazy$LList$isEmpty(
			$author$project$Lazy$Tree$descendants(
				$author$project$Lazy$Tree$Zipper$getTree(x))) ? md : x;
	} else {
		return x;
	}
};
var $author$project$Lazy$LList$sortBy = function (predicate) {
	return $author$project$Lazy$map(
		$elm$core$List$sortBy(predicate));
};
var $author$project$Lazy$Tree$sortBy = F2(
	function (predicate, _v0) {
		var a = _v0.a;
		var f = _v0.b;
		return A2(
			$author$project$Lazy$Tree$Tree,
			a,
			A2(
				$author$project$Lazy$LList$map,
				$author$project$Lazy$Tree$sortBy(predicate),
				A2(
					$author$project$Lazy$LList$sortBy,
					A2($elm$core$Basics$composeL, predicate, $author$project$Lazy$Tree$item),
					f)));
	});
var $author$project$Show$length = function (z) {
	return $author$project$Lazy$LList$length(
		$author$project$Lazy$Tree$descendants(
			$author$project$Lazy$Tree$Zipper$getTree(z)));
};
var $author$project$QueryEditor$withFocus = F2(
	function (rsub, z) {
		var _v0 = A3(
			$elm$core$List$foldl,
			F2(
				function (i, _v1) {
					var z__ = _v1.a;
					var r = _v1.b;
					return A2(
						$elm$core$Maybe$withDefault,
						_Utils_Tuple2(z__, r),
						A2(
							$elm$core$Maybe$map,
							function (z_) {
								if (i < 0) {
									var i_ = $author$project$Show$length(z);
									return _Utils_Tuple2(
										A2($author$project$Show$openIndex, i_ + i, z_),
										A2($elm$core$List$cons, i_ + i, r));
								} else {
									return _Utils_Tuple2(
										A2($author$project$Show$openIndex, i, z_),
										A2($elm$core$List$cons, i, r));
								}
							},
							z__));
				}),
			_Utils_Tuple2(
				$elm$core$Maybe$Just(z),
				_List_Nil),
			rsub);
		var rsub_ = _v0.b;
		return _Utils_Tuple2(
			z,
			$elm$core$Maybe$Just(
				_Utils_ap(
					$elm$core$List$reverse(rsub_),
					$elm$core$List$reverse(
						A2($author$project$Lazy$Tree$Zipper$getPath, $author$project$Show$index, z)))));
	});
var $author$project$QueryEditor$deleteNode = function (z) {
	return A2(
		$elm$core$Maybe$withDefault,
		_Utils_Tuple2(
			A2(
				$author$project$Show$updateItem,
				$elm$core$Basics$always(
					$author$project$QueryEditor$Free('')),
				z),
			$elm$core$Maybe$Just(
				_List_fromArray(
					[0]))),
		A2(
			$elm$core$Maybe$map,
			$author$project$QueryEditor$withFocus(
				_List_fromArray(
					[-1])),
			A2(
				$elm$core$Maybe$map,
				function (z_) {
					return A2(
						$author$project$Lazy$Tree$Zipper$setTree,
						A2(
							$author$project$Lazy$Tree$sortBy,
							$author$project$Show$index,
							$author$project$Lazy$Tree$Zipper$getTree(z_)),
						z_);
				},
				A2(
					$elm$core$Maybe$map,
					$author$project$QueryEditor$deleteEmptyOperators,
					$author$project$Lazy$Tree$Zipper$delete(z)))));
};
var $author$project$Query$equalLeaf = F2(
	function (x, y) {
		var _v0 = _Utils_Tuple2(x, y);
		_v0$2:
		while (true) {
			switch (_v0.a.$) {
				case 'Tag':
					if (_v0.b.$ === 'Tag') {
						var a = _v0.a.a;
						var b = _v0.b.a;
						return _Utils_eq(a, b);
					} else {
						break _v0$2;
					}
				case 'Person':
					if (_v0.b.$ === 'Person') {
						var _v1 = _v0.a;
						var a = _v1.b;
						var _v2 = _v0.b;
						var b = _v2.b;
						return A2($author$project$Person$match, a, b);
					} else {
						break _v0$2;
					}
				default:
					break _v0$2;
			}
		}
		return _Utils_eq(x, y);
	});
var $phosphor_icons$phosphor_elm$Phosphor$arrowFatLineRight = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polygon,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('136 32 232 128 136 224 136 176 80 176 80 80 136 80 136 32'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('176'),
								$elm$svg$Svg$Attributes$x2('40'),
								$elm$svg$Svg$Attributes$y2('80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polygon,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('136 32 232 128 136 224 136 176 72 176 72 80 136 80 136 32'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$polygon,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('136 32 232 128 136 224 136 176 72 176 72 80 136 80 136 32'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('176'),
								$elm$svg$Svg$Attributes$x2('40'),
								$elm$svg$Svg$Attributes$y2('80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M132.9,231.4A8,8,0,0,1,128,224V184H72a8,8,0,0,1-8-8V80a8,8,0,0,1,8-8h56V32a8,8,0,0,1,4.9-7.4,8.4,8.4,0,0,1,8.8,1.7l96,96a8.1,8.1,0,0,1,0,11.4l-96,96A8.4,8.4,0,0,1,132.9,231.4ZM48,176V80a8,8,0,0,0-16,0v96a8,8,0,0,0,16,0Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polygon,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('136 32 232 128 136 224 136 176 72 176 72 80 136 80 136 32'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('176'),
								$elm$svg$Svg$Attributes$x2('40'),
								$elm$svg$Svg$Attributes$y2('80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polygon,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('136 32 232 128 136 224 136 176 72 176 72 80 136 80 136 32'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('176'),
								$elm$svg$Svg$Attributes$x2('40'),
								$elm$svg$Svg$Attributes$y2('80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$polygon,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$points('136 32 232 128 136 224 136 176 72 176 72 80 136 80 136 32'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('40'),
								$elm$svg$Svg$Attributes$y1('176'),
								$elm$svg$Svg$Attributes$x2('40'),
								$elm$svg$Svg$Attributes$y2('80'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $author$project$Annotate$bottom = F2(
	function (resize, s) {
		return _Utils_Tuple2(
			s,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$moveDown(resize * s.size),
					$mdgriffith$elm_ui$Element$alignBottom
				]));
	});
var $elm$svg$Svg$Attributes$strokeMiterlimit = _VirtualDom_attribute('stroke-miterlimit');
var $phosphor_icons$phosphor_elm$Phosphor$user = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('128'),
								$elm$svg$Svg$Attributes$cy('96'),
								$elm$svg$Svg$Attributes$r('64'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M31,216a112,112,0,0,1,194,0'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('128'),
								$elm$svg$Svg$Attributes$cy('96'),
								$elm$svg$Svg$Attributes$r('64'),
								$elm$svg$Svg$Attributes$opacity('0.2')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('128'),
								$elm$svg$Svg$Attributes$cy('96'),
								$elm$svg$Svg$Attributes$r('64'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeMiterlimit('10'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M31,216a112,112,0,0,1,194,0'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M231.9,212a120.7,120.7,0,0,0-67.1-54.2,72,72,0,1,0-73.6,0A120.7,120.7,0,0,0,24.1,212a7.7,7.7,0,0,0,0,8,7.8,7.8,0,0,0,6.9,4H225a7.8,7.8,0,0,0,6.9-4A7.7,7.7,0,0,0,231.9,212Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('128'),
								$elm$svg$Svg$Attributes$cy('96'),
								$elm$svg$Svg$Attributes$r('64'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M31,216a112,112,0,0,1,194,0'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('128'),
								$elm$svg$Svg$Attributes$cy('96'),
								$elm$svg$Svg$Attributes$r('64'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M31,216a112,112,0,0,1,194,0'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$circle,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$cx('128'),
								$elm$svg$Svg$Attributes$cy('96'),
								$elm$svg$Svg$Attributes$r('64'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeMiterlimit('10'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M31,216a112,112,0,0,1,194,0'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $author$project$StyleQuery$iconFromDirection = F2(
	function (sel, dir) {
		var weight = sel ? $phosphor_icons$phosphor_elm$Phosphor$Fill : $phosphor_icons$phosphor_elm$Phosphor$Thin;
		var attrs = _List_fromArray(
			[
				$author$project$Annotate$bottom(0.7),
				$author$project$Annotate$scale($author$project$StyleQuery$positionstyle.small)
			]);
		return A2(
			$author$project$Annotate$iconResize,
			function (s) {
				return $elm$core$Basics$round(0.8 * s);
			},
			function () {
				switch (dir.$) {
					case 'Recipient':
						return A4(
							$author$project$Annotate$iconAnnotate,
							$author$project$Annotate$resizer(
								A2(
									$elm$core$List$cons,
									$author$project$Annotate$left(0.15),
									attrs)),
							$mdgriffith$elm_ui$Element$inFront,
							A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$arrowFatLineRight, weight),
							A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$user, weight));
					case 'Participant':
						return A4(
							$author$project$Annotate$iconAnnotate,
							$author$project$Annotate$resizer(
								A2(
									$elm$core$List$cons,
									$author$project$Annotate$right(0.15),
									attrs)),
							$mdgriffith$elm_ui$Element$inFront,
							A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$arrowFatLineRight, weight),
							A4(
								$author$project$Annotate$iconAnnotate,
								$author$project$Annotate$resizer(
									A2(
										$elm$core$List$cons,
										$author$project$Annotate$left(0.15),
										attrs)),
								$mdgriffith$elm_ui$Element$inFront,
								A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$arrowFatLineRight, weight),
								A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$user, weight)));
					default:
						return A4(
							$author$project$Annotate$iconAnnotate,
							$author$project$Annotate$resizer(
								A2(
									$elm$core$List$cons,
									$author$project$Annotate$right(0.15),
									attrs)),
							$mdgriffith$elm_ui$Element$inFront,
							A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$arrowFatLineRight, weight),
							A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$user, weight));
				}
			}());
	});
var $author$project$Style$onKey = F3(
	function (on, key, msg) {
		return $mdgriffith$elm_ui$Element$htmlAttribute(
			A2(
				$elm$html$Html$Events$on,
				on,
				A2(
					$elm$json$Json$Decode$andThen,
					function (key_) {
						return _Utils_eq(key_, key) ? $elm$json$Json$Decode$succeed(msg) : $elm$json$Json$Decode$fail('Not the ' + (key + ' key'));
					},
					A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string))));
	});
var $author$project$Style$onKeyUp = F2(
	function (key, msg) {
		return A3($author$project$Style$onKey, 'keyup', key, msg);
	});
var $author$project$QueryEditor$operatorClicked = function (z) {
	return _Utils_Tuple2(
		A2(
			$author$project$Show$updateItem,
			function (n) {
				if (n.$ === 'Operator') {
					var op = n.a;
					var _v1 = op.op;
					switch (_v1.$) {
						case 'Not':
							return $author$project$QueryEditor$Operator(
								_Utils_update(
									op,
									{op: $author$project$Query$And}));
						case 'And':
							return $author$project$QueryEditor$Operator(
								_Utils_update(
									op,
									{op: $author$project$Query$Not}));
						default:
							return n;
					}
				} else {
					return n;
				}
			},
			z),
		$elm$core$Maybe$Nothing);
};
var $author$project$QueryEditor$setLeafQuery = F2(
	function (q, z) {
		return A2(
			$author$project$QueryEditor$withFocus,
			_List_Nil,
			A2(
				$author$project$Show$updateItem,
				function (_v0) {
					return $author$project$QueryEditor$queryNode(
						$author$project$Query$Leaf(q));
				},
				z));
	});
var $elm$core$String$dropRight = F2(
	function (n, string) {
		return (n < 1) ? string : A3($elm$core$String$slice, 0, -n, string);
	});
var $author$project$Show$insert = F2(
	function (v, z) {
		var n = $author$project$Lazy$LList$length(
			$author$project$Lazy$Tree$descendants(
				$author$project$Lazy$Tree$Zipper$getTree(z)));
		return A2(
			$author$project$Lazy$Tree$Zipper$insert,
			A2($author$project$Show$iTree, n, v),
			z);
	});
var $author$project$QueryEditor$setLeafText = F2(
	function (s, q) {
		switch (q.$) {
			case 'Tag':
				return $author$project$QueryEditor$Tag(s);
			case 'Free':
				return $author$project$QueryEditor$Free(s);
			case 'Person':
				var se = q.a;
				var dir = q.b;
				var p = q.c;
				return A3(
					$author$project$QueryEditor$Person,
					se,
					dir,
					_Utils_update(
						p,
						{input: s}));
			case 'Operator':
				return q;
			default:
				var p = q.a;
				return A2($author$project$QueryEditor$Prefix, p, s);
		}
	});
var $author$project$QueryEditor$newOperator = F3(
	function (op, before_op, z_) {
		return A3(
			$elm$core$List$foldr,
			$author$project$Show$insert,
			A2(
				$author$project$Show$updateItem,
				$elm$core$Basics$always(
					$author$project$QueryEditor$Operator(op)),
				z_),
			_List_fromArray(
				[
					$author$project$Lazy$Tree$singleton(
					$author$project$QueryEditor$Free('')),
					$author$project$Lazy$Tree$singleton(
					A2(
						$author$project$QueryEditor$setLeafText,
						before_op,
						$author$project$Show$current(z_)))
				]));
	});
var $author$project$QueryEditor$insertInParent = F3(
	function (z, before_op, op) {
		return A2(
			$elm$core$Maybe$withDefault,
			A3($author$project$QueryEditor$newOperator, op, before_op, z),
			A2(
				$elm$core$Maybe$map,
				$author$project$Show$insert(
					$author$project$Lazy$Tree$singleton(
						$author$project$QueryEditor$Free(''))),
				$author$project$Lazy$Tree$Zipper$up(
					A2(
						$author$project$Show$updateItem,
						$author$project$QueryEditor$setLeafText(before_op),
						z))));
	});
var $author$project$QueryEditor$setSearchString = F2(
	function (v, z) {
		var opdefault = {
			op: $author$project$Query$Sequence,
			subqueries: A2(
				$elm$core$List$map,
				$author$project$Query$Tag,
				_List_fromArray(
					['flagged', 'unread', 'inbox', 'spam']))
		};
		var op_path = $elm$core$List$reverse(
			A2(
				$author$project$Lazy$Tree$Zipper$getPath,
				function (_v13) {
					var q = _v13.b;
					if (q.$ === 'Operator') {
						var op = q.a;
						return $elm$core$Maybe$Just(op.op);
					} else {
						return $elm$core$Maybe$Nothing;
					}
				},
				z));
		var _v0 = function () {
			if (A2($elm$core$String$endsWith, ' and ', v)) {
				var before_op = A2($elm$core$String$dropRight, 5, v);
				if ((((op_path.b && (op_path.a.$ === 'Nothing')) && op_path.b.b) && (op_path.b.a.$ === 'Just')) && (op_path.b.a.a.$ === 'And')) {
					var _v2 = op_path.a;
					var _v3 = op_path.b;
					var _v4 = _v3.a.a;
					return A2(
						$author$project$QueryEditor$withFocus,
						_List_fromArray(
							[-1]),
						A3(
							$author$project$QueryEditor$insertInParent,
							z,
							before_op,
							_Utils_update(
								opdefault,
								{op: $author$project$Query$And})));
				} else {
					return A2(
						$author$project$QueryEditor$withFocus,
						_List_fromArray(
							[-1]),
						A3(
							$author$project$QueryEditor$newOperator,
							_Utils_update(
								opdefault,
								{op: $author$project$Query$And}),
							before_op,
							z));
				}
			} else {
				if (A2($elm$core$String$endsWith, ' or ', v)) {
					var before_op = A2($elm$core$String$dropRight, 4, v);
					if ((((op_path.b && (op_path.a.$ === 'Nothing')) && op_path.b.b) && (op_path.b.a.$ === 'Just')) && (op_path.b.a.a.$ === 'Or')) {
						var _v6 = op_path.a;
						var _v7 = op_path.b;
						var _v8 = _v7.a.a;
						return A2(
							$author$project$QueryEditor$withFocus,
							_List_fromArray(
								[-1]),
							A3(
								$author$project$QueryEditor$insertInParent,
								z,
								before_op,
								_Utils_update(
									opdefault,
									{op: $author$project$Query$Or})));
					} else {
						return A2(
							$author$project$QueryEditor$withFocus,
							_List_fromArray(
								[-1]),
							A3(
								$author$project$QueryEditor$newOperator,
								_Utils_update(
									opdefault,
									{op: $author$project$Query$Or}),
								before_op,
								z));
					}
				} else {
					if (A2($elm$core$String$endsWith, '  ', v)) {
						var before_op = A2($elm$core$String$dropRight, 2, v);
						if ((((op_path.b && (op_path.a.$ === 'Nothing')) && op_path.b.b) && (op_path.b.a.$ === 'Just')) && (op_path.b.a.a.$ === 'Sequence')) {
							var _v10 = op_path.a;
							var _v11 = op_path.b;
							var _v12 = _v11.a.a;
							return A2(
								$author$project$QueryEditor$withFocus,
								_List_fromArray(
									[-1]),
								A3(
									$author$project$QueryEditor$insertInParent,
									z,
									before_op,
									_Utils_update(
										opdefault,
										{op: $author$project$Query$Sequence})));
						} else {
							return A2(
								$author$project$QueryEditor$withFocus,
								_List_fromArray(
									[-1]),
								A3(
									$author$project$QueryEditor$newOperator,
									_Utils_update(
										opdefault,
										{op: $author$project$Query$Sequence}),
									before_op,
									z));
						}
					} else {
						if (A2($elm$core$String$startsWith, 'not ', v)) {
							return A2(
								$author$project$QueryEditor$withFocus,
								_List_fromArray(
									[0]),
								A3(
									$elm$core$List$foldr,
									$author$project$Show$insert,
									A2(
										$author$project$Show$updateItem,
										$elm$core$Basics$always(
											$author$project$QueryEditor$Operator(
												_Utils_update(
													opdefault,
													{op: $author$project$Query$Not}))),
										z),
									_List_fromArray(
										[
											$author$project$Lazy$Tree$singleton(
											$author$project$QueryEditor$Free(
												A2($elm$core$String$dropLeft, 4, v)))
										])));
						} else {
							if (A2($elm$core$String$startsWith, 'from:', v)) {
								return A2(
									$author$project$QueryEditor$withFocus,
									_List_Nil,
									A2(
										$author$project$Show$updateItem,
										$elm$core$Basics$always(
											A3(
												$author$project$QueryEditor$Person,
												{label: 'from'},
												'sender',
												$author$project$AddressInput$addressInput(
													A2(
														$elm$core$List$map,
														function (p) {
															return {dir: $author$project$Query$Sender, person: p};
														},
														$author$project$Person$personsFromString(
															A2($elm$core$String$dropLeft, 5, v)))))),
										z));
							} else {
								if (A2($elm$core$String$startsWith, 'to:', v)) {
									return A2(
										$author$project$QueryEditor$withFocus,
										_List_Nil,
										A2(
											$author$project$Show$updateItem,
											$elm$core$Basics$always(
												A3(
													$author$project$QueryEditor$Person,
													{label: 'to'},
													'sender',
													$author$project$AddressInput$addressInput(
														A2(
															$elm$core$List$map,
															function (p) {
																return {dir: $author$project$Query$Recipient, person: p};
															},
															$author$project$Person$personsFromString(
																A2($elm$core$String$dropLeft, 3, v)))))),
											z));
								} else {
									if (A2($elm$core$String$startsWith, 'tag:', v)) {
										return A2(
											$author$project$QueryEditor$withFocus,
											_List_Nil,
											A2(
												$author$project$Show$updateItem,
												$elm$core$Basics$always(
													$author$project$QueryEditor$Tag(
														A2($elm$core$String$dropLeft, 4, v))),
												z));
									} else {
										if (A2($elm$core$String$startsWith, '#', v)) {
											return A2(
												$author$project$QueryEditor$withFocus,
												_List_Nil,
												A2(
													$author$project$Show$updateItem,
													$elm$core$Basics$always(
														$author$project$QueryEditor$Tag(
															A2($elm$core$String$dropLeft, 1, v))),
													z));
										} else {
											return _Utils_Tuple2(
												A2(
													$author$project$Show$updateItem,
													$author$project$QueryEditor$setLeafText(v),
													z),
												$elm$core$Maybe$Nothing);
										}
									}
								}
							}
						}
					}
				}
			}
		}();
		var z_ = _v0.a;
		var focus = _v0.b;
		return _Utils_Tuple2(z_, focus);
	});
var $author$project$Query$stringFromOperator = function (x) {
	switch (x.$) {
		case 'And':
			return 'and';
		case 'ButNot':
			return 'and not';
		case 'Not':
			return 'not';
		case 'Or':
			return 'or';
		case 'Xor':
			return 'xor';
		case 'Sequence':
			return '';
		case 'LeftQuery':
			return '<';
		default:
			return '>';
	}
};
var $author$project$QueryEditor$inlineLayout = F2(
	function (p, x) {
		var w = $author$project$Style$fontsize.one;
		var defaultWireStyle = function (_v3) {
			var width = _v3.a;
			var length = _v3.b;
			return $author$project$Grid$Wire(
				{
					border_width: width,
					color: $Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
						A3(
							$Orasund$elm_ui_widgets$Widget$Material$Color$withShade,
							$author$project$Style$palette._default.primary,
							$Orasund$elm_ui_widgets$Widget$Material$Color$buttonHoverOpacity,
							A2($Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity, 0.14, $author$project$Style$palette._default.on.surface))),
					elementContainer: _List_fromArray(
						[$mdgriffith$elm_ui$Element$alignTop]),
					tick_length: length,
					tick_position: $author$project$Grid$Center,
					tick_width: width
				});
		};
		var _v0 = _Utils_Tuple2(x, p);
		if (_v0.a.$ === 'Operator') {
			if (_v0.b.b && (_v0.b.a.$ === 'Just')) {
				var _v1 = _v0.b;
				return {
					cardChildrenStyle: _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					childrenContainer: $elm$core$Maybe$Just(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							])),
					layout: _Utils_Tuple2($author$project$Grid$Row, true),
					position: $author$project$Grid$Intersperse,
					wire_children: _Utils_Tuple2(false, false),
					wirestyle: defaultWireStyle(
						_Utils_Tuple2(w, 1))
				};
			} else {
				var op = _v0.a.a;
				var _v2 = op.op;
				switch (_v2.$) {
					case 'Not':
						return {
							cardChildrenStyle: _List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							childrenContainer: $elm$core$Maybe$Just(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									])),
							layout: _Utils_Tuple2($author$project$Grid$Row, true),
							position: $author$project$Grid$WireOverlay,
							wire_children: _Utils_Tuple2(false, false),
							wirestyle: defaultWireStyle(
								_Utils_Tuple2(0, 1))
						};
					case 'And':
						return {
							cardChildrenStyle: _List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							childrenContainer: $elm$core$Maybe$Just(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									])),
							layout: _Utils_Tuple2($author$project$Grid$Row, true),
							position: $author$project$Grid$Intersperse,
							wire_children: _Utils_Tuple2(false, false),
							wirestyle: defaultWireStyle(
								_Utils_Tuple2(w, 1))
						};
					case 'Sequence':
						return {
							cardChildrenStyle: _List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							childrenContainer: $elm$core$Maybe$Just(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									])),
							layout: _Utils_Tuple2($author$project$Grid$WrappedRow, true),
							position: $author$project$Grid$Intersperse,
							wire_children: _Utils_Tuple2(false, false),
							wirestyle: defaultWireStyle(
								_Utils_Tuple2(w, 1))
						};
					default:
						return {
							cardChildrenStyle: _List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							childrenContainer: $elm$core$Maybe$Just(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									])),
							layout: _Utils_Tuple2($author$project$Grid$Row, true),
							position: $author$project$Grid$Intersperse,
							wire_children: _Utils_Tuple2(false, false),
							wirestyle: defaultWireStyle(
								_Utils_Tuple2(w, 1))
						};
				}
			}
		} else {
			return {
				cardChildrenStyle: _List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				childrenContainer: $elm$core$Maybe$Just(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						])),
				layout: _Utils_Tuple2($author$project$Grid$Row, true),
				position: $author$project$Grid$Inside,
				wire_children: _Utils_Tuple2(false, false),
				wirestyle: defaultWireStyle(
					_Utils_Tuple2(w, 1))
			};
		}
	});
var $author$project$QueryEditor$rootAggregateQuery = function (z) {
	return A3(
		$author$project$Tree$treeAggregate,
		A2(
			$author$project$QueryEditor$inlineLayout,
			_List_Nil,
			$author$project$Show$current(z)),
		_Utils_Tuple2(false, false),
		$author$project$QueryEditor$rootAgg);
};
var $author$project$Style$mapIcon = F2(
	function (f, b) {
		return _Utils_update(
			b,
			{
				icon: f(b.icon)
			});
	});
var $author$project$Style$fontscale = function (f) {
	return {
		huge: f(7),
		large: f(5),
		larger: f(6),
		normal: f(4),
		small: f(2),
		smaller: f(3),
		tiny: f(1)
	};
};
var $author$project$Style$fontsizerel = function () {
	var scalesize = F2(
		function (icept, x) {
			return $elm$core$Basics$round(
				icept * $elm$core$Basics$sqrt(x));
		});
	var ni = 4.0;
	var n = 100.0;
	var scalesizeinv = n / $elm$core$Basics$sqrt(ni);
	var fs = $author$project$Style$fontscale(
		scalesize(scalesizeinv));
	return {
		huge: $elm$core$String$fromInt(fs.huge) + '%',
		large: $elm$core$String$fromInt(fs.large) + '%',
		larger: $elm$core$String$fromInt(fs.larger) + '%',
		normal: $elm$core$String$fromInt(fs.normal) + '%',
		small: $elm$core$String$fromInt(fs.small) + '%',
		smaller: $elm$core$String$fromInt(fs.smaller) + '%',
		tiny: $elm$core$String$fromInt(fs.tiny) + '%'
	};
}();
var $author$project$StyleQuery$operatorAttrs = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Font$color($Orasund$elm_ui_framework$Framework$Color$grey),
		$mdgriffith$elm_ui$Element$htmlAttribute(
		A2($elm$html$Html$Attributes$style, 'font-size', $author$project$Style$fontsizerel.smaller))
	]);
var $author$project$StyleQuery$buttonFromLeafQuery = F7(
	function (symbolf, prefericon, msgf, ann, statef, pad, q) {
		var style = function (p) {
			return A2(
				$author$project$Style$denseButtonStyle,
				pad,
				$Orasund$elm_ui_widgets$Widget$Material$iconButton(p));
		};
		var btn = F2(
			function (p, b) {
				return prefericon ? A2(
					$Orasund$elm_ui_widgets$Widget$iconButton,
					style(p),
					A2(
						$author$project$Style$mapIcon,
						function (i_) {
							return A2($elm$core$Maybe$withDefault, i_, ann);
						},
						b)) : A2(
					$Orasund$elm_ui_widgets$Widget$button,
					style(p),
					A2(
						$author$project$Style$mapIcon,
						function (i_) {
							return A2($elm$core$Maybe$withDefault, i_, ann);
						},
						b));
			});
		switch (q.$) {
			case 'Tag':
				var t = q.a;
				return A4(
					$author$project$StyleQuery$buttonElementFromTag,
					symbolf,
					A6(
						$author$project$StyleQuery$denseButtonStyleAnnoted,
						pad,
						$author$project$Style$palette.tag,
						prefericon,
						$author$project$StyleQuery$materialStateButton(
							statef(q)),
						_List_Nil,
						$elm$core$Maybe$Nothing),
					msgf(q),
					t);
			case 'Free':
				var f = q.a;
				return $mdgriffith$elm_ui$Element$text(f);
			case 'Person':
				var dir = q.a;
				var p = q.b;
				return A2(
					btn,
					$author$project$Style$palette.person,
					A4(
						$author$project$StyleQuery$buttonFromPerson,
						msgf(
							A2($author$project$Query$Person, dir, p)),
						statef(q),
						$elm$core$Maybe$Just(
							A2($author$project$StyleQuery$iconFromDirection, true, dir)),
						p));
			case 'Prefix':
				var p = q.a;
				var v = q.b;
				return A2(
					$Orasund$elm_ui_widgets$Widget$button,
					style($author$project$Style$palette._default),
					{
						icon: A2(
							$elm$core$Maybe$withDefault,
							A2(
								$author$project$Symbol$elementIcon,
								A2($author$project$Symbol$withFontColorSize, 1.0, _List_Nil),
								$mdgriffith$elm_ui$Element$text(p + ':')),
							A2($author$project$Symbol$iconFromTag, symbolf, p)),
						onPress: msgf(q),
						text: v
					});
			case 'ID':
				if (q.a.$ === 'MessageID') {
					var v = q.a.a;
					return A2(
						$Orasund$elm_ui_widgets$Widget$button,
						style($author$project$Style$palette._default),
						{
							icon: A2(
								$author$project$Symbol$elementIcon,
								A2($author$project$Symbol$withFontColorSize, 1.0, _List_Nil),
								$mdgriffith$elm_ui$Element$text('ID')),
							onPress: msgf(q),
							text: v
						});
				} else {
					var t = q.a.a;
					return $mdgriffith$elm_ui$Element$text('thread:' + t);
				}
			case 'Near':
				var a = q.a;
				var i = q.b;
				var b = q.c;
				return A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(a),
							A2(
							$mdgriffith$elm_ui$Element$el,
							$author$project$StyleQuery$operatorAttrs,
							$mdgriffith$elm_ui$Element$text(' near/')),
							A2(
							$mdgriffith$elm_ui$Element$el,
							$author$project$StyleQuery$operatorAttrs,
							$mdgriffith$elm_ui$Element$text(
								$elm$core$String$fromInt(i) + ' ')),
							$mdgriffith$elm_ui$Element$text(b)
						]));
			default:
				var a = q.a;
				var i = q.b;
				var b = q.c;
				return A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(a),
							A2(
							$mdgriffith$elm_ui$Element$el,
							$author$project$StyleQuery$operatorAttrs,
							$mdgriffith$elm_ui$Element$text(' adj/')),
							A2(
							$mdgriffith$elm_ui$Element$el,
							$author$project$StyleQuery$operatorAttrs,
							$mdgriffith$elm_ui$Element$text(
								$elm$core$String$fromInt(i) + ' ')),
							$mdgriffith$elm_ui$Element$text(b)
						]));
		}
	});
var $author$project$QueryEditor$queryLeafs = function (q) {
	switch (q.$) {
		case 'Tag':
			var t = q.a;
			return $elm$core$List$singleton(
				$author$project$Query$Tag(t));
		case 'Free':
			var t = q.a;
			return $elm$core$List$singleton(
				$author$project$Query$Free(t));
		case 'Person':
			var p = q.c;
			return A2(
				$elm$core$List$map,
				function (q_) {
					return A2($author$project$Query$Person, q_.dir, q_.person);
				},
				p.chips);
		case 'Operator':
			return _List_Nil;
		default:
			var p = q.a;
			var t = q.b;
			return $elm$core$List$singleton(
				A2($author$project$Query$Prefix, p, t));
	}
};
var $author$project$QueryEditor$viewNode = F7(
	function (symbolf, prefericon, msgf, ann, selection, _v0, q_) {
		var statef = A2(
			$elm$core$Maybe$withDefault,
			$elm$core$Basics$always(false),
			A2($elm$core$Maybe$map, $elm$core$Basics$eq, selection));
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding($author$project$Style$one),
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink)
				]),
			function () {
				if (q_.$ === 'Operator') {
					var op = q_.a;
					return A3(
						$author$project$StyleQuery$viewlogic,
						symbolf,
						$author$project$Query$stringFromOperator(op.op),
						$author$project$Style$iconstyle._default);
				} else {
					return A2(
						$mdgriffith$elm_ui$Element$wrappedRow,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						A2(
							$elm$core$List$map,
							A6($author$project$StyleQuery$buttonFromLeafQuery, symbolf, prefericon, msgf, ann, statef, 0),
							$author$project$QueryEditor$queryLeafs(q_)));
				}
			}());
	});
var $author$project$Tree$layoutAcc = F4(
	function (children_layout, accf, b, tacc) {
		var accf_ = A2(accf, b, tacc.aggregate);
		return {
			aggregate: accf_,
			children: A3(children_layout, b, accf_, tacc.children),
			fontsize: tacc.fontsize,
			parent: tacc.children,
			scale: tacc.scale,
			siblings: tacc.siblings
		};
	});
var $author$project$Tree$consJust = F2(
	function (h, l) {
		return A2(
			$elm$core$Maybe$withDefault,
			l,
			A2(
				$elm$core$Maybe$map,
				function (h_) {
					return A2($elm$core$List$cons, h_, l);
				},
				h));
	});
var $elm$core$List$intersperse = F2(
	function (sep, xs) {
		if (!xs.b) {
			return _List_Nil;
		} else {
			var hd = xs.a;
			var tl = xs.b;
			var step = F2(
				function (x, rest) {
					return A2(
						$elm$core$List$cons,
						sep,
						A2($elm$core$List$cons, x, rest));
				});
			var spersed = A3($elm$core$List$foldr, step, _List_Nil, tl);
			return A2($elm$core$List$cons, hd, spersed);
		}
	});
var $author$project$Grid$keyedGrid = F3(
	function (_v0, a, x) {
		var g = _v0.a;
		var mirror = _v0.b;
		var attrs = A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$alignTop, a);
		return function () {
			switch (g.$) {
				case 'Column':
					return $author$project$Grid$keyedColumn(attrs);
				case 'Row':
					return $author$project$Grid$keyedRow(attrs);
				case 'WrappedRow':
					return $author$project$Grid$keyedWrappedRow(
						_Utils_ap(
							attrs,
							mirror ? _List_fromArray(
								[
									$mdgriffith$elm_ui$Element$htmlAttribute(
									A2($elm$html$Html$Attributes$style, 'align-items', 'flex-end'))
								]) : _List_Nil));
				default:
					return function (_v2) {
						return $mdgriffith$elm_ui$Element$none;
					};
			}
		}()(x);
	});
var $author$project$Grid$CenterY = {$: 'CenterY'};
var $author$project$Grid$computeTickLengths = F2(
	function (tick_position, fontsize) {
		switch (tick_position.$) {
			case 'FromPrevious':
				var distance = tick_position.a.distance;
				var fontfactor = tick_position.a.fontfactor;
				return _Utils_Tuple2(
					A2(
						$mdgriffith$elm_ui$Element$maximum,
						$elm$core$Basics$round(fontsize * fontfactor) + distance,
						$mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$fill);
			case 'FromNext':
				var distance = tick_position.a.distance;
				var fontfactor = tick_position.a.fontfactor;
				return _Utils_Tuple2(
					$mdgriffith$elm_ui$Element$fill,
					A2(
						$mdgriffith$elm_ui$Element$maximum,
						$elm$core$Basics$round(fontsize * fontfactor) + distance,
						$mdgriffith$elm_ui$Element$fill));
			default:
				return _Utils_Tuple2($mdgriffith$elm_ui$Element$fill, $mdgriffith$elm_ui$Element$fill);
		}
	});
var $author$project$Grid$wire = F5(
	function (right, fontsize, wirestyle, _v0, wireoverlay) {
		var prev = _v0.a;
		var next = _v0.b;
		var flip = function (x) {
			return right ? _Utils_update(
				x,
				{left: x.right, right: x.left}) : x;
		};
		var _v1 = A2($author$project$Grid$computeTickLengths, wirestyle.tick_position, fontsize);
		var tickheight_prev = _v1.a;
		var tickheight_next = _v1.b;
		var _v2 = $author$project$Grid$hanger(
			A2($author$project$Grid$Position, $author$project$Grid$CenterX, $author$project$Grid$CenterY));
		var inner = _v2.inner;
		var outer = _v2.outer;
		var positioner = _v2.positioner;
		var overlay = A2(
			$elm$core$List$cons,
			positioner(
				A2($mdgriffith$elm_ui$Element$el, inner, wireoverlay)),
			outer);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(wirestyle.tick_length)),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(tickheight_prev),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(wirestyle.tick_length)),
							$mdgriffith$elm_ui$Element$Border$widthEach(
							prev ? flip(
								{bottom: 0, left: wirestyle.border_width, right: 0, top: 0}) : {bottom: 0, left: 0, right: 0, top: 0}),
							$mdgriffith$elm_ui$Element$Border$color(wirestyle.color)
						]),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$inFront(
							(prev || next) ? A2(
								$mdgriffith$elm_ui$Element$el,
								_Utils_ap(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(wirestyle.tick_length)),
											$mdgriffith$elm_ui$Element$Border$color(wirestyle.color),
											$mdgriffith$elm_ui$Element$Border$roundEach(
											{bottomLeft: wirestyle.tick_width, bottomRight: 0, topLeft: 0, topRight: 0}),
											$mdgriffith$elm_ui$Element$Border$widthEach(
											flip(
												{bottom: 0, left: wirestyle.border_width, right: 0, top: wirestyle.tick_width}))
										]),
									overlay),
								$mdgriffith$elm_ui$Element$none) : A2(
								$mdgriffith$elm_ui$Element$el,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(wirestyle.tick_length)),
									overlay),
								$mdgriffith$elm_ui$Element$none))
						]),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(tickheight_next),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(wirestyle.tick_length)),
							$mdgriffith$elm_ui$Element$Border$color(wirestyle.color),
							$mdgriffith$elm_ui$Element$Border$widthEach(
							next ? flip(
								{bottom: 0, left: wirestyle.border_width, right: 0, top: 0}) : {bottom: 0, left: 0, right: 0, top: 0})
						]),
					$mdgriffith$elm_ui$Element$none)
				]));
	});
var $author$project$Grid$wire_horizontal = F5(
	function (bottom, fontsize, wirestyle, _v0, wireoverlay) {
		var prev = _v0.a;
		var next = _v0.b;
		var flip = function (x) {
			return bottom ? _Utils_update(
				x,
				{bottom: x.top, top: x.bottom}) : x;
		};
		var _v1 = A2($author$project$Grid$computeTickLengths, wirestyle.tick_position, fontsize);
		var tickwidth_prev = _v1.a;
		var tickwidth_next = _v1.b;
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(wirestyle.tick_length)),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(tickwidth_prev),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Border$widthEach(
							prev ? flip(
								{bottom: 0, left: 0, right: 0, top: wirestyle.border_width}) : {bottom: 0, left: 0, right: 0, top: 0}),
							$mdgriffith$elm_ui$Element$Border$color(wirestyle.color)
						]),
					$mdgriffith$elm_ui$Element$none),
					(prev || next) ? A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(
								$elm$core$Basics$round(wirestyle.border_width / 2.0))),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Border$color(wirestyle.color),
							$mdgriffith$elm_ui$Element$Border$widthEach(
							flip(
								{bottom: 0, left: 0, right: wirestyle.tick_width, top: wirestyle.border_width})),
							$mdgriffith$elm_ui$Element$inFront(
							A3(
								$author$project$Grid$hanging,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$moveRight(0.5)
									]),
								A2($author$project$Grid$Position, $author$project$Grid$CenterX, $author$project$Grid$CenterY),
								wireoverlay))
						]),
					$mdgriffith$elm_ui$Element$none) : A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(
								$elm$core$Basics$round(wirestyle.border_width / 2.0))),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$inFront(
							A3(
								$author$project$Grid$hanging,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$centerX]),
								A2($author$project$Grid$Position, $author$project$Grid$CenterX, $author$project$Grid$Bottom),
								wireoverlay))
						]),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(tickwidth_next),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Border$color(wirestyle.color),
							$mdgriffith$elm_ui$Element$Border$widthEach(
							next ? flip(
								{bottom: 0, left: 0, right: 0, top: wirestyle.border_width}) : {bottom: 0, left: 0, right: 0, top: 0})
						]),
					$mdgriffith$elm_ui$Element$none)
				]));
	});
var $author$project$Grid$withWire = F3(
	function (_v0, siblings, block) {
		var layout = _v0.layout;
		var wirestyle = _v0.wirestyle;
		var wireoverlay = _v0.wireoverlay;
		var fontsize = _v0.fontsize;
		if (wirestyle.$ === 'NoWire') {
			return block;
		} else {
			var w = wirestyle.a;
			_v2$6:
			while (true) {
				if (!layout.b) {
					switch (layout.a.$) {
						case 'Column':
							var _v3 = layout.a;
							return A2(
								$mdgriffith$elm_ui$Element$row,
								_Utils_ap(
									w.elementContainer,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$alignLeft])),
								_List_fromArray(
									[
										A5($author$project$Grid$wire, false, fontsize, w, siblings, wireoverlay),
										block
									]));
						case 'Row':
							var _v5 = layout.a;
							return A2(
								$mdgriffith$elm_ui$Element$column,
								_Utils_ap(
									w.elementContainer,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$alignTop])),
								_List_fromArray(
									[
										A5($author$project$Grid$wire_horizontal, false, fontsize, w, siblings, wireoverlay),
										block
									]));
						case 'WrappedRow':
							var _v7 = layout.a;
							return A2(
								$mdgriffith$elm_ui$Element$column,
								_Utils_ap(
									w.elementContainer,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$alignTop,
											$mdgriffith$elm_ui$Element$htmlAttribute(
											A2($elm$html$Html$Attributes$style, 'align-self', 'stretch'))
										])),
								_List_fromArray(
									[
										A5($author$project$Grid$wire_horizontal, false, fontsize, w, siblings, wireoverlay),
										block
									]));
						default:
							break _v2$6;
					}
				} else {
					switch (layout.a.$) {
						case 'Column':
							var _v4 = layout.a;
							return A2(
								$mdgriffith$elm_ui$Element$row,
								_Utils_ap(
									w.elementContainer,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$alignRight])),
								_List_fromArray(
									[
										block,
										A5($author$project$Grid$wire, true, fontsize, w, siblings, wireoverlay)
									]));
						case 'Row':
							var _v6 = layout.a;
							return A2(
								$mdgriffith$elm_ui$Element$column,
								_Utils_ap(
									w.elementContainer,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$alignBottom])),
								_List_fromArray(
									[
										block,
										A5($author$project$Grid$wire_horizontal, true, fontsize, w, siblings, wireoverlay)
									]));
						case 'WrappedRow':
							var _v8 = layout.a;
							return A2(
								$mdgriffith$elm_ui$Element$column,
								_Utils_ap(
									w.elementContainer,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$htmlAttribute(
											A2($elm$html$Html$Attributes$style, 'align-self', 'stretch')),
											$mdgriffith$elm_ui$Element$alignBottom
										])),
								_List_fromArray(
									[
										block,
										A5($author$project$Grid$wire_horizontal, true, fontsize, w, siblings, wireoverlay)
									]));
						default:
							break _v2$6;
					}
				}
			}
			return A2($mdgriffith$elm_ui$Element$el, w.elementContainer, block);
		}
	});
var $author$project$Grid$viewTreeNodeWithWire = F3(
	function (_v0, mpc, cs_) {
		var parent = _v0.parent;
		var children = _v0.children;
		var fontsize = _v0.fontsize;
		var siblings = _v0.siblings;
		var printChildren = function (attrs) {
			return A2(
				$elm$core$Maybe$withDefault,
				$elm$core$Basics$always($mdgriffith$elm_ui$Element$none),
				A2(
					$elm$core$Maybe$map,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Basics$append(attrs),
						$author$project$Grid$keyedGrid(children.layout)),
					children.childrenContainer));
		};
		var intersperseWire = function (card) {
			return {
				fontsize: fontsize,
				layout: children.layout,
				wireoverlay: card,
				wirestyle: function () {
					var _v7 = children.wirestyle;
					if (_v7.$ === 'Wire') {
						var w = _v7.a;
						return $author$project$Grid$Wire(
							{border_width: w.border_width, color: w.color, elementContainer: w.elementContainer, tick_length: w.tick_length, tick_position: $author$project$Grid$Center, tick_width: 0});
					} else {
						return $author$project$Grid$NoWire;
					}
				}()
			};
		};
		var _v1 = function () {
			var _v2 = _Utils_Tuple2(children.position, mpc);
			if (_v2.b.$ === 'Nothing') {
				var _v5 = _v2.b;
				return _Utils_Tuple2(
					A2(
						$mdgriffith$elm_ui$Element$el,
						children.cardChildrenStyle,
						A2(printChildren, _List_Nil, cs_)),
					$mdgriffith$elm_ui$Element$none);
			} else {
				switch (_v2.a.$) {
					case 'Inside':
						var _v3 = _v2.a;
						var card = _v2.b.a;
						return _Utils_Tuple2(
							A2(
								$mdgriffith$elm_ui$Element$el,
								children.cardChildrenStyle,
								A2(
									printChildren,
									_List_Nil,
									A2(
										$elm$core$List$cons,
										_Utils_Tuple2('__head', card.a),
										_Utils_ap(
											cs_,
											_List_fromArray(
												[
													_Utils_Tuple2('__tail', card.b)
												]))))),
							$mdgriffith$elm_ui$Element$none);
					case 'Intersperse':
						var _v4 = _v2.a;
						var card = _v2.b.a;
						return _Utils_Tuple2(
							A2(
								$mdgriffith$elm_ui$Element$el,
								children.cardChildrenStyle,
								A2(
									printChildren,
									_List_Nil,
									A2(
										$elm$core$List$intersperse,
										_Utils_Tuple2(
											'__card',
											A3(
												$author$project$Grid$withWire,
												intersperseWire($mdgriffith$elm_ui$Element$none),
												_Utils_Tuple2(true, true),
												card.a)),
										cs_))),
							$mdgriffith$elm_ui$Element$none);
					case 'Outside':
						var olayout = _v2.a.a;
						var card = _v2.b.a;
						return _Utils_Tuple2(
							function (inner) {
								return A3(
									$author$project$Grid$keyedGrid,
									olayout,
									children.cardChildrenStyle,
									_List_fromArray(
										[
											_Utils_Tuple2('__head', card.a),
											_Utils_Tuple2('__inner', inner),
											_Utils_Tuple2('__tail', card.b)
										]));
							}(
								A2(printChildren, _List_Nil, cs_)),
							$mdgriffith$elm_ui$Element$none);
					default:
						var _v6 = _v2.a;
						var card = _v2.b.a;
						return _Utils_Tuple2(
							A2(
								$mdgriffith$elm_ui$Element$el,
								children.cardChildrenStyle,
								A2(printChildren, _List_Nil, cs_)),
							card.a);
				}
			}
		}();
		var block = _v1.a;
		var woverlay = _v1.b;
		return A3(
			$author$project$Grid$withWire,
			{fontsize: fontsize, layout: parent.layout, wireoverlay: woverlay, wirestyle: parent.wirestyle},
			siblings,
			block);
	});
var $author$project$Tree$viewLevel = F4(
	function (accf, viewf, acc, zipper) {
		var acc_ = A2(
			accf,
			$author$project$Lazy$Tree$Zipper$current(zipper),
			acc);
		var cs = function (be) {
			return A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				A2(
					$elm$core$Maybe$map,
					function (_v2) {
						return A5(
							$author$project$Tree$viewLevels,
							accf,
							viewf,
							acc_,
							acc_.children.wire_children,
							$author$project$Lazy$Tree$Zipper$openAll(zipper));
					},
					be.childrenContainer));
		};
		return A2(
			$elm$core$Maybe$map,
			function (be) {
				return _Utils_Tuple2(
					be.key,
					A3(
						$author$project$Grid$viewTreeNodeWithWire,
						acc_,
						be.content,
						cs(acc_.children)));
			},
			viewf(
				_Utils_Tuple2(acc_, zipper)));
	});
var $author$project$Tree$viewLevels = F5(
	function (accf, viewf, acc, _v0, zippers) {
		var first = _v0.a;
		var last = _v0.b;
		if (!zippers.b) {
			return _List_Nil;
		} else {
			if (!zippers.b.b) {
				var z = zippers.a;
				return A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					A2(
						$elm$core$Maybe$map,
						$elm$core$List$singleton,
						A4(
							$author$project$Tree$viewLevel,
							accf,
							viewf,
							_Utils_update(
								acc,
								{
									siblings: _Utils_Tuple2(first, last)
								}),
							z)));
			} else {
				var z = zippers.a;
				var tail = zippers.b;
				return A2(
					$author$project$Tree$consJust,
					A4(
						$author$project$Tree$viewLevel,
						accf,
						viewf,
						_Utils_update(
							acc,
							{
								siblings: _Utils_Tuple2(first, true)
							}),
						z),
					A5(
						$author$project$Tree$viewLevels,
						accf,
						viewf,
						acc,
						_Utils_Tuple2(true, last),
						tail));
			}
		}
	});
var $author$project$Tree$viewTree = F5(
	function (children_layout, accf, view, lacc, tree) {
		var laccf = A2($author$project$Tree$layoutAcc, children_layout, accf);
		return A2(
			$elm$core$Maybe$withDefault,
			$mdgriffith$elm_ui$Element$none,
			A2(
				$elm$core$Maybe$map,
				$elm$core$Tuple$second,
				A4(
					$author$project$Tree$viewLevel,
					laccf,
					view,
					lacc(tree),
					tree)));
	});
var $author$project$QueryEditor$viewQueryTree = F4(
	function (symbolf, msg, selection, m) {
		return A5(
			$author$project$Tree$viewTree,
			F3(
				function (_v0, acc, _v1) {
					var n = _v0.b;
					return A2($author$project$QueryEditor$inlineLayout, acc.operators, n);
				}),
			$author$project$QueryEditor$operatorAcc,
			function (_v2) {
				var pa_ = _v2.a;
				var z = _v2.b;
				return $elm$core$Maybe$Just(
					{
						content: $elm$core$Maybe$Just(
							_Utils_Tuple2(
								A7(
									$author$project$QueryEditor$viewNode,
									symbolf,
									true,
									msg,
									$elm$core$Maybe$Nothing,
									selection,
									pa_.aggregate,
									$author$project$Show$current(z)),
								$mdgriffith$elm_ui$Element$none)),
						id: $elm$core$Maybe$Just(
							_Utils_ap(
								m.prefix,
								$author$project$Show$stringFromIndexPath(pa_.aggregate.rpath))),
						key: _Utils_ap(
							m.prefix,
							$author$project$Show$stringFromIndexPath(pa_.aggregate.rpath)),
						wrapper: pa_.aggregate.operators
					});
			},
			$author$project$QueryEditor$rootAggregateQuery,
			$author$project$Lazy$Tree$Zipper$root(m.querytree));
	});
var $author$project$QueryEditor$viewNodeEditor = F4(
	function (symbolf_, prefix, selection, _v0) {
		var pa = _v0.a;
		var z = _v0.b;
		var symbolf = function (t) {
			return A2(
				$elm$core$Maybe$map,
				$author$project$Symbol$map(
					$elm$core$Basics$always($author$project$QueryEditor$Noop)),
				symbolf_(t));
		};
		var setsearch = function (t) {
			return A2(
				$author$project$QueryEditor$At,
				pa.rpath,
				$author$project$QueryEditor$MapEditor(
					$author$project$QueryEditor$setSearchString(t)));
		};
		var qn = $author$project$Show$current(z);
		var id = _Utils_ap(
			prefix,
			$author$project$Show$stringFromIndexPath(pa.rpath));
		var attrs = _List_fromArray(
			[
				$author$project$Grid$idAttribute(id)
			]);
		var inputtext = F2(
			function (t, l) {
				return A2(
					$mdgriffith$elm_ui$Element$Input$multiline,
					A3(
						$author$project$ListChange$consIf,
						t === '',
						A3(
							$author$project$Style$onKey,
							'keydown',
							'Backspace',
							A2(
								$author$project$QueryEditor$At,
								pa.rpath,
								$author$project$QueryEditor$MapEditor($author$project$QueryEditor$deleteNode))),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width(
								A2($mdgriffith$elm_ui$Element$minimum, 75, $mdgriffith$elm_ui$Element$fill)),
							_Utils_ap($author$project$Style$inputTextStyle, attrs))),
					{
						label: $mdgriffith$elm_ui$Element$Input$labelHidden(l),
						onChange: setsearch,
						placeholder: $elm$core$Maybe$Just(
							A2(
								$mdgriffith$elm_ui$Element$Input$placeholder,
								_List_Nil,
								$mdgriffith$elm_ui$Element$text(l))),
						spellcheck: true,
						text: t
					});
			});
		return {
			content: $elm$core$Maybe$Just(
				function () {
					switch (qn.$) {
						case 'Operator':
							var op = qn.a;
							return _Utils_Tuple2(
								A2(
									$Orasund$elm_ui_widgets$Widget$iconButton,
									A2($author$project$Style$denseIconButton, 0, $author$project$Style$palette._default),
									{
										icon: A2(
											$author$project$StyleQuery$viewlogic,
											symbolf,
											$author$project$Query$stringFromOperator(op.op)),
										onPress: $elm$core$Maybe$Just(
											A2(
												$author$project$QueryEditor$At,
												pa.rpath,
												$author$project$QueryEditor$MapEditor($author$project$QueryEditor$operatorClicked))),
										text: 'change operator'
									}),
								$mdgriffith$elm_ui$Element$none);
						case 'Free':
							var x = qn.a;
							return _Utils_Tuple2(
								A2(
									$mdgriffith$elm_ui$Element$row,
									_List_Nil,
									A2(
										$elm$core$List$cons,
										A2(inputtext, x, 'search'),
										(x !== '') ? _List_Nil : A2(
											$elm$core$List$map,
											A2(
												$elm$core$Basics$composeR,
												$author$project$Query$Leaf,
												A2(
													$elm$core$Basics$composeR,
													function (q) {
														return {
															contextquery: $author$project$Query$AnyMessage,
															prefix: '',
															querytree: $author$project$Lazy$Tree$Zipper$fromTree(
																A2(
																	$author$project$Show$iTree,
																	0,
																	$author$project$QueryEditor$tree(q)))
														};
													},
													A2(
														$elm$core$Basics$composeR,
														A3(
															$author$project$QueryEditor$viewQueryTree,
															symbolf,
															function (q) {
																return A2(
																	$elm$core$Maybe$withDefault,
																	false,
																	A2(
																		$elm$core$Maybe$map,
																		$author$project$Query$equalLeaf(q),
																		selection)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
																	A2(
																		$author$project$QueryEditor$At,
																		pa.rpath,
																		$author$project$QueryEditor$MapEditor(
																			$author$project$QueryEditor$setLeafQuery(q))));
															},
															selection),
														$mdgriffith$elm_ui$Element$el(
															$author$project$Style$semiTransparent(0.25))))),
											pa.subqueries))),
								$mdgriffith$elm_ui$Element$none);
						case 'Prefix':
							var p = qn.a;
							var x = qn.b;
							return _Utils_Tuple2(
								A2(
									$mdgriffith$elm_ui$Element$row,
									_List_Nil,
									_List_fromArray(
										[
											A2(
											$elm$core$Maybe$withDefault,
											A2(
												$author$project$Symbol$elementIcon,
												A2($author$project$Symbol$withFontColorSize, 1.0, _List_Nil),
												$mdgriffith$elm_ui$Element$text(p + ':')),
											A2($author$project$Symbol$iconFromTag, symbolf, p))($author$project$Style$iconstyle.query),
											A2(inputtext, x, 'search')
										])),
								$mdgriffith$elm_ui$Element$none);
						case 'Tag':
							var t = qn.a;
							return _Utils_Tuple2(
								A6(
									$author$project$QueryEditor$inputTagText,
									symbolf,
									function (s) {
										return $elm$core$Maybe$Just(
											$author$project$QueryEditor$SetLeafQuery(
												$author$project$Query$Tag(s)));
									},
									setsearch,
									A3(
										$author$project$ListChange$consIf,
										t === '',
										A2(
											$author$project$Style$onKeyUp,
											'Backspace',
											A2(
												$author$project$QueryEditor$At,
												pa.rpath,
												$author$project$QueryEditor$MapEditor($author$project$QueryEditor$deleteNode))),
										attrs),
									function () {
										if ((selection.$ === 'Just') && (selection.a.$ === 'Tag')) {
											var s = selection.a.a;
											return $elm$core$Maybe$Just(s);
										} else {
											return $elm$core$Maybe$Nothing;
										}
									}(),
									t),
								$mdgriffith$elm_ui$Element$none);
						default:
							var s = qn.a;
							var p = qn.c;
							return _Utils_Tuple2(
								A2(
									$mdgriffith$elm_ui$Element$map,
									A2(
										$elm$core$Basics$composeR,
										$author$project$QueryEditor$AddressMsg,
										$author$project$QueryEditor$At(pa.rpath)),
									A2(
										$mdgriffith$elm_ui$Element$el,
										attrs,
										A5(
											$author$project$AddressInput$viewPersonsEditor,
											_List_fromArray(
												[$author$project$Query$Sender, $author$project$Query$Recipient, $author$project$Query$Participant]),
											$author$project$StyleQuery$iconFromDirection,
											s.label,
											function () {
												if ((selection.$ === 'Just') && (selection.a.$ === 'Person')) {
													var _v4 = selection.a;
													var q = _v4.b;
													return $elm$core$Maybe$Just(q);
												} else {
													return $elm$core$Maybe$Nothing;
												}
											}(),
											p))),
								$mdgriffith$elm_ui$Element$none);
					}
				}()),
			id: $elm$core$Maybe$Just(id),
			key: id,
			wrapper: pa.operators
		};
	});
var $author$project$Tree$withChildAcc = F2(
	function (f, _v0) {
		var acc = _v0.a;
		var b = _v0.b;
		return f(
			_Utils_Tuple2(acc.aggregate, b));
	});
var $author$project$Main$viewQueryEditor = F3(
	function (symbolf, selection, queryeditor) {
		return A5(
			$author$project$Tree$viewTree,
			F3(
				function (_v0, _v1, _v2) {
					var n = _v0.b;
					return $author$project$QueryEditor$defaultLayout(n);
				}),
			$author$project$QueryEditor$operatorAcc,
			A2(
				$elm$core$Basics$composeR,
				$author$project$Tree$withChildAcc(
					A3($author$project$QueryEditor$viewNodeEditor, symbolf, queryeditor.prefix, selection)),
				$elm$core$Maybe$Just),
			function (z) {
				return A3(
					$author$project$Tree$treeAggregate,
					$author$project$QueryEditor$defaultLayout(
						$author$project$Show$current(z)),
					_Utils_Tuple2(false, false),
					$author$project$QueryEditor$rootAgg);
			},
			$author$project$Lazy$Tree$Zipper$root(queryeditor.querytree));
	});
var $author$project$Main$AddSearch = F2(
	function (a, b) {
		return {$: 'AddSearch', a: a, b: b};
	});
var $author$project$Query$ButNot = {$: 'ButNot'};
var $author$project$Query$RightQuery = {$: 'RightQuery'};
var $author$project$Query$equal = F2(
	function (x, y) {
		var _v0 = _Utils_Tuple2(x, y);
		_v0$2:
		while (true) {
			if ((_v0.a.$ === 'Leaf') && (_v0.b.$ === 'Leaf')) {
				switch (_v0.a.a.$) {
					case 'Tag':
						if (_v0.b.a.$ === 'Tag') {
							var a = _v0.a.a.a;
							var b = _v0.b.a.a;
							return _Utils_eq(a, b);
						} else {
							break _v0$2;
						}
					case 'Person':
						if (_v0.b.a.$ === 'Person') {
							var _v1 = _v0.a.a;
							var a = _v1.b;
							var _v2 = _v0.b.a;
							var b = _v2.b;
							return _Utils_eq(a, b);
						} else {
							break _v0$2;
						}
					default:
						break _v0$2;
				}
			} else {
				break _v0$2;
			}
		}
		return _Utils_eq(x, y);
	});
var $author$project$Access$icon = {
	get: function ($) {
		return $.icon;
	},
	set: F2(
		function (value, h) {
			return _Utils_update(
				h,
				{icon: value});
		})
};
var $author$project$StyleQuery$positionBR = $author$project$Annotate$resizer(
	_List_fromArray(
		[
			$author$project$Annotate$scale($author$project$StyleQuery$positionstyle.smaller),
			$author$project$Annotate$bottom(0.6),
			$author$project$Annotate$right(0)
		]));
var $author$project$Main$iconAnnotateCount = function (c) {
	return A3(
		$author$project$Annotate$iconAnnotate,
		$author$project$StyleQuery$positionBR,
		$mdgriffith$elm_ui$Element$inFront,
		A2(
			$author$project$StyleQuery$iconFromCount,
			$elm$core$Maybe$Just($author$project$Style$palette.count.on.primary),
			c));
};
var $author$project$Access$ifEmpty = F3(
	function (ifempty, lf, l) {
		if (!l.b) {
			return ifempty;
		} else {
			return lf(l);
		}
	});
var $author$project$StyleQuery$itemFromPerson = F4(
	function (action, state, role, a) {
		var b = A4(
			$author$project$StyleQuery$buttonFromPerson,
			action(a),
			state,
			role,
			a);
		return {
			content: $elm$core$Basics$always($mdgriffith$elm_ui$Element$none),
			icon: b.icon,
			onPress: b.onPress,
			text: A2(
				$elm$core$Maybe$withDefault,
				'',
				A2(
					$elm$core$Maybe$map,
					$author$project$Person$stringFromEmail,
					$elm$core$List$head(a.mailbox))),
			title: b.text
		};
	});
var $author$project$StyleQuery$itemFromQuery = F3(
	function (o, action, q) {
		switch (q.$) {
			case 'AnyMessage':
				return $elm$core$Maybe$Nothing;
			case 'Leaf':
				var pq = q.a;
				switch (pq.$) {
					case 'Tag':
						var t = pq.a;
						return $elm$core$Maybe$Just(
							{
								content: $elm$core$Basics$always($mdgriffith$elm_ui$Element$none),
								icon: A2(
									$elm$core$Maybe$withDefault,
									A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$hash, $phosphor_icons$phosphor_elm$Phosphor$Fill),
									A2($author$project$Symbol$iconFromTag, o, t)),
								onPress: $elm$core$Maybe$Just(
									action(q)),
								text: '',
								title: t
							});
					case 'Person':
						var dir = pq.a;
						var p = pq.b;
						return $elm$core$Maybe$Just(
							A4(
								$author$project$StyleQuery$itemFromPerson,
								function (p_) {
									return $elm$core$Maybe$Just(
										action(
											$author$project$Query$Leaf(
												A2($author$project$Query$Person, dir, p_))));
								},
								false,
								$elm$core$Maybe$Just(
									A2($author$project$StyleQuery$iconFromDirection, true, dir)),
								p));
					default:
						return $elm$core$Maybe$Nothing;
				}
			default:
				return $elm$core$Maybe$Just(
					{
						content: $elm$core$Basics$always($mdgriffith$elm_ui$Element$none),
						icon: $elm$core$Basics$always($mdgriffith$elm_ui$Element$none),
						onPress: $elm$core$Maybe$Just(
							action(q)),
						text: $author$project$Query$queryString(q),
						title: $author$project$Query$queryString(q)
					});
		}
	});
var $author$project$Style$noIcon = function (_v0) {
	return $mdgriffith$elm_ui$Element$none;
};
var $Orasund$elm_ui_widgets$Widget$Material$Color$textAndBackground = function (color) {
	return _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Background$color(
			$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(color)),
			$mdgriffith$elm_ui$Element$Font$color(
			$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
				$Orasund$elm_ui_widgets$Widget$Material$Color$accessibleTextColor(color)))
		]);
};
var $Orasund$elm_ui_widgets$Internal$Material$List$sideSheet = function (palette) {
	return {
		content: {
			element: _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Border$color(
					$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
						$Orasund$elm_ui_widgets$Internal$Material$Palette$gray(palette)))
				]),
			ifFirst: _List_Nil,
			ifLast: _List_Nil,
			ifSingleton: _List_Nil,
			otherwise: _List_Nil
		},
		elementColumn: _Utils_ap(
			$Orasund$elm_ui_widgets$Widget$Material$Color$textAndBackground(palette.surface),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					A2($mdgriffith$elm_ui$Element$maximum, 360, $mdgriffith$elm_ui$Element$fill)),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					A2($mdgriffith$elm_ui$Element$paddingXY, 0, 8),
					$mdgriffith$elm_ui$Element$Border$color(
					$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
						$Orasund$elm_ui_widgets$Internal$Material$Palette$gray(palette)))
				]))
	};
};
var $Orasund$elm_ui_widgets$Widget$Material$sideSheet = $Orasund$elm_ui_widgets$Internal$Material$List$sideSheet;
var $mdgriffith$elm_ui$Element$InternalColumn = function (a) {
	return {$: 'InternalColumn', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$GridPosition = function (a) {
	return {$: 'GridPosition', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$GridTemplateStyle = function (a) {
	return {$: 'GridTemplateStyle', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$AsGrid = {$: 'AsGrid'};
var $mdgriffith$elm_ui$Internal$Model$asGrid = $mdgriffith$elm_ui$Internal$Model$AsGrid;
var $mdgriffith$elm_ui$Internal$Model$getSpacing = F2(
	function (attrs, _default) {
		return A2(
			$elm$core$Maybe$withDefault,
			_default,
			A3(
				$elm$core$List$foldr,
				F2(
					function (attr, acc) {
						if (acc.$ === 'Just') {
							var x = acc.a;
							return $elm$core$Maybe$Just(x);
						} else {
							if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
								var _v2 = attr.b;
								var x = _v2.b;
								var y = _v2.c;
								return $elm$core$Maybe$Just(
									_Utils_Tuple2(x, y));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}),
				$elm$core$Maybe$Nothing,
				attrs));
	});
var $mdgriffith$elm_ui$Internal$Flag$gridPosition = $mdgriffith$elm_ui$Internal$Flag$flag(35);
var $mdgriffith$elm_ui$Internal$Flag$gridTemplate = $mdgriffith$elm_ui$Internal$Flag$flag(34);
var $elm$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (n <= 0) {
				return result;
			} else {
				var $temp$result = A2($elm$core$List$cons, value, result),
					$temp$n = n - 1,
					$temp$value = value;
				result = $temp$result;
				n = $temp$n;
				value = $temp$value;
				continue repeatHelp;
			}
		}
	});
var $elm$core$List$repeat = F2(
	function (n, value) {
		return A3($elm$core$List$repeatHelp, _List_Nil, n, value);
	});
var $mdgriffith$elm_ui$Element$tableHelper = F2(
	function (attrs, config) {
		var onGrid = F3(
			function (rowLevel, columnLevel, elem) {
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$StyleClass,
							$mdgriffith$elm_ui$Internal$Flag$gridPosition,
							$mdgriffith$elm_ui$Internal$Model$GridPosition(
								{col: columnLevel, height: 1, row: rowLevel, width: 1}))
						]),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[elem])));
			});
		var columnWidth = function (col) {
			if (col.$ === 'InternalIndexedColumn') {
				var colConfig = col.a;
				return colConfig.width;
			} else {
				var colConfig = col.a;
				return colConfig.width;
			}
		};
		var columnHeader = function (col) {
			if (col.$ === 'InternalIndexedColumn') {
				var colConfig = col.a;
				return colConfig.header;
			} else {
				var colConfig = col.a;
				return colConfig.header;
			}
		};
		var maybeHeaders = function (headers) {
			return A2(
				$elm$core$List$all,
				$elm$core$Basics$eq($mdgriffith$elm_ui$Internal$Model$Empty),
				headers) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A2(
					$elm$core$List$indexedMap,
					F2(
						function (col, header) {
							return A3(onGrid, 1, col + 1, header);
						}),
					headers));
		}(
			A2($elm$core$List$map, columnHeader, config.columns));
		var add = F3(
			function (cell, columnConfig, cursor) {
				if (columnConfig.$ === 'InternalIndexedColumn') {
					var col = columnConfig.a;
					return _Utils_update(
						cursor,
						{
							column: cursor.column + 1,
							elements: A2(
								$elm$core$List$cons,
								A3(
									onGrid,
									cursor.row,
									cursor.column,
									A2(
										col.view,
										_Utils_eq(maybeHeaders, $elm$core$Maybe$Nothing) ? (cursor.row - 1) : (cursor.row - 2),
										cell)),
								cursor.elements)
						});
				} else {
					var col = columnConfig.a;
					return {
						column: cursor.column + 1,
						elements: A2(
							$elm$core$List$cons,
							A3(
								onGrid,
								cursor.row,
								cursor.column,
								col.view(cell)),
							cursor.elements),
						row: cursor.row
					};
				}
			});
		var build = F3(
			function (columns, rowData, cursor) {
				var newCursor = A3(
					$elm$core$List$foldl,
					add(rowData),
					cursor,
					columns);
				return {column: 1, elements: newCursor.elements, row: cursor.row + 1};
			});
		var children = A3(
			$elm$core$List$foldl,
			build(config.columns),
			{
				column: 1,
				elements: _List_Nil,
				row: _Utils_eq(maybeHeaders, $elm$core$Maybe$Nothing) ? 1 : 2
			},
			config.data);
		var _v0 = A2(
			$mdgriffith$elm_ui$Internal$Model$getSpacing,
			attrs,
			_Utils_Tuple2(0, 0));
		var sX = _v0.a;
		var sY = _v0.b;
		var template = A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$gridTemplate,
			$mdgriffith$elm_ui$Internal$Model$GridTemplateStyle(
				{
					columns: A2($elm$core$List$map, columnWidth, config.columns),
					rows: A2(
						$elm$core$List$repeat,
						$elm$core$List$length(config.data),
						$mdgriffith$elm_ui$Internal$Model$Content),
					spacing: _Utils_Tuple2(
						$mdgriffith$elm_ui$Element$px(sX),
						$mdgriffith$elm_ui$Element$px(sY))
				}));
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asGrid,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				A2($elm$core$List$cons, template, attrs)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				function () {
					if (maybeHeaders.$ === 'Nothing') {
						return children.elements;
					} else {
						var renderedHeaders = maybeHeaders.a;
						return _Utils_ap(
							renderedHeaders,
							$elm$core$List$reverse(children.elements));
					}
				}()));
	});
var $mdgriffith$elm_ui$Element$table = F2(
	function (attrs, config) {
		return A2(
			$mdgriffith$elm_ui$Element$tableHelper,
			attrs,
			{
				columns: A2($elm$core$List$map, $mdgriffith$elm_ui$Element$InternalColumn, config.columns),
				data: config.data
			});
	});
var $Orasund$elm_ui_widgets$Internal$Button$textButton = F2(
	function (style, _v0) {
		var onPress = _v0.onPress;
		var text = _v0.text;
		return A2(
			$Orasund$elm_ui_widgets$Internal$Button$button,
			style,
			{
				icon: $elm$core$Basics$always($mdgriffith$elm_ui$Element$none),
				onPress: onPress,
				text: text
			});
	});
var $Orasund$elm_ui_widgets$Widget$textButton = F2(
	function (style, _v0) {
		var text = _v0.text;
		var onPress = _v0.onPress;
		var fun = $Orasund$elm_ui_widgets$Internal$Button$textButton;
		return A2(
			fun,
			style,
			{onPress: onPress, text: text});
	});
var $author$project$Main$viewTagChange = F5(
	function (symbolf, press, change, selected, x) {
		var viewf = function (match) {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$inFront(
						A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$alpha(0.0),
									$mdgriffith$elm_ui$Element$mouseOver(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$alpha(1.0)
										])),
									$mdgriffith$elm_ui$Element$inFront(
									A2(
										$mdgriffith$elm_ui$Element$el,
										$author$project$StyleQuery$positionAction($author$project$Style$iconstyle._default).b,
										A2(
											$author$project$StyleQuery$listChangeAnnotation,
											match,
											$author$project$StyleQuery$positionAction($author$project$Style$iconstyle._default).a)))
								]),
							_List_Nil))
					]),
				(match ? $mdgriffith$elm_ui$Element$el(
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$alignRight])) : $mdgriffith$elm_ui$Element$el(
					$author$project$Style$semiTransparent(0.35)))(
					A2(
						$Orasund$elm_ui_widgets$Widget$textButton,
						A2($author$project$Style$denseIconButton, $author$project$Style$pad.dense, $author$project$Style$palette.tag),
						{
							icon: $elm$core$Basics$always($mdgriffith$elm_ui$Element$none),
							onPress: change(
								(match ? $author$project$ListChange$Remove : $author$project$ListChange$UpAdd)(x.tagchange)),
							text: A2(
								$elm$core$Maybe$withDefault,
								'',
								A2(
									$elm$core$Maybe$map,
									A2(
										$elm$core$Basics$composeR,
										match ? $elm$core$Tuple$first : $elm$core$Tuple$second,
										A2($elm$core$Basics$composeR, $author$project$Notmuch$postable, $elm$core$String$fromInt)),
									$author$project$Query$queryable(x.matching)))
						})));
		};
		return {
			label: A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$alignLeft]),
				A4(
					$author$project$StyleQuery$buttonElementFromTag,
					symbolf,
					A6(
						$author$project$StyleQuery$denseButtonStyleAnnoted,
						$author$project$Style$pad.tag,
						$author$project$Style$palette.tag,
						false,
						$author$project$StyleQuery$materialStateButton(
							A2(
								$elm$core$List$any,
								$elm$core$Basics$eq(x.tagchange),
								A2(
									$elm$core$List$filterMap,
									$elm$core$Basics$identity,
									_List_fromArray(
										[
											$author$project$Query$maybeTag(selected)
										])))),
						_List_Nil,
						$elm$core$Maybe$Nothing),
					press(x.tagchange),
					x.tagchange)),
			matches: viewf(true),
			nonmatches: viewf(false)
		};
	});
var $author$project$Main$viewTagChanges = F6(
	function (symbolf, press, actf, sel, attrs, tcs) {
		var _v0 = function () {
			if ((sel.$ === 'Leaf') && (sel.a.$ === 'Tag')) {
				var t = sel.a.a;
				return A2(
					$elm$core$List$any,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.tagchange;
						},
						$elm$core$Basics$eq(t)),
					tcs) ? $mdgriffith$elm_ui$Element$none : $mdgriffith$elm_ui$Element$none;
			} else {
				return $mdgriffith$elm_ui$Element$none;
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$row,
			attrs,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$table,
					_List_Nil,
					{
						columns: _List_fromArray(
							[
								{
								header: $mdgriffith$elm_ui$Element$none,
								view: function ($) {
									return $.label;
								},
								width: $mdgriffith$elm_ui$Element$shrink
							},
								{
								header: $mdgriffith$elm_ui$Element$none,
								view: function ($) {
									return $.matches;
								},
								width: $mdgriffith$elm_ui$Element$shrink
							},
								{
								header: $mdgriffith$elm_ui$Element$none,
								view: function ($) {
									return $.nonmatches;
								},
								width: $mdgriffith$elm_ui$Element$shrink
							}
							]),
						data: A2(
							$elm$core$List$map,
							A4($author$project$Main$viewTagChange, symbolf, press, actf, sel),
							tcs)
					})
				]));
	});
var $author$project$Main$viewSearchSelection = F6(
	function (symbolf, _v0, s, pa, d, _v1) {
		var _v2 = function () {
			if ((s.$ === 'Leaf') && (s.a.$ === 'Tag')) {
				var tag = s.a.a;
				return _Utils_Tuple2(
					A6(
						$author$project$Main$viewTagChanges,
						symbolf,
						$elm$core$Basics$always($elm$core$Maybe$Nothing),
						A2(
							$elm$core$Basics$composeR,
							$elm$core$List$singleton,
							A2($elm$core$Basics$composeR, $author$project$Main$ChangeTags, $elm$core$Maybe$Just)),
						s,
						_List_Nil,
						A2(
							$elm$core$List$filterMap,
							function (tx) {
								return A2(
									$author$project$Access$justIf,
									A2(
										$elm$core$Basics$composeR,
										function ($) {
											return $.tagchange;
										},
										$elm$core$Basics$eq(tag)),
									tx);
							},
							d.tagchanges)),
					_List_Nil);
			} else {
				return _Utils_Tuple2(
					$mdgriffith$elm_ui$Element$none,
					A2(
						$elm$core$List$filterMap,
						function (sq) {
							return A2($author$project$Query$equal, sq.subquery, s) ? A2(
								$elm$core$Maybe$map,
								A2(
									$author$project$Access$mapField,
									$author$project$Access$icon,
									$author$project$Main$iconAnnotateCount(sq.matching)),
								A3(
									$author$project$StyleQuery$itemFromQuery,
									symbolf,
									$elm$core$Basics$always(
										$author$project$Main$Global($author$project$Main$Noop)),
									s)) : $elm$core$Maybe$Nothing;
						},
						d.subqueries));
			}
		}();
		var tagchanges = _v2.a;
		var selectedsubqueries = _v2.b;
		return _List_fromArray(
			[
				tagchanges,
				A3(
				$author$project$Access$ifEmpty,
				$mdgriffith$elm_ui$Element$none,
				$Orasund$elm_ui_widgets$Widget$itemList(
					$Orasund$elm_ui_widgets$Widget$Material$sideSheet($author$project$Style$palette._default)),
				A2(
					$elm$core$List$map,
					$Orasund$elm_ui_widgets$Widget$multiLineItem(
						$Orasund$elm_ui_widgets$Widget$Material$multiLineItem($author$project$Style$palette._default)),
					selectedsubqueries)),
				A2(
				$mdgriffith$elm_ui$Element$wrappedRow,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						A2(
						$Orasund$elm_ui_widgets$Widget$button,
						A2($author$project$Style$denseIconButton, $author$project$Style$one, $author$project$Style$palette._default),
						{
							icon: A2(
								$elm$core$Maybe$withDefault,
								$author$project$Style$noIcon,
								A2($author$project$Symbol$iconFromTag, symbolf, 'set')),
							onPress: $elm$core$Maybe$Just(
								A2($author$project$Main$AddSearch, $author$project$Query$RightQuery, s)),
							text: 'search'
						}),
						A2(
						$Orasund$elm_ui_widgets$Widget$button,
						A2($author$project$Style$denseIconButton, $author$project$Style$pad.densest, $author$project$Style$palette._default),
						{
							icon: A2(
								$elm$core$Maybe$withDefault,
								$elm$core$Basics$always($mdgriffith$elm_ui$Element$none),
								A2($author$project$Symbol$iconFromTag, symbolf, 'and')),
							onPress: $elm$core$Maybe$Just(
								A2($author$project$Main$AddSearch, $author$project$Query$And, s)),
							text: 'and'
						}),
						A2(
						$Orasund$elm_ui_widgets$Widget$button,
						A2($author$project$Style$denseIconButton, $author$project$Style$pad.densest, $author$project$Style$palette._default),
						{
							icon: A2(
								$elm$core$Maybe$withDefault,
								$elm$core$Basics$always($mdgriffith$elm_ui$Element$none),
								A2($author$project$Symbol$iconFromTag, symbolf, 'or')),
							onPress: $elm$core$Maybe$Just(
								A2($author$project$Main$AddSearch, $author$project$Query$Or, s)),
							text: 'or'
						}),
						A2(
						$Orasund$elm_ui_widgets$Widget$button,
						A2($author$project$Style$denseIconButton, $author$project$Style$pad.densest, $author$project$Style$palette._default),
						{
							icon: A2(
								$elm$core$Maybe$withDefault,
								$elm$core$Basics$always($mdgriffith$elm_ui$Element$none),
								A2($author$project$Symbol$iconFromTag, symbolf, 'but')),
							onPress: $elm$core$Maybe$Just(
								A2($author$project$Main$AddSearch, $author$project$Query$ButNot, s)),
							text: 'but'
						})
					]))
			]);
	});
var $author$project$Main$annotateCount = F2(
	function (styl, c) {
		return A5(
			$author$project$Annotate$annotate,
			$author$project$StyleQuery$positionBR,
			$mdgriffith$elm_ui$Element$inFront,
			styl,
			A2(
				$author$project$StyleQuery$iconFromCount,
				$elm$core$Maybe$Just($author$project$Style$palette.count.on.primary),
				c),
			{color: $author$project$Style$palette.count.primary, size: $author$project$Style$fontsize.normal});
	});
var $author$project$StyleQuery$buttonFromQuery = F6(
	function (o, prefericon, msgf, ann, statef, q) {
		return _Utils_Tuple2(
			$author$project$Query$queryString(q),
			function () {
				switch (q.$) {
					case 'Leaf':
						var p = q.a;
						return A7(
							$author$project$StyleQuery$buttonFromLeafQuery,
							o,
							prefericon,
							function (q_) {
								return msgf(
									$author$project$Query$Leaf(q_));
							},
							ann,
							function (q_) {
								return statef(
									$author$project$Query$Leaf(q_));
							},
							$author$project$Style$pad.dense,
							p);
					case 'AnyMessage':
						return $mdgriffith$elm_ui$Element$text('*');
					default:
						var op = q.a;
						var a = q.b;
						return A2(
							$author$project$Grid$keyedRow,
							_List_Nil,
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									'op',
									A3(
										$author$project$StyleQuery$viewlogic,
										o,
										$author$project$Query$stringFromOperator(op),
										$author$project$Style$iconstyle._default)),
								A2(
									$elm$core$List$map,
									A5($author$project$StyleQuery$buttonFromQuery, o, prefericon, msgf, ann, statef),
									a)));
				}
			}());
	});
var $author$project$Main$viewSubquery = F4(
	function (symbolf, s, _v0, t) {
		return A2(
			$elm$core$Tuple$mapSecond,
			A2($author$project$Main$annotateCount, _List_Nil, t.matching),
			A6(
				$author$project$StyleQuery$buttonFromQuery,
				symbolf,
				true,
				function (q) {
					return $elm$core$Maybe$Just(
						$author$project$Main$SelectQuery(q));
				},
				$elm$core$Maybe$Nothing,
				$elm$core$Basics$eq(s),
				t.subquery));
	});
var $phosphor_icons$phosphor_elm$Phosphor$x = function (weight) {
	var elements = function () {
		switch (weight.$) {
			case 'Bold':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('200'),
								$elm$svg$Svg$Attributes$y1('56'),
								$elm$svg$Svg$Attributes$x2('56'),
								$elm$svg$Svg$Attributes$y2('200'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('200'),
								$elm$svg$Svg$Attributes$y1('200'),
								$elm$svg$Svg$Attributes$x2('56'),
								$elm$svg$Svg$Attributes$y2('56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('24')
							]),
						_List_Nil)
					]);
			case 'Duotone':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('200'),
								$elm$svg$Svg$Attributes$y1('56'),
								$elm$svg$Svg$Attributes$x2('56'),
								$elm$svg$Svg$Attributes$y2('200'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('200'),
								$elm$svg$Svg$Attributes$y1('200'),
								$elm$svg$Svg$Attributes$x2('56'),
								$elm$svg$Svg$Attributes$y2('56'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
			case 'Fill':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d('M139.3,128l66.4-66.3a8.1,8.1,0,0,0-11.4-11.4L128,116.7,61.7,50.3A8.1,8.1,0,0,0,50.3,61.7L116.7,128,50.3,194.3a8.1,8.1,0,0,0,0,11.4,8.2,8.2,0,0,0,11.4,0L128,139.3l66.3,66.4a8.2,8.2,0,0,0,11.4,0,8.1,8.1,0,0,0,0-11.4Z')
							]),
						_List_Nil)
					]);
			case 'Light':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('200'),
								$elm$svg$Svg$Attributes$y1('56'),
								$elm$svg$Svg$Attributes$x2('56'),
								$elm$svg$Svg$Attributes$y2('200'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('200'),
								$elm$svg$Svg$Attributes$y1('200'),
								$elm$svg$Svg$Attributes$x2('56'),
								$elm$svg$Svg$Attributes$y2('56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('12')
							]),
						_List_Nil)
					]);
			case 'Thin':
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('200'),
								$elm$svg$Svg$Attributes$y1('56'),
								$elm$svg$Svg$Attributes$x2('56'),
								$elm$svg$Svg$Attributes$y2('200'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('200'),
								$elm$svg$Svg$Attributes$y1('200'),
								$elm$svg$Svg$Attributes$x2('56'),
								$elm$svg$Svg$Attributes$y2('56'),
								$elm$svg$Svg$Attributes$fill('none'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('8')
							]),
						_List_Nil)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('200'),
								$elm$svg$Svg$Attributes$y1('56'),
								$elm$svg$Svg$Attributes$x2('56'),
								$elm$svg$Svg$Attributes$y2('200'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil),
						A2(
						$elm$svg$Svg$line,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$x1('200'),
								$elm$svg$Svg$Attributes$y1('200'),
								$elm$svg$Svg$Attributes$x2('56'),
								$elm$svg$Svg$Attributes$y2('56'),
								$elm$svg$Svg$Attributes$stroke('currentColor'),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('16')
							]),
						_List_Nil)
					]);
		}
	}();
	return $phosphor_icons$phosphor_elm$Phosphor$makeBuilder(elements);
};
var $author$project$Main$viewSearch = F7(
	function (symbolf, attrs, users, s, pa, d, ns) {
		var query_tree = A4(
			$author$project$QueryEditor$viewQueryTree,
			symbolf,
			function (q) {
				return $elm$core$Maybe$Just(
					$author$project$Main$SelectQuery(
						$author$project$Query$Leaf(q)));
			},
			$author$project$Query$maybeQueryLeaf(s.selected_query),
			d.queryeditor);
		var ibutt = $Orasund$elm_ui_widgets$Widget$iconButton(
			A2($author$project$Style$denseIconButton, $author$project$Style$pad.densest, $author$project$Style$palette._default));
		var grayiconstyle = {
			color: A2(
				$Orasund$elm_ui_widgets$Widget$Material$Color$scaleOpacity,
				$Orasund$elm_ui_widgets$Widget$Material$Color$buttonPressedOpacity,
				$Orasund$elm_ui_widgets$Widget$Material$gray($author$project$Style$palette._default)),
			size: $author$project$Style$fontsize.large
		};
		var buttons = {
			edit: A2(
				$Orasund$elm_ui_widgets$Widget$iconButton,
				A2($author$project$Style$denseIconButton, $author$project$Style$one, $author$project$Style$palette._default),
				{
					icon: A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$pencil, $phosphor_icons$phosphor_elm$Phosphor$Thin),
					onPress: $elm$core$Maybe$Just(
						$author$project$Main$MapSearchDisplay(
							$author$project$Access$view.set($author$project$ElmailUrl$QueryEditor))),
					text: 'edit'
				}),
			edit_top: function () {
				var _v5 = d.view;
				if (_v5.$ === 'SearchHidden') {
					return A2(
						$Orasund$elm_ui_widgets$Widget$iconButton,
						A2($author$project$Style$denseIconButton, $author$project$Style$one, $author$project$Style$palette._default),
						{
							icon: A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$caretDown, $phosphor_icons$phosphor_elm$Phosphor$Thin),
							onPress: $elm$core$Maybe$Just(
								$author$project$Main$MapSearchDisplay(
									$author$project$Access$view.set($author$project$ElmailUrl$QueryEditor))),
							text: 'edit'
						});
				} else {
					return A2(
						$Orasund$elm_ui_widgets$Widget$iconButton,
						A2($author$project$Style$denseIconButton, $author$project$Style$one, $author$project$Style$palette._default),
						{
							icon: A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$caretUp, $phosphor_icons$phosphor_elm$Phosphor$Thin),
							onPress: $elm$core$Maybe$Just(
								$author$project$Main$MapSearchDisplay(
									$author$project$Access$view.set($author$project$ElmailUrl$SearchHidden))),
							text: 'tags display'
						});
				}
			}(),
			login: A3(
				$author$project$Main$viewLogin,
				true,
				$elm$core$Basics$always(
					$elm$core$Maybe$Just(
						$author$project$Main$MapSearchDisplay(
							$author$project$Access$view.set($author$project$ElmailUrl$User)))),
				$author$project$Main$aggregateSession(pa).user),
			note: ibutt(
				{
					icon: A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$chatTeardropText, $phosphor_icons$phosphor_elm$Phosphor$Fill),
					onPress: $elm$core$Maybe$Just(
						$author$project$Main$DraftReplyTo(
							$author$project$Main$aggregateSession(pa))),
					text: 'note'
				}),
			remove: ibutt(
				{
					icon: A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$x, $phosphor_icons$phosphor_elm$Phosphor$Thin),
					onPress: $elm$core$Maybe$Just($author$project$Main$RemoveBranch),
					text: 'remove search'
				}),
			save: ibutt(
				{
					icon: A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$floppyDisk, $phosphor_icons$phosphor_elm$Phosphor$Thin),
					onPress: $elm$core$Maybe$Just($author$project$Main$PostSaveNamedSearch),
					text: 'save'
				}),
			selection: function () {
				var _v6 = s.selected_query;
				if (_v6.$ === 'AnyMessage') {
					return $mdgriffith$elm_ui$Element$none;
				} else {
					return A2(
						$Orasund$elm_ui_widgets$Widget$iconButton,
						A2($author$project$Style$denseIconButton, $author$project$Style$one, $author$project$Style$palette._default),
						{
							icon: A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$selection, $phosphor_icons$phosphor_elm$Phosphor$Thin),
							onPress: $elm$core$Maybe$Just(
								$author$project$Main$MapSearchDisplay(
									$author$project$Access$view.set($author$project$ElmailUrl$SearchSelection))),
							text: 'selection'
						});
				}
			}(),
			tags: ($elm$core$List$isEmpty(d.tagchanges) && $elm$core$List$isEmpty(d.subqueries)) ? $mdgriffith$elm_ui$Element$none : A2(
				$Orasund$elm_ui_widgets$Widget$iconButton,
				A2($author$project$Style$denseIconButton, $author$project$Style$one, $author$project$Style$palette._default),
				{
					icon: A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$dotsNine, $phosphor_icons$phosphor_elm$Phosphor$Thin),
					onPress: $elm$core$Maybe$Just(
						$author$project$Main$MapSearchDisplay(
							$author$project$Access$view.set($author$project$ElmailUrl$Tagger))),
					text: 'tags'
				})
		};
		var leftmenu = function (bs) {
			return _Utils_ap(
				function () {
					var _v4 = d.view;
					if (_v4.$ === 'SearchHidden') {
						return _List_fromArray(
							[buttons.remove]);
					} else {
						return _List_fromArray(
							[
								buttons.edit_top,
								s.selection ? buttons.save : $mdgriffith$elm_ui$Element$none
							]);
					}
				}(),
				bs);
		};
		var rightmenu = function (bs) {
			return _Utils_ap(
				bs,
				_List_fromArray(
					[buttons.login, buttons.note]));
		};
		var butt = $Orasund$elm_ui_widgets$Widget$button(
			A2($author$project$Style$denseTextButton, $author$project$Style$pad.densest, $author$project$Style$palette._default));
		var counter = A2(
			$elm$core$Maybe$withDefault,
			ibutt(
				{
					icon: A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$arrowClockwise, $phosphor_icons$phosphor_elm$Phosphor$Thin),
					onPress: $elm$core$Maybe$Just(
						$author$project$Main$OfflineImap(true)),
					text: 'reload'
				}),
			A2(
				$elm$core$Maybe$map,
				function (n) {
					return A6(
						$author$project$Annotate$annotate,
						$author$project$StyleQuery$positionLeft,
						$mdgriffith$elm_ui$Element$behindContent,
						$author$project$Style$mouseFocus,
						A2($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$magnifyingGlass, $phosphor_icons$phosphor_elm$Phosphor$Thin),
						grayiconstyle,
						butt(
							{
								icon: $elm$core$Basics$always($mdgriffith$elm_ui$Element$none),
								onPress: $elm$core$Maybe$Just(
									$author$project$Main$OfflineImap(true)),
								text: $elm$core$String$fromInt(n)
							}));
				},
				$author$project$Query$queryable(d.matching)));
		var title = function () {
			var _v3 = d.view;
			if (_v3.$ === 'QueryEditor') {
				return A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$spacing($author$project$Style$five)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$multiline,
							$author$project$Style$inputTextStyle,
							{
								label: $mdgriffith$elm_ui$Element$Input$labelHidden('label'),
								onChange: function (t) {
									return $author$project$Main$MapSearchDisplay(
										function (d_) {
											return _Utils_update(
												d_,
												{name: t});
										});
								},
								placeholder: $elm$core$Maybe$Just(
									A2(
										$mdgriffith$elm_ui$Element$Input$placeholder,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(100))
											]),
										A3($author$project$Style$elmPhosphor, $phosphor_icons$phosphor_elm$Phosphor$textbox, $phosphor_icons$phosphor_elm$Phosphor$Thin, grayiconstyle))),
								spellcheck: true,
								text: d.name
							}),
							counter
						]));
			} else {
				return A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$spacing($author$project$Style$five)
						]),
					_List_fromArray(
						[buttons.edit, query_tree, counter]));
			}
		}();
		var _v0 = function () {
			var _v1 = d.view;
			switch (_v1.$) {
				case 'SearchHidden':
					return _Utils_Tuple2(
						_List_Nil,
						function () {
							var _v2 = d.status;
							if (_v2.$ === 'Request') {
								return $mdgriffith$elm_ui$Element$text('loading...');
							} else {
								return $mdgriffith$elm_ui$Element$none;
							}
						}());
				case 'QueryEditor':
					return _Utils_Tuple2(
						_List_fromArray(
							[buttons.selection, buttons.tags]),
						A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$spacing($author$project$Style$five)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$column,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$map,
											$author$project$Main$QueryEditorMsg,
											A3(
												$author$project$Main$viewQueryEditor,
												symbolf,
												$author$project$Query$maybeQueryLeaf(s.selected_query),
												d.queryeditor))
										]))
								])));
				case 'User':
					return _Utils_Tuple2(
						_List_fromArray(
							[buttons.selection, buttons.tags, buttons.edit]),
						A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$wrappedRow,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
										]),
									A2(
										$elm$core$List$map,
										A2(
											$author$project$Main$viewLogin,
											false,
											A2($elm$core$Basics$composeR, $author$project$Main$Login, $elm$core$Maybe$Just)),
										A2(
											$elm$core$List$cons,
											$elm$core$Maybe$Nothing,
											A2($elm$core$List$map, $elm$core$Maybe$Just, users))))
								])));
				case 'SearchSave':
					return _Utils_Tuple2(
						_List_fromArray(
							[buttons.login]),
						$mdgriffith$elm_ui$Element$none);
				case 'Tagger':
					return _Utils_Tuple2(
						_List_fromArray(
							[buttons.selection, buttons.edit]),
						A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							_List_fromArray(
								[
									A6(
									$author$project$Main$viewTagChanges,
									symbolf,
									function (t) {
										return $elm$core$Maybe$Just(
											$author$project$Main$MapSearchDisplay(
												function (d_) {
													return _Utils_update(
														d_,
														{
															tagchanges: A2(
																$elm$core$List$filter,
																A2(
																	$elm$core$Basics$composeR,
																	function ($) {
																		return $.tagchange;
																	},
																	$elm$core$Basics$neq(t)),
																d_.tagchanges)
														});
												}));
									},
									A2(
										$elm$core$Basics$composeR,
										$elm$core$List$singleton,
										A2($elm$core$Basics$composeR, $author$project$Main$ChangeTags, $elm$core$Maybe$Just)),
									s.selected_query,
									_List_Nil,
									d.tagchanges),
									A2(
									$mdgriffith$elm_ui$Element$wrappedRow,
									_Utils_ap(attrs.tags, attrs.headerRow),
									A2(
										$elm$core$List$map,
										$mdgriffith$elm_ui$Element$Keyed$el(_List_Nil),
										A2(
											$elm$core$List$map,
											A3($author$project$Main$viewSubquery, symbolf, s.selected_query, pa),
											d.subqueries)))
								])));
				default:
					return _Utils_Tuple2(
						_List_fromArray(
							[buttons.tags, buttons.edit]),
						A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$column,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
										]),
									A6($author$project$Main$viewSearchSelection, symbolf, attrs, s.selected_query, pa, d, ns))
								])));
			}
		}();
		var viewtabs = _v0.a;
		var viewelement = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$column,
			attrs.elementColumn,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					attrs.header,
					_Utils_ap(
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									]),
								_Utils_ap(
									leftmenu(_List_Nil),
									_List_fromArray(
										[title])))
							]),
						rightmenu(viewtabs))),
					viewelement
				]));
	});
var $author$project$Main$MapThreadDisplay = function (a) {
	return {$: 'MapThreadDisplay', a: a};
};
var $author$project$Main$flipOperator = function (x) {
	return A2(
		$elm$core$Maybe$withDefault,
		false,
		$author$project$Query$queryable(x.entire_thread)) ? _Utils_update(
		x,
		{
			entire_thread: $author$project$Query$Present(
				$elm$core$Maybe$Just(false))
		}) : _Utils_update(
		x,
		{
			entire_thread: $author$project$Query$Request(
				$elm$core$Maybe$Just(true))
		});
};
var $author$project$StyleQuery$iconFromCountTotal = F2(
	function (op, c) {
		var sel = _List_fromArray(
			[$mdgriffith$elm_ui$Element$Font$bold]);
		var outer = _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				$mdgriffith$elm_ui$Element$Font$color(
				$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor($author$project$Style$palette.count.primary)),
				$mdgriffith$elm_ui$Element$Background$color(
				$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor($author$project$Style$palette.count.on.primary))
			]);
		var grey = _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$color(
				$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor(
					$Orasund$elm_ui_widgets$Widget$Material$gray($author$project$Style$palette._default)))
			]);
		var sepstyle = grey;
		var _v0 = function () {
			var _v1 = _Utils_Tuple2(
				$author$project$Query$queryable(op.entire_thread),
				op.hidden);
			if (!_v1.b) {
				if (_v1.a.$ === 'Nothing') {
					var _v2 = _v1.a;
					return _Utils_Tuple2(grey, sel);
				} else {
					if (!_v1.a.a) {
						return _Utils_Tuple2(grey, sel);
					} else {
						return _Utils_Tuple2(sel, grey);
					}
				}
			} else {
				return _Utils_Tuple2(grey, grey);
			}
		}();
		var totalstyle = _v0.a;
		var matchingstyle = _v0.b;
		return _Utils_eq(c.total, c.matching) ? ((c.total === 1) ? $mdgriffith$elm_ui$Element$none : A2(
			$mdgriffith$elm_ui$Element$paragraph,
			outer,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					sepstyle,
					$mdgriffith$elm_ui$Element$text('[')),
					A2(
					$mdgriffith$elm_ui$Element$el,
					matchingstyle,
					$mdgriffith$elm_ui$Element$text(
						$elm$core$String$fromInt(c.total))),
					A2(
					$mdgriffith$elm_ui$Element$el,
					sepstyle,
					$mdgriffith$elm_ui$Element$text(']'))
				]))) : A2(
			$mdgriffith$elm_ui$Element$paragraph,
			outer,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					sepstyle,
					$mdgriffith$elm_ui$Element$text('[')),
					A2(
					$mdgriffith$elm_ui$Element$el,
					matchingstyle,
					$mdgriffith$elm_ui$Element$text(
						$elm$core$String$fromInt(c.matching))),
					A2(
					$mdgriffith$elm_ui$Element$el,
					sepstyle,
					$mdgriffith$elm_ui$Element$text('/')),
					A2(
					$mdgriffith$elm_ui$Element$el,
					totalstyle,
					$mdgriffith$elm_ui$Element$text(
						$elm$core$String$fromInt(c.total))),
					A2(
					$mdgriffith$elm_ui$Element$el,
					sepstyle,
					$mdgriffith$elm_ui$Element$text(']'))
				]));
	});
var $author$project$Query$isJustPresent = function (x) {
	if ((x.$ === 'Present') && (x.a.$ === 'Just')) {
		return true;
	} else {
		return false;
	}
};
var $author$project$Main$viewThread = F6(
	function (symbolf, attrs, s, pa, d, e_) {
		var vtags = A6($author$project$Main$timeTagRow, $author$project$Main$verbose, symbolf, pa, attrs, _List_Nil, s);
		var threadPerson = function (p) {
			return A6(
				$author$project$AddressInput$viewPersonSelected,
				s.prefericon,
				$elm$core$Maybe$Nothing,
				function (p_) {
					return $elm$core$Maybe$Just(
						$author$project$Main$SelectQuery(
							$author$project$Query$Leaf(
								A2($author$project$Query$Person, $author$project$Query$Participant, p_))));
				},
				$elm$core$Maybe$Nothing,
				$elm$core$Basics$always(
					A2(
						$elm$core$Maybe$withDefault,
						false,
						A2(
							$elm$core$Maybe$map,
							$author$project$Person$match(p),
							$author$project$Query$maybePerson(s.selected_query)))),
				p);
		};
		var redundant_header = $author$project$Query$isJustPresent(d.entire_thread) && (!d.hidden);
		var e = $author$project$Query$queryable(e_);
		var singlemessage_thread = e.total === 1;
		var subject = e.subject;
		var time = $mdgriffith$elm_ui$Element$text(e.time.date_relative);
		var count = A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Events$onClick(
					$author$project$Main$MapThreadDisplay($author$project$Main$flipOperator))
				]),
			A2($author$project$StyleQuery$iconFromCountTotal, d, e));
		var content = A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$centerX]),
			A6(
				$author$project$Main$viewTagChanges,
				symbolf,
				function (t) {
					return $elm$core$Maybe$Just(
						$author$project$Main$MapThreadDisplay(
							function (d_) {
								return _Utils_update(
									d_,
									{
										tagchanges: A2(
											$elm$core$Debug$log,
											'?',
											A2(
												$elm$core$List$filter,
												A2(
													$elm$core$Basics$composeR,
													function ($) {
														return $.tagchange;
													},
													$elm$core$Basics$neq(t)),
												d_.tagchanges))
									});
							}));
				},
				A2(
					$elm$core$Basics$composeR,
					$elm$core$List$singleton,
					A2($elm$core$Basics$composeR, $author$project$Main$ChangeTags, $elm$core$Maybe$Just)),
				s.selected_query,
				_Utils_ap(attrs.tags, attrs.headerRow),
				d.tagchanges));
		var authors_ = A2(
			$elm$core$List$map,
			$mdgriffith$elm_ui$Element$el(
				A3($author$project$Style$annotateQueryable, $elm$core$Maybe$Nothing, d.authors, _List_Nil)),
			function () {
				var _v0 = $author$project$Query$queryable(d.authors);
				if (!_v0.b) {
					return A2($elm$core$List$map, threadPerson, e.authors);
				} else {
					return A2(
						$elm$core$List$map,
						function (p) {
							return A3(
								$author$project$Main$annotateCount,
								_List_Nil,
								p.matching,
								threadPerson(p.person));
						},
						$author$project$Query$queryable(d.authors));
				}
			}());
		var header = A2(
			$mdgriffith$elm_ui$Element$column,
			attrs.header,
			_List_fromArray(
				[
					redundant_header ? A2(
					$mdgriffith$elm_ui$Element$row,
					attrs.headerRow,
					_List_fromArray(
						[
							count,
							A2($mdgriffith$elm_ui$Element$el, attrs.time, time)
						])) : A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$row,
							attrs.headerRow,
							_List_fromArray(
								[
									count,
									A2($mdgriffith$elm_ui$Element$el, attrs.time, time)
								])),
							redundant_header ? $mdgriffith$elm_ui$Element$none : A2(
							$mdgriffith$elm_ui$Element$wrappedRow,
							_Utils_ap(attrs.headerRow, attrs.persons),
							authors_),
							A2(
							$mdgriffith$elm_ui$Element$textColumn,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
								A2($elm$core$List$cons, $author$project$Plaintext$wordWrap, attrs.subject)),
							$elm$core$List$singleton(
								A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_List_Nil,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$text(subject)
										])))),
							vtags
						]))
				]));
		return ($author$project$Query$isJustPresent(d.entire_thread) && singlemessage_thread) ? content : A4($author$project$Main$viewVisibilityState, $author$project$Tags$Full, attrs.elementColumn, header, content);
	});
var $author$project$Main$viewEmailTypeCard = F4(
	function (o, sel, pa, me) {
		var id = A2(
			$elm$core$Maybe$andThen,
			A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $author$project$Main$idStringMaybe),
			me);
		var content = function (_v1) {
			var match = _v1.a;
			var e = _v1.b;
			var state = A2(
				$author$project$Main$stateTagsFromEmailType,
				sel,
				_Utils_Tuple2(match, e));
			var style_withcardclicked = function (sf) {
				return A3(
					$author$project$Access$mapField,
					$author$project$Access$elementColumn,
					$author$project$Style$listPrepend(
						_List_fromArray(
							[
								$author$project$Style$onClickStopPropagation($author$project$Main$CardClicked)
							])),
					sf(state));
			};
			switch (e.$) {
				case 'Thread':
					var d = e.a;
					var t = e.b;
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(
							$mdgriffith$elm_ui$Element$none,
							A6(
								$author$project$Main$viewThread,
								$author$project$Symbol$dictGet(o.symbols),
								style_withcardclicked($author$project$Style$branches.thread),
								state,
								pa,
								d,
								t)));
				case 'Search':
					var d = e.a;
					var ns = e.b;
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(
							A7(
								$author$project$Main$viewSearch,
								$author$project$Symbol$dictGet(o.symbols),
								style_withcardclicked($author$project$Style$branches.search),
								sel.users,
								state,
								pa,
								d,
								ns),
							A2(
								$Orasund$elm_ui_widgets$Widget$button,
								$author$project$Style$textButton,
								{
									icon: $elm$core$Basics$always($mdgriffith$elm_ui$Element$none),
									onPress: $elm$core$Maybe$Just(
										A2(
											$author$project$Main$DoQueryShow,
											$author$project$Main$aggregateSession(pa),
											function (e__) {
												return _Utils_Tuple2(e__, e__ + $author$project$Main$fetchN);
											}(
												A2(
													$elm$core$Maybe$withDefault,
													_Utils_Tuple2(0, 0),
													$author$project$Query$queryable(d.status)).b))),
									text: 'more'
								})));
				case 'Email':
					var d = e.a;
					var mail = e.b;
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(
							A6(
								$author$project$Main$viewEmail,
								$author$project$Symbol$dictGet(o.symbols),
								style_withcardclicked($author$project$Style$branches.email),
								state,
								pa,
								d,
								mail),
							$mdgriffith$elm_ui$Element$none));
				case 'Draft':
					var d = e.a;
					var mail = e.b;
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(
							A6(
								$author$project$Main$viewDraft,
								$author$project$Symbol$dictGet(o.symbols),
								style_withcardclicked($author$project$Style$branches.draft),
								state,
								pa,
								d,
								mail),
							$mdgriffith$elm_ui$Element$none));
				default:
					return $elm$core$Maybe$Just(
						_Utils_Tuple2($mdgriffith$elm_ui$Element$none, $mdgriffith$elm_ui$Element$none));
			}
		};
		return {
			content: $elm$core$Maybe$Just(
				A3(
					$elm$core$Tuple$mapBoth,
					$mdgriffith$elm_ui$Element$map(
						$author$project$Main$At(pa.rpath)),
					$mdgriffith$elm_ui$Element$map(
						$author$project$Main$At(pa.rpath)),
					A2(
						$elm$core$Maybe$withDefault,
						_Utils_Tuple2($mdgriffith$elm_ui$Element$none, $mdgriffith$elm_ui$Element$none),
						A2($elm$core$Maybe$andThen, content, me)))),
			id: id,
			key: A2($elm$core$Maybe$withDefault, pa.rpathstring, id),
			wrapper: $author$project$Query$And
		};
	});
var $author$project$Grid$FromPrevious = function (a) {
	return {$: 'FromPrevious', a: a};
};
var $author$project$Grid$Outside = function (a) {
	return {$: 'Outside', a: a};
};
var $author$project$Access$cardChildrenStyle = {
	get: function ($) {
		return $.cardChildrenStyle;
	},
	set: F2(
		function (value, h) {
			return _Utils_update(
				h,
				{cardChildrenStyle: value});
		})
};
var $author$project$Access$childrenContainer = {
	get: function ($) {
		return $.childrenContainer;
	},
	set: F2(
		function (value, h) {
			return _Utils_update(
				h,
				{childrenContainer: value});
		})
};
var $author$project$Grid$tickDistance = function (x) {
	return {distance: x, fontfactor: 0.5};
};
var $author$project$Style$scrollpad = 32;
var $author$project$Style$widthMin = 250;
var $author$project$Style$widthPref = function () {
	var cols = 1;
	return ((cols * $author$project$Style$widthMin) + $author$project$Style$scrollpad) + ((cols - 1) * $author$project$Style$five);
}();
var $author$project$Style$widthFillFromPref = $mdgriffith$elm_ui$Element$width(
	A2($mdgriffith$elm_ui$Element$minimum, $author$project$Style$widthPref, $mdgriffith$elm_ui$Element$fill));
var $author$project$Style$widthPxPref = $mdgriffith$elm_ui$Element$width(
	$mdgriffith$elm_ui$Element$px($author$project$Style$widthPref + $author$project$Style$scrollpad));
var $author$project$Style$wireContainerStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
		$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
		$mdgriffith$elm_ui$Element$scrollbarY,
		$mdgriffith$elm_ui$Element$alignTop
	]);
var $author$project$Main$emailTypeLayout = function (e) {
	var vertical = $author$project$Grid$Wire(
		{
			border_width: $author$project$Style$two,
			color: $Orasund$elm_ui_widgets$Widget$Material$Color$fromColor($author$project$Style$palette.email.background),
			elementContainer: $author$project$Style$wireContainerStyle,
			tick_length: 0,
			tick_position: $author$project$Grid$FromPrevious(
				$author$project$Grid$tickDistance(1)),
			tick_width: (1 + $author$project$Style$fontsize.normal) + (2 * $author$project$Style$pad.person)
		});
	var indent = $author$project$Grid$Wire(
		{
			border_width: $author$project$Style$two,
			color: $Orasund$elm_ui_widgets$Widget$Material$Color$fromColor($author$project$Style$palette.email.background),
			elementContainer: $author$project$Style$wireContainerStyle,
			tick_length: $author$project$Style$two,
			tick_position: $author$project$Grid$FromPrevious(
				$author$project$Grid$tickDistance(1)),
			tick_width: (1 + $author$project$Style$fontsize.normal) + (2 * $author$project$Style$pad.person)
		});
	var _default = {
		cardChildrenStyle: _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$scrollbars,
				$mdgriffith$elm_ui$Element$alignTop
			]),
		childrenContainer: $elm$core$Maybe$Just(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$scrollbars
				])),
		layout: _Utils_Tuple2($author$project$Grid$Column, false),
		position: $author$project$Grid$Outside(
			_Utils_Tuple2($author$project$Grid$Column, false)),
		wire_children: _Utils_Tuple2(false, false),
		wirestyle: $author$project$Tree$branchColumn
	};
	if (e.$ === 'Just') {
		switch (e.a.$) {
			case 'Layout':
				var d = e.a.a;
				return d;
			case 'Search':
				var _v1 = e.a;
				var d = _v1.a;
				return {
					cardChildrenStyle: _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$author$project$Style$widthFillFromPref,
							$mdgriffith$elm_ui$Element$alignTop,
							$mdgriffith$elm_ui$Element$clip
						]),
					childrenContainer: $elm$core$Maybe$Just(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$padding($author$project$Style$five),
								A2($mdgriffith$elm_ui$Element$spacingXY, $author$project$Style$five, $author$project$Style$five),
								$mdgriffith$elm_ui$Element$alignTop,
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color(
								$Orasund$elm_ui_widgets$Widget$Material$Color$fromColor($author$project$Style$palette.search.background)),
								$mdgriffith$elm_ui$Element$htmlAttribute(
								A2($elm$html$Html$Attributes$style, 'flex-shrink', '10')),
								$mdgriffith$elm_ui$Element$htmlAttribute(
								A2($elm$html$Html$Attributes$style, 'flex-wrap', 'wrap')),
								$mdgriffith$elm_ui$Element$htmlAttribute(
								A2($elm$html$Html$Attributes$style, 'flex-direction', 'column')),
								$mdgriffith$elm_ui$Element$htmlAttribute(
								A2($elm$html$Html$Attributes$style, 'align-content', 'start')),
								$mdgriffith$elm_ui$Element$htmlAttribute(
								A2($elm$html$Html$Attributes$style, 'align-items', 'start')),
								$mdgriffith$elm_ui$Element$htmlAttribute(
								A2($elm$html$Html$Attributes$style, 'overflow-x', 'initial')),
								$mdgriffith$elm_ui$Element$htmlAttribute(
								A2($elm$html$Html$Attributes$style, 'overflow-y', 'auto'))
							])),
					layout: d.grid,
					position: $author$project$Grid$Outside(
						_Utils_Tuple2($author$project$Grid$Column, false)),
					wire_children: _Utils_Tuple2(false, false),
					wirestyle: $author$project$Tree$branchColumn
				};
			case 'Thread':
				var _v2 = e.a;
				var d = _v2.a;
				var t = _v2.b;
				return A3(
					$elm$core$Basics$composeR,
					A2(
						$author$project$Access$mapField,
						$author$project$Access$cardChildrenStyle,
						$author$project$Style$listPrepend(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
									$author$project$Style$widthPxPref,
									$mdgriffith$elm_ui$Element$htmlAttribute(
									A2($elm$html$Html$Attributes$style, 'min-width', '0'))
								]))),
					A2(
						$author$project$Access$mapField,
						$author$project$Access$childrenContainer,
						$elm$core$Maybe$map(
							$author$project$Style$listPrepend(_List_Nil))),
					_Utils_update(
						_default,
						{
							layout: d.grid,
							position: $author$project$Grid$Outside(
								_Utils_Tuple2($author$project$Grid$Column, true)),
							wire_children: _Utils_Tuple2(false, true),
							wirestyle: ($author$project$Query$isJustPresent(d.entire_thread) && (1 === $author$project$Query$queryable(t).total)) ? $author$project$Tree$branchColumn : vertical
						}));
			case 'Email':
				var _v3 = e.a;
				var d = _v3.a;
				return A3(
					$author$project$Access$mapField,
					$author$project$Access$cardChildrenStyle,
					$author$project$Style$listPrepend(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							])),
					_Utils_update(
						_default,
						{
							layout: d.grid,
							wire_children: _Utils_Tuple2(true, false),
							wirestyle: indent
						}));
			default:
				var _v4 = e.a;
				return _Utils_update(
					_default,
					{
						wire_children: _Utils_Tuple2(true, false),
						wirestyle: indent
					});
		}
	} else {
		return _default;
	}
};
var $mdgriffith$elm_ui$Internal$Model$mapAttr = F2(
	function (fn, attr) {
		switch (attr.$) {
			case 'NoAttribute':
				return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
			case 'Describe':
				var description = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Describe(description);
			case 'AlignX':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignX(x);
			case 'AlignY':
				var y = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignY(y);
			case 'Width':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Width(x);
			case 'Height':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Height(x);
			case 'Class':
				var x = attr.a;
				var y = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Class, x, y);
			case 'StyleClass':
				var flag = attr.a;
				var style = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, flag, style);
			case 'Nearby':
				var location = attr.a;
				var elem = attr.b;
				return A2(
					$mdgriffith$elm_ui$Internal$Model$Nearby,
					location,
					A2($mdgriffith$elm_ui$Internal$Model$map, fn, elem));
			case 'Attr':
				var htmlAttr = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Attr(
					A2($elm$virtual_dom$VirtualDom$mapAttribute, fn, htmlAttr));
			default:
				var fl = attr.a;
				var trans = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$TransformComponent, fl, trans);
		}
	});
var $mdgriffith$elm_ui$Element$mapAttribute = $mdgriffith$elm_ui$Internal$Model$mapAttr;
var $author$project$Grid$mapBranchWire = F2(
	function (f, x) {
		if (x.$ === 'NoWire') {
			return $author$project$Grid$NoWire;
		} else {
			var w = x.a;
			return $author$project$Grid$Wire(
				{
					border_width: w.border_width,
					color: w.color,
					elementContainer: A2(
						$elm$core$List$map,
						$mdgriffith$elm_ui$Element$mapAttribute(f),
						w.elementContainer),
					tick_length: w.tick_length,
					tick_position: w.tick_position,
					tick_width: w.tick_width
				});
		}
	});
var $author$project$Grid$mapTreeLayout = F2(
	function (f, x) {
		return {
			cardChildrenStyle: A2(
				$elm$core$List$map,
				$mdgriffith$elm_ui$Element$mapAttribute(f),
				x.cardChildrenStyle),
			childrenContainer: A2(
				$elm$core$Maybe$map,
				$elm$core$List$map(
					$mdgriffith$elm_ui$Element$mapAttribute(f)),
				x.childrenContainer),
			layout: x.layout,
			position: x.position,
			wire_children: x.wire_children,
			wirestyle: A2($author$project$Grid$mapBranchWire, f, x.wirestyle)
		};
	});
var $author$project$Main$rootAggregate = function (_v0) {
	return A3(
		$author$project$Tree$treeAggregate,
		{
			cardChildrenStyle: _List_Nil,
			childrenContainer: $elm$core$Maybe$Just(_List_Nil),
			layout: _Utils_Tuple2($author$project$Grid$Row, false),
			position: $author$project$Grid$Outside(
				_Utils_Tuple2($author$project$Grid$Column, false)),
			wire_children: _Utils_Tuple2(false, false),
			wirestyle: $author$project$Tree$branchColumn
		},
		_Utils_Tuple2(false, false),
		$author$project$Main$rootAgg);
};
var $author$project$Main$viewTree = function (model) {
	var _v0 = $author$project$DictShow$root(model.searches);
	var d = _v0.a;
	var z = _v0.b;
	var e_ = function (e) {
		return A2(
			$elm$core$Maybe$andThen,
			function (_v5) {
				var b = _v5.a;
				var id = _v5.b;
				return A2(
					$elm$core$Maybe$map,
					function (a) {
						return _Utils_Tuple2(b, a);
					},
					A2($author$project$Main$getid, d, id));
			},
			e);
	};
	var viewf = function (_v4) {
		var pa = _v4.a;
		var z_ = _v4.b;
		return $elm$core$Maybe$Just(
			A4(
				$author$project$Main$viewEmailTypeCard,
				model.overlay,
				model.selection,
				pa.aggregate,
				A2(
					$author$project$DictShow$mapDict,
					d,
					$author$project$Show$current(z_))));
	};
	return A5(
		$author$project$Tree$viewTree,
		F3(
			function (_v1, pa, _v2) {
				var e = _v1.b;
				return A2(
					$author$project$Grid$mapTreeLayout,
					$author$project$Main$At(pa.rpath),
					$author$project$Main$emailTypeLayout(
						A2(
							$elm$core$Maybe$map,
							$elm$core$Tuple$second,
							e_(e))));
			}),
		F2(
			function (_v3, acc) {
				var i = _v3.a;
				var e = _v3.b;
				return A2(
					$author$project$Main$treeaggregate,
					_Utils_Tuple2(
						i,
						e_(e)),
					acc);
			}),
		viewf,
		$author$project$Main$rootAggregate,
		z);
};
var $author$project$Main$view = function (model) {
	var h = function () {
		var _v4 = model.display;
		switch (_v4.$) {
			case 'Home':
				return A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$padding($author$project$Style$five)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$link,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$size(24),
											$mdgriffith$elm_ui$Element$padding($author$project$Style$ten),
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
										]),
									{
										label: A2(
											$mdgriffith$elm_ui$Element$paragraph,
											_List_Nil,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$text('Notmuch'),
													A2(
													$mdgriffith$elm_ui$Element$el,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$Font$size(16),
															$mdgriffith$elm_ui$Element$Font$color($Orasund$elm_ui_framework$Framework$Color$grey)
														]),
													$mdgriffith$elm_ui$Element$text('-')),
													A2(
													$mdgriffith$elm_ui$Element$el,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$centerY,
															$mdgriffith$elm_ui$Element$Font$size(16),
															$mdgriffith$elm_ui$Element$Font$color($Orasund$elm_ui_framework$Framework$Color$grey)
														]),
													$mdgriffith$elm_ui$Element$text('Elmail'))
												])),
										url: '/'
									}),
									A2(
									$mdgriffith$elm_ui$Element$link,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$alignRight,
											$mdgriffith$elm_ui$Element$padding($author$project$Style$ten)
										]),
									{
										label: $mdgriffith$elm_ui$Element$html(
											A2(
												$phosphor_icons$phosphor_elm$Phosphor$toHtml,
												_List_Nil,
												$phosphor_icons$phosphor_elm$Phosphor$binoculars($phosphor_icons$phosphor_elm$Phosphor$Thin))),
										url: '/search'
									})
								]))
						]));
			case 'NotFound404':
				return $mdgriffith$elm_ui$Element$text('branch \'NotFound404 _\' not implemented');
			case 'Impressum':
				return $mdgriffith$elm_ui$Element$text('impressum');
			case 'Searches':
				return model.loading ? A3(
					$author$project$Grid$hanging,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink)
						]),
					A2($author$project$Grid$Position, $author$project$Grid$Right, $author$project$Grid$Top),
					A2(
						$Orasund$elm_ui_widgets$Widget$circularProgressIndicator,
						$Orasund$elm_ui_widgets$Widget$Material$progressIndicator($Orasund$elm_ui_widgets$Widget$Material$defaultPalette),
						$elm$core$Maybe$Nothing)) : $mdgriffith$elm_ui$Element$none;
			case 'Failure':
				return $mdgriffith$elm_ui$Element$text('Failure');
			default:
				return $mdgriffith$elm_ui$Element$none;
		}
	}();
	var body = function () {
		var _v3 = model.display;
		switch (_v3.$) {
			case 'Impressum':
				return $mdgriffith$elm_ui$Element$text('viewImpressum');
			case 'NotFound404':
				var url = _v3.a;
				return A2(
					$mdgriffith$elm_ui$Element$textColumn,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$paragraph,
							$author$project$Style$h3,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('Seite nicht gefunden - 404')
								])),
							A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_Nil,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('URL '),
									$mdgriffith$elm_ui$Element$text(
									$elm$url$Url$toString(url))
								]))
						]));
			case 'Home':
				return $mdgriffith$elm_ui$Element$none;
			case 'Failure':
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
						]),
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(1000))
							]),
						$mdgriffith$elm_ui$Element$none));
			case 'Searches':
				return $author$project$Main$viewTree(model);
			default:
				return $mdgriffith$elm_ui$Element$none;
		}
	}();
	var _v0 = A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$padding($author$project$Style$ten)
			]),
		_List_fromArray(
			[
				function () {
				var _v1 = model.display;
				if (_v1.$ === 'Impressum') {
					return $mdgriffith$elm_ui$Element$none;
				} else {
					return A2(
						$mdgriffith$elm_ui$Element$link,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$padding(5),
								$mdgriffith$elm_ui$Element$Font$size(14),
								$mdgriffith$elm_ui$Element$centerX
							]),
						{
							label: $mdgriffith$elm_ui$Element$text('Impressum'),
							url: '/impressum'
						});
				}
			}()
			]));
	return A2(
		$mdgriffith$elm_ui$Element$layout,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$Font$family(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$typeface('Arial'),
						$mdgriffith$elm_ui$Element$Font$sansSerif
					]))
			]),
		A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$scrollbars
				]),
			_List_fromArray(
				[
					h,
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$scrollbars,
							$mdgriffith$elm_ui$Element$inFront(
							A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$alignBottom,
										$mdgriffith$elm_ui$Element$alignRight,
										$mdgriffith$elm_ui$Element$padding($author$project$Style$two)
									]),
								A2(
									$mdgriffith$elm_ui$Element$image,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px($author$project$Style$fontsize.huge))
										]),
									{description: 'elmail', src: 'http://localhost:9999/img/elmail2.svg'})))
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$alignTop]),
							A2(
								$elm$core$List$map,
								function (_v2) {
									var h_ = _v2.a;
									var t = _v2.b;
									return A2(
										$mdgriffith$elm_ui$Element$column,
										_List_Nil,
										_List_fromArray(
											[h_, t]));
								},
								A2(
									$elm$core$List$filterMap,
									$elm$core$Basics$identity,
									A2(
										$elm$core$List$indexedMap,
										F2(
											function (i, e) {
												return A4(
													$author$project$Main$viewEmailTypeCard,
													model.overlay,
													model.selection,
													_Utils_update(
														$author$project$Main$rootAgg,
														{
															rpath: _List_fromArray(
																[i, -1])
														}),
													$elm$core$Maybe$Just(
														_Utils_Tuple2(true, e))).content;
											}),
										A2(
											$elm$core$List$filterMap,
											$author$project$Main$getid(model.searches.a),
											model.dangling_edits))))),
							body
						]))
				])));
};
var $author$project$Main$main = $elm$browser$Browser$application(
	{
		init: $author$project$Main$init,
		onUrlChange: $author$project$Main$UrlChanged,
		onUrlRequest: $author$project$Main$LinkClicked,
		subscriptions: $author$project$Main$subscriptions,
		update: $author$project$Main$update,
		view: function (m) {
			return {
				body: _List_fromArray(
					[
						$author$project$Main$view(m)
					]),
				title: 'notmuch mail'
			};
		}
	});
_Platform_export({'Main':{'init':$author$project$Main$main(
	$elm$json$Json$Decode$succeed(_Utils_Tuple0))(0)}});}(this));